<?xml version="1.0" encoding="UTF-8"?>

<!-- On a linux system, make a set of html chunks in the current directory by running:
     xsltproc - -stringparam chunk.first.sections 1  /usr/share/xml/docbook/stylesheet/docbook-xsl/html/chunk.xsl /home/francisco/Documents/mis_escritos/precious/psimple/Electric.xml
     or write one big file to a directory like, say, "/run/shm/", by running:
     cp -r Electric_files/ /run/shm && xsltproc - -output /run/shm/Electric.html /usr/share/xml/docbook/stylesheet/docbook-xsl/html/docbook.xsl Electric.xml
-->

<!-- Links are inline-coded in DocBook like so:
     <ulink url="http://www.whatever.com/subdir/index.html" role="URL">main site</ulink>
-->

<!-- TO DO, CAVEATS ETC:
  - Change label of <userinput> elements inside <title> elements
  - Go on copying from "Semantic Web Primer", second edition, p. 99
    by Grigoris Antoniou and Frank van Harmelen
    into "The <userinput>rdf:resource</userinput> Attribute".
  - Afterwards, you might copy from page 136 in same book into the section on OWL.
  - change <userinput>CDATA<></userinput> into <tag></tag>
  - mark up starting at "A neural net may be conveniently described in terms of"
  - mark up starting at "<title>Probabilistic questions</title>"
  - mark up starting at "Classification of Automata"
  - File '/etc/modprobe.d/rtl8723be.conf holds the following two lines:
    options rtl8723be fwlps=N
    options rtl8723be ant_sel=2
  - section "Cases and Structural Induction" used to be sect4 in sect3 "Rules" (xml.id='pl_rules'>)
  - write on emoticons
  - add 
    Peter Norvig on LISP:
    "Peter Norvig, Started Lisp in 1974; Symbolics/TI Lisp machines; wrote a book and toy compilers
Updated Apr 30, 2013 · Upvoted by Alberto Bietti, PhD student in machine learning and Mark Crowley, Ph.D. Computer Science in Artificial Intelligence
In the 1970s and 1980s, Lisp was the best developed and most widely used language that offered the following set of features:

    Easy dynamic creation of new objects, with automatic garbage collection,
    A library of collection types, including dynamically-sized lists and hashtables,
    A development cycle that allows interactive evaluation of expressions and re-compilation of functions or files while the program is running,
    Well-developed compilers that could generate efficient code,
    A macro system that let developers create a domain-specific level of abstraction in which to build the next level.  


These five features are valuable for programming in general, but especially for exploratory problems where the solution is not clear at the onset; thus Lisp was a great choice for AI research.  Over the years, these features started migrating into other languages, and Lisp no longer had a unique position; today, (5) is the only remaining feature in which Lisp excels compared to other languages.

Today, there are many groups that are very productive programming in Lisp; I was just visiting Northwestern University; they're a good example.  But the majority of AI projects use other languages, such as Java, C++, and Python; or mathematical packages like Matlab or R."

    "Psychologists have identified a state of mind called flow in which we&apos;re capable of incredible concentration and productivity. The importance of flow to programming has been recognized for nearly two decades since it was discussed in the classic book about human factors in programming Peopleware: Productive Projects and Teams by Tom DeMarco and Timothy Lister (Dorset House, 1987). The two key facts about flow are that it takes around 15 minutes to get into a state of flow and that even brief interruptions can break you right out of it, requiring another 15-minute immersion to reenter. DeMarco and Lister, like most subsequent authors, concerned themselves mostly with flow-destroying interruptions such as ringing telephones and inopportune visits from the boss. Less frequently considered but probably just as important to programmers are the interruptions caused by our tools. Languages that require, for instance, a lengthy compilation before you can try your latest code can be just as inimical to flow as a noisy phone or a nosy boss. So, one way to look at Lisp is as a language designed to keep you in a state of flow."
    to MagicWorld.xml::<title>Flow*
    
  - handle most common warning: "Element font in namespace '' encountered in td, but no template matches."
  
  - write on "No Work", by Naomi Klein
  
  - convert eps->jpeg through:
    gs -sDEVICE=jpeg -dJPEGQ=100 -dNOPAUSE -dBATCH -dSAFER -r300 -sOutputFile=myfile.jpg myfile.eps
    
  - Files "lib.basic.ps" (xml:id='lib_basic_ps'), tree234.cpp (xml:id='tree234_cpp'), bio0.pl (xml:id='bio0_pl')
    are to be included through:
    <programlisting>
      <xi:include href="Electric_files/file.ext" parse="text"  xmlns:xi="http://www.w3.org/2001/XInclude">
        <xi:fallback/>
      </xi:include>
    </programlisting>
    Remember to store the latest version in Electric_files/ !

-->
<!--<?xml-stylesheet type="text/xsl" href="ctop.xsl"?>-->
<?xml-stylesheet type="text/css" href="docbook.css"?>
<!--<xsl:include href="ctop.xsl"/>-->

<!DOCTYPE book SYSTEM "/home/francisco/Documents/mis_escritos/precious/xml/DocBook/docbook.dtd" [
  <!ENTITY author "Francisco Fernández-Victorio Hernández">
  
  <!ENTITY nbsp  "&#160;">
  <!ENTITY ndash  "&#8211;">
  <!ENTITY mdash  "&#8212;">
  <!ENTITY deg  "&#176;">
  <!ENTITY micro  "&#181;">
  <!ENTITY middot  "&#183;">
  
  <!ENTITY centsign "&#x00A2;">
  <!ENTITY poundsign "&#x00A3;">
  <!ENTITY yensign "&#x00A5;">
  <!ENTITY brokenbar "&#x00A6;">
  <!ENTITY sectionsign "&#x00A7;">
  

  <!ENTITY feminineordinalindicator "&#x00AA;">
  <!ENTITY masculineordinalindicator "&#x00BA;">
  <!ENTITY notsign "&#x00AC;">
  <!ENTITY multiplicationsign "&#x00D7;">
  <!ENTITY divisionsign "&#x00F7;">
  <!ENTITY degreesign "&#x00B0;">
  <!ENTITY plus-minussign "&#x00B1;">
  <!ENTITY superscripttwo "&#x00B2;">
  <!ENTITY superscriptthree "&#x00B3;">
  
  

  <!ENTITY rightguillemet "&#x00BB;">
  <!ENTITY leftguillemet "&#x00AB;">
  <!ENTITY vulgarfractiononequarter "&#x00BC;">
  <!ENTITY vulgarfractiononehalf "&#x00BD;">
  <!ENTITY vulgarfractionthreequarters "&#x00BE;">

 
  <!ENTITY  eszett "&#x00DF;">

  <!ENTITY eng "&#x014B;">
  <!ENTITY schwa "&#x01DD;">
  
  <!ENTITY alpha "&#x03B1;">
  <!ENTITY beta "&#x03B2;">
  <!ENTITY gamma "&#x03B3;">
  <!ENTITY delta "&#x03B4;">
  <!ENTITY epsilon "&#x03B5;">
  <!ENTITY zeta "&#x03B6;">
  <!ENTITY eta "&#x03B7;">
  <!ENTITY theta "&#x03B8;">
  <!ENTITY lambda "&#x03BB;">
  <!ENTITY mu "&#x03BC;">
  <!ENTITY nu "&#x03BD;">
  <!ENTITY pi "&#x03C0;">
  <!ENTITY rho "&#x03C0;">
  <!ENTITY sigma "&#x03C3;">
  <!ENTITY Sigma "&#x3a3;">
  <!ENTITY tau "&#x03C4;">
  <!ENTITY phi "&#x03C6;">
  <!ENTITY chi "&#x03C7;">
  <!ENTITY psi "&#x03C8;">
  <!ENTITY omega "&#x03C9;">
  <!ENTITY Omega "&#x03A9;">
  
  <!ENTITY bullet "&#x2022;">
  
    <!-- Sets (of numbers) -->
  <!ENTITY naturals "&#x2115;">
  <!ENTITY wholes "&#x2124;">
  <!ENTITY rationals "&#x211A;">
  <!ENTITY reals "&#x211D;">
  <!ENTITY complexes "&#x2102;">
  <!ENTITY powerset "&#x2118;">
  <!ENTITY plancksh "&#x210E;">
  <!ENTITY planckshcrossed "&#x210F;">
  
  <!--Simple and double arrows-->
  <!ENTITY leftwardsarrow "&#x2190;">
  <!ENTITY upwardsarrow "&#x2191;">
  <!ENTITY rightwardsarrow "&#x2192;">
  <!ENTITY downwardsarrow "&#x2193;">
  <!ENTITY leftrightarrow "&#x2194;">
  
  <!ENTITY  leftwardsdoublearrow "&#x21D0;">
  <!ENTITY    upwardsdoublearrow "&#x21D1;">
  <!ENTITY rightwardsdoublearrow "&#x21D2;">
  <!ENTITY  downwardsdoublearrow "&#x21D3;">
  <!ENTITY  leftrightdoublearrow "&#x21D4;">
  
  <!ENTITY forall "&#x2200;">
  <!ENTITY complement "&#x2201;">
  <!ENTITY partialdiff "&#x2202;">
  <!ENTITY thereexists "&#x2203;">
  <!ENTITY theredoesntexist "&#x2204;">
  <!ENTITY emptyset "&#x2205;">
  <!ENTITY increment "&#x2206;">
  <!ENTITY nable "&#x2207;">
  <!ENTITY elementof "&#x2208;">
  <!ENTITY notanelementof "&#x2209;">
  <!ENTITY containsasmember "&#x220B;">
  <!ENTITY doesnotcontainasmember "&#x220C;">
  <!ENTITY naryproduct "&#x220F;">
  <!ENTITY narycoproduct "&#x2210;">
  <!ENTITY narysummation "&#x2211;">
  
  <!ENTITY minussign "&#x2212;">
  <!ENTITY minusorplussign "&#x2213;">
  <!ENTITY asteriskoperator "&#x2217;">
  <!ENTITY ringoperator "&#x2218;">
  <!ENTITY bulletoperator "&#x2219;">
  <!ENTITY squareroot "&#x221A;">
  <!ENTITY cuberoot "&#x221B;">
  <!ENTITY fourthroot "&#x221C;">
  <!ENTITY proportionalto "&#x221D;">
  
  <!ENTITY infinity "&#x221E;">
  <!ENTITY rightangle "&#x221F;">
  <!ENTITY angle "&#x2220;">
  <!ENTITY measuredangle "&#x2221;">
  
  <!ENTITY divides "&#x2223;">
  <!ENTITY doesnotdivide "&#x2224;">
  <!ENTITY parallelto "&#x2225;">
  <!ENTITY notparallelto "&#x2226;">
  
  <!ENTITY logicaland "&#x2227;">
  <!ENTITY logicalor "&#x2228;">
  <!ENTITY intersection "&#x2229;">
  <!ENTITY union "&#x222A;">
  
  <!ENTITY integral "&#x222B;">
  <!ENTITY doubleintegral "&#x222C;">
  <!ENTITY tripleintegral "&#x222D;">
  <!ENTITY contourintegral "&#x222E;">
  <!ENTITY surfaceintegral "&#x222F;">
  <!ENTITY volumeintegral "&#x2230;">
  
  <!ENTITY therefore "&#x2234;">
  <!ENTITY because "&#x2235;">
  
  <!--Relations-->
  <!ENTITY nottilde "&#x2241;">
  <!ENTITY minustilde "&#x2242;">
  <!ENTITY asymptoticallyequalto "&#x2243;">
  <!ENTITY notasymptoticallyequalto "&#x2244;">
  <!ENTITY approximatelyequalto "&#x2245;">
  <!ENTITY approximatelybutnotactuallyequalto "&#x2246;">
  <!ENTITY neitherapproximatelynoractuallyequalto "&#x2247;">
  <!ENTITY almostequalto "&#x2248;">
  <!ENTITY notalmostequalto "&#x2249;">
  <!ENTITY almostequalorequalto "&#x224A;">
  <!ENTITY tripletilde "&#x224B;">
  <!ENTITY notequalto "&#x2260;">
  <!ENTITY notequalto "&#x2260;">
  <!ENTITY identicalto  "&#x2261;">
  <!ENTITY equivalentto "&#x2261;">
  <!ENTITY notidenticalto "&#x2262;">
  <!ENTITY strictlyequivalentto "&#x2263;">
  <!ENTITY less-thanorequalto "&#x2264;">
  <!ENTITY greater-thanorequalto "&#x2265;">
  <!ENTITY less-thanorequalto "&#x2264;">
  <!ENTITY greater-thanorequalto "&#x2265;">
  <!ENTITY less-thanoverequalto "&#x2266;">
  <!ENTITY greater-thanoverequalto "&#x2267;">
  <!ENTITY less-thanbutnotequalto "&#x2268;">
  <!ENTITY greater-thanbutnotequalto "&#x2269;">
  <!ENTITY muchlessthan "&#x226A;">
  <!ENTITY muchgreaterthan "&#x226B;">
  <!ENTITY notlessthan "&#x226E;">
  <!ENTITY notgreaterthan "&#x226F;">
  <!ENTITY neitherless-thannorequalto "&#x2270;">
  <!ENTITY neithergreater-thannorequalto "&#x2271;">
  <!ENTITY precedes "&#x227A;">
  <!ENTITY succeeds "&#x227B;">
  <!ENTITY precedesorequalto "&#x227C;">
  <!ENTITY succeedsorequalto "&#x227D;">
  <!ENTITY subsetof "&#x2282;">
  <!ENTITY supersetof "&#x2283;">
  <!ENTITY notasubsetof "&#x2284;">
  <!ENTITY notasupersetof "&#x2285;">
  <!ENTITY subsetoforequalto "&#x2286;">
  <!ENTITY supersetoforequalto "&#x2287;">
  
  
  <!ENTITY circledplus "&#x2295;">
  <!ENTITY circledminus "&#x2296;">
  <!ENTITY circledtimes "&#x2297;">
  <!ENTITY circleddivisionslash "&#x2298;">
  <!ENTITY circleddotoperator "&#x2299;">
  <!ENTITY circledringoperator "&#x229A;">

  <!ENTITY righttack "&#x22A2;">
  <!ENTITY downtack "&#x22A4;">
  <!ENTITY uptack "&#x22A5;">
  
  <!ENTITY assertion "&#x22A6;">
  <!ENTITY models "&#x22A7;">
  <!ENTITY true "&#x22A8;">
  <!ENTITY doesnotprove "&#x22AC;">
  
  <!--Boolean negated-->
  <!ENTITY xor "&#x22BB;">
  <!ENTITY nand "&#x22BC;">
  <!ENTITY nor "&#x22BD;">
  
  <!--n-ary operators-->
  <!ENTITY narylogicaland "&#x22C0;">
  <!ENTITY narylogicalor  "&#x22C1;">
  <!ENTITY naryintersection "&#x22C2;">
  <!ENTITY naryunion "&#x22C3;">
  
  <!ENTITY dotoperator "&#x22C5;">
  <!ENTITY staroperator "&#x22C6;">
  <!ENTITY mathematicalleftanglebracket "&#x27E8;">
  <!ENTITY mathematicalrightanglebracket "&#x27E9;">
  
  <!--Electrotechnical symbols-->
  <!ENTITY earthground "&#x23DA;">
  <!ENTITY fuse "&#x23DB;">
  
  <!ENTITY musicflatsign "&#x266D;">
  <!ENTITY musicnaturalsign "&#x266E;">
  <!ENTITY musicsharpsign "&#x266F;">

  <!--The long arrows are used for mapping whereas the short forms would be used in limits. They are also needed for MathML to complete mapping to the AMSA sets.-->
  <!ENTITY longleftwardsarrow "&#x27F5;">
  <!ENTITY longrightwardsarrow "&#x27F6;">
  <!ENTITY longleftrightarrow "&#x27F7;">
  <!ENTITY longleftwardsdoublearrow "&#x27F8;">
  <!ENTITY longrightwardsdoublearrow "&#x27F9;">
  <!ENTITY longleftrightdoublearrow "&#x27FA;">
  <!ENTITY longleftwardsarrowfrombar "&#x27FB;"> <!--maps from-->
  <!ENTITY longrightwardsarrowfrombar "&#x27FC;"> <!--maps to-->
  
  <!ELEMENT link EMPTY>
  <!ATTLIST link
    xmlns:xlink CDATA #FIXED "http://www.w3.org/XML/XLink/0.9"
    xlink:type (simple) #FIXED "simple"
    xlink:href CDATA #REQUIRED
    xlink:role CDATA #IMPLIED
    xlink:title CDATA #IMPLIED
    xlink:show (new|parsed|replace) "replace"
    xlink:actuate (user|auto) "user">
]>

<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:xlink="http://www.w3.org/XML/XLink/0.9"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:mml="http://www.w3.org/1998/Math/MathML"
      xmlns:svg="http://www.w3.org/2000/svg"
      version="5.0"
      xml:id='communicating_text_and_graphics'>

  
   

  <info>
    <author>Francisco Fernández-Victorio Hernández</author>
    <title>Communicating Text and Graphics</title>
    <abstract>
      <para>This book started as a tutorial on <citetitle>How to Write a Book</citetitle>, a title long ago dropped, and as such is represented in this book, <citetitle>Communicating Text and Graphics</citetitle>. <citetitle>Electric</citetitle> then grew and developed into a bundle of notes on electronics and computing topics that particulary concern the author.</para>
      <para>As regards the <emphasis>form</emphasis> of my book, not the content, first and foremost it has been written in an XML dialect (or vocabulary) called DocBook. XML, DocBook, how to tranform XML into other formats (such as EPUB), and the TeX family of other formats are discussed here.</para>
      <para>I have taken pains to keep this DocBook document convertible into the EPUB format. I believe EPUB to be the most convenient format so far developed by humanity because it sports reflow, hyperlinks and tables of contents (with hyperlinks), and is readable on portable, energy-saving ebook readers.</para>
    </abstract>
  </info>
  

  <preface>
    <title>Preface to <citetitle class='book'>Communicate</citetitle></title>
    <para>This is a reduced version of encyclopaedic <citetitle class='book'>Electric</citetitle>. We cannot include full discussions of techonologies herein alluded to, such as:</para>
    
    <variablelist>
      
      <varlistentry xml:id='associative_containers'>
        <term>Associative Containers</term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='regexp'>
        <term>Regular Expressions</term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='ps_gradient_2d'>
        <term>File <filename>ps_gradient_2d</filename></term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='directed_graphs'>
        <term>Directed Graphs</term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='ontologies'>
        <term>Ontologies</term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='semantic_networks'>
        <term>Semantic Networks</term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='java'>
        <term>Java</term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='cpp'>
        <term>C++</term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='postscript'>
        <term>PostScript</term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='vtk'>
        <term>VTK</term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='audio'>
        <term>Audio</term>
        <listitem></listitem>
      </varlistentry>
      
      <varlistentry xml:id='make'>
        <term>Make</term>
        <listitem></listitem>
      </varlistentry>
      
    </variablelist>
  </preface>

<!-- Edit: <title>How CSS Position Sticky Really Works</title> and following sub(sub)sections -->

<part xml:id='digital-communication-concepts'>
  
  <info>
    <title>Digital Communication Concepts</title>
    <subtitle>Either XML (HTML, DocBook etc) or TeX</subtitle>
    <abstract>
      <para>...</para>
    </abstract>
  </info>
  
  <chapter>
    <!-- <title>Typing your book on a computer</title> -->
    <title>Making a Book</title>
    <para>Many people who have attended college for several years are not quite familiar with the book format. They are educated, no doubt. They have done a lot of sophisticated reading and writing throughout many courses. Yet they don&apos;t seem to be that comfortable with the idea of putting ideas across and learning about them in writing. And it is not the letters or the vocabulary or the complexity of sentences and paragraphs...</para>
    <para>We are often confused on this. Flawless spelling does not make a good writer. Nor does grammatical correctness. Not even accurate, rich, specific vocabulary. Writing and reading are a matter of attitude and soul, not a formal skill.</para>
    <!-- smallskip -->
    <para>Look, I don&apos;t mean to discourage anyone, but there are already too many books around on any conceivable topic or subject matter. Do you have anything new or valuable to say? If you don&apos;t, please refrain from writing another book. But if, on the other hand, you feel you have some worth to contribute to Mankind, then go on reading and I shall try to help you.</para>
    <blockquote>
      <para>Was there, given the large and increasingly homogenous reading population, less of a &quot;need&quot; today for writers? Assuming that people read about the same number of books, magazines, and newspapers as they have always done, and that they wan to read the &quot;best&quot; of whatever they do read (as determined by best-seller lists, say), and that they tend, in large part, to read material written by their countrymen, it seems to follow that the larger the nation, the smaller the percentage of its citizens who could be authors or, what one day might become equivalent, best-selling authors.</para>
      <attribution>John Allen Paulos, &quot;A Mathematical Accent&quot;, in <citetitle>Beyond Numeracy</citetitle></attribution>
    </blockquote>
    
      
  <section>
    <title>Content</title>
    <para>Content is often made up of text, plain text, a sequence of characters: alphanumeric (letters and digits), punctuation (commas, periods etc), spaces, and other. In many types of writing the author produces just text. Well, not just text but <firstterm>documents</firstterm>, that is files holding text. From the author&apos;s point of view the most important thing about a document is that it is a unit that can be passed to another user or to themselves. How big this unit is will depend on circumstances. </para>
    <para>A document may further comprise several subdocuments. For example, documents designed to be delivered over the Web are typically written in smaller units to reduce transmission delays. By linking together a set of related small files it is possible create what is referred to as a <firstterm>hyperdocument</firstterm>. An otherwise small, parent web page may contain several web pages by referencing them. Their children may reference one another through hyperlinks.</para>
    
    <section sect='sect2'>
      <title>Range</title>
      <para>Books range from text only (literature, philosophy, law...) to highly visual and diagram-based through heavily mathematical. The inclusion of images does not usually change the formal nature of the book, only how it is transmitted. For instance, if you may produce some drawings, paintings or snapshots to embellish a book you will have to attach them to its text file.</para>
    </section> <!-- </sect2> -->
  
    <section sect='sect2'>
      <title>Why, What About, and What For?</title>
      <para><quote>If you have an idea to communicate to the world you put it across in a book, not a magazine article</quote> (Ángel Manteca).</para>
      <para>So you need an idea. Well, it&apos;s not that you <emphasis>need</emphasis> it. Just stay open to whatever wells up in your heart or mind, follow any clues or cues you may divinely get, do some research perhaps, write it all up, munch it over, put work into it...</para>
      <para>Indeed, any book stems from an idea or cluster of related ideas. If you have a [valuable] thought, you tell the world about it in a book, not a magazine article or conference paper, as I say. Ideas range from the purely formal (a consonant rhyme in ch in a poem by Quevedo) or special typography, to purely content. They are born from theory, and theory is born from personal and intellectual experience.</para>
      <para>Mind you. Permutation and substitution do not make up an idea unless they are formal ideas. Neither does allegory <foreignphrase>per se</foreignphrase>.</para>
    </section> <!-- </sect2> -->
  
    <section sect='sect2'>
      <title>Kinds of Books</title>
      <para>Books are divided into fact (factual) and fiction. Factual books are divided into data (like dictionaries and other references) and conceptual books (like textbooks, monographs etc.). Fiction itself is divided into fun and didactic, although most fiction is novels.</para>
      <para>A book can be a mixture of any of these four. Conceptual factual books rarely tell imagined, fictitious stories, while historical novels usually blend data and fun. Fiction is often written to say things that readers do not want to or just cannot learn explicitely. History, or true stories, can be didactic too, as hinted by the Latin phrase<quote>Historia magistra vitæ est</quote>, possibly translateable as History teaches how to live.</para>
    </section> <!-- </sect2> -->
    
  </section> <!-- </sect1> -->
  
    <section>
    <title>Rhetoric</title>
    <para>Rhetoric strives to move the reader or listener by <emphasis>appealing</emphasis> to them. According to Aristotle, this is done through three devices:</para>
    <itemizedlist>
      <listitem><foreignphrase>pathos</foreignphrase> or feeling: a thesis is to be accepted because it feels acceptable;</listitem>
      <listitem><foreignphrase>ethos </foreignphrase> or custom: a practice or an action is good because it is customary; and</listitem>
      <listitem><foreignphrase>logos</foreignphrase> or reason: the rightness or advisability of something is justified through reasoning logically.</listitem>
    </itemizedlist>
    <para>Are these ancient rhetorical categories different from the way we try to move others nowadays?</para>
    
    <section sect='sect2'>
      <title>Research</title>
      <para>Some books require that research be done. Although this is rarely needed in pure literature, writers of historical fiction usually read up on the period they are to set their work in. Other writers note uncommon words or the idiomatic speech of other, outlying groups, and readers generally expect literary authors to be language-conscious and to use varied, precise, and sometimes also &quot;correct&quot; language besides producing art and being humanistic in their writing.</para>
    </section> <!-- </sect2> -->
  </section> <!-- </sect1> -->

    
    <section>
      <title>Some Rules of Thumb For Typing Writers</title>
      <orderedlist>
        <listitem>save periodically</listitem>
        <listitem>write in a non-propriatory, open format, preferably</listitem>
        <listitem>enable automatic conversion between formats and learn about them before you commit yourself to a format</listitem>
        <listitem>keep former versions (in case you want to return to one of them)</listitem>
        <listitem>put in your heart, be warm, unprejudiced, and commited</listitem>
        <listitem>consider multiplicity: producing several versions of one book (epub, html, pdf, txt)</listitem>
        <listitem>consider both hard (paper) and soft (electronic) publication</listitem>
        <listitem>document yourself, read widely, work hard, do not rely on inspiration and genius alone</listitem>
        <listitem>keep everything you write; accept, appreciate, love yourself; do not reject or disown your deeds</listitem>
      </orderedlist>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Desktop Publishing and Book On-Demand</title>
      <blockquote>
        <para>With Book-on demand publishing, books or other printed content are produced only when and as they are ordered and paid for. In very small quantities or even on a volume-by-volume basis.</para>
        <para>The crucial secrets to  Book-on-demand publishing are to use toner or inkjets rather than &quot;real&quot; ink, and to work with small and cheap laser or inkjet printers rather than a dollar-gobbling printing press.</para>
        <para>While I was an early pioneer in BOD publishing, today I feel that the advantages of eBooks are now utterly overwhelming and that the potential market window for BOD may be rapidly slamming shut.</para>
        <para>My own inability to find acceptable mid-volume binding and trimming solutions combined with the utter lack of a fifty cent &quot;pop it in the microwave&quot; home binding cover kit tends to support BOD emerging a lot slower than I once had hoped. If it does at all. As did the slow emergence of duplex printing inkjets.</para>
        <attribution>www.tinaja.com - The Lion&apos;s Lair</attribution>
      </blockquote>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Two media: screen or paper</title>
      <para>A piece of writing can be published either as a file to be <emphasis>displayed</emphasis> on a screen (on a monitor or on <quote>Handheld</quote> device) or as a set of paper pages.</para>
      <para>These are very different media. Only screen files may include <quote>clickable</quote> hyperlinks to other <quote>resources</quote> and they are sensitive and responsive to the viewer&apos;s preferences and characteristics: sight-impaired, large or small screen, black-and-white or color, language, etc. For screen media, HTML or XHTML is the format to use. Now, since XHTML is just an XML vocabulary, you can use some other such as DocBook or even make up your own and attach a <emphasis>stylesheet</emphasis> or display instructions to it.</para>
      <para>Paper books and other print on the other hand are associated with careful, fastidious, grave typography. Notably, mathematical formulas have not displayed well or nuancedly enough on screens --if only for historical reasons-- until the advent of MathML. Until then, Donald Knuth&apos;s <application>TeX</application>, <application>LaTeX</application> and other offspring were the only free way of publishing scientific papers and books.</para>
      <para><application>TeX</application> and its sequel lead to the production of quality PDF files. Other sophisticated typesetting systems are used to produce so-called camera-ready files to be sent to high-quality printers and professional printing machines. These are often in the PDF format, and it must be said that <application>Acrobat Reader</application>, <application>evince</application> and others (many of them based on <application>GhostScript</application>) make an excellent job of displaying them, hyperlinks and all.</para>
      <para>There is of course some overlap. Some people print web pages and many more read whole PDF books on screens, but the difference between screen and paper remains.</para>
      <para>...</para>
      <para>Needless to say, it would be very convenient to have both screen and paper while investing the same effort. In this book I try to show how to achieve this either by studying the principles or by following a set of recipes or even a simple script.</para>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Glyphs, Fonts, and Characters</title>
      <para>Before we begin, it is convenient to distinguish between four technical terms in order to understand how digital computers treat text:</para>
      <variablelist>
        <varlistentry>
          <term>Glyphs</term> 
          <listitem>Glyphs are visual representations of letters or symbols. Thus, the letter &apos;a&apos; can be drawn using many different glyphs, since there are many different visual representations of the letter &apos;a&apos;.</listitem>
        </varlistentry>
        <varlistentry>
          <term>Fonts</term>
          <listitem>Fonts are collections of glyphs which can visualize a set of letters and symbols.</listitem>
        </varlistentry>
        <varlistentry>
          <term>Characters</term>
          <listitem>Characters are a digital (binary) representation of a letter or symbol. A character may take 1 or more bytes to represent. When a computer renders characters, it maps those characters to glyphs in a font.</listitem>
        </varlistentry>
        <varlistentry>
          <term>Encoding</term>
          <listitem>A mapping between glyphs (pictures) and character codes (sequences of 0;&apos;s and &apos;1&apos;s. If a text editor opens a file, its encoding must be given...</listitem>
        </varlistentry>
      </variablelist>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Plain text</title>
      <para>In computing, plain text is the contents of an ordinary sequential file readable as textual material, that is, as  a sequence of characters (e.g. "alternative {1, 2, 3)@").</para>
      <para>The <firstterm>character</firstterm> is a computer concept. Characters comprise the letters ('a', 'b', .. .) and the digits ('0', '1', ...), punctuation marks, space, newline etc. They usually map to keyboard ke ys and are associated with binary codes, usually one-byte long, sometimes two-byte long.</para>
      <para>Plain text is different from formatted text, where style information is included, and "binary files" in which some portions must be interpreted as binary objects (encoded integers, real numbers, images, etc.). Humans commonly handle plain text through text editors. Plain text in contained in a plain taxt file. A text editor produces or changes a plain text file.</para>
      <para>Also, there are a number of tools for manipulating text files: to count the number of words, lines, or characters; to perform substitutions, to sort or search for a term etc.</para>
      <para>Most text is made up of mainly plain text: novels, reports, essays, treatises... Why don&apos;t most writers write plain text files using a text editors and perhaps some text managing tools?</para>
      <para>Plain text has little structure per se: paragraphs and quoted text. Sometimes underscores are used to delimit italized text (for _emphasis_). Further mark up conventions must be discussed with the editor and/or printer, such as chapter names, title page, footnotes etc.</para>
      <para>The characters found on an English language keyboard belong in the ASCII character set. When typing plain text you need to be careful with encoding non-ASCII characters because they have divergent <emphasis>representations</emphasis>, so each such file will be in one of a number of <firstterm>encodings</firstterm>, that is binary (underlying) conventions for representing non-ASCII characters. When opening an old file or creating a new file you must check that the intended encoding is the same as that chosen by your text editor. Nowadays the most common encoding is UTF-8 because it is good for writing many languages, whereas ISO 8859-1 is restricted to Western European languages.</para>
    </section> <!-- </sect1> -->
    
    <section xml:id='unicode'>
      <title>Unicode*</title>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Word Processors</title>
      <para>A word processor handles formatted or sometimes binary files. Word processors usually belong in Office packages, such as Microsoft&apos; Word processor. Word files are meant for printing and exchanging office documents, not books.</para>
      <para>It is a common and sad misunderstanding that books are writen on Word, for we hates Microsoft, my precious!</para>
    </section> <!-- </sect1> -->
    
        
    <section>
      <title>Format in books</title>
      <para>A text is not an undifferentiated sequence of words, much less of bytes. For different purposes, it may be divided into many different units, of different types or sizes. A prose text such as this one might be divided into sections, chapters, paragraphs, and sentences. A verse text might be divided into cantos, stanzas, and lines.</para>
      <para>All books have some format. Most text is mainly made up of letters and punctuation marks. By <firstterm>format</firstterm> I shall here mean anything other than or beyond just letters and punctuation marks. Some format features found in books are, from the simplest to the most sophisticated:</para>
      <itemizedlist>
        <listitem>paragraphs (often effected by pressing "ENTER")</listitem>
        <listitem>quotes ("a word")</listitem>
        <listitem>italics</listitem>
        <listitem>names of sections (chapters, sections) etc.</listitem>
        <listitem>headers and footers</listitem>
        <listitem>footnotes</listitem>
        <listitem>illustrations</listitem>
        <listitem>boxed text</listitem>
      </itemizedlist>
    </section> <!-- </sect1> -->
    
    
    <section>
      <title>Several End Formats</title>
      <para>Many if not most books consist mainly of text with figures and formulas playing a comparatively small role.</para>
      <para>You can write a book either as a blundle of paper sheets or as a computer file. Nowadays many if not most authors use word processors which produce files, usually in propriatary formats such as Word&apos;s, to hand in to the editor, typesetter or typographer, publisher, who will probably produce a paper book. Professional tools usually recognize popular word processor formats, so printers are happy with them because they can translate them automatically to their professional format.</para>
      <para>This procedure has the advantage of isolating the author from some technical matters and helping her to focus on the contents side. Since most books consist of mostly pure text, a lot of technology in the software goes unused since word processors are geared to produce office documents, not pure text or books.</para>
      <para>By <firstterm>end format</firstterm> I understand a format you handle a reader or a dumb printer your file in. Two end formats are considered (X)HTML (browser-viewable) and PDF (books):</para>
      
      <section sect='sect2'>
        <title>(X)HTML*</title>
        <para>Advantages and disadvantages:</para>
        <para>...</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>The Portable Document Format</title>
        <para>A book as an electronic file may end up being printed. A PDF-format file is readily printableand is suitable for reading on either a computer screen or on a portable device. Some e-book software does a good job of rearranging lines into shorter ones so as to show text in bigger fonts. But pdf is not intrinsically <firstterm>reflowable</firstterm>, that is paragraphs have already been arranged into fixed lines. Only a reflowable format enables gracefully enlarging the font size.</para>
        <para>PDF produces fixed-line electronic books with sophisticated typography, certainly ahead of the typography used by other, easier formats. PDF is too precise for non-professionals. It employs complex algorithms for deciding where and whether to split a word, or whether to include the next word in the current line so as to get better looking lines in the remainder of the current paragraph or start a new line. Let&apos;s look at alternative ways in the remaining sections!</para>
        <section sect='sect2'>
	  <title>Extracting Images from PDF Files with <command>pdfimages</command></title>
        </section> <!-- </sect2> -->
        
        <section sect='sect3'>
          <title>In the beginning was PostScript</title>
          <para>PDF files are usually generated from PostScript files. PostScript is a full-fledged programming language with primitives for painting and typesetting text, which makes it just the tool. A PostScript program is a a text file that can be viewed as an electronic book but is usually converted to PDF.</para>
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    <section xml:id='page_layout'>
      <title>Page Layout</title>
      <para>...</para>
      <section sect='sect2'>
        <title>Paper Sizes</title>
        <para>In earlier times the most common ratio of height to width of paper from the factory was 3 : 4. A sheet of paper which is folded once is called folio. Adding another fold will result in a quarto which turns into an octavo after the next fold. When starting with a 3 : 4 sheet the proportions in the folded format will become consecutively: 2 : 3 and 3 : 4 again. The octavo, which is a section with 16 pages, would have the proportion 2 : 3.</para>
        <para>Nowadays in Europe the ISO-216 formats are used. The characteristic of these formats is that the proportion between height and width is 1: √2 – which is approximately 1 : 1.414. When folding such paper sheets the ratio always remains 1: √2. The ISO formats begin with the base size of A0 which has a surface ratio of 1m<superscript>2</superscript>. The index number rises with each time the sheet is cut in half.</para>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>Managing Readability</title>
        <para>In order to make life easier for the reader, one should try to make the average line length some 40 to 70 characters long – including spaces. The optimum is close to 70 characters including spaces. This <quote>70 character rule</quote> is applicable for different European languages such as English, Dutch and German.</para>
        <para>But in addition to the number of characters, the number of words in one line should also be considered. For example, for the German language, a line consisting of 8 to 12 words is optimal.</para>
        <para>Care should be taken when choosing the font. There are, of course, discussions on whether or not to use sans-serif fonts for the main text. The important points are that one should restrict the number of fonts used, and that the fonts should contrast well. The fewer decorative elements a font has, the more legible it will be. One should avoid setting running texts in calligraphic or italic fonts.</para>
        <para>In order to fit close to 70 characters on a line, one can choose fonts which run narrower or broader. Compare texts typeset in Times Roman, which is a narrow-running font developed for the Times newspaper, to the same text typeset in Bookman or Garamond.</para>
        <para>Another possibility to fit the line length requirement is to change the font size, but bear in mind that font sizes less than 8pts make the text harder to read for most people.</para>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>Placement of the typesetting area on the paper</title>
        <para>Now then, where to place the typesetting area on the page? Typographers did and still do differ in opinion on this subject. It is interesting to know that Tschichold in his young years was a promotor of the asymmetrical style of typography associated with the modernist and Bauhaus movements. Later on he started to study medieval manuscripts and printed documents from the middle ages, and completely reversed his opinion. His credo became the harmony of the spread and the page with the printed area. By measuring countless documents he discovered that often the the proportions for the size of the margins (inner, top, outer, and bottom) were: 2, 3, 4, and 6 respectively. Furthermore he discovered that a page with a ratio of 2 : 3 permits a typesetting area whose height is equal to the width of the page.</para>
        <para>These principles of book design formed a <quote>canon</quote> that was used by such early printers as Gutenberg and Schöffer.</para>
        <para>In order to design a typesetting area that meets the requirements mentioned above, one needs to be able to divide the page width and height into ninths, since the inner top corner of each text block is one-ninth of the way across and one-ninth of the way down the page.</para>
        <para>This division has been described by J.A. van de Graaf. In 1955 Tschichold presented another approach to this using the knowledge of Villard de Honnecourt, an architect who lived in the first half of the 13th century, and the studies presented by H. Kayser. The idea is that one can geometrically divide any length into thirds, fifths, and sevenths and so on. This construction was further improved by Goldenheim, Litchfield and Dietrich (GLaD-con- struction), which yields odd and even divisions in separate diagrams. Kayser combined these methods in a single diagram.</para>
        <para>Tschichold applied Villard de Honnecourt&apos;s construction recursively, and since (1/3) × (1/3) = (1/9), this method ensures that the top inner corner of each text block is located both one-ninth of the way across and down the page. Thus, the recursive Villard construction can be used to determine the size and position of the typesetting area, which has the same aspect ratio as the pages themselves.</para>
        <para>Though Tschichold preferred a page ratio of 2 : 3 so the spread would have a ratio of 3 : 4, the same construction method can be applied to any page dimension and paper proportion. Moreover, one not even has to adhere to the division into ninths; other divisions like twelve will also result in a harmonious proportion between the page and the typesetting area and the amount of white space around the text block.</para>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>Binding correction</title>
        <para>So far, only a single spread was used to calculate the typesetting area and the white space around it. When the document will be bound into a book, there must be an additional correction for the optical loss of white space at the binding edge. How big this correction must be is difficult to tell because it depends on the weight and thickness of the paper, the thickness of the book, and, last but not least, on the type of binding used. So the binding correction can best be discussed with the printing house and the bindery.</para>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section xml:id='mark_up'>
      <title>Mark Up</title>
      <para>Historically, the word markup has been used to describe annotation or other marks within a text intended to instruct a compositor or typist how a particular passage should be printed or laid out. Examples include wavy underlining to indicate boldface, special symbols for passages to be omitted or printed in a particular font and so forth. As the formatting and printing of texts was automated, the term was extended to cover all sorts of special markup codes inserted into electronic texts to govern formatting, printing, or other processing.</para>
      <para>Generalizing from that sense, I define <firstterm>markup</firstterm>, or (synonymously) encoding, as any means of making explicit an interpretation of a text. At a banal level, all printed texts are encoded in this sense: punctuation marks, use of capitalization, disposition of letters around the page, even the spaces between words, might be regarded as a kind of markup, the function of which is to help the human reader determine where one word ends and another begins, or how to identify gross structural features such as headings or simple syntactic units such as dependent clauses or sentences. Encoding a text for computer processing is in principle, like transcribing a manuscript from <foreignphrase lang="latin">scriptio continua</foreignphrase>, a process of making explicit what is conjectural or implicit, a process of directing the user as to how the content of the text should be interpreted.</para>
      <para>Thus, to mark up a text is to annotate it following a meaningful system. For instance, to cause a word to print in italics we might precede it and follow it with an _underscore_.</para>
      <para>There is content and there is presentation mark-up.</para>
      <para xml:id='content_markup'><firstterm>Content</firstterm> mark-up says what a bit of text is supposed to mean: a header, a quotation, a foreign word etc. It usually defines a logical or hierarchical structure into chapters, sections, footnotes, appendices etc.</para>
      <para  xml:id='presentation_markup'><firstterm>Presentation</firstterm> mark up says what a bit of text should look like: which font, whether it is italic, bold, underlined, etc.</para>
      <para>Two well-known mark up languages are La(TeX) and (X)HTML/XML.</para>
    </section> <!-- </sect1> -->
    
    <section>
      <title>The HTML/XHTML/XML Way*</title>
      <section sect='sect2'> <title>Reflowable formats*</title> </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section>
      <title>The TeX/LaTeX Way*</title>
      <section sect='sect2'>
        <title>Tex and LaTex<!-- get you to PDF in the end--></title>
        <para>TeX and LaTex are mark up languages originally developed to produce quality mathematical typesetting. By processing a (La)TeX one obtains a PostScript or a PDF file. These systems are not programming languages or at least they do not make it easy to access primitives, but are aimed at non-programmers.</para>
        <para>They are used to write technical papers with mathematical formulas, where they excell.</para>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section>
      <title>Equivalences Between XML/XHTML, TeX, and LaTeX</title>
      
      <section sect='sect2'>
        <title>Starting and Ending XML/XHTML, TeX, and LaTeX</title>
        <para>...</para>
        <table>
          <caption></caption>
          <thead>
            <tr> <td>XHTML</td> <td>TeX</td> <td>LaTeX</td> </tr>
          </thead>
          <tbody>
            
            <tr>
              <td>
                <para>...</para>
                <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="docbook.css"?>]]></programlisting>
              </td>
              <td>
                <para>No initial declaration.</para>
                <programlisting></programlisting>
              </td>
              <td>
                <para>An elaborate initial declaration is required.</para>
                <programlisting></programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>...</para>
                
              </td>
              <td>
                <para>Just end your file with the command <command>\bye</command>.</para>
                <programlisting></programlisting>
              </td>
              <td>
                <para>An elaborate initial declaration is required.</para>
                <programlisting></programlisting>
              </td>
            </tr>
            
          </tbody>
        </table>
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='mathml_tex_latex'>
        <title>Equivalences Between XML/XHTML, TeX, and LaTeX (Mathematics)</title>
        <para>On the whole, TeX/LaTeX mathematical formulas are more readable and intuitive to type. Still, MathML lends itself to transformations to other formal languages and within itself from Content to Presentation MathML.</para>
        <note>We shall not discuss Content MathML here. The reader is well advised to apply a style sheet (<filename>ctop.xsl</filename>) to her Content MathML file.</note>
        <para>Overall, Presentation MathML specifies the role of each token using elements <tag>mi</tag> for identifiers, <tag>mo</tag> for operators, <tag>mn</tag> for numbers, <tag>mtext</tag> for text, and so on. These are combined using layout elements, that generally contain only elements. They include: <tag>mrow</tag> (a horizontal row of items), <tag>msub</tag>, <tag>msup</tag> and <tag>munderover</tag> (subscripts, superscripts, limits over and under operators like sums, etc.), <tag>mfrac</tag> (fractions), <tag>msqrt</tag> and <tag>mroot</tag> (1- and 2-parameter roots), <tag>mfenced</tag> (surrounding content with fences, such as parentheses)...</para>
        <table>
          <caption>Equivalences Between XML/XHTML, TeX, and LaTeX (Mathematics)</caption>
          <thead>
            <tr> <td>XHTML</td> <td>TeX</td> <td>LaTeX</td> </tr>
          </thead>
          <tbody>
            
            <tr>
              <td>
                <para>...</para>
                
              </td>
              <td>
                <para>...</para>
                <programlisting></programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>Write your MathML code between <computeroutput>&lt;math&gt;</computeroutput> and <computeroutput>&lt;/math&gt;</computeroutput>. Use attibute <varname>display</varname> with values <quote>inline</quote> or <quote>block</quote>. Firefox Mozilla seems to understand:</para>
                <programlisting><![CDATA[<math
  xmlns="http://www.w3.org/1998/Math/MathML"
  display="block"
>
  x
</math>]]></programlisting>
              </td>
              <td>
                <para>Write your inline formulas between single dollar signs. Write your block formulas between double dollar signs:</para>
                <programlisting>$$x$$</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX. Write your inline formulas between single dollar signs. Write your block formulas between double dollar signs:</para>
                <programlisting>$$x$$</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>Simple formulas require elements <tag>mi</tag>, <tag>mo</tag>, and <tag>mn</tag> at least:</para>
                <programlisting><![CDATA[<mi>y</mi> <mo>=</mo> <mn>3</mn> <mi>x</mi>]]></programlisting>
                <para>Yet the right hand term of the equation looks better if gathered inside a <tag>mrow</tag> element:</para>
                <programlisting><![CDATA[<mi>y</mi> <mo>=</mo> <mrow> <mn>3</mn><mi>x</mi></mrow>]]></programlisting>
              </td>
              <td>
                <para>Simple formulas look like plain English in TeX/LaTeX:</para>
                <programlisting>$y = 3x$</programlisting>
              </td>
              <td>
                <para>Simple formulas look like plain English in TeX/LaTeX:</para>
                <programlisting>$y = 3x$</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>Use elements <tag>msup</tag> for superscripts, <tag>msub</tag> for subscripts, and <tag>msubsup</tag> (ternary) for subscript-superscript:</para>
                <programlisting><![CDATA[<msubsup> <mi>a</mi> <mn>0</mn> <mn>3</mn> </msubsup>]]></programlisting>
              </td>
              <td>
                <para>Use '^' for superscripts and '_' for subscripts:</para>
                <programlisting>$$a_0^3$$</programlisting>
              </td>
              <td>
                <para>Use '^' for superscripts and '_' for subscripts:</para>
                <programlisting>$$3a_0^3$$</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>Numbered equations are produced ...?</para>
                
              </td>
              <td>
                <para>Numbered equations are produced using the control sequence <userinput>\eqno</userinput>, or with numbers on the left hand side by using <userinput>\leqno</userinput>:</para>
                <programlisting>$f(x)g(x) = x^2 - 1.\eqno(15)$</programlisting>
              </td>
              <td>
                <para>...</para>
                <programlisting></programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>...</para>
                
              </td>
              <td>
                <para>In mathematics mode the character &apos; has a special meaning:</para>
                <programlisting>$f' = g''$</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>Special or <emphasis>reserved</emphasis> characters (built-in entities) &apos;, &quot;, &lt;, and &gt; must be typed:</para>
                <programlisting><![CDATA[&apos; &quot; &lt; &gt;]]></programlisting>
              </td>
              <td>
                <para>Special or <emphasis>reserved</emphasis> characters #, $, %, &amp;, _, {, and } must be escaped. \ is represented by <userinput>\backslash</userinput>.</para>
                <programlisting>\# \$ \% \&amp; \_ \{ \} \backslash</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>Greek letters (and other symbols) are entities that must be defined before being used, or be specified through their unicode number. Thus alpha (&alpha;), pi (&pi;), and chi (&chi;) are obtained by typing:</para>
                <programlisting><![CDATA[&#x03B1; &#x03C0; &#x03C7;]]></programlisting>
              </td>
              <td>
                <para>Greek letters (and other symbols) are produced in mathematics mode by preceding the name of the letter by a backslash (\). Thus the Greek letters alpha (&alpha;), pi (&pi;), and chi (&chi;) are obtained by typing:</para>
                <programlisting>\alpha \pi \chi</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>Fonts are <emphasis>styled</emphasis> in CSS files</para>
                <programlisting><![CDATA[math { font-size: 12pt;}]]></programlisting>
              </td>
              <td>
                <para>Fonts are selected with <userinput>\cal</userinput>, <userinput>\bf</userinput>, <userinput>\it</userinput>... Math italic (<userinput>mit</userinput>) is assumed, though.</para>
                <programlisting></programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>...</para>
                <programlisting><![CDATA[<mi>a</mi> <mo>=</mo> <mn>0</mn> <mtext>only if...</mtext>]]></programlisting>
              </td>
              <td>
                <para>The recommended way to obtain ordinary text in displayed mathematical formulae is to use <userinput>\hbox</userinput>.</para>
                <programlisting>$a = 0 \hbox{ only if...}$</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>Fractions are typeset through binary <tag>mfrac</tag>. Roots are typeset through <command>msqrt</command> (binary), and <command>mroot</command> (ternary).</para>
                <programlisting><![CDATA[<mfrac><mi>a</mi> <mfrac><mn>2</mn><mn>3</mn></mfrac>]]></programlisting>
              </td>
              <td>
                <para>Fractions in Plain TeX are typeset using the construction {<varname>numerator</varname> <command>\over</command> <varname>denominator</varname>}. Analogously, <command>\sqrt</command> is used for square roots and <command>\root</command> <varname>n</varname> <command>\of</command> <varname>expression</varname> for nth roots.</para>
                <programlisting>$a {2 \over 3}$</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>Some expressions are <emphasis>fenced</emphasis> between delimiters with a <link linkend='mfenced'>mfenced</link> element.</para>
                <programlisting><![CDATA[<mfenced open='{' close='}'><mi>a</mi><mi>b</mi><mi>c</mi></mfenced>]]></programlisting>
              </td>
              <td>
                <para>TeX recognizes (, [, { and | as left delimiters, and ), ], }, and again | as right delimiters. Double | is typed by <userinput>\|</userinput>.</para>
                <programlisting>${a, b, c}$</programlisting>
                <para>Larger delimiters are sometimes required which have the appropriate height to match the size of the subformula which they enclose. Type <command>\left</command><varname>left_delimiter</varname> and <command>\right</command><varname>left_delimiter</varname>:</para>
                <programlisting>\left(1 + {x^2 \over 3} \right)</programlisting>
                <para>By typing <userinput>\left.</userinput> and <userinput>\right.</userinput> one obtains null delimiters which are completely invisible</para>
                <programlisting>$\left. {du \over dx} \right|_{x=0}.$</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>...</para>
                
              </td>
              <td>
                <para> Multiline Formulae in Plain TeX are aligned by means of <command>\eqalign</command> and &amp; characters:</para>
                <programlisting>$$\eqalign{a^2 &amp;= c^2 - b^2\cr
                  &amp;= 4\cr}$$</programlisting>
                <para>Some other times you use <command>\cases</command>. One must place $ before and after any mathematical expression occurring to the right of the alignment tab &amp;.:</para>
                <programlisting>$$|x| = \cases{ x &amp;if $x \geq 0$;\cr
  -x &amp;if $x &lt; 0$.\cr}$$</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>...</para>
                
              </td>
              <td>
                <para>Matrices and other arrays are produced in Plain TeX using the control sequence <command>\matrix</command>.</para>
                <programlisting>$$\left(
\matrix{ a &amp; b &amp; c \cr
d&amp;e&amp;f\cr
g &amp; h &amp; i \cr} \right)$$</programlisting>
                <para>Since matrices delimited by round brackets are so common, Plain TeX provides the control sequence <command>\pmatrix</command> to construct them:</para>
                <programlisting>$$\pmatrix{
  a &amp; b &amp; c \cr
  d&amp;e&amp;f\cr
  g &amp; h &amp; i \cr} \right)$$</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>...</para>
                
              </td>
              <td>
                <para>Whether an expression is placed over or under an operator (as opposed to being its superscript or subscript) depends on the class of the operator (<command>lim</command>, <command>sup</command>, <command>inf</command>, <command>sum</command> etc.).</para>
                <programlisting>$$\lim_{x \to 0} {1 \over x}$$</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>Space is created by grouping space separated units into <tag>mrow</tag> elements and such:</para>
                <programlisting><![CDATA[<mrow><mn>2</mn><mi>a</mi></mrow> <mo>=</mo> <mrow><mn>3</mn><mi>b</mi></mrow>]]></programlisting>
              </td>
              <td>
                <para>In TeX space is explicitly created through <userinput>\,</userinput> (which is removed by <userinput>\!</userinput>) and others such as <userinput>quad</userinput> and <userinput>qquad</userinput>.</para>
                <programlisting>$$x^2\,dx$$</programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>...</para>
                
              </td>
              <td>
                <para>...</para>
                <programlisting></programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
            <tr>
              <td>
                <para>...</para>
                
              </td>
              <td>
                <para>...</para>
                <programlisting></programlisting>
              </td>
              <td>
                <para>Same as in Plain TeX?</para>
                <programlisting>% same example?</programlisting>
              </td>
            </tr>
            
          </tbody>
        </table>
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>XYZ Equivalences Between XML/XHTML, TeX, and LaTeX*</title>
        <para>...</para>
        <table>
          <caption></caption>
          <thead>
            <tr> <td>XHTML</td> <td>TeX</td> <td>LaTeX</td> </tr>
          </thead>
          <tbody>
            
            <tr>
              <td>
                <para>...</para>
                
              </td>
              <td>
                <para>...</para>
                <programlisting></programlisting>
              </td>
              <td>
                <para>...</para>
                <programlisting></programlisting>
              </td>
            </tr>
            
          </tbody>
        </table>
        
      </section> <!-- </sect2> -->
      

    </section> <!-- </sect1> -->

    
  </chapter>
  
  <chapter xml:id='handling_text'>
    <title>Handling Plain Text</title>
    <section>
      <title>Text Editors</title>
      <section sect='sect2'>
        <title>Graphical Text Editors*</title>
        <section sect='sect3'> <title>NotePad*</title> </section> <!-- </sect3> -->
        <section sect='sect3'> <title>NotePad++*</title> </section> <!-- </sect3> -->
        <section sect='sect3'> <title>Light-weight Graphical Text Editors on Unix*</title> </section> <!-- </sect3> -->
        <section sect='sect3'> <title>Kate*</title> </section> <!-- </sect3> -->
        <section sect='sect3'> <title>Scite*</title> </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>Console-Based Text Editors*</title>
        <section sect='sect3'> <title>A Host of Light-weight Console-Based Text Editors on Unix*</title> </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Vi/Vim</title>
          <section sect='sect4'>
            <title>Starting vi</title>
            <para>You may use vi to open an already existing file by typing</para>
            <programlisting>vi filename</programlisting>
            <para>where <varname>filename</varname> is the name of the existing file. If the file is not in your current directory, you must use the full pathname.</para>
            <para>Or you may create a new file by typing</para>
            <programlisting>vi newname</programlisting>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>vi Modes</title>
            <para>vi has two modes:</para>
            <itemizedlist>
              <listitem>command mode</listitem>
              <listitem>insert mode</listitem>
            </itemizedlist>
            <para>In command mode, the letters of the keyboard perform editing functions (like moving the cursor, deleting text, etc.). To enter command mode, press the escape &lt;Esc&gt; key.</para>
            <para>In insert mode, the letters you type form words and sentences. Unlike many word processors, vi starts up in command mode. In order to begin entering text in this empty file, you must change from command mode to insert mode. To do this, type</para>
            <programlisting>i</programlisting>
            <para>Nothing appears to change, but you are now in insert mode and can begin typing text. In general, vi&apos;s commands do not display on the screen and do not require the Return key to be pressed. Type a few short lines and press &lt;Return&gt; at the end of each line. If you type a long line, you will notice the vi does not word wrap, it merely breaks the line unceremoniously at the edge of the screen. If you make a mistake, pressing &lt;Backspace&gt; or &lt;Delete&gt; may remove the error, depending on your terminal type.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Moving the Cursor</title>
            <para>To move the cursor to another position, you must be in command mode. If you have just finished typing text, you are still in insert mode. Go back to command mode by pressing &lt;Esc&gt;. If you are not sure which mode you are in, press &lt;Esc&gt; once or twice until you hear a beep. When you hear the beep, you are in command mode.</para>
            <para>The cursor is controlled with four keys: h, j, k, l. h moves the cursor left one space j moves the cursor down one line k moves the cursor up one line l moves the cursor right one space.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Basic Editing</title>
            <para>Editing commands require that you be command mode. Many of the editing commands have a different function depending on whether they are typed as upper- or lowercase. Often, editing commands can be preceded by a number to indicate a repetition of the command.</para>
            <section sect='sect5'>
              <title>Deleting Characters</title>
              <para>To delete a character from a file, move the cursor until it is on the incorrect letter, then type</para>
              <programlisting>x</programlisting>
              <para>The character under the cursor disappears. To remove four characters (the one under the cursor and the next three) type</para>
              <programlisting>4x</programlisting>
              <para>To delete the character before the cursor, type (uppercase X)</para>
              <programlisting>X</programlisting>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Deleting Words</title>
              <para>To delete a word, move the cursor to the first letter of the word, and type</para>
              <programlisting>dw</programlisting>
              <para>This command deletes the word and the space following it.</para>
              <para>To delete three words type</para>
              <programlisting>3dw</programlisting>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Deleting Lines</title>
              <para>To delete a whole line, type</para>
              <programlisting>dd</programlisting>
              <para>The cursor does not have to be at the beginning of the line. Typing dd deletes the entire line containing the cursor and places the cursor at the start of the next line. To delete two lines, type</para>
              <programlisting>2dd</programlisting>
              <para>To delete from the cursor position to the end of the line, type (uppercase)</para>
              <programlisting>D</programlisting>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Replacing Characters</title>
              <para>To replace one character with another:</para>
              <itemizedlist>
                <listitem>Move the cursor to the character to be replaced.</listitem>
                <listitem>Type r</listitem>
                <listitem>Type the replacement character.</listitem>
              </itemizedlist>
              <para>The new character will appear, and you will still be in command mode.</para>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Replacing Words</title>
              <para>To replace one word with another, move to the start of the incorrect word and type</para>
              <programlisting>cw</programlisting>
              <para>The last letter of the word to be replaced will turn into a $. You are now in insert mode and may type the replacement. The new text does not need to be the same length as the original. Press &lt;Esc&gt; to get back to command mode. To replace three words, type</para>
              <programlisting>3cw</programlisting>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Replacing Lines</title>
              <para>To change text from the cursor position to the end of the line:</para>
              <itemizedlist>
                <listitem>Type C (uppercase).</listitem>
                <listitem>Type the replacement text.</listitem>
                <listitem>Press &lt;Esc&gt;.</listitem>
              </itemizedlist>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Inserting Text</title>
              <para>To insert text in a line:</para>
              <itemizedlist>
                <listitem>Position the cursor where the new text should go.</listitem>
                <listitem>Type i</listitem>
                <listitem>Enter the new text. (The text is inserted <emphasis>before</emphasis> the cursor.)</listitem>
                <listitem>Press &lt;Esc&gt; to get back to command mode.</listitem>
              </itemizedlist>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Appending Text</title>
              <para>To add text to the end of a line:</para>
              <itemizedlist>
                <listitem>Position the cursor on the last letter of the line.</listitem>
                <listitem>Type a</listitem>
                <listitem>Enter the new text. (This adds text <emphasis>after</emphasis> the cursor.)</listitem>
                <listitem>Press &lt;Esc&gt; to get back to command mode.</listitem>
              </itemizedlist>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Opening a Blank Line</title>
              <para>To insert a blank line below the current line, type</para>
              <programlisting>o (lowercase)</programlisting>
              <para>To insert a blank line above the current line, type</para>
              <programlisting>O (uppercase)</programlisting>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Joining Lines</title>
              <para>To join two lines together:</para>
              <itemizedlist>
                <listitem>Put the cursor on the first line to be joined.</listitem>
                <listitem>Type J</listitem>
              </itemizedlist>
              <para>To join three lines together:</para>
              <itemizedlist>
                <listitem>Put the cursor on the first line to be joined.</listitem>
                <listitem>Type 3J</listitem>
              </itemizedlist>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Undoing</title>
              <para>To undo your most recent edit, type</para>
              <programlisting>u</programlisting>
              <para>To undo all the edits on a single line, type (uppercase)</para>
              <programlisting>U</programlisting>
              <para>Undoing all edits on a single line only works as long as the cursor stays on that line. Once you move the cursor off a line, you cannot use U to restore the line.</para>
            </section> <!-- </sect5> -->
          </section> <!-- </sect4> -->
          
          <section sect='sect4'>
            <title>Moving Around</title>
            <section sect='sect5'>
              <title>Moving Around in a File</title>
              <para>There are shortcuts to move more quickly though a file. All these work in command mode.</para>
              <literallayout>Key            Movement
     ---            --------

     w            forward word by word
     b            backward word by word
     $            to end of line
     0 (zero)     to beginning of line
     H            to top line of screen
     M            to middle line of screen
     L            to last line of screen
     G            to last line of file
     1G           to first line of file
     &lt;Control&gt;f   scroll forward one screen
     &lt;Control&gt;b   scroll backward one screen
     &lt;Control&gt;d   scroll down one-half screen
     &lt;Control&gt;u   scroll up one-half screen</literallayout>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Moving by Searching</title>
              <para>To move quickly by searching for text, while in command mode:</para>
              <itemizedlist>
                <listitem>Type / (slash).</listitem>
                <listitem>Enter the text to search for.</listitem>
                <listitem>Press &lt;Return&gt;</listitem>
              </itemizedlist>
              <para>The cursor moves to the first occurrence of that text.</para>
              <para>To repeat the search in a forward direction, type</para>
              <programlisting>n</programlisting>
              <para>To repeat the search in a backward direction, type</para>
              <programlisting>N</programlisting>
            </section> <!-- </sect5> -->
          </section> <!-- </sect4> -->
          
          <section sect='sect4'>
            <title>Closing and Saving a File</title>
            <para>With vi, you edit a copy of the file, rather than the original file. Changes are made to the original only when you save your edits.</para>
            <para>To save the file and quit vi, type</para>
            <programlisting>ZZ</programlisting>
            <para>The vi editor editor is built on an earler Unix text editor called ex. ex commands can be used within vi. ex commands begin with a : (colon) and end with a &lt;Return&gt;. The command is displayed on the status line as you type. Some ex commands are useful when saving and closing files.</para>
            <para>To save the edits you have made, but leave vi running and your file open:</para>
            <itemizedlist>
              <listitem>Press &lt;Esc&gt;.</listitem>
              <listitem>Type :w Press &lt;Return&gt;.</listitem>
            </itemizedlist>
            <para>To quit vi, and discard any changes your have made since last saving:</para>
            <itemizedlist>
              <listitem>Press &lt;Esc&gt;.</listitem>
              <listitem>Type :q!</listitem>
              <listitem>Press &lt;Return&gt;.</listitem>
            </itemizedlist>

          </section> <!-- </sect4> -->

        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>Emacs OS*</title> </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    
    
    <section>
      <title>Searches and Transformations of Text</title>
      <para>Searches and transformations are usually based on <link linkend='regular_expressions'>regular_expressions</link>, which get explained in this section. They are usually line-oriented. The major excepction these features seems to be <application linkend='xslt'>XSLT</application>, which operates on XML only.</para>
      <para>So we shall be looking into utilities <application linkend='sed'>sed</application>, awsome <application linkend='awk'>awk</application>, and even <application linkend='m4'>m4</application>.</para>
      
      <section sect='sect2'>
        <title>Extracting Excerpts with <application>csplit</application></title>
        <para>To write everything up to and including the first line containing <quote>up-to-here</quote> into file <filename>xx00</filename>, plus the following empty line to ease concatenation of files. The remainder goes into file <filename>xx01</filename>.</para>
        <programlisting>csplit <filename>my_file.xyz</filename> &apos;/up-to-here/+2&apos;</programlisting>
        <section sect='sect3'>
          <title>Some more examples</title>
          <itemizedlist>
            <listitem>
              <para>I have a text file which I want to split into 64 unequal parts, according to the 64 hexagrams of the Yi Jing. Since the passage for each hexagram begins with some digit(s), a period, and two newlines, the regex should be pretty easy to write.</para>
              <programlisting><![CDATA[csplit foo.txt '/^[0-9][0-9]*\.$/' '{64}']]></programlisting>
            </listitem>
            <listitem>
              <para>I want to split a large docbook fileFrom holding several part elements into files, each holding a file</para>
              <programlisting><![CDATA[-rw-rw-r-- 1 francisco francisco 4,3M abr  1 10:33 Electric.xml
-rw-rw-r-- 1 francisco francisco  16K abr  1 10:51 Electric.pre]]></programlisting>
              <para>I run:</para>
              <programlisting><![CDATA[csplit --prefix='Electric.part.' Electric.xml '/<part/' {8}]]></programlisting>
              <para>To obtain:</para>
              
              <note>The last chunk does contain the closing <tag>/book</tag> tag. I shall have to do some merging since some occurences of <quote>&lt;part</quote> are not tags but are programming listings and so on.</note>
            </listitem>
            <listitem>
              <para>***</para>
              <programlisting><![CDATA[***]]></programlisting>
            </listitem>
            <listitem>
              <para>***</para>
              <programlisting><![CDATA[***]]></programlisting>
            </listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'  xml:id='regular_expressions'>
        <title>Regular expressions</title>
        <para>A <firstterm>regular expression</firstterm> provides us with a way to locate pieces of a text which follow a given pattern and extract some parts (runs of characters) from that pattern. For instance, if a text states that either John or Andy believes or believed something, we might run:</para>
        <programlisting>(John|Andy) believe(s|d)</programlisting>
        
        <para>A regular expression describes a set of strings over the characters contained in some alphabet, &Sigma;, augmented with a character &epsilon; that represents the empty string. We call the set of strings a <firstterm>language</firstterm>. For a given regular expression, <varname>r</varname>, we denote the language that it specifies as L(<varname>r</varname>).</para>
        <para>An re is built up from three basic operations:</para>
        <itemizedlist>
          <listitem>1. Alternation The alternation, or union, of two sets of strings, <varname>R</varname> and <varname>S</varname>, denoted <varname>R</varname> | <varname>S</varname>, is {<varname>x</varname> | <varname>x</varname> ∈ <varname>R</varname> or <varname>x</varname> ∈ <varname>S</varname>}.</listitem>
          <listitem>2. Concatenation The concatenation of two sets <varname>R</varname> and <varname>S</varname>, denoted <varname>RS</varname>, contains all strings formed by prepending an element of <varname>R</varname> onto one from <varname>S</varname>, or {<varname>x</varname> <varname>y</varname> | <varname>x</varname> ∈ <varname>R</varname> and <varname>y</varname> ∈ <varname>S</varname>}.</listitem>
          <listitem>3. Closure The Kleene closure of a set <varname>R</varname>, denoted <varname>R<superscript>∗</superscript></varname>, is &union;<subscript>i=0</subscript><superscript>&infinity;</superscript> R<superscript>i</superscript>. This is just the union of the concatenations of <varname>R</varname> with itself, zero or more times.</listitem>
        </itemizedlist>
        <para>For convenience, we sometimes use a notation for finite closure. The notation <varname>R<superscript>i</superscript></varname> denotes from one to i occurrences of R. A finite closure can be always be replaced with an enumeration of the possibilities; for example, <varname>R<superscript>3</superscript></varname> is just (<varname>R</varname> | <varname>RR</varname> | <varname>RRR</varname>). The positive closure, denoted <varname>R<superscript>+</superscript></varname>, is just <varname>RR<superscript>∗</superscript></varname> and consists of one or more occurrences of <varname>R</varname>. Since all these closures can be rewritten with the three basic operations, we ignore them in the discussion that follows.</para> <para>Using the three basic operations, alternation, concatenation, and Kleene closure, we can define the set of res over an alphabet &Sigma; as follows:</para>
        <itemizedlist>
          <listitem>1. If <varname>a</varname> ∈ <varname>&Sigma;</varname>, then <varname>a</varname> is also an re denoting the set containing only <varname>a</varname>.</listitem>
          <listitem>2. If <varname>r</varname> and <varname>s</varname> are res, denoting sets L(<varname>r</varname>) and L(<varname>s</varname>), respectively, then <varname>r</varname> | <varname>s</varname> is an re denoting the union, or alternation, of L(<varname>r</varname>) and L(<varname>s</varname>), <varname>rs</varname> is an re denoting the concatenation of L(<varname>r</varname>) and L(<varname>s</varname>), respectively, and <varname>r<superscript>∗</superscript></varname> is an re denoting the Kleene closure of L(<varname>r</varname>).</listitem>
          <listitem>3. <varname>&epsilon;</varname> is an re denoting the set containing only the empty string.</listitem>
        </itemizedlist>
        
        <section sect='sect3'>
          <title>Special Characters in Regular Expressions</title>
          <itemizedlist>
            <listitem>^: start of a line</listitem>
            <listitem>$: end of a line</listitem>
            <listitem>\b: word limit</listitem>
            <listitem>escaped characters: all those which have a syntactic meaning (\[, \{, \(, \|, as well as \], \}, \) etc.)</listitem>
          </itemizedlist>
          <section sect='sect4' xml:id='regex_beginning_and_end_of_line'>
            <title>Beginning and End of Line</title>
            <para>In sed (and grep), &apos;^&apos; and &apos;$&apos; are only special when they occur at the beginning or end of a regular expression, respectively. Thus &apos;^abc&apos; means &apos;match the letters a, b, and c only at the beginning of the line,&apos; while &apos;ab^c&apos; means &apos;match a, b, a literal ^, and then c, anywhere on the line.&apos; The same is true for the &apos;$.&apos;</para>
            <para>In awk, it&apos;s different; &apos;^&apos; and &apos;$&apos; are always special, even though it then becomes possible to write regular expressions that don't match anything. Suffice it to say that in awk, when you want to match either a literal &apos;^&apos; or &apos;$,&apos; you should always escape it with a backslash, no matter what its position in the regular expression.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Alternation</title>
            <para>The <quote>|</quote> character can be used to specify the <quote>or</quote> relationship. For example, <quote>a|b</quote> matches <quote>a</quote> or <quote>b</quote>.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Grouping</title>
            <para>Parentheses () are used to mark sub-expressions, also called <firstterm>capture groups</firstterm>. Capture groups can be used for several purposes:</para>
            <itemizedlist>
              <listitem>Capture groups can be used to identify individual sub-sequences of the original string; each marked sub-expression (capture group) is returned in the result. For example, take the following regular expression: (.)(ab|cd)(.). It has three marked sub-expressions. Running a regex_search() with this regular expression on 1cd4 results in a match with four entries. The first entry is the entire match 1cd4 followed by three entries for the three marked sub-expressions. These three entries are 1 , cd , and 4.</listitem>
              <listitem>Capture groups can be used during matching for a purpose called back references (explained later).</listitem>
              <listitem>Capture groups can be used to identify components during replace operations (explained later).</listitem>
            </itemizedlist>
          </section> <!-- </sect4> -->
          <section sect='sect4' xml:id='regex_repetitions'>
            <title>Repetition</title>
            <para>Parts of a regular expression can be repeated by using one of four repeats:</para>
            <itemizedlist>
              <listitem><quote>*</quote> matches the preceding part zero or more times. For example: a*b matches b , ab , aab , aaaab , and so on.</listitem>
              <listitem><quote>+</quote> matches the preceding part one or more times. For example: a+b matches ab , aab , aaaab , and so on, but not b.</listitem>
              <listitem><quote>?</quote> matches the preceding part zero or one time. For example: a?b matches b and ab , but nothing else.</listitem>
              <listitem><quote>{...}</quote> represents a bounded repeat. a{n} matches a repeated exactly n times; a{n,} matches a repeated n times or more; and a{n,m} matches a repeated between n and m times inclusive. For example, a{3,4} matches aaa and aaaa but not a , aa , aaaaa , and so on.</listitem>
            </itemizedlist>
            <para>The repeats described in the previous list are called greedy because they find the longest match while still matching the remainder of the regular expression.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4' xml:id='posix_character_class_additions'>
            <title>POSIX character class additions</title>
            <para>The POSIX standard formalizes the meaning of regular expression characters and operators. The standard defines two classes of regular expressions: Basic Regular Expressions (BREs), which are the kind used by grep and sed, and Extended Regular Expressions, which are the kind used by egrep and awk.</para>
            <para>In order to accommodate non-English environments, the POSIX standard enhanced the ability of character classes to match characters not in the English alphabet. For example, the French è is an alphabetic character, but the typical character class [a-z] would not match it. Additionally, the standard provides for sequences of characters that should be treated as a single unit when matching and collating (sorting) string data.</para>
            <itemizedlist>
              <listitem>Class    Matching Characters</listitem>
              <listitem>[:alnum:] Printable characters (includes whitespace)</listitem>
              <listitem>[:alpha:] Alphabetic characters</listitem>
              <listitem>[:blank:] Space and tab characters</listitem>
              <listitem>[:cntrl:] Control characters</listitem>
              <listitem>[:digit:] Numeric characters</listitem>
              <listitem>[:graph:] Printable and visible (non-space) characters[:lower:]</listitem>
              <listitem>[:print:] Alphanumeric characters</listitem>
              <listitem>[:lower:] Lowercase characters</listitem>
              <listitem>[:punct:] Punctuation characters</listitem>
              <listitem>[:space:] Whitespace characters</listitem>
              <listitem>[:upper:] Uppercase characters</listitem>
              <listitem>[:xdigit:] Hexadecimal digits</listitem>
            </itemizedlist>
            </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Choice of Character in Regular Expressions</title>
          <para>Admitted characters are written between square brackets. For instance, to select <quote>ate</quote>, <quote>age</quote>, or <quote>ape</quote>, type:</para>
          <programlisting>a[tgp]e</programlisting>
          <para>The number of occurrences is stated by signs: &apos;*&apos; (any number, included zero), &apos;?&apos; (one or none at all), &apos;+&apos; (at least one), &apos;{3}&apos; (just three occurrences), &apos;{0,2}&apos; (from 0 to 2 occurrences), etc.</para>
          <para>If we would rather specify non-admitted characters, we preceed the list by a caret. The following example selects all words lacking letter &apos;x&apos; or &apos;X&apos;:</para>
          <programlisting>\b[^xX]+\b</programlisting>
          <para>A more complicated example to select all words with one &apos;x&apos;:</para>
          <programlisting>\b[^xX ]*[xX][^xX ]*\b</programlisting>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Capturing Text with Regular Expressions</title>
          <para>You enclose the fishing pattern in round brackets...</para>
          <section sect='sect4' xml:id='regexp_greedy'>
            <title>Greedy Capturing</title>
            <para>At each point in its processing, a regular expression engine may the longest matching sequence. It will be said to be <firstterm>greedy</firstterm>...</para>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Line and Supraline Searches and Transformations</title>
        <itemizedlist>
          <listitem>line: <application>sed</application>, <application>grep</application>...</listitem>
          <listitem>supra-line: <application>AWK</application>, <application>XSLT</application>, <application>m4</application>...</listitem>
        </itemizedlist>
      </section> <!-- </sect2> -->
      
      </section> <!-- </sect1> -->
      
      
    
      <section xml:id='sed'>
        <title><application>sed</application>, the Unix Stream EDitor</title>
        <para>If you want to write a script or program to make changes in a file, sed is the tool to use.</para>
        <para><application>sed</application> is a stream editor. A <firstterm>stream editor</firstterm> is used to perform basic text transformations on an input stream (a file or input from a pipeline). You can send the output of another command directly into sed for editing, too. While in some ways similar to an editor which permits scripted edits (such as <application>ed</application>), <application>sed</application> works by making only one pass over the input(s), and is consequently faster.</para>
        <para>You should also be aware that sed outputs everything to standard out by default. That means that, unless redirected, sed will print its output to the screen instead of saving it in a file.</para>
        <para>To know how to use sed, people should understand <link linkend='regular_expressions'>regular expressions</link> (<quote>regexp</quote> for short).</para>
        
        
        <section sect='sect2' xml:id='sed_invocation'>
          <title><application>sed</application> invocation</title>
          <para><application>sed</application> is normally invoked like this:</para>
          <informalequation>sed <varname>script</varname> <varname>inputfile</varname></informalequation>
          <para>Yet, the full format for invoking <application>sed</application> is:</para>
          <informalequation> sed <varname>options</varname> [<varname>script</varname>] <varname>inputfile</varname>*</informalequation>
          <para>If you do not specify <varname>inputfile</varname>, or if <varname>inputfile</varname> is <quote>-</quote>, <application>sed</application> filters the contents of the standard input. The script is actually the first non-option parameter, which <application>sed</application> specially considers a script and not an input file if (and only if) none of the other options specifies a script to be executed, that is if neither of the <quote>-e</quote> and <quote>-f</quote> options is specified.</para>
          <para>Some useful options are <quote>-e</quote> and <quote>-f</quote>:</para>
          <itemizedlist>
            <listitem>-e <varname>script</varname></listitem>
            <listitem>--expression=<varname>script</varname>: add the commands in <varname>script</varname> to the set of commands to be run while processing the input.</listitem>
            <listitem>-f <varname>script-file</varname> or --file=<varname>script-file</varname>: add the commands contained in the file script-file to the set of commands to be run while processing the input.</listitem>
          </itemizedlist>
          <section sect='sect3' xml:id='sed_scripts'>
            <title><application>sed</application> Scripts</title>
            <para>As you begin to use more complex commands, it may be helpful to compose them in a text editor. This is also helpful if you have a large number of commands that you&apos;d like to apply to a single target. For example, if you like to compose a plain text file, but you need to perform a set of standardized formatting before using the text, a <application>sed</application> script would be useful. Instead of typing each set of <application>sed</application> calls every time, you can put the commands in a script and supply it as an argument to <application>sed</application>.</para>
            <para>A <application>sed</application> script is simply a list of raw sed commands (the part normally between the single-quote characters). For example:</para>
            <programlisting>s/this/that/g
s/snow/rain/g
1,5s/pinecone/apricot/g</programlisting>
            <para>We could then call the file by using the following syntax:</para>
            <programlisting>sed -f <filename>sedScriptName</filename> <filename>fileToEdit</filename></programlisting>
            <para>This allows you to put all of your edits in one file and execute it on arbitrary text files that need to conform to the format you&apos;ve created.</para>
          </section> <!-- </sect3> -->
        </section> <!-- </sect2> -->  <!-- end of "<application>sed</application> invocation" -->
        
        <section sect='sect2' xml:id='sed_walkthrough'>
          <title>Some Simple <application>sed</application> Scripting</title>
          
          <para>Here is a simple example of a <application>sed</application> invocation that does nothing but print the contents of file <filename>README.txt</filename>:</para>
          <programlisting>sed &apos;&apos; <filename>README.txt</filename></programlisting>
          
          <para>We can also use standard input by piping the output of the <command>cat</command> command into <application>sed</application> to produce the same result:</para>
          <programlisting><filename>README.txt</filename> | sed &apos;&apos;</programlisting>
          
          <section sect='sect3'>
            <title>Printing Lines in <application>sed</application></title>
            <para>So far we have seen input passed into <application>sed</application> without any operations. We will now explore <application>sed</application>&apos;s explicit <command>print</command> command, which is specified by using the <quote>p</quote> character within single quotes. Let&apos;s modify our first example... for a weird effect:</para>
            <programlisting>sed &apos;p&apos; <filename>README.txt</filename></programlisting>
            <para>This script prints each line twice. This is because it automatically prints each line, and then we&apos;ve told it to print explicitly with the <command>p</command> command.</para>
            <para>If you examine how the output has the first line twice, followed by the second line twice, etc., you will see that <application>sed</application> operates line by line. It accepts a line, operates on it, and outputs the resulting text before repeating the process on the next line.</para>
            <para>We can clean up the results in the preceding script by passing the <userinput>-n</userinput> option in, which suppresses the automatic printing:</para>
            <programlisting>sed -n &apos;p&apos; <filename>README.txt</filename></programlisting>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>Targeting Lines in <application>sed</application>: Printing</title>
            <para>The examples so far can hardly be considered editing (unless we wanted to print each line twice...). Let&apos;s modify the output by only having <application>sed</application> print the first line:</para>
            <programlisting>sed -n &apos;1p&apos; <filename>README.txt</filename></programlisting>
            <para>By placing the number 1 before the print command, we have told <application>sed</application> the line number to operate on. We can just as easily print five lines (don&apos;t forget the <userinput>-n</userinput>).</para>
            <programlisting>sed -n &apos;1,5p&apos; <filename>README.txt</filename></programlisting>
            <para>We&apos;ve just given an address range to <application>sed</application>. If we give <application>sed</application> an address, it will only perform the commands that follow on those lines. In this example, we&apos;ve told <application>sed</application> to print line 1 through line 5. We could have specified this in a different way with by giving the first address and then using an offset to tell <application>sed</application> how many additional lines to travel:</para>
            <programlisting>sed -n &apos;1,+4p&apos; <filename>README.txt</filename></programlisting>
            <para>This will result in the same output, because we&apos;ve told <application>sed</application> to start at line 1 and then operate on the next 4 lines as well.</para>
            
            <para>If we want to print every other line, we can specify the interval after the <quote>~</quote> character. The following line will print every other line starting with line 1:</para>
            <programlisting>sed -n &apos;1~2p&apos; <filename>README.txt</filename></programlisting>
          </section> <!-- </sect3> -->  <!-- end of "Targeting Lines in <application>sed</application>: Printing" -->
          
          <section sect='sect3'>
            <title>Deleting Text in <application>sed</application></title>
            <para>We can easily perform text deletion where we previously were specifying text printing by changing the <command>p</command> command to the <command>d</command> command.</para>
            <para>To delete blank lines, type <userinput><![CDATA[sed '/^$/d' FILE.txt]]></userinput></para>
            <para>We no longer need the <command>-n</command> command because with the delete command, <application>sed</application> will print everything that is not deleted, which will help us see what&apos;s going on.</para>
            <para>We can modify the last command from the previous section to make it delete every other line starting with the first. The result is that we should be given every line we were not given last time.</para>
            <programlisting>sed -n &apos;1~2d&apos; <filename>README.txt</filename></programlisting>
          </section> <!-- </sect3> -->  <!-- end of "Deleting Text in <application>sed</application>" -->
          
          <section sect='sect3'>
            <title>In-Place Editing in <application>sed</application></title>
            <para>If we want to save our edits, we can redirect standard output to a file like so:</para>
            <programlisting>sed &apos;1~2d&apos; <filename>README.txt</filename> &gt; everyother.txt</programlisting>
            <para>If we open the file with <command>cat</command>, we will see the same output that we saw onscreen previously. <application>sed</application> does not edit the source file by default for our safety. We can change this behavior though by passing sed the <userinput>-i</userinput> option, which means perform edits in-place. This will edit the source file.</para>
            <para>Let&apos;s try it by editing our <filename>everyother.txt</filename> file we just created, in-place. Let&apos;s further reduce the file by deleting every other line again:</para>
            <programlisting>sed -i &apos;1~2d&apos; everyother.txt</programlisting>
            <para>If you use <command>cat</command> again, you can see that the file has been edited.</para>
            <bridgehead>Creating a Backup File for Safety</bridgehead>
            <para>As mentioned previously, the <userinput>-i</userinput> option can be dangerous! Thankfully, sed gives us the ability to create a backup file prior to editing. To create a backup file prior to editing, add the backup extension <emphasis>directly</emphasis> after the <userinput>-i</userinput> option:</para>
            <programlisting>sed -i.bak &apos;1~2d&apos; everyother.txt</programlisting>
            <para>This will create a backup file with the <quote>.bak</quote> extension, and then edit the regular file in-place.</para>
          </section> <!-- </sect3> -->
          
          <section sect='sect3' xml:id='sed_substitutions'>
            <title><application>sed</application> Substitutions with <quote>s</quote></title>
            <para>This is perhaps the most common use for sed. The substitute command changes all occurrences of the <link linkend='regular_expressions'>regular expression</link> into a new value.</para>
            <para>In its simplest form, you can change one word to another word using the following syntax (to go just before the file name in your <application>sed</application> invocation):</para>
            <programlisting>&apos;s/<varname>old_word</varname>/<varname>new_word</varname>/&apos;</programlisting>
            <para>The <userinput>s</userinput> is the substitute command. The three slashes (/) are used to separate the different text fields. You can use <link linkend='sed_non_slash_delimiter'>other characters</link> to delimit the fields if it would be more helpful.</para>
            <note>
              <para>You can use some advanced piping. In the following example all occurrences of <quote>day</quote> in the <filename>old</filename> file are changed to <quote>night</quote> in the <filename>new</filename> file:</para>
              <programlisting><![CDATA[sed 's/day/night/' < old.txt > new.txt]]></programlisting>
            </note>
            <para>By default, the <command>s</command> command operates on the first match in a line and then moves to the next line. To make sed replace every instance of, say, <quote>day</quote> instead of just the first on each line, we can pass an optional flag to the substitute command: <command>g</command> (for <quote>general</quote>), which is placed after the substitution set:</para>
            <programlisting>&apos;s/<varname>old_word</varname>/<varname>new_word</varname>/g&apos;</programlisting>
            <para>And if we only wanted to change the second instance of <quote>day</quote> that <application>sed</application> finds on each line, then we could use the number <userinput>2</userinput> instead of the <userinput>g</userinput>.</para>
            <para>If we want our search process to ignore case, we can pass it the <quote>i</quote> flag:</para>
            <programlisting>sed &apos;s/day/night/i&apos;</programlisting>
            
            <section sect='sect4'>
              <title>Greedy <application>sed</application></title>
              <para>At each point in its processing, <application>sed</application> will <firstterm>capture</firstterm> the longest matching sequence. A regular expression processor that does this is said to be <firstterm>greedy</firstterm>. You can change this trait by...</para>
            </section> <!-- </sect4> -->
            
            <section sect='sect4'>
              <title>Referencing Matched Text with <application>sed</application></title>
              <para>If we wish to find more complex patterns with regular expressions, we have a number of different methods of referencing the matched pattern in the replacement text. For instance, if we want to match the from the beginning of the line to <quote>tion </quote> we can use the expression:</para>
              <programlisting>sed 's/^.*tion /\* /' <filename>README.txt</filename></programlisting>
              <para>A more flexible way of referencing matched text is to use escaped parentheses to group sections of matched text. This is the common way a regular expression captures text. The following example exchanges the first two words in each line:</para>
              <programlisting>sed 's/\([a-zA-Z0-9][a-zA-Z0-9]*\) \([a-zA-Z0-9][a-zA-Z0-9]*\)/\2 \1/' <filename>README.txt</filename></programlisting>
              <note>When capturing text in <application>sed</application>, remember to escape the round brackets as in the example above.</note>
            </section> <!-- </sect4> -->
            
          </section> <!-- </sect3> -->  <!-- end of "<application>sed</application> Substitutions with <quote>s</quote>" -->
          
          <section sect='sect3' xml:id='sed_non_slash_delimiter'>
            <title>Using a Different Delimiter, not <quote>/</quote>*</title>
          </section> <!-- </sect3> -->

        </section> <!-- </sect2> -->  <!-- end of "Walking Through Some Simple <application>sed</application>" -->
        
        <section sect='sect2'>
          <title><application>sed</application> Programs</title>
          <para>A <application>sed</application> program consists of one or more <application>sed</application> commands, passed in by one or more of the -e, -f, --expression, and --file options, or the first non-option argument if zero of these options are used. This document will refer to <quote>the</quote> <application>sed</application> script; this is understood to mean the in-order catenation of all of the scripts and script-files passed in.</para>
          <para>Commands within a script or script-file can be separated by semicolons (;) or newlines (ASCII 10). Some commands, due to their syntax, cannot be followed by semicolons working as command separators and thus should be terminated with newlines or be placed at the end of a script or script-file. Commands can also be preceded with optional non-significant whitespace characters.</para>
          <para>Each <application>sed</application> command consists of an optional address or address range, followed by a one-character command name and any additional command-specific code.</para>
          <section sect='sect3'>
            <title>Escaped Characters in <application>sed</application></title>
            <para>Sed uses basic regular expressions. In a BRE, the characters $.*[\]^ need to be quoted by preceding them by a backslash, except inside character sets ([…]). Letters, digits and (){}+?| must not be quoted (you can get away with quoting some of these in some implementations). The sequences \(, \), \n, and in some implementations \{, \}, \+, \?, \| and other backslash+alphanumerics have special meanings. You can get away with not quoting $^] in some positions in some implementations.</para>
            <para>Furthermore, you need a backslash before / if it is to appear in the regex. You can choose an alternate character as the delimiter by writing e.g. s~/dir~/replacement~ or \~/dir~p; you&apos;ll need a backslash before the delimiter if you want to include it in the BRE. If you choose a character that has a special meaning in a BRE and you want to include it literally, you&apos;ll need three backslashes; I do not recommend this.</para>
            <para>In a nutshell, for sed &apos;s/…/…/&apos;:</para>
            <itemizedlist>
              <listitem>Write the regex between single quotes.</listitem>
              <listitem>Use &apos;\&apos;&apos; to end up with a single quote in the regex.</listitem>
              <listitem>Put a backslash before $.*/[\]^ and only those characters.</listitem>
            </itemizedlist>
            <para>In the replacement text:</para>
            <itemizedlist>
              <listitem>&amp; and \ need to be quoted, as do the delimiter (usually /) and newlines.</listitem>
              <listitem>\ followed by a digit has a special meaning. \ followed by a letter has a special meaning (special characters) in some implementations, and \ followed by some other character means \c or c depending on the implementation.</listitem>
              <listitem>With single quotes around the argument (sed &apos;s/…/…/&apos;), use &apos;\&apos;&apos; to put a single quote in the replacement text.</listitem>
            </itemizedlist>
            <para>If the regex or replacement text comes from a shell variable, remember that</para>
            <itemizedlist>
              <listitem>the regex is a BRE, not a literal string;</listitem>
              <listitem>in the regex, a newline needs to be expressed as \n;</listitem>
              <listitem>in the replacement text, &amp;, \ and newlines need to be quoted;</listitem>
              <listitem>the delimiter needs to be quoted.</listitem>
              <listitem>Use double quotes for interpolation: sed -e "s/$BRE/$REPL/"</listitem>
            </itemizedlist>
          </section> <!-- </sect3> -->
          <section sect='sect3'>
          <title>Comments in <application>sed</application></title>
          <para>Lines starting with the &apos;#&apos; characters are comments. Newer versions of sed may support comments at the end of the line as well.</para>
          </section> <!-- </sect3> -->
        </section> <!-- </sect2> -->  <!-- end of "application>sed</application> Programs" -->
        
        
        
        <section sect='sect2'>
          <title>How <application>sed</application> Works</title>
          <para><application>sed</application> maintains two data buffers: the <varname>active pattern space</varname>, and the <varname>auxiliary hold space</varname>. Both are initially empty.</para>
          <para><application>sed</application> operates by performing the following cycle on each line of input: first, <application>sed</application> reads one line from the input stream, removes any trailing newline, and places it in the <varname>pattern space</varname>. Then commands are executed; each command can have an address associated to it: addresses are a kind of condition code, and a command is only executed if the condition is verified before the command is to be executed.</para>
          <para>When the end of the script is reached, unless the <userinput>-n</userinput> option is in use, the contents of <varname>pattern space</varname> are printed out to the output stream, adding back the trailing newline if it was removed. Then the next cycle starts for the next input line.</para>
          <para>Unless special commands (like <command>D</command>) are used, the <varname>pattern space</varname> is deleted between two cycles. The <varname>hold space</varname>, on the other hand, keeps its data between cycles (see commands <command>h</command>, <command>H</command>, <command>x</command>, <command>g</command>, and <command>G</command> to move data between both buffers). </para>
        </section> <!-- </sect2> -->  <!-- end of "How <application>sed</application> Works" -->
        
        <section sect='sect2'>
          <title>Selecting lines with <application>sed</application></title>
          <para>Addresses in a <application>sed</application> script can be in any of the following forms:</para>
          <variablelist>
            <varlistentry>
              <term>number</term>
              <listitem>Specifying a line number will match only that line in the input. (Note that <application>sed</application> counts lines continuously across all input files unless -i or -s options are specified.)</listitem>
            </varlistentry>
            <varlistentry>
              <term>first~step</term>
              <listitem>This GNU extension matches every stepth line starting with line first. In particular, lines will be selected when there exists a non-negative n such that the current line-number equals first + (n * step). Thus, to select the odd-numbered lines, one would use 1~2; to pick every third line starting with the second, &apos;2~3&apos; would be used; to pick every fifth line starting with the tenth, use &apos;10~5&apos;; and &apos;50~0&apos; is just an obscure way of saying 50.</listitem>
            </varlistentry>
            <varlistentry>
              <term>$</term>
              <listitem>This address matches the last line of the last file of input, or the last line of each file when the -i or -s options are specified.</listitem>
            </varlistentry>
            <varlistentry>
              <term>/regexp/</term>
              <listitem>
                <para>This will select any line which matches the regular expression regexp. If regexp itself includes any / characters, each must be escaped by a backslash (\).</para>
                <para>The empty regular expression &apos;//&apos; repeats the last regular expression match (the same holds if the empty regular expression is passed to the s command). Note that modifiers to regular expressions are evaluated when the regular expression is compiled, thus it is invalid to specify them together with the empty regular expression.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>\%regexp% (The % may be replaced by any other single character.)</term>
              <listitem>This also matches the regular expression regexp, but allows one to use a different delimiter than /. This is particularly useful if the regexp itself contains a lot of slashes, since it avoids the tedious escaping of every /. If regexp itself includes any delimiter characters, each must be escaped by a backslash (\).</listitem>
            </varlistentry>
            <varlistentry>
              <term>/regexp/I</term>
            </varlistentry>
            <varlistentry>
              <term>\%regexp%I</term>
              <listitem>The I modifier to regular-expression matching is a GNU extension which causes the regexp to be matched in a case-insensitive manner.</listitem>
            </varlistentry>
            <varlistentry>
              <term>/regexp/M</term>
            </varlistentry>
            <varlistentry>
              <term>\%regexp%M</term>
              <listitem>The M modifier to regular-expression matching is a GNU <application>sed</application> extension which causes ^ and $ to match respectively (in addition to the normal behavior) the empty string after a newline, and the empty string before a newline. There are special character sequences (\` and \&apos;) which always match the beginning or the end of the buffer. M stands for multi-line.</listitem>
            </varlistentry>
          </variablelist>
          <para>If no addresses are given, then all lines are matched; if one address is given, then only lines matching that address are matched.</para>
          <para>An <firstterm>address range</firstterm> can be specified by specifying two addresses separated by a comma (,). An address range matches lines starting from where the first address matches, and continues until the second address matches (inclusively). If the second address is a regexp, then checking for the ending match will start with the line following the line which matched the first address: a range will always span at least two lines (except of course if the input stream ends). If the second address is a number less than (or equal to) the line matching the first address, then only the one line is matched.</para>
          <para>GNU <application>sed</application> also supports some special two-address forms; all these are GNU extensions:</para>
          <variablelist>
            <varlistentry>
              <term>0,/regexp/</term>
              <listitem>
                <para>A line number of 0 can be used in an address specification like 0,/regexp/ so that <application>sed</application> will try to match regexp in the first input line too. In other words, 0,/regexp/ is similar to 1,/regexp/, except that if addr2 matches the very first line of input the 0,/regexp/ form will consider it to end the range, whereas the 1,/regexp/ form will match the beginning of its range and hence make the range span up to the second occurrence of the regular expression.</para>
                <para>Note that this is the only place where the 0 address makes sense; there is no 0-th line and commands which are given the 0 address in any other way will give an error.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>addr1,+N</term>
              <listitem>Matches addr1 and the N lines following addr1.</listitem>
            </varlistentry>
            <varlistentry>
              <term>addr1,~N</term>
              <listitem>Matches addr1 and the lines following addr1 until the next line whose input line number is a multiple of N.</listitem>
            </varlistentry>
          </variablelist>
          <para>Appending the ! character to the end of an address specification negates the sense of the match. That is, if the ! character follows an address range, then only lines which do not match the address range will be selected. This also works for singleton addresses, and, perhaps perversely, for the null address.</para>
          <section sect='sect3'>
            <title>Selecting Lines that Match a Pattern</title>
            <para>We can use regular expressions to match only lines that contain a certain pattern. We do this by placing our match pattern between two forward slashes (/) prior to giving the command strings:</para>
            <programlisting><![CDATA[sed '/<para>/s/\&/\&amp;/g' README.txt]]></programlisting>
            <para>If we want to invert an address (operate on any line that does <emphasis>not</emphasis> match a pattern), we can follow the pattern with an exclamation point or bang (!). For example, we can delete any line that is <emphasis>not</emphasis> blank (not terribly useful, but just an example), with the following command:</para>
            <programlisting><![CDATA[sed '/^$/!d' MY_FILE.txt]]></programlisting>
          </section> <!-- </sect3> -->
        </section> <!-- </sect2> -->  <!-- end of "Selecting lines with <application>sed</application>" -->
        
        <section sect='sect2'>
          <title>Multilining in <application>sed</application></title>
          <para>We want to bypass the line-orientedness of <application>sed</application>, don&apos;t we.</para>
          <para>We can delete lines starting at a line that only contains the word <quote>START</quote> until a line reading <quote>END</quote> by issuing the following command:</para>
          <programlisting><![CDATA[sed '/^START$/,/^END$/d' MY_FILE.txt]]></programlisting>
          <para>This will delete everything from the first <quote>START</quote> to the first <quote>END</quote>, and then restart the deletion if it comes across another <quote>START</quote> marker. That is, the <quote>START-END</quote> pairs cannot be nested.</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Supplying Multiple Editing Sequences in <application>sed</application></title>
          <para>We can string various commands to sed by using the <userinput>-e</userinput> option before each command, as in this example:</para>
          <programlisting><![CDATA[sed -e 's/and/\&/' -e 's/people/horses/' MY_FILE.txt]]></programlisting>
          <para>Another approach to stringing commands together is using a semi-colon character (;) to separate distinct commands. This works the same as above, but the <userinput>-e</userinput> is not required.</para>
          <programlisting><![CDATA[sed 's/and/\&/;s/people/horses/' MY_FILE.txt]]></programlisting>
          <para>Note how when using the <userinput>-e</userinput> construct, you need separate single-quotation groups for the different commands. However, when separating commands with a semi-colon, all commands are placed within just one single-quoted command string.</para>
          <para>One piece of functionality that increases <application>sed</application>&apos;s ability to perform multi-line aware edits is what is the <link linkend='sed_hold_buffer'>hold buffer</link>...</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2' xml:id='sed_hold_buffer'>
          <title><application>sed</application>&apos;s Hold Buffer</title>
          <para>One piece of functionality that increases <application>sed</application>&apos;s ability perform multi-line aware edits is what is called the <quote>hold buffer</quote>. The <firstterm>hold buffer</firstterm> is an area of temporary storage that can be modified by certain commands.</para>
          <para>The presence of this extra buffer means that we can store lines while working on other lines, and then operate on each buffer as necessary.</para>
          <para>The following are the commands that affect the holding buffer:</para>
          <variablelist>
            <varlistentry> <term>h</term> <listitem>Copies the current pattern buffer (the line we&apos;re currently matched and working on) into the the holding buffer (this erases the previous contents of the hold buffer).</listitem> </varlistentry>
            <varlistentry> <term>H</term> <listitem>Appends the current pattern buffer to the end of the current holding pattern, separated by a new-line (\n) character.</listitem> </varlistentry>
            <varlistentry> <term>g</term> <listitem>Copies the current holding buffer into the current pattern buffer. The previous pattern buffer is erased.</listitem> </varlistentry>
            <varlistentry> <term>G</term> <listitem>Appends the current holding pattern to the end of the current pattern buffer, separated by a new-line (\n) character.</listitem> </varlistentry>
            <varlistentry> <term>x</term> <listitem>Swap the current pattern and holding buffers.</listitem> </varlistentry>
          </variablelist>
          <warning>The contents of the holding buffer cannot be operated on until it is moved to the pattern buffer in one way or another.</warning>
          <section sect='sect3'>
            <title>Joining Lines with <application>sed</application>&apos;s Hold Buffer</title>
            <para>The following example shows how to join adjacent lines (<application>sed</application> actually has a built-in command that would take care of a lot of this for us: the <quote linkend='sed_N'>N</quote> command, which appends the next line to the current line):</para>
            <programlisting><![CDATA[sed -n '1~2h;2~2{H;g;s/\n/ /;p}' MY_FILE.txt]]></programlisting>
            <para>Let&apos;s analyse this slightly-too-difficult script.</para>
            <para>The first thing to note is that the <userinput>-n</userinput> option is used to suppress automatic printing. <application>sed</application> will only print when we specifically tell it too.</para>
            <para>The first part of the script is <userinput>1~2h</userinput>. The beginning is an address specification meaning to perform the subsequent operation on the first line, and then on every other line afterwards (each odd numbered line). The <userinput>h</userinput> part is the command to copy the matched line into the holding buffer.</para>
            <para>The second half of the command is more complex. Again, it begins with an address specification. This time, it is referring to the even numbered lines (the opposite of the first command).</para>
            <para>The rest of the command is enclosed in braces. This means that the rest of the commands will inherit the address that was just specified. Without the braces, only the <userinput>H</userinput> command would inherit the address, and the rest of the commands would be executed on every line.</para>
            <para>The <userinput>H</userinput> command copies a new-line character, followed by the current pattern buffer, onto the end of the current holding pattern.</para>
            <para>This holding pattern (an odd numbered line, followed by a new-line character, followed by an even numbered line) is then copied back into the pattern buffer (replacing the previous pattern buffer) with the <userinput>g</userinput> command.</para>
            <para>Next, the new-line character is replaced with a space and the line is printed with the <userinput>p</userinput> command.</para>
            
            <note xml:id='sed_N'>
              <para>If you are curious, using the <userinput>N</userinput> command, as we described above, would shorten this considerably. This command will produce the same results that we've just seen:</para>
              <programlisting><![CDATA[sed -n 'N;s/\n/ /p' MY_FILE.txt]]></programlisting>
            </note>

          </section> <!-- </sect3> -->
        </section> <!-- </sect2> -->
        
        <section sect='sect2' xml:id='sed_regexp'>
          <title>Regular Expressions in <application>sed</application></title>
          <para><application>sed</application> uses regular expressions all right and is <link linkend='regexp_greedy'>greedy</link> by default. The way to change this is to...</para>
        </section> <!-- </sect2> -->  <!-- end of "Regular Expressions in <application>sed</application>" -->
        
        <section sect='sect2' xml:id='sed_suppressing_automatic_display_of_input_lines'>
          <title>Suppressing automatic display of input lines</title>
          <para>The default operation of sed is to output every input line. The <userinput>-n</userinput> option suppresses the automatic output.</para>
          <para>When specifying this option, each instruction intended to produce output must contain a print command, as in the following example.</para>
          <programlisting><![CDATA[$ sed -n -e 's/MA/Massachusetts/p' list]]></programlisting>
        </section> <!-- </sect2> -->  <!-- end of "Suppressing automatic display of input lines" -->


      </section> <!-- </sect1> -->  <!-- end of "<application>sed</application>, the Unix Stream EDitor" -->
          
    <section xml:id='m4'>
      <title>Simple Text Transfornations with <application>m4</application></title>
      <para><application>m4</application> is a macro processor, in the sense that it copies its input to the output, expanding macros as it goes. Macros are either builtin or user-defined, and can take any number of arguments. Besides just doing macro expansion, <application>m4</application> has builtin functions for including named files, running shell commands, doing integer arithmetic, manipulating text in various ways, performing recursion, etc. <application>m4</application> can be used either as a front-end to a compiler, or as a macro processor in its own right.</para>
      
      <para>The format of the m4 command is:</para>
      <programlisting>m4 [option...] [macro-definitions...] [input-file...]</programlisting>
      <para>All options begin with <quote>-</quote>, or if long option names are used, with a <quote>--</quote>. A long option name need not be written completely, and unambigous prefix is sufficient.</para>
      
      <section sect='sect2'>
        <title>Text Replacement and File Inputing</title>
        <para> At its most basic, it can be used for simple embedded text replacement. If m4 receives the input</para>
        <programlisting><![CDATA[define(AUTHOR, William Shakespeare)
  A Midsummer Night's Dream
  by AUTHOR]]></programlisting>
        <para>then it outputs</para>
        <literallayout>A Midsummer Night&apos;s Dream
  by William Shakespeare</literallayout>
        <para></para>
        

      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Basics: Simple macros, whitespace, quoting, comments</title>
        <para>M4 is a Unix filter program. Its arguments, if any, are the files it is to read; if none is specified then it reads from stdin. The resulting text is sent to stdout.</para>
        <para>M4 comes with an initial set of built-in macros, often simply called <quote>builtins</quote>. The most basic of these, define, is used to create new macros:</para>
        <programlisting>define(AUTHOR, W. Shakespeare)</programlisting>
        <para>After this definition, the word <wordasword>AUTHOR</wordasword> is recognized as a macro that <emphasis>expands</emphasis> to <quote>W. Shakespeare</quote>.</para>
        <para>The <function>define</function> macro itself – including its two arguments – expands to an empty string, that is, it produces no output. However the newline at the end of the AUTHOR definition above would be echoed to the output. If a blank line added to the output is a problem then you can suppress it using the <quote>delete to newline</quote> macro:</para>
        <programlisting>define(AUTHOR, W. Shakespeare)</programlisting>
        <para>There is no space between the end of the macro and the dnl: if there were then that space would be echoed to the output.</para>
        <para>No whitespace is allowed between a macro name and the opening parenthesis. Any whitespace before the beginning of a parameter is discarded. Thus the following definition is equivalent to the one above:</para>
        <programlisting>define(
     AUTHOR,W. Shakespeare)dnl</programlisting>
   
   
        <section sect='sect3'>
          <title>Definitions in the Command Line</title>
          <para>It&apos;s also possible to pass definitions on the command line using the -D option, for example:</para>
          <programlisting><![CDATA[m4 -DAUTHOR="W. Shakespeare" -DYEAR=1587 input_file.m4]]></programlisting>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Quoting: between Backtick and Apostrophe</title>
          <para>Quoting a string suppresses macro expansion. The default quote characters are the backtick (`) and apostrophe (&apos;). M4 strips off these delimiters before outputting the string. Thus</para>
          <programlisting><![CDATA[define(AUTHOR, W. Shakespeare)dnl
  `AUTHOR' is AUTHOR]]></programlisting>
          <para>produces the output</para>
          <programlisting>AUTHOR is W. Shakespeare</programlisting>
          <note>
            <para>For conciseness, most examples will show m4&apos;s output in the following way:</para>
            <programlisting><![CDATA[`AUTHOR' is AUTHOR       # -> AUTHOR is W. Shakespeare]]></programlisting>
          </note>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Comments on Hash</title>
          <para>In m4, the hash character # is the default opening delimiter of a comment. A comment lasts up to and including the following newline character. The contents of a comment are not examined by m4; however, contrary to what you might expect, comments are echoed to the output. Thus, the previous line, if entered in full, would actually produce the output</para>
          <programlisting><![CDATA[AUTHOR is W. Shakespeare       # -> AUTHOR is W. Shakespeare]]></programlisting>
          
          <para>Opening comment delimiters can be protected by quotes:</para>
          <programlisting><![CDATA[`#' AUTHOR              # -> # W. Shakespeare]]></programlisting>
          <para>Nested quotes are recognized as such:</para>
          <programlisting><![CDATA[``AUTHOR'' is AUTHOR     # -> `AUTHOR' is W. Shakespeare]]></programlisting>
          
          <para>Quoted strings can include newlines:</para>
          <programlisting><![CDATA[define(newline,`line
  break')
  a newline here]]></programlisting>
          <para>outputs</para>
          <programlisting>a line
  break here</programlisting>
          <para>Without a matching opening quote character (`), a closing quote (') is simply echoed to the output. Thus</para>
          <programlisting><![CDATA[`AUTHOR
   ' is AUTHOR.'']]></programlisting>
          <para>produces</para>
          <programlisting><![CDATA[AUTHOR
    is W. Shakespeare.'']]></programlisting>
  
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Nested Parentheses within a Macro&apos;s Argument List</title>
          <para>M4 also understands <firstterm>nested parentheses</firstterm> within a macro&apos;s argument list:</para>
          <programlisting>define(PARENS, ())
  brackets: PARENS         # -> brackets: ()</programlisting>
          <para>Unbalanced parentheses can be quoted to protect them:</para>
          <programlisting><![CDATA[define(LPAREN,`(')
  define(RPAREN,`)')
  LPAREN bracketed RPAREN  # -> ( bracketed )]]></programlisting>
          <note>Unbalanced quote characters are more problematic; a solution is given later.</note>
          
          <bridgehead>Pitfall</bridgehead>
          <para>In fact, quoting of the macro name is also recommended. Consider the following:</para>
          <programlisting><![CDATA[define(LEFT, [)
LEFT                     # -> [
define(LEFT, {)
LEFT                     # -> []]></programlisting>
          <para>Why didn&apos;t the second define work? The problem is that, within the second define, the macro LEFT was expanded before the define macro itself took effect:</para>
          <programlisting>define(LEFT, {)          # -> define([, {) -></programlisting>
          <para>That is, instead of redefining the macro LEFT, a new macro named [ was defined. GNU m4 allows macros to have non-standard names, including punctuation characters like [. In fact, the new macro doesn&apos;t seem to work either:</para>
          <programlisting>[                        # -> [</programlisting>
          <para>That&apos;s because GNU m4 doesn&apos;t ordinarily recognize a macro as a macro unless it has a valid name – that is, a sequence of ASCII letters, underscores, or digits, beginning with an underscore or letter. For example, my_macro1 and _1stMacro are both valid names; my.macro1 and 1stMacro are not. (We will see later how the ability to define macros with invalid names can be useful.)</para>
          <para>Quoting the macro&apos;s arguments avoids this problem:</para>
          <programlisting><![CDATA[define(`LEFT',`[')
LEFT                     # -> [
define(`LEFT',`{')
LEFT                     # -> {]]></programlisting>
          <para>For the same reason, the <function>undefine</function> macro will normally work as expected only if its argument is quoted:</para>
          <programlisting><![CDATA[define(`RIGHT', `]')
  undefine(RIGHT)          # -> undefine(]) ->
  RIGHT                    # -> ]
  undefine(`RIGHT')
  RIGHT                    # -> RIGHT]]></programlisting>
          <para>(Note that undefine does not complain if it is given the name of a non-existent macro, it simply does nothing.)</para>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>How m4 works</title>
        <para>M4&apos;s behaviour can be mystifying. It is best to get an early understanding of how it works. This should save you time figuring out what&apos;s going on when it doesn&apos;t do what you expect.</para>
        <para>First, m4 looks for <firstterm>tokens</firstterm> in its input – roughly speaking, it divides it into quoted strings, macro arguments, names (i.e., identifiers), numbers and other symbols (punctuation characters). Whitespace (including newlines), numbers and punctuation usually mark token boundaries; exceptions are when they appear within a quoted string or a macro argument.</para>
        <programlisting><![CDATA[define( `Version2', A – 1 )99Version2:Version2_   Version22
# -> 99A – 1 :Version2_   Version22]]></programlisting>
        <para>Above, since a valid name can include digits but cannot begin with one, the names seen after the definition are Version2, Version2_, and Version22; only the first of these corresponds to a defined macro.</para>
         
        <para>Continuing:</para>
        <programlisting><![CDATA[Version2(arg1, arg2) Version2 (junk) garbage(trash)Version2()
# -> A – 1  A – 1  (junk) garbage(trash)A – 1]]></programlisting>
        <para>If the name of a macro is followed immediately by a &apos;(&apos; then m4 reads in a list of arguments. The Version2 macro we have defined ignores its arguments -- but that doesn&apos;t matter to m4: it swallows up the arguments and outputs only the macro&apos;s expansion <quote>A – 1 </quote>.</para>
          
        <para>In general, m4 passes input tokens and separators straight through to the output, making no change except to remove the quotes surrounding quoted string tokens. When it encounters a macro name, however, it stops echoing to the output. Instead:</para>
        <itemizedlist>
          <listitem>it reads in the macro&apos;s arguments (if any)</listitem>
          <listitem>it determines the expansion of the macro and inserts this expansion at the beginning of its input</listitem>
          <listitem>m4 continues scanning the input, starting with the expansion</listitem>
        </itemizedlist>
        <para>If while reading in a macro&apos;s arguments, m4 encounters another macro then it repeats this process for the nested macro.</para>
          
        <para>An example makes this clearer:</para>
        <programlisting><![CDATA[define(`definenum', `define(`num', `99')')
num                      # -> num
definenum num            # -> define(`num', `99') num ->  99]]></programlisting>
        <para>As soon as m4 gets to the end of “definenum” on the last line above, it recognizes it as a macro and replaces it with “define(`num', 99)” -- however, instead of outputting this expansion, it sticks it back on the beginning of its input buffer and starts again from there. Thus, the next thing it reads in is “define(`num', 99)”. As the define macro expands to an empty string, nothing is output; however, the new macro num is now defined. Then m4 reads in a space which it echoes to the output, followed by the macro num, which it replaces with its expansion. The last line therefore results in the output “ 99”.</para>
        <para>Unless a nested macro is quoted, it is expanded immediately:</para>
        <programlisting><![CDATA[define(`definenum', define(`num', `99'))
num                      # -> 99
definenum                # ->]]></programlisting>
        <para>Here, when m4 reads in the nested define macro, it immediately defines num; it also replaces the macro “define(`num', `99')” with its expansion – an empty string. Thus, “definenum” ends up being defined as an empty string.</para>
        
          <bridgehead>Arbitrary nesting</bridgehead>
          <para>Arbitrary nesting is possible -- with (ordinarily) an extra layer of protective quotes at each level of nesting:</para>
          <programlisting><![CDATA[define(`definedefineX',`define(`defineX',`define(`X',`xxx')')')
defineX X           # -> defineX X
definedefineX X     # ->  X
defineX X           # ->  xxx]]></programlisting>
          <para>If rescanning of a macr&apos;s expansion is not what you want then just add more quotes:</para>
          <programlisting><![CDATA[define(`stmt',``define(`Y',`yyy')'')
stmt                # -> define(`Y',`yyy')
Y                   # -> Y]]></programlisting>
          <para>Above, the outermost quotes are removed when the nested macro is being read in – so stmt expands first to `define(`Y',`yyy')'; m4 then rescans this as a string token and removes the second layer of quotes before sending it to the output.</para>
          
        <para>Now consider the definition</para>
        <programlisting><![CDATA[define(`plus', `+')]]></programlisting>
        <para>Suppose we want to use this plus macro twice in succession with no intervening space. Clearly, plusplus doesn&apos;t work – it is read as a single token, plusplus, not two plus tokens:</para>
        <programlisting><![CDATA[plusplus       # -> plusplus]]></programlisting>
        <para>We can use an argument list as a separator:</para>
        <programlisting>plus()plus     # -> ++</programlisting>
        <para>But watch what happens with an extra level of indirection:</para>
        <programlisting><![CDATA[define(`oper', `plus')
oper()oper     # -> plusoper]]></programlisting>
        <para>Here, oper() expands to plus; but then rescanning of the input starts from the beginning of the expansion. Thus, the next thing read in is the token plusoper. As it doesn&apos;t correspond to a macro, it is copied straight to the output.</para>
        <para>The problem can be solved by adding an empty quote as a separator:</para>
        <programlisting><![CDATA[oper`'oper     # -> plus`'oper -> +`'oper -> ... -> ++]]></programlisting>
        <para>It is a good idea to include such a separator in macro definitions as a matter of policy:</para>
        <programlisting><![CDATA[define(`oper',`plus`'')
oper()oper     # -> plus`'oper -> +`'oper -> +oper -> ... -> ++]]></programlisting> 
        
        <bridgehead>Infinite Loops</bridgehead>
        <para>If ever m4 seems to hang or stop working, it is probably because a faulty macro has sent it into an infinite loop:</para>
        <programlisting><![CDATA[define(`Bye', `Bye for now')
Hello.         # -> Hello.
Bye.           # -> Bye for now. -> Bye for now for now. -> ...]]></programlisting>
        <para>Such an error is not always this obvious: the cycle may involve more than one macro.</para>
        
        <para>Finally, look at this example:</para>
        <programlisting><![CDATA[define(`args', ``NAME', `Marie'')
define(args)                   # -> define(`NAME', `Marie') ->
NAME                           # -> Marie

args(define(`args',`Rachel'))  # -> args() -> `NAME', `Marie' -> NAME, Marie
args                           # -> Rachel]]></programlisting>
        <para>In the second part of the example, although args doesn&apos;t take an argument, we can still pass it one. In this case the argument redefines the macro that&apos;s currently being expanded. However, it is the expansion that was in force when the macro identifier was read in that is output.</para>
        <para>Similarly, it is possible to define a self-modifying macro or even a self-destructing macro:</para>
        <programlisting><![CDATA[define(`msg', `undefine(`msg')Secret message.')
msg            # -> Secret message.
msg            # -> msg]]></programlisting>
        <note>Recursive macros can also be defined.</note>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Including files</title>
        <para>include(filename.m4) causes the contents of the named file to be read and interpreted as if it was part of the current file (just like #include in the C preprocessor).</para>
        
        <para>GNU m4 allows for an include file search path. To specify directories to be searched for include files use the -I option on the command line, e.g.,</para>
        <programlisting>m4 -I ~/mydir -Ilocaldir/subdir</programlisting>
        <para>or use the environment variable M4PATH, e.g. (bash shell)</para>
        <programlisting><![CDATA[export M4PATH=~/mydir:localdir/subdir
m4 test.m4]]></programlisting> 
        <para>sinclude(nonexistentfile) (silent include) is a version of include that doesn&apos;t complain if the file doesn&apos;t exist.</para>
        
        <para>To include a file uninterpreted, GNU m4 allows undivert to be passed a filename argument. If <filename>inc.m4</filename> contains:</para>
        <programlisting><![CDATA[define(`planet',`jupiter')]]></programlisting>
        <para>then</para>
        <programlisting><![CDATA[undivert(`inc.m4')       # -> define(`planet',`jupiter')
planet                   # -> planet
include(`inc.m4')planet  # -> jupiter]]></programlisting>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>Conditionals</title>
        <para>ifdef(`a',b) outputs b if a is defined; ifdef(`a',b,c) outputs c if a is not defined. The definition being tested may be empty, e.g.,</para>
        <programlisting><![CDATA[define(`def')
`def' is ifdef(`def', , not )defined.
# -> def is defined.]]></programlisting>
        
        <para>ifelse(a,b,c,d) compares the strings a and b. If they match, the macro expands to string c; if not, string d.</para>
        
        <para>This can be extended to multiple else-ifs:</para>
        <programlisting>ifelse(a,b,c,d,e,f,g)</programlisting>
        <para>means that if a matches b, then return (expand to) c; else if d matches e, then return f; else return g. In other words, it&apos;s shorthand for</para>
        <programlisting>ifelse(a,b,c,ifelse(d,e,f,g))</programlisting>
        <para></para>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>Defining macros with arguments; a recursive macro</title>
        <para>In standard m4 (Unix), a macro can have up to 9 arguments; within the macro definition, these are referenced as $1 ... $9. (GNU m4 has no fixed limit on the number of arguments.) Arguments default to the empty string, e.g., if 2 arguments are passed then $3 will be empty.</para>
        <para>Going in at the deep end, here is a reimplementation of the len builtin (replacing it) as a recursive macro.</para>
        <programlisting><![CDATA[define(`len',`ifelse($1,,0,`eval(1+len(substr($1,1)))')')]]></programlisting>
        <para>In a macro definition, argument references like $1 expand immediately, regardless of surrounding quotes. For example, len(`xyz') above would expand (at the first step) to</para>
        <programlisting><![CDATA[ifelse(xyz,,0,`eval(1+len(substr(xyz,1)))')')]]></programlisting>
        <para>Where necessary, this immediate expansion can be prevented by breaking up the reference with inside quotes, e.g., $`'1.</para>
        
        <para>The name of the macro is given by $0; $# expands to the number of arguments. Note in the following example that empty parentheses are treated as delimiting a single argument: an empty string:</para>
        <programlisting><![CDATA[define(`count', ``$0': $# args')
count        # -> count: 0 args
count()      # -> count: 1 args
count(1)     # -> count: 1 args
count(1,)    # -> count: 2 args]]></programlisting>
        <para>$* expands to the list of arguments; $@ does the same but protects each one with quotes to prevent them being expanded:</para>
        <programlisting><![CDATA[define(`list',`$`'*: $*; $`'@: $@')
list(len(`abc'),`len(`abc')')
# -> $*: 3,3; $@: 3,len(`abc')]]></programlisting> 
        <para>A common requirement is to process a list of arguments where we don&apos;t know in advance how long the list will be. Here, the shift macro comes in useful – it expands to the same list of arguments with the first one removed:</para>
        <programlisting><![CDATA[shift(1,2, `abc', 4)       # -> 2,abc,4
shift(one)                 # ->
define(`echolast',`ifelse(eval($#<2),1,`$1`'',
  `echolast(shift($@))')')
echolast(one,two,three)    # -> three]]></programlisting>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>***</title>
        
        <para></para>
        
        <para></para>
        
        <para></para>
        
        <para></para>
        
        <para></para>
        
        <para></para>
        
        <para></para>
        
        <para></para>
        
        <para></para>
        
        <para></para>
        
        <para></para>
      </section> <!-- </sect2> -->
    
      <section sect='sect2'>
        <title>Specifying input files on the command line</title>
        <para>The remaining arguments on the command line are taken to be input file names. If no names are present, standard input is read. A file name of &apos;-&apos; is taken to mean standard input. It is conventional, but not required, for input files to end in &apos;.m4&apos;.</para>
        <para>The input files are read in the sequence given. Standard input can be read more than once, so the file name &apos;-&apos; may appear multiple times on the command line; this makes a difference when input is from a terminal or other special file type.</para>
      </section> <!-- </sect2> -->
    
      <section sect='sect2'>
        <title>Lexical and syntactic conventions</title>
        <para>As m4 reads its input, it separates it into tokens. A token is either a name, a quoted string, or any single character, that is not a part of either a name or a string. Input to m4 can also contain comments. GNU m4 does not yet understand multibyte locales; all operations are byte-oriented rather than character-oriented (although if your locale uses a single byte encoding, such as ISO-8859-1, you will not notice a difference). However, m4 is eight-bit clean, so you can use non-ASCII characters in quoted strings (see section Changing the quote characters), comments (see section Changing the comment delimiters), and macro names (see section Indirect call of macros), with the exception of the NUL character (the zero byte &apos;\0&apos;).</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>File inclusion in <application>m4</application></title>
        <para><application>m4</application> allows you to include named files at any point in the input.</para>
      
        <section sect='sect3'>
          <title>Including named files</title>
          <para>There are two builtin macros in m4 for including files:</para>
          <para>Builtin: include (file)</para>
          <para>Builtin: sinclude (file)</para>
          <para>Both macros cause the file named file to be read by <application>m4</application>. When the end of the file is reached, input is resumed from the previous input file. The expansion of include and sinclude is therefore the contents of file.</para>
          <para>If file does not exist, is a directory, or cannot otherwise be read, the expansion is void, and include will fail with an error while sinclude is silent. The empty string counts as a file that does not exist. The macros include and sinclude are recognized only with parameters.</para>
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->  <!-- end of "Simple Text Transfornations with <application>m4</application>" -->
      
    
    
    
    <section xml:id='awk'>
      <title>Programming Text with <application>awk</application></title>
      <para>AWK is a domain-specific language designed for text processing and typically used as a data extraction and reporting tool. It is a standard feature of most Unix-like operating systems.</para>
      <para>The AWK language is a data-driven scripting language consisting of a set of actions to be taken against streams of textual data – either run directly on files or used as part of a pipeline – for purposes of extracting or transforming text, such as producing formatted reports. The language extensively uses the string datatype, <link linkend='associative_containers'>associative arrays</link> (that is, arrays indexed by key strings), and <link linkend='regexp'>regular expressions</link>. While AWK has a limited intended application domain and was especially designed to support one-liner programs, the language is Turing-complete, and even the early Bell Labs users of AWK often wrote well-structured large AWK programs.</para>
      <para>AWK was created at Bell Labs in the 1970s, and its name is derived from the surnames of its authors—Alfred Aho, Peter Weinberger, and Brian Kernighan.</para>
      
      <section sect='sect2'>
        <title>Structure of AWK programs</title>
        <blockquote>
          <para>AWK is a language for processing text files. A file is treated as a sequence of records, and by default each line is a record. Each line is broken up into a sequence of fields, so we can think of the first word in a line as the first field, the second word as the second field, and so on. An AWK program is a sequence of pattern-action statements. AWK reads the input a line at a time. A line is scanned for each pattern in the program, and for each pattern that matches, the associated action is executed.</para>
          <attribution>Alfred V. Aho</attribution>
        </blockquote>
        
        <para>An AWK program is a series of pattern action pairs, written as:</para>
        <programlisting>condition { action }
condition { action }
...</programlisting>
        <para>where <varname>condition</varname> is typically an expression and <varname>action</varname> is a series of commands. The input is split into records, where by default records are separated by newline characters so that the input is split into lines. The program tests each record against each of the conditions in turn, and executes the action for each expression that is true. Either the condition or the action may be omitted. The condition defaults to matching every record. The default action is to print the record. This is the same pattern-action structure as <application linkend='sed'>sed</application>.</para>
        <para>In addition to a simple AWK expression, such as <userinput>foo == 1</userinput> or <userinput>/^foo/</userinput>, the condition can be <userinput>BEGIN</userinput> or <userinput>END</userinput> causing the action to be executed before or after all records have been read, or <userinput><varname>pattern1</varname>, <varname>pattern2</varname></userinput> which matches the range of records starting with a record that matches <varname>pattern1</varname> up to and including the record that matches <varname>pattern2</varname> before again trying to match against <varname>pattern1</varname> on future lines.</para>
        
        <para>In addition to normal arithmetic and logical operators, AWK expressions include the tilde operator, <userinput>~</userinput>, which matches a regular expression against a string. As handy syntactic sugar, <userinput>/regexp/</userinput> without using the tilde operator matches against the current record; this syntax derives from sed, which in turn inherited it from the ed editor, where <userinput>/</userinput> is used for searching. This syntax of using slashes as delimiters for regular expressions was subsequently adopted by Perl and ECMAScript, and is now quite common. The tilde operator was also adopted by Perl, but has not seen as wide use.</para>
        <section sect='sect3'>
          <title>Commands</title>
          <para>AWK commands are the statements that are substituted for action in the examples above. AWK commands can include function calls, variable assignments, calculations, or any combination thereof. AWK contains built-in support for many functions; many more are provided by the various flavors of AWK. Also, some flavors support the inclusion of dynamically linked libraries, which can also provide more functions.</para>
          <section sect='sect4'>
            <title>The print command</title>
            <para>The print command is used to output text. The output text is always terminated with a predefined string called the output record separator (ORS) whose default value is a newline. The simplest form of this command is:</para>
            <programlisting>print</programlisting>
            <para>This displays the contents of the current record. In AWK, records are broken down into fields, and these can be displayed separately:</para>
            <programlisting>print $1</programlisting>
            <para>Displays the first field of the current record</para>
            <programlisting>print $1, $3</programlisting>
            <para>Displays the first and third fields of the current record, separated by a predefined string called the output field separator (OFS) whose default value is a single space character</para>
            <para>Although these fields ($X) may bear resemblance to variables (the $ symbol indicates variables in Perl), they actually refer to the fields of the current record. A special case, $0, refers to the entire record. In fact, the commands <userinput>print</userinput> and <userinput>print $0</userinput> are identical in functionality.</para>
            <para>The print command can also display the results of calculations and/or function calls:</para>
            <programlisting>(pattern)
{
   print 3+2
   print foobar(3)
   print foobar(variable)
   print sin(3-2)
}</programlisting>
            <para>Output may be sent to a file:</para>
            <programlisting>(pattern)
{
   print "expression" > "file name"
}</programlisting>
            <para>or through a pipe:</para>
            <programlisting><![CDATA[(pattern)
{
   print "expression" | "command"
}]]></programlisting>

          </section> <!-- </sect4> -->

        </section> <!-- </sect3> -->

        <section sect='sect3'>
          <title>Built-in variables</title>
          <para>Awk&apos;s built-in variables include the field variables: $1, $2, $3, and so on ($0 represents the entire record). They hold the text or values in the individual text-fields in a record.</para>
          <para>Other variables include:</para>
          <itemizedlist>
            <listitem><varname>NR</varname>: Keeps a current count of the number of input records.</listitem>
            <listitem><varname>NF</varname>: Keeps a count of the number of fields in an input record. The last field in the input record can be designated by $NF.</listitem>
            <listitem><varname>FILENAME</varname>: Contains the name of the current input-file.</listitem>
            <listitem><varname>FS</varname>: Contains the "field separator" character used to divide fields on the input record. The default, "white space", includes any space and tab characters. FS can be reassigned to another character to change the field separator.</listitem>
            <listitem><varname>RS</varname>: Stores the current "record separator" character. Since, by default, an input line is the input record, the default record separator character is a "newline".</listitem>
            <listitem><varname>OFS</varname>: Stores the "output field separator", which separates the fields when Awk prints them. The default is a "space" character.</listitem>
            <listitem><varname>ORS</varname>: Stores the "output record separator", which separates the output records when Awk prints them. The default is a "newline" character.</listitem>
            <listitem><varname>OFMT</varname>: Stores the format for numeric output. The default format is "%.6g".</listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Variables and syntax</title>
          <para>Variable names can use any of the characters [A-Za-z0-9_], with the exception of language keywords. The operators + - * / represent addition, subtraction, multiplication, and division, respectively. For string concatenation, simply place two variables (or string constants) next to each other. It is optional to use a space in between if string constants are involved, but two variable names placed adjacent to each other require a space in between. Double quotes delimit string constants. Statements need not end with semicolons. Finally, comments can be added to programs by using # as the first character on a line.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>User-defined functions</title>
          <para>In a format similar to C, function definitions consist of the keyword function, the function name, argument names and the function body. Here is an example of a function.</para>
          <programlisting><![CDATA[function add_three (number) {
    return number + 3
}]]></programlisting>
          <para>This statement can be invoked as follows:</para>
          <programlisting><![CDATA[(pattern)
{
   print add_three(36)     # Outputs '''39'''
}]]></programlisting>
          <para>Functions can have variables that are in the local scope. The names of these are added to the end of the argument list, though values for these should be omitted when calling the function. It is convention to add some whitespace in the argument list before the local variables, to indicate where the parameters end and the local variables begin.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Sample applications</title>
          
          <section sect='sect4'>
            <title>Hello World</title>
            <para>Here is the customary <citetitle>Hello, world</citetitle> program written in AWK:</para>
            <programlisting><![CDATA[BEGIN { print "Hello, world!" }]]></programlisting>
            <para>Note that an explicit exit statement is not needed here; since the only pattern is BEGIN, no command-line arguments are processed.</para>
          </section> <!-- </sect4> -->
          
          <section sect='sect4'>
            <title>Print lines longer than 80 characters</title>
            <para>Print all lines longer than 80 characters. Note that the default action is to print the current line.</para>
            <programlisting><![CDATA[length($0) > 80]]></programlisting>
          </section> <!-- </sect4> -->
          
          <section sect='sect4'>
            <title>Print a count of words</title>
            <para>Count words in the input and print the number of lines, words, and characters (like wc):</para>
            <programlisting><![CDATA[{
    w += NF
    c += length + 1
}
END { print NR, w, c }]]></programlisting>
            <para>As there is no pattern for the first line of the program, every line of input matches by default, so the increment actions are executed for every line. Note that w += NF is shorthand for w = w + NF.</para>
          </section> <!-- </sect4> -->
          
          <section sect='sect4'>
            <title>Sum last word</title>
            <programlisting><![CDATA[{ s += $NF }
END { print s + 0 }]]></programlisting>
            <para>s is incremented by the numeric value of $NF, which is the last word on the line as defined by AWK&apos;s field separator (by default, white-space). NF is the number of fields in the current line, e.g. 4. Since $4 is the value of the fourth field, $NF is the value of the last field in the line regardless of how many fields this line has, or whether it has more or fewer fields than surrounding lines. $ is actually a unary operator with the highest operator precedence. (If the line has no fields, then NF is 0, $0 is the whole line, which in this case is empty apart from possible white-space, and so has the numeric value 0.)</para>
            <para>At the end of the input the END pattern matches, so s is printed. However, since there may have been no lines of input at all, in which case no value has ever been assigned to s, it will by default be an empty string. Adding zero to a variable is an AWK idiom for coercing it from a string to a numeric value. (Concatenating an empty string is to coerce from a number to a string, e.g. <userinput><![CDATA[s ""]]></userinput>. Note, there&apos;s no operator to concatenate strings, they&apos;re just placed adjacently.) With the coercion the program prints <userinput>0</userinput> on an empty input, without it an empty line is printed.</para>
          </section> <!-- </sect4> -->
          
          <section sect='sect4'>
            <title>Match a range of input lines</title>
            <programlisting><![CDATA[NR % 4 == 1, NR % 4 == 3 { printf "%6d  %s\n", NR, $0 }]]></programlisting>
            <para>The action statement prints each line numbered. The printf function emulates the standard C printf and works similarly to the print command described above. The pattern to match, however, works as follows: NR is the number of records, typically lines of input, AWK has so far read, i.e. the current line number, starting at 1 for the first line of input. % is the modulo operator. NR % 4 == 1 is true for the 1st, 5th, 9th, etc., lines of input. Likewise, NR % 4 == 3 is true for the 3rd, 7th, 11th, etc., lines of input. The range pattern is false until the first part matches, on line 1, and then remains true up to and including when the second part matches, on line 3. It then stays false until the first part matches again on line 5.</para>
            <para>Thus, the program prints lines 1,2,3, skips line 4, and then 5,6,7, and so on. For each line, it prints the line number (on a 6 character-wide field) and then the line contents. For example, when executed on this input:</para>
            <programlisting>Rome
Florence
Milan
Naples
Turin
Venice</programlisting>
            <para>The previous program prints:</para>
            <programlisting>     1 Rome
     2 Florence
     3 Milan
     5 Turin
     6 Venice</programlisting>
          </section> <!-- </sect4> -->
 
          <section sect='sect4'>
            <title>Printing the initial or the final part of a file</title>
            <para>As a special case, when the first part of a range pattern is constantly true, e.g. 1, the range will start at the beginning of the input. Similarly, if the second part is constantly false, e.g. 0, the range will continue until the end of input. For example,</para>
            <programlisting>/^--cut here--$/, 0</programlisting>
            <para>prints lines of input from the first line matching the regular expression ^--cut here--$, that is, a line containing only the phrase <quote>--cut here--</quote>, to the end.</para>
          </section> <!-- </sect4> -->
          
          <section sect='sect4'>
            <title>Calculate word frequencies</title>
            <bridgehead>Word frequency using associative arrays:</bridgehead>
            <programlisting><![CDATA[BEGIN {
    FS="[^a-zA-Z]+"
}
{
    for (i=1; i<=NF; i++)
          words[tolower($i)]++
}
END {
    for (i in words)
         print i, words[i]
}]]></programlisting>
            <para>The BEGIN block sets the field separator to any sequence of non-alphabetic characters. Note that separators can be regular expressions. After that, we get to a bare action, which performs the action on every input line. In this case, for every field on the line, we add one to the number of times that word, first converted to lowercase, appears. Finally, in the END block, we print the words with their frequencies. The line</para>
            <programlisting>for (i in words)</programlisting>
            <para>creates a loop that goes through the array words, setting i to each subscript of the array. This is different from most languages, where such a loop goes through each value in the array. The loop thus prints out each word followed by its frequency count. tolower was an addition to the One True awk (see below) made after the book was published.</para>
          </section> <!-- </sect4> -->
          
          <section sect='sect4'>
            <title>Match pattern from command line</title>
            <para>This program can be represented in several ways. The first one uses the Bourne shell to make a shell script that does everything. It is the shortest of these methods:</para>
            <programlisting><![CDATA[#!/bin/sh

pattern="$1"
shift
awk '/'"$pattern"'/ { print FILENAME ":" $0 }' "$@"]]></programlisting>
            <para>The $pattern in the awk command is not protected by single quotes so that the shell does expand the variable but it needs to be put in double quotes to properly handle patterns containing spaces. A pattern by itself in the usual way checks to see if the whole line ($0) matches. FILENAME contains the current filename. awk has no explicit concatenation operator; two adjacent strings concatenate them. $0 expands to the original unchanged input line.</para>
            
            <para>There are alternate ways of writing this. This shell script accesses the environment directly from within awk:</para>
            <programlisting><![CDATA[#!/bin/sh

export pattern="$1"
shift
awk '$0 ~ ENVIRON["pattern"] { print FILENAME ":" $0 }' "$@"]]></programlisting>
            <para>This is a shell script that uses ENVIRON, an array introduced in a newer version of the One True awk after the book was published. The subscript of ENVIRON is the name of an environment variable; its result is the variable&apos;s value. This is like the getenv function in various standard libraries and POSIX. The shell script makes an environment variable pattern containing the first argument, then drops that argument and has awk look for the pattern in each file.</para>
            <para><userinput>~</userinput> checks to see if its left operand matches its right operand; !~ is its inverse. Note that a regular expression is just a string and can be stored in variables.</para>
            
            <para>The next way uses command-line variable assignment, in which an argument to awk can be seen as an assignment to a variable:</para>
            <programlisting><![CDATA[#!/bin/sh

pattern="$1"
shift
awk '$0 ~ pattern { print FILENAME ":" $0 }' "pattern=$pattern" "$@"]]></programlisting>
            <para>Or You can use the <userinput>-v var=value</userinput> command line option (e.g. <userinput><![CDATA[awk -v pattern="$pattern" ...]]></userinput>).</para>
            
            <para>Finally, this is written in pure awk, without help from a shell or without the need to know too much about the implementation of the awk script (as the variable assignment on command line one does), but is a bit lengthy:</para>
            <programlisting><![CDATA[BEGIN {
    pattern = ARGV[1]
    for (i = 1; i < ARGC; i++) # remove first argument
        ARGV[i] = ARGV[i + 1]
    ARGC--
    if (ARGC == 1) { # the pattern was the only thing, so force read from standard input (used by book)
        ARGC = 2
        ARGV[1] = "-"
    }
}
$0 ~ pattern { print FILENAME ":" $0 }]]></programlisting>
            <para>The BEGIN is necessary not only to extract the first argument, but also to prevent it from being interpreted as a filename after the BEGIN block ends. ARGC, the number of arguments, is always guaranteed to be ≥1, as ARGV[0] is the name of the command that executed the script, most often the string "awk". Also note that ARGV[ARGC] is the empty string, "". # initiates a comment that expands to the end of the line.</para>
            <para>Note the if block. awk only checks to see if it should read from standard input before it runs the command. This means that</para>
            <programlisting><![CDATA[awk 'prog']]></programlisting>
            <para>only works because the fact that there are no filenames is only checked before prog is run! If you explicitly set ARGC to 1 so that there are no arguments, awk will simply quit because it feels there are no more input files. Therefore, you need to explicitly say to read from standard input with the special filename -.</para>
          </section> <!-- </sect4> -->
          
          <section sect='sect4'>
            <title>Self-contained AWK scripts</title>
            <para>On Unix-like operating systems self-contained AWK scripts can be constructed using the shebang syntax.</para>
            <para>For example, a script that prints the content of a given file may be built by creating a file named print.awk with the following content:</para>
            <programlisting>#!/usr/bin/awk -f
{ print $0 }</programlisting>
            <para>It can be invoked with: <userinput>./print.awk <varname>filename</varname></userinput></para>
            <para>The -f tells AWK that the argument that follows is the file to read the AWK program from, which is the same flag that is used in sed. Since they are often used for one-liners, both these programs default to executing a program given as a command-line argument, rather than a separate file.</para>
          </section> <!-- </sect4> -->
          
            
            <para></para>
            
            <para></para>
 
        </section> <!-- </sect3> -->

      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    
    <section xml:id='pandoc'>
      <title>Transforming Between Several Formats With <application>Pandoc</application></title>
      <para><application>Pandoc</application> is a Haskell library for converting from one markup format to another, and a command-line tool that uses this library. It can read markdown and (subsets of) HTML, reStructuredText, LaTeX, DocBook, MediaWiki markup, Haddock markup, OPML, and Textile, and it can write markdown, reStructuredText, HTML, LaTeX (including rendering as plain PDF or beamer slide shows), ConTeXt, DocBook, OPML, OpenDocument, ODT, Word docx, RTF, MediaWiki, Textile, groff man pages, GNU Texinfo, plain text, Emacs Org-Mode, AsciiDoc, EPUB (v2 or v3), FictionBook2, and several kinds of HTML/javascript slide shows (S5, Slidy, Slideous, DZSlides, reveal.js).</para>
      <para><application>Pandoc</application> extends standard markdown syntax with footnotes, embedded LaTeX, definition lists, tables, and other features. A compatibility mode is provided for those who need a drop-in replacement for Markdown.pl.</para>
      <para>In contrast to existing tools for converting markdown to HTML, which use regex substitutions, pandoc has a modular design: it consists of a set of readers, which parse text in a given format and produce a native representation of the document, and a set of writers, which convert this native representation into a target format. Thus, adding an input or output format requires only adding a reader or writer.</para>
      <section sect='sect2'>
        <title>Examples</title>
        <variablelist>
          <varlistentry>
            <term>HTML fragment</term>
            <listitem><userinput>pandoc  MANUAL.txt -o example1.html</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Standalone HTML file</term>
            <listitem><userinput>pandoc  -s MANUAL.txt -o example2.html</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>HTML with table of contents, CSS, and custom footer</term>
            <listitem><userinput>pandoc  -s --toc -c pandoc.css -A footer.html MANUAL.txt -o example3.html</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>LaTeX</term>
            <listitem><userinput>pandoc  -s MANUAL.txt -o example4.tex</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>From LaTeX to markdown</term>
            <listitem><userinput>pandoc  -s example4.tex -o example5.text</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>reStructuredText</term>
            <listitem><userinput>pandoc  -s -t rst --toc MANUAL.txt -o example6.text</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Rich text format (RTF)</term>
            <listitem><userinput>pandoc  -s MANUAL.txt -o example7.rtf</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Beamer slide show</term>
            <listitem><userinput>pandoc  -t beamer SLIDES -o example8.pdf</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>DocBook XML</term>
            <listitem><userinput>pandoc  -s -t docbook MANUAL.txt -o example9.db</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Man page</term>
            <listitem><userinput>pandoc  -s -t man pandoc.1.md -o example10.1</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>ConTeXt</term>
            <listitem><userinput>pandoc  -s -t context MANUAL.txt -o example11.tex</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Converting a web page to markdown</term>
            <listitem><userinput>pandoc  -s -r html http://www.gnu.org/software/make/ -o example12.text</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>From markdown to PDF</term>
            <listitem><userinput>pandoc  MANUAL.txt --pdf-engine=xelatex -o example13.pdf</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>PDF with numbered sections and a custom LaTeX header</term>
            <listitem><userinput>pandoc  -N --template=mytemplate.tex --variable mainfont="Palatino" --variable sansfont="Helvetica" --variable monofont="Menlo" --variable fontsize=12pt --variable version=2.0 MANUAL.txt --pdf-engine=xelatex --toc -o example14.pdf</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>HTML slide shows</term>
            <listitem>
              <programlisting>pandoc  -s --mathml -i -t dzslides SLIDES -o example16a.html</programlisting>
              <programlisting>pandoc  -s --webtex -i -t slidy SLIDES -o example16b.html</programlisting>
              <programlisting>pandoc  -s --mathjax -i -t revealjs SLIDES -o example16d.html</programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>TeX math in HTML</term>
            <listitem>
            <programlisting>pandoc  math.text -s -o mathDefault.html</programlisting>
            <programlisting>pandoc  math.text -s --mathml  -o mathMathML.html</programlisting>
            <programlisting>pandoc  math.text -s --webtex  -o mathWebTeX.html</programlisting>
            <programlisting>pandoc  math.text -s --mathjax -o mathMathJax.html</programlisting>
            <programlisting>pandoc  math.text -s --katex   -o mathKaTeX.html</programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Syntax highlighting of delimited code blocks</term>
            <listitem>
              <programlisting>pandoc  code.text -s --highlight-style pygments -o example18a.html</programlisting>
              <programlisting>pandoc  code.text -s --highlight-style kate -o example18b.html</programlisting>
              <programlisting>pandoc  code.text -s --highlight-style monochrome -o example18c.html</programlisting>
              <programlisting>pandoc  code.text -s --highlight-style espresso -o example18d.html</programlisting>
              <programlisting>pandoc  code.text -s --highlight-style haddock -o example18e.html</programlisting>
              <programlisting>pandoc  code.text -s --highlight-style tango -o example18f.html</programlisting>
              <programlisting>pandoc  code.text -s --highlight-style zenburn -o example18g.html</programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>GNU Texinfo, converted to info, HTML, and PDF formats</term>
            <listitem>
              <programlisting>pandoc  MANUAL.txt -s -o example19.texi</programlisting>
              <programlisting>makeinfo --no-validate --force example19.texi -o example19.info</programlisting>
              <programlisting>makeinfo --no-validate --force example19.texi --html -o example19</programlisting>
              <programlisting>texi2pdf example19.texi  # produces example19.pdf</programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>OpenDocument XML</term>
            <listitem><userinput>pandoc  MANUAL.txt -s -t opendocument -o example20.xml</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>ODT (OpenDocument Text, readable by OpenOffice)</term>
            <listitem><userinput>pandoc  MANUAL.txt -o example21.odt</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>MediaWiki markup</term>
            <listitem><userinput>pandoc  -s -t mediawiki --toc MANUAL.txt -o example22.wiki</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>EPUB ebook</term>
            <listitem><userinput>pandoc  MANUAL.txt -o MANUAL.epub</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Markdown citations</term>
            <listitem>
              <programlisting>pandoc  -s --bibliography biblio.bib --filter pandoc-citeproc CITATIONS -o example24a.html</programlisting>
              <programlisting>pandoc  -s --bibliography biblio.json --filter pandoc-citeproc --csl chicago-fullnote-bibliography.csl CITATIONS -o example24b.html</programlisting>
              <programlisting>pandoc  -s --bibliography biblio.yaml --filter pandoc-citeproc --csl ieee.csl CITATIONS -t man -o example24c.1</programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Textile writer</term>
            <listitem><userinput>pandoc  -s MANUAL.txt -t textile -o example25.textile</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Textile reader</term>
            <listitem><userinput>pandoc  -s example25.textile -f textile -t html -o example26.html</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Org-mode</term>
            <listitem><userinput>pandoc  -s MANUAL.txt -o example27.org</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>AsciiDoc</term>
            <listitem><userinput>pandoc  -s MANUAL.txt -t asciidoc -o example28.txt</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Word docx</term>
            <listitem><userinput>pandoc  -s MANUAL.txt -o example29.docx</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>LaTeX math to docx</term>
            <listitem><userinput>pandoc  -s math.tex -o example30.docx</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>DocBook to markdown</term>
            <listitem><userinput>pandoc  -f docbook -t markdown -s howto.xml -o example31.text</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>MediaWiki to html5</term>
            <listitem><userinput>pandoc  -f mediawiki -t html5 -s haskell.wiki -o example32.html</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Custom writer</term>
            <listitem><userinput>pandoc  -t sample.lua example33.text -o example33.html</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Docx with a reference docx</term>
            <listitem><userinput>pandoc  --reference-doc twocolumns.docx -o UsersGuide.docx MANUAL.txt</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>Docx to markdown, including math</term>
            <listitem><userinput>pandoc  -s example30.docx -t markdown -o example35.md</userinput></listitem>
          </varlistentry>
          <varlistentry>
            <term>EPUB to plain text</term>
            <listitem><userinput>pandoc  MANUAL.epub -t plain -o example36.text</userinput></listitem>
          </varlistentry>
        </variablelist>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->  <!-- end of "Transforming Between Several Formats With <application>Pandoc</application>" -->
    
  </chapter>  <!-- end of "Handling Plain Text" -->
    
  <chapter>
    <title>Color</title>
    
    <section>
      <title>Color Spaces</title>
      <blockquote>
	<para>A color space is a way of describing colors in three dimensions. Color spaces therefore, are usually built using three coordinates. This explains the preponderance of three-letter color acronyms (RGB, CMY, HSV, XYZ, L*a*b*).</para> <para>One of the easiest color spaces to describe is HSV (or Hue, Saturation, and Value). Hue is the generic color name, for example: red, orange, blue, green, yellow, etc. Saturation (sometimes called chroma or color strength) is the relative strength of a color. A neutral gray has no saturation, while a vivid red is extremely saturated. Value, sometimes referred to as intensity or brightness, is a measure of the white or black component of a color</para>
	<attribution><ulink linkend='http://www.greenharbor.com/LHTIfolder/lhti9217.pdf'>Color Spaces and PostScript Level 2</ulink></attribution>
      </blockquote>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Color in HTML (RGB)</title>
      
      <table>
<tr><td bgcolor="800000"><font color="#FFFFFF"><para>#800000</para><para>maroon</para></font></td>
    <td bgcolor="8B0000"><font color="#FFFFFF"><para>#8B0000</para><para>darkred</para></font></td>
    <td bgcolor="FF0000"><para>#FF0000</para><para>red</para></td>
    <td bgcolor="FFB6C1"><para>#FFB6C1</para><para>lightpink</para></td>
    <td bgcolor="DC143C"><para>#DC143C</para><para>crimson</para></td>
</tr>
<tr><td bgcolor="DB7093"><para>#DB7093</para><para>palevioletred</para></td>
    <td bgcolor="FF69B4"><para>#FF69B4</para><para>hotpink</para></td>
    <td bgcolor="FF1493"><para>#FF1493</para><para>deeppink</para></td>
    <td bgcolor="C71585"><font color="#FFFFFF"><para>#C71585</para><para>mediumvioletred</para></font></td>
    <td bgcolor="800080"><font color="#FFFFFF"><para>#800080</para><para>purple</para></font></td>
</tr>
<tr><td bgcolor="8B008B"><font color="#FFFFFF"><para>#8B008B</para><para>darkmagenta</para></font></td>
    <td bgcolor="DA70D6"><para>#DA70D6</para><para>orchid</para></td>
    <td bgcolor="D8BFD8"><para>#D8BFD8</para><para>thistle</para></td>
    <td bgcolor="DDA0DD"><para>#DDA0DD</para><para>plum</para></td>
    <td bgcolor="EE82EE"><para>#EE82EE</para><para>violet</para></td>
</tr>
<tr><td bgcolor="FF00FF"><para>#FF00FF</para><para>fuchsia</para></td>
    <td bgcolor="FF00FF"><para>#FF00FF</para><para>magenta</para></td>
    <td bgcolor="BA55D3"><para>#BA55D3</para><para>mediumorchid</para></td>
    <td bgcolor="9400D3"><font color="#FFFFFF"><para>#9400D3</para><para>darkviolet</para></font></td>
    <td bgcolor="9932CC"><font color="#FFFFFF"><para>#9932CC</para><para>darkorchid</para></font></td>
</tr>
<tr><td bgcolor="8A2BE2"><font color="#FFFFFF"><para>#8A2BE2</para><para>blueviolet</para></font></td>
    <td bgcolor="4B0082"><font color="#FFFFFF"><para>#4B0082</para><para>indigo</para></font></td>
    <td bgcolor="9370DB"><para>#9370DB</para><para>mediumpurple</para></td>
    <td bgcolor="6A5ACD"><font color="#FFFFFF"><para>#6A5ACD</para><para>slateblue</para></font></td>
    <td bgcolor="7B68EE"><para>#7B68EE</para><para>mediumslateblue</para></td>
</tr>
<tr><td bgcolor="00008B"><font color="#FFFFFF"><para>#00008B</para><para>darkblue</para></font></td>
    <td bgcolor="0000CD"><font color="#FFFFFF"><para>#0000CD</para><para>mediumblue</para></font></td>
    <td bgcolor="0000FF"><font color="#FFFFFF"><para>#0000FF</para><para>blue</para></font></td>
    <td bgcolor="000080"><font color="#FFFFFF"><para>#000080</para><para>navy</para></font></td>
    <td bgcolor="191970"><font color="#FFFFFF"><para>#191970</para><para>midnightblue</para></font></td>
</tr>
<tr><td bgcolor="483D8B"><font color="#FFFFFF"><para>#483D8B</para><para>darkslateblue</para></font></td>
    <td bgcolor="4169E1"><para>#4169E1</para><para>royalblue</para></td>
    <td bgcolor="6495ED"><para>#6495ED</para><para>cornflowerblue</para></td>
    <td bgcolor="B0C4DE"><para>#B0C4DE</para><para>lightsteelblue</para></td>
    <td bgcolor="F0F8FF"><para>#F0F8FF</para><para>aliceblue</para></td>
</tr>
<tr><td bgcolor="F8F8FF"><para>#F8F8FF</para><para>ghostwhite</para></td>
    <td bgcolor="E6E6FA"><para>#E6E6FA</para><para>lavender</para></td>
    <td bgcolor="1E90FF"><para>#1E90FF</para><para>dodgerblue</para></td>
    <td bgcolor="4682B4"><para>#4682B4</para><para>steelblue</para></td>
    <td bgcolor="00BFFF"><para>#00BFFF</para><para>deepskyblue</para></td>
</tr>
<tr><td bgcolor="708090"><font color="#FFFFFF"><para>#708090</para><para>slategray</para></font></td>
    <td bgcolor="778899"><font color="#FFFFFF"><para>#778899</para><para>lightslategray</para></font></td>
    <td bgcolor="87CEFA"><para>#87CEFA</para><para>lightskyblue</para></td>
    <td bgcolor="87CEEB"><para>#87CEEB</para><para>skyblue</para></td>
    <td bgcolor="ADD8E6"><para>#ADD8E6</para><para>lightblue</para></td>
</tr>
<tr><td bgcolor="008080"><para>#008080</para><para>teal</para></td>
    <td bgcolor="008B8B"><para>#008B8B</para><para>darkcyan</para></td>
    <td bgcolor="00CED1"><para>#00CED1</para><para>darkturquoise</para></td>
    <td bgcolor="00FFFF"><para>#00FFFF</para><para>aqua, cyan</para></td>
    <td bgcolor="48D1CC"><para>#48D1CC</para><para>mediumturquoise</para></td>
</tr>
<tr><td bgcolor="5F9EA0"><para>#5F9EA0</para><para>cadetblue</para></td>
    <td bgcolor="AFEEEE"><para>#AFEEEE</para><para>paleturquoise</para></td>
    <td bgcolor="E0FFFF"><para>#E0FFFF</para><para>lightcyan</para></td>
    <td bgcolor="F0FFFF"><para>#F0FFFF</para><para>azure</para></td>
    <td bgcolor="20B2AA"><para>#20B2AA</para><para>lightseagreen</para></td>
</tr>
<tr><td bgcolor="40E0D0"><para>#40E0D0</para><para>turquoise</para></td>
    <td bgcolor="B0E0E6"><para>#B0E0E6</para><para>powderblue</para></td>
    <td bgcolor="2F4F4F"><font color="#FFFFFF"><para>#2F4F4F</para><para>darkslategray</para></font></td>
    <td bgcolor="7FFFD4"><para>#7FFFD4</para><para>aquamarine</para></td>
    <td bgcolor="00FA9A"><para>#00FA9A</para><para>mediumspringgreen</para></td>
</tr>
<tr><td bgcolor="66CDAA"><para>#66CDAA</para><para>mediumaquamarine</para></td>
    <td bgcolor="00FF7F"><para>#00FF7F</para><para>springgreen</para></td>
    <td bgcolor="3CB371"><para>#3CB371</para><para>mediumseagreen</para></td>
    <td bgcolor="2E8B57"><para>#2E8B57</para><para>seagreen</para></td>
    <td bgcolor="32CD32"><para>#32CD32</para><para>limegreen</para></td>
</tr>
<tr><td bgcolor="006400"><font color="#FFFFFF"><para>#006400</para><para>darkgreen</para></font></td>
    <td bgcolor="008000"><font color="#FFFFFF"><para>#008000</para><para>green</para></font></td>
    <td bgcolor="00FF00"><para>#00FF00</para><para>lime</para></td>
    <td bgcolor="228B22"><para>#228B22</para><para>forestgreen</para></td>
    <td bgcolor="8FBC8F"><para>#8FBC8F</para><para>darkseagreen</para></td>
</tr>
<tr><td bgcolor="90EE90"><para>#90EE90</para><para>lightgreen</para></td>
    <td bgcolor="98FB98"><para>#98FB98</para><para>palegreen</para></td>
    <td bgcolor="F5FFFA"><para>#F5FFFA</para><para>mintcream</para></td>
    <td bgcolor="F0FFF0"><para>#F0FFF0</para><para>honeydew</para></td>
    <td bgcolor="7FFF00"><para>#7FFF00</para><para>chartreuse</para></td>
</tr>
<tr><td bgcolor="7CFC00"><para>#7CFC00</para><para>lawngreen</para></td>
    <td bgcolor="6B8E23"><para>#6B8E23</para><para>olivedrab</para></td>
    <td bgcolor="556B2F"><font color="#FFFFFF"><para>#556B2F</para><para>darkolivegreen</para></font></td>
    <td bgcolor="9ACD32"><para>#9ACD32</para><para>yellowgreen</para></td>
    <td bgcolor="ADFF2F"><para>#ADFF2F</para><para>greenyellow</para></td>
</tr>
<tr><td bgcolor="F5F5DC"><para>#F5F5DC</para><para>beige</para></td>
    <td bgcolor="FAF0E6"><para>#FAF0E6</para><para>linen</para></td>
    <td bgcolor="FAFAD2"><para>#FAFAD2</para><para>lightgoldenrodyellow</para></td>
    <td bgcolor="808000"><para>#808000</para><para>olive</para></td>
    <td bgcolor="FFFF00"><para>#FFFF00</para><para>yellow</para></td>
</tr>
<tr><td bgcolor="FFFFE0"><para>#FFFFE0</para><para>lightyellow</para></td>
    <td bgcolor="FFFFF0"><para>#FFFFF0</para><para>ivory</para></td>
    <td bgcolor="BDB76B"><para>#BDB76B</para><para>darkkhaki</para></td>
    <td bgcolor="F0E68C"><para>#F0E68C</para><para>khaki</para></td>
    <td bgcolor="EEE8AA"><para>#EEE8AA</para><para>palegoldenrod</para></td>
</tr>
<tr><td bgcolor="F5DEB3"><para>#F5DEB3</para><para>wheat</para></td>
    <td bgcolor="FFD700"><para>#FFD700</para><para>gold</para></td>
    <td bgcolor="FFFACD"><para>#FFFACD</para><para>lemonchiffon</para></td>
    <td bgcolor="FFEFD5"><para>#FFEFD5</para><para>papayawhip</para></td>
    <td bgcolor="B8860B"><para>#B8860B</para><para>darkgoldenrod</para></td>
</tr>
<tr><td bgcolor="DAA520"><para>#DAA520</para><para>goldenrod</para></td>
    <td bgcolor="FAEBD7"><para>#FAEBD7</para><para>antiquewhite</para></td>
    <td bgcolor="FFF8DC"><para>#FFF8DC</para><para>cornsilk</para></td>
    <td bgcolor="FDF5E6"><para>#FDF5E6</para><para>oldlace</para></td>
    <td bgcolor="FFE4B5"><para>#FFE4B5</para><para>moccasin</para></td>
</tr>
<tr><td bgcolor="FFDEAD"><para>#FFDEAD</para><para>navajowhite</para></td>
    <td bgcolor="FFA500"><para>#FFA500</para><para>orange</para></td>
    <td bgcolor="FFE4C4"><para>#FFE4C4</para><para>bisque</para></td>
    <td bgcolor="D2B48C"><para>#D2B48C</para><para>tan</para></td>
    <td bgcolor="FF8C00"><para>#FF8C00</para><para>darkorange</para></td>
</tr>
<tr><td bgcolor="DEB887"><para>#DEB887</para><para>burlywood</para></td>
    <td bgcolor="8B4513"><font color="#FFFFFF"><para>#8B4513</para><para>saddlebrown</para></font></td>
    <td bgcolor="F4A460"><para>#F4A460</para><para>sandybrown</para></td>
    <td bgcolor="FFEBCD"><para>#FFEBCD</para><para>blanchedalmond</para></td>
    <td bgcolor="FFF0F5"><para>#FFF0F5</para><para>lavenderblush</para></td>
</tr>
<tr><td bgcolor="FFF5EE"><para>#FFF5EE</para><para>seashell</para></td>
    <td bgcolor="FFFAF0"><para>#FFFAF0</para><para>floralwhite</para></td>
    <td bgcolor="FFFAFA"><para>#FFFAFA</para><para>snow</para></td>
    <td bgcolor="CD853F"><para>#CD853F</para><para>peru</para></td>
    <td bgcolor="FFDAB9"><para>#FFDAB9</para><para>peachpuff</para></td>
</tr>
<tr><td bgcolor="D2691E"><para>#D2691E</para><para>chocolate</para></td>
    <td bgcolor="A0522D"><font color="#FFFFFF"><para>#A0522D</para><para>sienna</para></font></td>
    <td bgcolor="FFA07A"><para>#FFA07A</para><para>lightsalmon</para></td>
    <td bgcolor="FF7F50"><para>#FF7F50</para><para>coral</para></td>
    <td bgcolor="E9967A"><para>#E9967A</para><para>darksalmon</para></td>
</tr>
<tr><td bgcolor="FFE4E1"><para>#FFE4E1</para><para>mistyrose</para></td>
    <td bgcolor="FF4500"><para>#FF4500</para><para>orangered</para></td>
    <td bgcolor="FA8072"><para>#FA8072</para><para>salmon</para></td>
    <td bgcolor="FF6347"><para>#FF6347</para><para>tomato</para></td>
    <td bgcolor="BC8F8F"><para>#BC8F8F</para><para>rosybrown</para></td>
</tr>
<tr><td bgcolor="FFC0CB"><para>#FFC0CB</para><para>pink</para></td>
    <td bgcolor="CD5C5C"><para>#CD5C5C</para><para>indianred</para></td>
    <td bgcolor="F08080"><para>#F08080</para><para>lightcoral</para></td>
    <td bgcolor="A52A2A"><font color="#FFFFFF"><para>#A52A2A</para><para>brown</para></font></td>
    <td bgcolor="B22222"><font color="#FFFFFF"><para>#B22222</para><para>firebrick</para></font></td>
</tr>
<tr><td bgcolor="000000"><font color="#FFFFFF"><para>#000000</para><para>black</para></font></td>
    <td bgcolor="696969"><font color="#FFFFFF"><para>#696969</para><para>dimgray</para></font></td>
    <td bgcolor="808080"><para>#808080</para><para>gray</para></td>
    <td bgcolor="A9A9A9"><para>#A9A9A9</para><para>darkgray</para></td>
    <td bgcolor="C0C0C0"><para>#C0C0C0</para><para>silver</para></td>
</tr>
<tr><td bgcolor="D3D3D3"><para>#D3D3D3</para><para>lightgrey</para></td>
    <td bgcolor="DCDCDC"><para>#DCDCDC</para><para>gainsboro</para></td>
    <td bgcolor="F5F5F5"><para>#F5F5F5</para><para>whitesmoke</para></td>
    <td bgcolor="FFFFFF"><para>#FFFFFF</para><para>white</para></td>
    <td></td>
  </tr>
</table>

</section> <!-- </sect1> -->

    <section>
      <title>Hue-Saturation-Brightness  (CSS)</title>
      <para>The CSS Color Level 3 module introduced an alternate way of describing colors, based on a more universal color theory instead of the RGB computer monitor. The Hue-Saturation-Lightness (HSL) color model describes colors as a mixture of a <quote>pure</quote> color and black, white, or gray. Specifically, the three values are:</para>
      <variablelist>
        <varlistentry>
          <term>hue</term>
          <listitem>The pure color, defined as an angle on a color wheel where pure red is 0°, pure yellow is 60°, intense green is 120°, and so on: 300° is magenta and 360° is red again.</listitem>
        </varlistentry>
        <varlistentry>
          <term>saturation</term>
          <listitem>The intensity of the pure color (adjusted for lightness) in the mixture, where 0% saturation is a shade of gray and 100% saturation is a vibrant color.</listitem>
        </varlistentry>
        <varlistentry>
          <term>lightness</term>
          <listitem>The level of white or black in the mixture, where 0% lightness is pure black, 100% lightness is pure white, and 50% lightness is the most intense color.</listitem>
        </varlistentry>
      </variablelist>
      <para>The brightest, most intense colors are created when saturation is 100% and lightness is 50%. In the RGB model, these colors have at least one color channel at 100% and one channel at 0%.</para>
      <note>Unlike with RGB values, HSL values are not always unique; different HSL combinations can create the same color. For example, any value with 0% saturation will be a gray, regardless of the hue, and any value with 100% lightness will be white, regardless of the hue or saturation.</note>
      <para>To specify a color as an HSL value in CSS, you use the hsl(h,s%,l%) function. The hue value, although theoretically measured in degrees, given as a number without units. Saturation and lightness are always expressed as percentages. Some examples:</para>
      <itemizedlist>
        <listitem>color <varname>lime</varname>, <computeroutput>rgb(0%, 100%, 0%)</computeroutput>, is <computeroutput>hsl(120, 100%, 50%)</computeroutput></listitem>
        <listitem>the color <varname>green</varname>, <computeroutput>rgb(0%, 50%, 0%)</computeroutput>, is <computeroutput>hsl(120, 100%, 25%)</computeroutput></listitem>
        <listitem>the color <varname>purple</varname>, <computeroutput>rgb(50%, 0%, 50%)</computeroutput>, is <computeroutput>hsl(300, 100%, 25%)</computeroutput></listitem>
      </itemizedlist>
    </section> <!-- </sect1> -->

      
    
    <section xml:id='ps_color'>
      <title>Color in PostScript</title>
      <para>PostScript handles several color spaces:</para>
      <itemizedlist>
	<listitem>Red-Green-Blue (for monitors and in HTML)</listitem>
	<listitem>Cyan-Magenta-Yellow-blacK (for most printers)</listitem>
	<listitem>Hue-Saturation-Brightness (for convenience)</listitem>
	<listitem>Grey (for monochrome printing and monitors)</listitem>
      </itemizedlist>
      <para>PostScript&apos;s color operators (<userinput>setrgbcolor</userinput>, <userinput>setcmykcolor</userinput>, <userinput>sethsbcolor</userinput>, and <userinput>setgray</userinput>) take from 4 to 1 numeric arguments that range from 0 to 1. Example:</para>
      <programlisting>0.9 0.25 0.25 setrgbcolor</programlisting>
      
      <section sect='sect2'>
	<title>Some Simple PostScript Color Code</title>
	<para>Show <varname>num_wedges</varname> hued wedges saturated from 0.4 (inside) to 1 (outside). You may try lower brightness values (<varname>B</varname>), down to nearly 0, but below 0 the colors look too blackish. This program rotates the axes by <varname>angle</varname> after each iteration of the outer for loop.</para>
	<programlisting>%!PS−Adobe−2.0
/B 1 def
/r 100 def
/dr 30 def
/num_wedges 30 def
/angle 360 num_wedges div def

300 dup translate
0  1 num_wedges div  1  { % hue for-loop
  5 dict begin
    0.4 0.15 1 { % saturation for-loop
      r 0 moveto
      0 0  r dr add  0 angle  arc
      0 0  r         angle 0  arcn
      closepath
      /r r dr add def
      gsave 0 setgray stroke grestore
      1 index exch B sethsbcolor fill
    } for
    pop % drop hue
  end
  angle rotate
} for

showpage</programlisting>
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    <section>
      <title>Some C++ Code to Handle Color</title>
      
      <para>This is a simple class to store color in three components:</para>
      <programlisting><![CDATA[typedef float float_t;
class RGBColor {
public:
  float_t R, G, B;
  RGBColor(float_t r=0.0, float_t g=0.0, float_t b=0.0) : R(r), G(g), B(b) {};
};]]></programlisting>

<para>Additionally, an output-stream inserter for class <classname>RGBColor</classname> may defined like this:</para>
<programlisting><![CDATA[ostream& operator<<(ostream& os, RGBColor& co) {
  os << fixed << co.R << ' ' << co.G << ' ' << co.B << endl;
  return os;
};]]></programlisting>

<para>Next, some functions to transform between HSB and RGB color spaces:</para>

    </section> <!-- </sect1> -->
    
  </chapter>
  

  <chapter xml:id='sgml'>
  <title>SGML</title>
  <para>SGML stands for Standard Generalized Markup Language, an international standard for the description of marked-up electronic text. More exactly, SGML is a metalanguage, that is, a means of formally describing a language, in this case, a markup language.</para>
  <para>By markup language we mean a set of markup conventions used together for encoding texts. A markup language must specify what markup is allowed, what markup is required, how markup is to be distinguished from text, and what the markup means. SGML provides the means for doing the first three; documentation such as these Guidelines is required for the last.</para>
  <para>By means of an SGML declaration (XML also has one), the SGML application specifies which characters are to be interpreted as data and which characters are to be interpreted as markup. (They do not have to include the familiar &lt; and &gt; characters; in SGML they could just as easily be { and } instead.</para>
  <para>Using the rules given in the SGML declaration and the results of the information analysis (which ultimately creates something that can easily be considered an information model), the SGML application developer identifies various types of documents-such as reports, brochures, technical manuals, and so on—and develops a DTD for each one. Using the chosen characters, the DTD identifies information objects (elements) and their properties (attributes).</para>
  
    <!-- <section> <title>What&apos; Special about SGML?</title> -->
    <section> <title>SGML Main Features</title>
    <para>There are three characteristics of SGML which distinguish it from other markup languages: its emphasis on descriptive rather than procedural markup; its document type concept; and its independence of any one system for representing the script in which a text is written. These three aspects are discussed briefly below.</para>
    
      <section sect='sect2'> <title>Descriptive Markup</title>
      <para>A descriptive markup system uses markup codes which simply provide names to categorize parts of a document. Markup codes such as <computeroutput>&lt;para&gt;</computeroutput> or <computeroutput>\end{list}</computeroutput> simply identify a portion of a document and assert of it that &quot;the following item is a paragraph,&quot; or &quot;this is the end of the most recently begun list,&quot; etc. By contrast, a procedural markup system defines what processing is to be carried out at particular points in a document: &quot;call procedure PARA with parameters 1, b and x here&quot; or &quot;move the left margin 2 quads left, move the right margin 2 quads right, skip down one line, and go to the new left margin,&quot; etc. In SGML, the instructions needed to process a document for some particular purpose (for example, to format it) are sharply distinguished from the descriptive markup which occurs within the document. Usually, they are collected outside the document in separate procedures or programs.</para>
      <para>With descriptive instead of procedural markup the same document can readily be processed by many different pieces of software, each of which can apply different processing instructions to those parts of it which are considered relevant. For example, a content analysis program might disregard entirely the footnotes embedded in an annotated text, while a formatting program might extract and collect them all together for printing at the end of each chapter. Different sorts of processing instructions can be associated with the same parts of the file. For example, one program might extract names of persons and places from a document to create an index or database, while another, operating on the same text, might print names of persons and places in a distinctive typeface.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>Types of Document</title>
      <para>Secondly, SGML introduces the notion of a document type, and hence a <firstterm>document type definition</firstterm> (DTD). Documents are regarded as having types, just as other objects processed by computers do. The type of a document is formally defined by its constituent parts and their structure. The definition of a report, for example, might be that it consisted of a title and possibly an author, followed by an abstract and a sequence of one or more paragraphs. Anything lacking a title, according to this formal definition, would not formally be a report, and neither would a sequence of paragraphs followed by an abstract, whatever other report-like characteristics these might have for the human reader.</para>
      <para>If documents are of known types, a special purpose program (called a <firstterm>parser</firstterm>) can be used to process a document claiming to be of a particular type and check that all the elements required for that document type are indeed present and correctly ordered. More significantly, different documents of the same type can be processed in a uniform way. Programs can be written which take advantage of the knowledge encapsulated in the document structure information, and which can thus behave in a more intelligent fashion.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>Data Independence</title>
      <para>A basic design goal of SGML was to ensure that compliant documents should be transportable from one hardware and software environment to another without loss of information. The two features discussed so far both address this requirement at an abstract level; the third feature addresses it at the level of the strings of bytes (characters) of which documents are composed. SGML provides a general purpose mechanism for string substitution, that is, a simple machine-independent way of stating that a particular string of characters in the document should be replaced by some other string when the document is processed. One obvious application for this mechanism is to ensure consistency of nomenclature; another, more significant one, is to counter the notorious inability of different computer systems to understand each other&apos; character sets, or of any one system to provide all the graphic characters needed for a particular application, by providing descriptive mappings for non-portable characters. The strings defined by this string-substitution mechanism are called <firstterm>entities</firstterm> and they are discussed further down.</para>
      </section> <!-- </sect2> -->
          
    </section> <!-- </sect1> -->
    
    <section> <title>SGML Structures</title>
    <para>This section describes the simple and consistent mechanism for the markup or identification of structural textual units which is provided by SGML. It also describes the methods SGML provides for the expression of rules defining how combinations of such units can meaningfully occur in any text.</para>
    
      <section sect='sect2'> <title>Elements</title>
      <para>The technical term used in the SGML standard for a textual unit, viewed as a structural component, is <firstterm>element</firstterm>. Different types of elements are given different names, but SGML provides no way of expressing the meaning of a particular type of element, other than its relationship to other element types. That is, all one can say about an element called (for instance) <computeroutput>&lt;blort&gt;</computeroutput> is that instances of it may (or may not) occur within elements of type <computeroutput>&lt;farble&gt;</computeroutput>, and that it may (or may not) be decomposed into elements of type <computeroutput>&lt;blortette&gt;</computeroutput>. It should be stressed that the SGML standard is entirely unconcerned with the semantics of textual elements: these are application dependent. It is up to the creators of SGML conformant tag sets to choose intelligible names for the elements they identify and to document their proper use in text markup. That is one purpose of this document. From the need to choose element names indicative of function comes the technical term for the name of an element type, which is <firstterm>generic identifier</firstterm>, or GI.</para>
      <para>Within a marked up text (a document instance), each element must be explicitly marked or tagged in some way. The standard provides for a variety of different ways of doing this, the most commonly used being to insert a tag at the beginning of the element (a start-tag) and another at its end (an end-tag). The start- and end-tag pair are used to bracket off the element occurrences within the running text, in rather the same way as different types of parentheses or quotation marks are used in conventional punctuation. For example, a quotation element in a text might be tagged as follows:</para>
      <programlisting>&lt;pre&gt;
          ...  Rosalind&apos; remarks &lt;quote&gt;This is the silliest stuff
          that ere I heard of!&lt;/quote&gt; clearly indicate ...
&lt;/pre&gt;</programlisting>
      <para>As this example shows, a start-tag takes the form <computeroutput>&lt;name&gt;</computeroutput>, where the opening angle bracket indicates the start of the start-tag, "name" is the generic identifier of the element which is being delimited, and the closing angle bracket indicates the end of a tag. An end-tag takes an identical form, except that the opening angle bracket is followed by a solidus (slash) character, so that the corresponding end-tag would be <computeroutput>&lt;/name&gt;</computeroutput>.</para>
      <para>An element may be empty, that is, it may have no content at all, or it may contain simple text. More usually, however, elements of one type will be embedded (contained entirely) within elements of a different type.</para>
      <para>To illustrate this, we will consider a very simple structural model. Let us assume that we wish to identify within an anthology only poems, their titles, and the stanzas and lines of which they are composed. In SGML terms, our document type is the anthology, and it consists of a series of poems. Each poem has embedded within it one element, a title, and several occurrences of another, a stanza, each stanza having embedded within it a number of line elements. Fully marked up, a text conforming to this model might appear as follows:</para>
      <programlisting><![CDATA[
         <anthology>
           <poem><title>The SICK ROSE</title>
              <stanza>
                   <line>O Rose thou art sick.</line>
                   <line>The invisible worm,</line>
                   <line>That flies in the night</line>
                   <line>In the howling storm:</line>
              </stanza>
              <stanza>
                   <line>Has found out thy bed</line>
                   <line>Of crimson joy:</line>
                   <line>And his dark secret love</line>
                   <line>Does thy life destroy.</line>
              </stanza>
           </poem>

                   <!-- more poems go here    -->

         </anthology>]]></programlisting>
         <para>(The line <computeroutput>&lt;!-- more poems go here    --&gt;</computeroutput> is an SGML comment and is not treated as part of the text.)</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Naming Content Resources through URI&apos;s</title>
        <para>Resources such as files, pages, databases etc are named or located through Uniform Resource Identifiers (URI&apos;s). These used to be called Universal Resource Locators (URL&apos;s) but now it is understood that a resource (such as a specification or a standard) may lack a location.</para>
        <para>URI&apos;s commonly are expressed as a sequence of a protocol token, a host alias and something like a path, as in: <userinput>prayer://heaven.org/upper/throne/God</userinput>, where &apos;prayer&apos; is the protocol to access &apos;God&apos;, located in &apos;heaven.org&apos;, specifically in part &apos;upper&apos;, and within it on a &apos;throne&apos;.</para>
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>Rules Governing Structures</title>
      <para>This example makes no assumptions about the rules governing, for example, whether or not a title can appear in places other than preceding the first stanza, or whether lines can appear which are not included in a stanza: that is why its markup appears so verbose. In such cases, the beginning and end of every element must be explicitly marked, because there are no identifiable rules about which elements can appear where. In practice, however, rules can usually be formulated to reduce the need for so much tagging. For example, considering our greatly over-simplified model of a poem, we could state the following rules:</para>
      <orderedlist>
      <listitem>An anthology contains a number of poems and nothing else.</listitem>
      <listitem>A poem always has a single title element which precedes the first stanza and contains no other elements.</listitem>
      <listitem>Apart from the title, a poem consists only of stanzas.</listitem>
      <listitem>Stanzas consist only of lines and every line is contained by a stanza.</listitem>
      <listitem>Nothing can follow a stanza except another stanza or the end of a poem.</listitem>
      <listitem>Nothing can follow a line except another line or the start of a new stanza.</listitem>
      </orderedlist>
      
        <section sect='sect3'> <title>Eliding Closing Tags</title>
        <para>From these rules, it may be inferred that we do not need to mark the ends of stanzas or lines explicitly. From rule 2 it follows that we do not need to mark the end of the title--it is implied by the start of the first stanza. Similarly, from rules 3 and 1 it follows that we need not mark the end of the poem: since poems cannot occur within poems but must occur within anthologies, the end of a poem is implied by the start of the next poem, or by the end of the anthology. Applying these simplifications, we could mark up the same poem as follows:</para>
        <programlisting><![CDATA[<anthology>
  <poem><title>The SICK ROSE
    <stanza> <line>O Rose thou art sick.
      <line>The invisible worm, <line>That flies in the night
      <line>In the howling storm:
    <stanza>
      <line>Has found out thy bed <line>Of crimson joy:
      <line>And his dark secret love <line>Does thy life destroy.
  <poem> <!-- more poems go here    -->
  </anthology>]]></programlisting>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->

    <section> <title>Defining SGML Document Structures: The DTD</title>
    <para>Rules such as those described above are the first stage in the creation of a formal specification for the structure of an SGML document, or document type definition, usually abbreviated to DTD. In creating a DTD, the document designer may be as lax or as restrictive as the occasion warrants. A balance must be struck between the convenience of following simple rules and the complexity of handling real texts. This is particularly the case when the rules being defined relate to texts which already exist: the designer may have only the haziest of notions as to an ancient text&apos; original purpose or meaning and hence find it very difficult to specify consistent rules about its structure. On the other hand, where a new text is being prepared to an exact specification, for example for entry into a textual database of some kind, the more precisely stated the rules, the better they can be enforced. Even in the case where an existing text is being marked up, it may be beneficial to define a restrictive set of rules relating to one particular view or hypothesis about the text--if only as a means of testing the usefulness of that view or hypothesis. It is important to remember that every document type definition is an interpretation of a text. There is no single DTD which encompasses any kind of absolute truth about a text, although it may be convenient to privilege some DTDs above others for particular types of analysis.</para>
    <para>At present, SGML is most widely used in environments where uniformity of document structure is a major desideratum. In the production of technical documentation, for example, it is of major importance that sections and subsections should be properly nested, that cross references should be properly resolved and so forth. In such situations, documents are seen as raw material to match against pre-defined sets of rules. As discussed above, however, the use of simple rules can also greatly simplify the task of tagging accurately elements of less rigidly constrained texts. By making these rules explicit, the scholar reduces his or her own burdens in marking up and verifying the electronic text, while also being forced to make explicit an interpretation of the structure and significant particularities of the text being encoded.</para>
    
      <section sect='sect2'> <title>An Example DTD</title>
      <para>A DTD is expressed in SGML as a set of declarative statements, using a simple syntax defined in the standard. For our simple model of a poem, the following declarations would be appropriate:</para>
      <programlisting><![CDATA[<!ELEMENT anthology - -  (poem+)>
<!ELEMENT poem - -  (title?, stanza+)>
<!ELEMENT title  - O (#PCDATA) >
<!ELEMENT stanza  - O  (line+) >
<!ELEMENT line  O O  (#PCDATA) >]]></programlisting>
      <para>These five lines are examples of formal SGML element declarations. A declaration, like an element, is delimited by angle brackets; the first character following the opening bracket must be an exclamation mark, followed immediately by one of a small set of SGML-defined keywords, specifying the kind of object being declared. The five declarations above are all of the same type: each begins with an ELEMENT keyword, indicating that it declares an element, in the technical sense defined above. Each consists of three parts: a name or group of names, two characters specifying minimization rules, and a content model. Each of these parts is discussed further below. Components of the declaration are separated by white space, that is one or more blanks, tabs or newlines.</para>
      <para>The first part of each declaration above gives the generic identifier of the element which is being declared, for example poem, title, etc. It is possible to declare several elements in one statement, as discussed below.</para>
        <section sect='sect3'> <title>Minimization Rules</title>
        <para>The second part of the declaration specifies what are called minimization rules for the element concerned. These rules determine whether or not start- and end-tags must be present in every occurrence of the element concerned. They take the form of a pair of characters, separated by white space, the first of which relates to the start-tag, and the second to the end-tag. In either case, either a hyphen or a letter O (for "omissible" or "optional") must be given; the hyphen indicating that the tag must be present, and the letter O that it may be omitted. Thus, in this example, every element except <computeroutput>&lt;line&gt;</computeroutput> must have a start-tag. Only the <computeroutput>&lt;poem&gt;</computeroutput> and <computeroutput>&lt;anthology&gt;</computeroutput> elements must have end-tags as well.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>Content Model</title>
        <para>The third part of each declaration, enclosed in parentheses, is called the content model of the element, because it specifies what element occurrences may legitimately contain. Contents are specified either in terms of other elements or using special reserved words. There are several such reserved words, of which by far the most commonly encountered is #PCDATA, as in this example. This is an abbreviation for "parsed character data," and it means that the element being defined may contain any valid character data. If an SGML declaration is thought of as a structure like a family tree, with a single ancestor at the top (in our case, this would be <computeroutput>&lt;anthology&gt;</computeroutput>), then almost always, following the branches of the tree downwards (for example, from <computeroutput>&lt;anthology&gt;</computeroutput> to <computeroutput>&lt;poem&gt;</computeroutput> to <computeroutput>&lt;stanza&gt;</computeroutput> to <computeroutput>&lt;line&gt;</computeroutput> and <computeroutput>&lt;title&gt;</computeroutput>) will lead eventually to <computeroutput>#PCDATA</computeroutput>. In our example, <computeroutput>&lt;title&gt;</computeroutput> and <computeroutput>&lt;line&gt;</computeroutput> are so defined. Since their content models say <computeroutput>#PCDATA</computeroutput> only and name no embedded elements, they may not contain any embedded elements.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>Occurrence Indicators</title>
        <para>The declaration for <computeroutput>&lt;stanza&gt;</computeroutput> in the example above states that a stanza consists of one or more lines. It uses an occurrence indicator (the plus sign) to indicate how many times the element named in its content model may occur. There are three occurrence indicators in the SGML syntax, conventionally represented by the plus sign, the question mark, and the asterisk or star.(8) The plus sign means that there may be one or more occurrences of the element concerned; the question mark means that there may be at most one and possibly no occurrence; the star means that the element concerned may either be absent or appear one or more times. Thus, if the content model for <computeroutput>&lt;stanza&gt;</computeroutput> were <computeroutput>(LINE*)</computeroutput>, stanzas with no lines would be possible as well as those with more than one line. If it were <computeroutput>(LINE?)</computeroutput>, again empty stanzas would be countenanced, but no stanza could have more than a single line. The declaration for <computeroutput>&lt;poem&gt;</computeroutput> in the example above thus states that a <computeroutput>&lt;poem&gt;</computeroutput> cannot have more than one title, but may have none, and that it must have at least one <computeroutput>&lt;stanza&gt;</computeroutput> and may have several.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>Group Connectors</title>
        <para>The content model <computeroutput>(TITLE?, STANZA+)</computeroutput> contains more than one component, and thus needs additionally to specify the order in which these elements (<computeroutput>&lt;title&gt;</computeroutput> and <computeroutput>&lt;stanza&gt;</computeroutput>) may appear. This ordering is determined by the group connector (the comma) used between its components. There are three possible group connectors, conventionally represented by comma, vertical bar, and ampersand.(9) The comma means that the components it connects must both appear in the order specified by the content model. The ampersand indicates that the components it connects must both appear but may appear in any order. The vertical bar indicates that only one of the components it connects may appear. If the comma in this example were replaced by an ampersand, a title could appear either before the stanzas of a <computeroutput>&lt;poem&gt;</computeroutput> or at the end (but not between stanzas). If it were replaced by a vertical bar, then a <computeroutput>&lt;poem&gt;</computeroutput> would consist of either a title or just stanzas--but not both!</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>Model Groups</title>
        <para>In our example so far, the components of each content model have been either single elements or <computeroutput>#PCDATA</computeroutput>. It is quite permissible however to define content models in which the components are lists of elements, combined by group connectors. Such lists, known as model groups, may also be modified by occurrence indicators and themselves combined by group connectors. To demonstrate these facilities, let us now expand our example to include non-stanzaic types of verse. For the sake of demonstration, we will categorize poems as one of stanzaic, couplets, or blank (or stichic). A blank-verse poem consists simply of lines (we ignore the possibility of verse paragraphs for the moment) (10) so no additional elements need be defined for it. A couplet is defined as a <computeroutput>&lt;line1&gt;</computeroutput> followed by a <computeroutput>&lt;line2&gt;</computeroutput>.</para>
        <programlisting>&lt;!ELEMENT couplet O O (line1, line2)&gt;</programlisting>
        <para>The elements <computeroutput>&lt;line1&gt;</computeroutput> and <computeroutput>&lt;line2&gt;</computeroutput> (which are distinguished to enable studies of rhyme scheme, for example) have exactly the same content model as the existing <computeroutput>&lt;line&gt;</computeroutput> element. They can therefore share the same declaration. In this situation, it is convenient to supply a name group as the first component of a single element declaration, rather than give a series of declarations differing only in the names used. A name group is a list of GIs connected by any group connector and enclosed in parentheses, as follows:</para>
        <programlisting>&lt;!ELEMENT (line | line1 | line2) O O (#PCDATA)&gt;</programlisting>
        <para>The declaration for the <computeroutput>&lt;poem&gt;</computeroutput> element can now be changed to include all three possibilities:</para>
        <programlisting>&lt;!ELEMENT poem - O (title?, (stanza+ | couplet+ | line+) )&gt;</programlisting>
        <para>That is, a poem consists of an optional title, followed by one or several stanzas, or one or several couplets, or one or several lines. Note the difference between this definition and the following:</para>
        <programlisting>&lt;!ELEMENT poem - O (title?, (stanza | couplet | line)+ )&gt;</programlisting>
        <para>The second version, by applying the occurrence indicator to the group rather than to each element within it, would allow for a single poem to contain a mixture of stanzas, couplets or blank verse.</para>
        <para>Quite complex models can easily be built up in this way, to match the structural complexity of many types of text. As a further example, consider the case of stanzaic verse in which a refrain or chorus appears. A refrain may be composed of repetitions of the line element, or it may simply be text, not divided into verse lines. A refrain can appear at the start of a poem only, or as an optional addition following each stanza. This could be expressed by a content model such as the following:</para>
        <programlisting><![CDATA[<!ELEMENT refrain - - (#PCDATA | line+)>
<!ELEMENT poem    - O (title?, ( (line+) | (refrain?, (stanza, refrain?)+ ) )) >]]></programlisting>
        <para>That is, a poem consists of an optional title, followed by either a sequence of lines, or an un-named group, which starts with an optional refrain, followed by one of more occurrences of another group, each member of which is composed of a stanza followed by an optional refrain. A sequence such as refrain - stanza - stanza - refrain follows this pattern, as does the sequence stanza - refrain - stanza - refrain. The sequence refrain - refrain - stanza - stanza does not, however, and neither does the sequence "stanza - refrain - refrain - stanza." Among other conditions made explicit by this content model are the requirements that at least one stanza must appear in a poem, if it is not composed simply of lines, and that if there is both a title and a stanza they must appear in that order.</para>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>Attributes</title> </section> <!-- </sect2> -->
      <section sect='sect2'> <title>SGML Entities</title> </section> <!-- </sect2> -->
      <section sect='sect2'> <title>Marked Sections</title>
      <para>It is occasionally convenient to mark some portion of a text for special treatment by the SGML parser. Certain portions of legal boilerplate, for example, might need to be included or omitted systematically, depending on the state or country in which the document was intended to be valid. (Thus the statement "Liability is limited to $50,000." might need to be included in Delaware, but excluded in Maryland.) Technical manuals for related products might share a great deal of information but differ in some details; it might be convenient to maintain all the information for the entire set of related products in a single document, selecting at display or print time only those portions relevant to one specific product. (Thus, a discussion of how to change the oil in a car might use the same text for most steps, but offer different advice on removing the carburetor, depending on the specific engine model in question.)</para>
      <para>SGML provides the marked section construct to handle such practical requirements of document production. In general, as the examples above are intended to suggest, it is more obviously useful in the production of new texts than in the encoding of pre-existing texts. Most users of the TEI encoding scheme will never need to use marked sections, and may wish to skip the remainder of this discussion.</para>
      <para>The "special processing" offered for marked sections in SGML can be of several types, each associated with one of the following keywords:</para>
      <itemizedlist>
        <listitem>INCLUDE: The marked section should be included in the document and processed normally.</listitem>
        <listitem>IGNORE: The marked section should be ignored entirely; if the SGML application program produces output from the document, the marked section will be excluded from the document.</listitem>
        <listitem>CDATA: The marked section may contain strings of characters which look like SGML tags or entity references, but which should not be recognized as such by the SGML parser. (These Guidelines use such CDATA marked sections to enclose the examples of SGML tagging.)</listitem>
        <listitem>RCDATA: The marked section may contain strings of characters which look like SGML tags, but which should not be recognized as such by the SGML parser; entity references, on the other hand, may be present and should be recognized and expanded as normal.</listitem>
        <listitem>TEMP: The passage included in the marked section is a temporary part of the document; the marked section is used primarily to indicate its location, so that it can be removed or revised conveniently later.</listitem>
      </itemizedlist>
      <para>When a marked section occurs in the text, it is preceded by a marked-section start string, which contains one or more keywords from the list above; its end is marked by a marked-section close string. The second and last lines of the following example are the start and close of a marked section to be ignored:</para>
      <programlisting>In such cases, the bank will reimburse the customer for all losses.
&lt;![ IGNORE [
Liability is limited to $50,000.
]]&gt;</programlisting>
      <para>The literal keywords INCLUDE and IGNORE, however, are not much use in adjusting a DTD or a document to a user&apos; requirements, however. (To change the text above to include the excluded sentence, for example, a user would have to edit the text manually and change IGNORE to INCLUDE. It might be thought just as easy to add and delete the sentence manually.) But the keywords need not be given as literal values; they can be represented by a parameter entity reference. In a document with many sentences which should be included only in Maryland, for example, each such sentence can be included in a marked section whose keyword is represented by a reference to a parameter entity named Maryland. The earlier example would then be:</para>
      <programlisting>In such cases, the bank will reimburse the customer for all losses.
&lt;![ %Maryland; [
Liability is limited to $50,000.
  ]]&gt;</programlisting>
      <para>When the entity Maryland is defined as IGNORE, the marked sections so marked will all be excluded. If the definition is changed to the following, the marked sections will be included in the document:</para>
      <programlisting>&lt;!ENTITY % Maryland 'INCLUDE'&gt;</programlisting>
      <para>When parameter entities are used in this way to control marked sections in a DTD, the external DTD file normally contains a default declaration. If the user wishes to override the default (as by including the Maryland sections), adding an appropriate declaration to the DTD subset suffices to override the default.</para>
      </section> <!-- </sect2> -->
      <!-- <section sect='sect2'> <title>Putting It All Together</title> </section> -->
    </section> <!-- </sect1> -->
    
  </chapter>  

  <chapter xml:id='hypermedia'>
    <info>
      <title>Hypermedia</title>
      <para><author>Erik Wilde</author> and <author>David Lowe</author>: <citetitle class='book'>XPath, XLink, XPointer, and XML: A Practical Guide to Web Hyperlinking and Transclusion</citetitle></para>
    </info>
      <para>The characteristic of <firstterm>hypertext</firstterm> systems is the creation of explicit <emphasis>associations</emphasis> between information elements and establishing how these associations became the key unifying concepts. The ways in which these associations are actually used varies significantly, though.</para>
      <para>Let us look briefly at some of the definitions developed for hypertext:</para>
      <itemizedlist>
        <listitem>Text that is not constrained to be linear</listitem>
        <listitem>The combination of natural languages text with the computer&apos;s capacity for branching, or dynamic display</listitem>
        <listitem>A database that has active cross-references and allows the reader to jump to other parts of the database as desired</listitem>
      </itemizedlist>
      <para>It is worth noting that the concept of nonlinearity often appears in discussions of hypermedia and hypertext. This does not imply that the user navigates along more than one path (though this may indeed be the case). Rather it means that the user has a range of options—hypertext provides explicit support for a network of potential or possible paths through the information.</para>
      <para>The underlying theme of all of these definitions is the use of information interrelationships to provide support for flexible access and information management. The support hypermedia provides for information interlinking allows us to navigate the network of information (often referred to as the information space) in complex but flexible patterns, primarily so that we (or software agents acting on our behalf) can identify specific items of information or information patterns. The associative linking of information parallels the mechanisms by which our minds retrieve information. It is also worth commenting that there is a similar argument for using multiple forms of media. This is because of the ability of other forms of media (such as images and audio) to convey certain forms of information much more rapidly.</para>
      <para>We shall adopt the following as our working definition of <firstterm>hypermedia</firstterm>:</para>
      <blockquote>Hypermedia: An application that uses associative relationships among information contained within multiple media data for the purpose of facilitating access to and manipulation of the information encapsulated by the data.</blockquote>
      <para>This definition states that the reason for supporting hypermedia concepts— and especially the fundamental idea of associations between information elements—is to allow users to gain improved access to information. For much of the rest of this section we will be demonstrating how the evolving technologies of the Web effectively support this idea.</para>
      <para>So, this definition tells us what hypermedia is, but it doesn&apos;t really help us understand the elements that are used in constructing and managing these important information associations or how they can be most effectively utilized. In the next subsection, we will look at the underlying concepts in much more detail and how these concepts help in improving information utilization.</para>
      
      <section>
        <title>Hypermedia Concepts</title>
        <para>In this section, we introduce and formalize the basic concepts and terminology that underpin the management of associations between and organization of content. In particular, we focus on the key concepts of hypermedia in the context of a large-scale, open, distributed information management system such as the Web. The logical place to start is to look at how associations are typically represented.</para>
        <para>Associations between information can be unidirectional, bidirectional, or nondirectional. Where associations are directional, there can be a single source or multiple sources, a single destination or multiple destinations. The associations can be typed or untyped; they can be structural or semantic.</para>
        <para>Similarly, the associations can be represented in numerous ways. One of the most fundamental is as links between the information sources. Alternatively, they can be represented as members of a common set. The associations (be they links or some other form) can be embedded directly into the content or stored separately in a linkbase (i.e., a database for links). They can refer to explicit content or be generic to any content that meets certain requirements. They can even be computed dynamically as required (something common in <firstterm>adaptive hypertext</firstterm> systems, where the associations change to adapt to the user or conditions). A few examples might make this bewildering variety of hypertext concepts a little clearer:</para>
        <variablelist>
          <varlistentry>
            <term>Simple Web Link</term>
            <listitem>One of the simplest examples of information associations is the ordinary <link linkend='html_links'>HTML link</link>. This is a simple static, directional, single-source, single-destination link that is embedded into the source document. It is static because the link never changes (unless it is explicitly modified by an author). It is directional because the link has an explicit direction of association (and hence, usually, an explicit primary direction of navigation). It is single-source because the link has only one point from which it can be triggered. It is single-destination because the link has only one information element that is accessed when the link is activated. The link is embedded into the source document (indeed, it is embedded within the source anchor) because the description of the connection between the source and destination anchors exists within the source anchor.</listitem>
          </varlistentry>
          <varlistentry>
            <term>Dynamic Web Link</term>
            <listitem>
              <para>This is a slightly more complex example. Like the previous case, this is directional, single-source, single-destination link that is embedded into the source document. The major difference is that the link is dynamic rather than static. The link is to a computer-generated interface (CGI) program (possibly a Perl script) that analyzes relevant input data and determines a suitable document to be returned (either directly or through an appropriate HTTP redirect response). For example, the CGI program may return a time-dependent page based on the current time or a user-specific page based on users previous navigation (as stored in cookies). In other words, the destination may change each time the link is followed. Note also that the link is not multidestination, despite the existence of multiple possible destinations. Each time the link is activated, only a single destination is retrieved.</para>
              <para>Whether the link is viewed as embedded in the source document is somewhat unclear. The first half of the link (i.e., from the source anchor to the CGI program) is embedded in the document containing the source anchor, but the identification of the possible link destinations is embedded in the CGI program.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Generic Link (in Webcosm)</term>
            <listitem>
              <para>Another example of linking is the generic link. In this case, we have a link that is defined independently of the source material but that is instantiated for each occurrence matching the specified anchor.</para>
              <para>In a typical document retrieved through a Webcosm Web server, we have a source document that initially contains no links. When this document is retrieved from the Webcosm server, the server first compares it to a list of links in the currently selected linkbases. Whenever a potential link anchor is located within the source document, a relevant anchor and link are added into the document. Consequently, the document that is returned to the user contains appropriate anchors for each occurrence of the generic link.</para>
              <para>The result is effectively a multiple-source, single-destination link. Although the source anchors and the link, as seen by the user, are embedded into the source document, this embedding is a consequence of the HTML presentation. The link (and indeed the anchor) is not stored with the source document. Rather it is stored in a separate <firstterm>linkbase</firstterm>. The link is also still static and still directional.</para>
              <para>It is worth noting that the architecture of Webcosm allows a much richer degree of link management. In Microcosm, documents typically do not contain explicit links that are selected. Rather the user can select a section of a document and request to see or follow the links in this section.</para>
              <para>When a user triggers an action (such as selecting a region of text and then requesting the system to follow any links in this region), the action is passed to the Document Control System (DCS). The DCS dispatches information associated with the action (content of the selected part of the source document, the action chosen by the user, and so forth) to the Filter Manager as a message. The Filter Manager then passes the message through a series of filter programs that can manipulate it.</para>
              <para>One example of a filter is the Linkbase filter. This recognizes an action to follow a link. It looks up the source anchor (i.e., the selected content) in the database of links. If it can find any relevant links, it generates a new message requesting that the DCS dispatch the document (or documents, if the link has multiple destinations) to the user and show the section of the document that forms the destination anchor.</para>
              <para>The architecture also allows more sophisticated functionality. For example, the last filter in the chain can be a program that recognizes all the messages requesting documents to be displayed (i.e., the destinations of any identified links) and replaces them with messages asking the user to select the link he or she wishes to follow. This way if the user selected a section of text that contained multiple links and requested the system to retrieve related documents, the response would be a list of links (and destination documents) from which the user could choose. The structure also allows the creation of computed link filters. Such filters might create dynamically computed links—automatic links that are created based on a comparison of the selected information and the content of other available documents.</para>
              <para>The linkbases in Microcosm allow the specification of three primitive link types. The first is the specific link. This is similar to the links in the Web, where the link is associated with an anchor at a specific location in a document. The second link type is the local link. This is associated with the occurrence of a specific piece of information, irrespective of where it occurs in a document. The third type is the generic link, as described earlier. The system can also use multiple linkbases, allowing users to select linkbases that are suitable to their particular needs. In other words, the same set of documents can have different linkbases (and hence links) depending on the way in which the documents are used or the preferences of the user. We could, for example, provide a linkbase developed by the original author, a linkbase containing personal annotations of the user, and a general linkbase containing generic links into a glossary, dictionary, or similar reference source.</para>
              <para>Finally, it is worth noting that Webcosm, the Web-based version of Microcosm, is naturally constrained by the architecture of the Web and so cannot provide quite as flexible an approach as that described by the Microcosm link service. Nevertheless, the broad approach to managing links is still significantly richer than that for conventional Web servers.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Structural Links (in Hyperwave)</term>
            <listitem>
              <para>Not only can links be managed in different ways, but they can also serve very different purposes. This is commonly seen in the Web where many pages have both structural links, such as menus, and associative links, such as cross-site references.</para>
              <para>A good example of how these can be managed in an effective way is to store the structure of the site separately from the actual content. The associations between various information nodes, such as documents, are stored in a linkbase. The associations include both structural relationships and associative links. When a specific node (possibly a document) is requested from the server, the server retrieves the document, looks up the linkbase to identify appropriate associations, and then builds a composite page containing both the document and its relevant links. The generated page is then returned to the user.</para>
              <para>The resultant structural links are single-source, single-destination. Like the previous example, they are not embedded into the source document but rather stored separately.</para>
              <para>A good example of a server that supports this type of functionality is Hyperwave. The Hyperwave server supports the concept of document collections as a way of performing effective document management. Most Web systems address document management very poorly, often leaving it up to the underlying operating system&apos;s file management. The developers of Hyperwave (and Hyper-G, the research system on which Hyperwave is based) introduced the idea of document collections. A collection acts as a container for objects (including documents and other collections). Every object must be part of one or more collections, with the result that we have a collection hierarchy. (It is not, however, a tree structure since a document can belong to multiple collections.)</para>
              <para>Whenever a new document is added to the server, it must be added to a collection; and since collections can be directly browsed, the document will automatically be available to users, unlike with conventional Web servers where added documents require suitable links to be added from other related documents before they become accessible. Hyperwave uses the document hierarchy as a browsing tool for users. A user can locate a document by browsing the hierarchy like a sequence of menus—following structural links that are automatically created from the collection hierarchy. The specific format of the generated structural links is highly configurable.</para>
              <para>The Hyperwave document management also contains various other features. A collection may contain a special document called the collection head, which is shown whenever a collection is viewed (rather than listing the contents of the collection). Hyperwave also supports two special types of collection: the <firstterm>cluster</firstterm>, which contains a set of documents that should typically be viewed together in some form (such as for a multimedia presentation); and the <firstterm>sequence</firstterm>, which is an ordered collection of documents (or sub-collections) that should be presented in sequence (such as for a guided tour). Also, both documents and collections are supported by a rich attribute model (including attributes such as the owner, name, creation, modification and expiration dates, and access and modification permissions). These attributes allow sophisticated linking, for example, only showing links to documents that the user has permission to access.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Spatial Hypertext Associations</term>
            <listitem>
              <para>Irrespective of how links are stored and represented, they can be presented in a wide variety of ways. Apart from the conventional link presentation seen in most Web browsers, a number of hypertext systems use spatial representations, where the associations between information components are represented either by actual connections shown in a diagram or through the use of spatial proximity (the closer the items, the more related they are).</para>
              <para>The underlying associations between information items can be represented in any of the ways just presented. They can be extracted from the static links contained in the documents themselves, they can be obtained from a linkbase, or possibly they can even be constructed dynamically by carrying out a suitable semantic analysis of the documents to identify items with related content. In this last case, the author need not ever explicitly create any form of link. Rather, the association can be determined by an automated analysis. In a case such as this, the association is nondirectional, potentially many-anchored, and certainly not static.</para>
              </listitem>
          </varlistentry>
          <varlistentry>
            <term>Set-Based Association</term>
            <listitem>
              <para>All of the examples described so far have represented the associations between information elements as links. This need not be the case. Items can be associated not only by explicitly creating a connection between them, but also by ensuring that they belong to a common set. This is the case with Hyperwave, where documents belong to a collection (i.e., the association is <emphasis>represented</emphasis> by common membership), though the associations are still typically <emphasis>presented</emphasis> as a link.</para>
              <para>Several research systems have looked at ways of explicitly representing associations between information elements as sets rather than links. There are two levels at which this can be done. We can represent the associations as sets but still present them as links, or we can implement user interfaces that allow users to navigate within an information space that is devoid of links but that presents items as belonging to sets. An example of the latter is VIKI. VIKI supports representation of associations between information by spatial proximity and membership in nested collections rather than explicit links. This hierarchy of collections allows users to visualize and utilize the relationships.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Nontextual Link</term>
            <listitem>
              <para>All of the examples shown so far have revolved around textual information. However, the associations between information need not be between text but may be between other media such as images, video, and audio. Where the association is represented as a link, all we need to do to create nontextual associations effectively is to establish anchors within nontextual data and to be able to refer to these anchors. Doing this in images is not particularly complex—being relatively familiar from HTML image maps, where the anchor is defined by specifying the coordinates of the area that forms the anchor (though this mechanism cannot be used to specify destination anchors as targets). The following is an example of an image map being used to define link anchors (areas in the image) and associated links:</para>
              <programlisting><![CDATA[<html>
  <body>
    <h1>Example of HTML Image Map</h1>
    <img src="transclude_authors.gif" usemap="#auths">
     ...
    <map name="auths">
      <area shape="rect" coords="14,40,48,63" href="dbl.html">
      <area shape="rect" coords="57,71,93,98" href="dret.html">
    </map>
  </body>
</html>]]></programlisting>
              <para>The Synchronized Multimedia Interchange Language (SMIL) provides a more sophisticated way of representing anchors (and links) in nontextual media (allowing both spatial location and time information to be specified). Consider the following example SMIL markup:</para>
              <programlisting><![CDATA[<smil>
  <head>
    <layout type="text/smil-basic-layout">
      <root-layout width="200" height="200"/>
      <region id="video1" left="20" top="20"
        width="50" height="50" fit="fill"/>
      <region id="image2" left="100" top="20"
        width="80" height="50" fit="fill"/>
      </layout>
    </head>
    <body>
    <par>
      <video src="exampleA.rm" alt="Video clip"
        region="video1" dur="30s">
        <anchor href="blah.rm" coords="25%,25%,75%,75%"
          begin="0s" end="5s"/>
        <anchor href="hmmm.rm" coords="12,27,67,94"
          begin="12s" end="17s"/>
      </video>
      <img src="exampleB.gif" alt="Static image"
        region="image2" dur="30s">
        <anchor href="hmmm.rm" coords="10,10,40,40"
          begin="2s" end="28s"/>
      </img>
    </par>
  </body>
</smil>]]></programlisting>
              <para>In this example, the presentation contains both a video clip and an image being presented in parallel (identified by the <userinput><![CDATA[<par>]]></userinput> tag). Each of these media items contains anchors. The anchor specifies the region of the media clip and the time frame over which it is available to be selected. It is up to the presentation program to determine how the anchor should be shown to the user. Like HTML links, the links defined in this way are still single-source and single-destination and are embedded into the source document (though it is possible to define overlapping anchors).</para>
              <para>Unlike with HTML links, it is possible to define some additional semantics through the use of specific attributes. The list of attributes includes an <userinput>id</userinput> attribute; a <userinput>show</userinput> attribute to indicate the presentation semantics ( <userinput><![CDATA[show="replace"]]></userinput> to insert the media item in place, <userinput><![CDATA[show="new"]]></userinput> to insert it into a new window, and <userinput><![CDATA[show="pause"]]></userinput> to pause the current media clip); an <userinput>href</userinput> attribute to specify the target; and <userinput>coords</userinput>, <userinput>begin</userinput>, and <userinput>end</userinput> attributes to define the spatial and temporal location of the anchor within the media.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Formalizing Linking Concepts</title>
        <para>The examples just described illustrate the range of link types (and other forms of information associations) that can be used in managing access to and in manipulating information. To aid in the discussions and examples throughout the rest of this section, we now look at formalizing some of these concepts.</para>
        <para>However, before we do this there is one point we wish to emphasize. Throughout the previous examples, we discussed information associations at varying levels of abstraction. It is important to clarify these levels. We can view associations at three different levels:</para>
        <itemizedlist>
          <listitem>The first level is how the associations are <emphasis>conceived</emphasis>. We can view information associations as being connections (i. e., links) between two or more information items, and these connections can be directional or nondirectional. Alternatively, the associations can be based on common membership of a set or on commonality of some attribute or feature of the information.</listitem>
          <listitem>The second level is the way in which these conceptual associations are <emphasis>represented</emphasis>. For example, do we represent a connection as a link embedded into the source document or do we store it in a separate linkbase? The particular decisions made regarding the representation of the association will have major implications for what we can achieve in terms of managing the information. For example, with the Web the use of links that are embedded into source documents means that identifying all of the pages that link to a given page is possible in theory but impractical.</listitem>
          <listitem>The third level is the way in which link information is <emphasis>presented</emphasis>. Even when we represent associations in a certain way, we still have many choices about how the system that presents the information will show the associations. Consider the examples discussed previously. If we have simple Web pages, then we can present the links embedded in these pages using the approach adopted by most Web browsers— simply by showing the anchor text in a different font or underlined or by having it stand out in some other way that lets users know they can select the link. Alternatively, we could create a simple program that analyzes the documents and extracts the links and then shows the link structures using a spatial representation. Similarly, with tools such as Webcosm and Hyperwave, the links are stored in linkbases rather than being embedded into documents and provide a much richer model of links. They are still nevertheless used in the creation of HTML documents for presentation in conventional Web browsers.</listitem>
        </itemizedlist>
        <para>We need to be able to understand the different models that can be used to represent information associations and the implications of these models. But we also need to be able to separate how the associations are represented from how they are presented. So let us look at formalizing some of the linking concepts. We start with a definition.</para>
        <blockquote><firstterm>Node</firstterm>— A unit of information that should be presented as a whole. Presenting only part of a node will result in a lack of suitable context, and hence the information may lose potential usefulness or may be misinterpreted.</blockquote>
        <para>Typically with the Web, nodes will be either single resources (such as text files, audio clips, and images) or a composite of resources (such as an HTML document that includes several images). The situation becomes a little more complex with XML documents, given that we can construct an XSL style sheet that transforms the XML document in such a way that only some sections of the document need to be presented. Indeed, it is possible to create style sheets that generate a document from multiple-source XML documents. In this case, the XML documents would not be viewed as the node. Rather, the node would be the document resulting from the transformation and hence is not represented explicitly as a single document but created as needed from multiple sources.</para>
        <para>It is worth noting in passing that determining a valid node size and structure is a significant design issue. Among hypertext and usability researchers, there has been considerable debate and research into node sizes that provide the optimum access to information. Some developers recommend that pages should be kept small (nothing beyond a single screen of information) to emphasize each individual concept and to improve the structuring of the information. Other developers recommend much longer pages that preserve the natural linear structure of the plot or argument (with appropriate interlinking within the page). In our opinion, the size of the presentation nodes will be a function of the application and the way in which the information is being structured, and it is inappropriate to set specific constraints or recommendations.</para>
        <para>Within an individual node we will often have many concepts associated with other concepts both within and beyond the node. In representing and utilizing these associations, we need to explicitly identify the concept, as represented by the fragment of the node that captures that concept. These fragments are captured as anchors.</para>
        <blockquote><firstterm>Anchor</firstterm>— A region of a node that can be explicitly addressed and identified within the presentation of a node.</blockquote>
        <para>An anchor can be the source of an association (and the navigation path that goes with this) or the destination or possibly both. It can be explicitly embedded into the document (as happens with HTML using the <userinput><![CDATA[<a>]]></userinput> element). Alternatively, it can be represented externally to the node (as can happen with <link linkend='xpointer'>XPointer</link> fragment identifiers).</para>
        <para>Let&apos;s take a closer look at links.</para>
        <blockquote><firstterm>Link</firstterm>— A connection between multiple anchors (and nodes where there is an implied anchor that encompasses the entire node) that represents an association between the concepts captured by the anchors.</blockquote>
        <para>Note that this definition makes no statement about the number of anchors, the direction of the association, or where the link resides. These are all constraints that define particular types of links.</para>
        <para>In HTML the links are directional, with a single-source anchor and a single-destination anchor, and are embedded into the source node. In <link linkend='xlink'>XLink</link>, the links are much more flexible. It is also worth re-emphasizing that the interpretation of how the links can be used is entirely up to the systems managing the information. The links can be used by a browser to allow a user to select related documents for viewing. Alternatively, the links can be used by a search engine to check whether the related nodes indicate that the information on a given target is relevant to the user&apos;s query.</para>
        <para>The way that a link should be interpreted can vary widely. This is referred to as link semantics.</para>
        <blockquote><firstterm>Link Semantics</firstterm>— The attributes of a link that indicate how the link should be interpreted (and hence how it might behave under certain circumstances).</blockquote>
        <para>Consider the following examples. We may have a link that should be followed automatically after a given amount of time has elapsed. An example would be a page that presents an opening screen that is replaced by a main menu after several seconds.</para>
        <para>As another example, we can have links that, when activated, cause a new node to be presented in conjunction with an existing node, rather than replacing the existing node. An example of this is where a link connects a phrase and a definition of the phrase obtained from a glossary. Selecting the phrase might pop up a window containing a definition.</para>
        <para>We could also have a link that causes information to be displayed by inserting the information into the existing document. As an example, we might have a table of contents that contains links from each section. When we select a link, the section name expands into the contents of the section.</para>
        <para>As a final example, we may even have links that when followed cause changes in other nodes that are not part of the relationship. As an example, we may have several nodes being presented simultaneously, including an audio track. When we select an anchor and activate a link in a textual document, the browser might load a different textual document, but also cause the audio track to pause.</para>
        <para>In each case, we are defining the semantics of the link. This is typically a separate issue from the structure of the link and is often poorly supported. In HTML, link semantics are very poorly supported, being restricted largely to being able to define the window or frame into which the target document should be loaded. Link semantics are somewhat richer in <link linkend='xlink'>XLink</link>, though still not as rich as in various stand-alone hypermedia systems.</para>
        <para>Links can be categorized as static, dynamic, or generic.</para>
        <blockquote><firstterm>Static Link</firstterm>— A link with fixed structure and semantics that does not change based on when, how, or by whom it is used.</blockquote>
        <blockquote><firstterm>Dynamic Link</firstterm>— A link that has structure or behavior that changes over time or with different users or circumstances. Typically, the structure and behavior are not resolved until the link is activated. It is then determined dynamically.</blockquote>
        <blockquote><firstterm>Generic Link</firstterm>— A link whose source anchor(s) is (are) not defined by a specific location, but rather by a particular pattern that can be matched to any relevant content.</blockquote>
        <para>Dynamic links effectively change over time. These changes can be with the link structure (such as changes in the link destinations) or with the link semantics (such as changes in the activation time of the link). These types of links can be important for supporting adaptive systems. For example, we may wish to change the destination of a link depending on which pages a user has previously visited. Although HTML has no inherent support for dynamic links, it is possible to create them using server-side technologies such as CGI programs or servlets, possibly in conjunction with other technologies such as HTTP cookies.</para>
        <para>The definition of a generic link has several implications that would be useful to look at briefly. The first is that because the source anchor is defined for a particular pattern, rather than a particular location, it would be more accurate to refer to it as a generic anchor than a generic link. Also, the anchor is typically not resolved until runtime. In effect, the generic link is often viewed as a particular type of dynamic link.</para>
        <para>It is worthwhile to note that the pattern can match many locations, and hence we inherently have a multiple-source link (whether the link is also multiple-destination depends on how the link destination is represented and resolved). The mechanism for representing the pattern depends on the particular system and the type of media. For plain text, we can simply define a text string as the pattern—though we could make it more flexible by allowing the definition of various string pattern-matching operations. For image, video, and audio data, the pattern matching becomes much more complex.</para>
        <para>For structured text, we can also define other forms of pattern matching. As we will show later in the book, XPointer (and XPath within XPointer) can be used to define patterns for identifying parts of XML documents. These patterns can then be used to create generic links.</para>
        <para>Whereas an anchor is typically either specific content or a pattern that matches to content, a pointer is a way of defining an anchor.</para>
        <blockquote><firstterm>Pointer</firstterm>— An identifier that uniquely specifies one or more items.</blockquote>
        <para>In other words, a pointer is a mechanism for uniquely identifying a specific anchor or set of anchors. Where we have embedded anchors, the anchor can be labeled with a suitable ID, and the pointer then simply needs to refer to this unique ID. Where the anchor is not embedded, or an ID is not available, then some other mechanism for identifying (or pointing at) the anchor needs to be available. With XML documents, this is the purpose of XPointer.</para>
        <para>This effectively means that links and pointers are complementary. Links form the connections, but pointers allow the identification of the items that will be connected. Think of items being connected by a rope (i.e., the link). At either end of the rope we have some hooks (i.e., pointers) that connect the rope to the relevant items (i.e., anchors). With XML, we have both XPointer for identifying the participating content (i.e., anchors) and XLink for creating the connections.</para>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Inclusion and Transclusion</title>
        <para>Let&apos;s look at the concepts of inclusion and transclusion.</para>
        <blockquote><firstterm>Inclusion</firstterm>— The construction of a composite document by replacing a reference with the content of the element that was being referenced.</blockquote>
        <blockquote><firstterm>Transclusion</firstterm>— Reuse of content in such a way that ensures inherent connections between the content used in different contexts.</blockquote>
        <para>Going into a little more detail, we see that Ted Nelson (the originator of the term) describes transclusion as follows</para>
        <blockquote>The central idea has always been what I now call <firstterm>transclusion</firstterm>, or reuse with original contexts available, through embedded shared instances (rather than duplicate bytes). Thus the user may intercompare contexts of what is reused, both for personal work (keeping track of reuse) and publication (for deep comprehension and study). Transclusion brings to electronic publishing a copyright method that makes republication fair and clean: Each user buys each quotation from its own publisher, assuring proper payment (and encouraging exploration of the original).</blockquote>
        <para> In other words, transclusion is the inclusion of content by reference (i.e., not by cut-and-paste) into a new context (in a way that is often likely to change the interpretation of the content). The connections to the other uses of the content are maintained, and access to the original context is ensured. This is different from inclusion where we include content but don&apos;t necessarily do so in a way that ensures that the original context is available. For example, if this book were written using true transcluding principles, then Nelson&apos;s quote would not be included directly in the book. Rather the book would include a link to the original content, and when the book was being read, the quote would be shown in place of the link, but readers would be able to directly see (if they chose) the original context in which the quote was published.</para>
        <para>This potentially changes the whole publishing paradigm to one of publishing by reference. Effectively, we can create
composite documents that inherently maintain rich cross-linking by the transclusion of document fragments from other
sources. As we show later, this model is at least partly supported by <link linkend='xlink'>XLink</link> and <link linkend='xpointer'>XPointer</link>.</para>
        
      </section> <!-- </sect1> -->
      
      <section>
        <title>References Versus Links</title>
        <para>It is very easy to get confused by the difference between references and links, especially when we also throw in concepts such as resources, arcs, pointers, ranges, and anchors. This issue is exacerbated by the use of different terminology in HTML and XML, along with numerous different hypermedia systems. So let&apos;s look at these concepts and see if we can clarify the situation a little.</para>
        <para>We begin with the simplest situation, which is HTML linking. In HTML, we normally refer only to anchors and links: an anchor is an identified region of a document, and a link is the connection between two anchors (or between an anchor and a resource, where the entire resource is assumed to be the destination anchor). This is, however, too simplistic for what we wish to support in <link linkend='xlink'>XLink</link>.</para>
        <para>In XML linking, we can start with the concept of a resource—something that is universal to the World Wide Web. A resource is defined as an addressable unit of information or service—in other words, basically anything that we are able to request, including files, images, audio clips, and program outputs. Indeed, it is possible to refer to (almost) arbitrary subsections of those resources (subresources) and hence those subresources themselves can be viewed as resources.</para>
        <para>A key word in this definition is addressable. In other words, having resources is not sufficient. We need some way to identify or refer to those resources—what might be referred to in a programming context as pointers. The Web standards— and in particular RFC 2396— distinguish between addressing a whole resource (referred to as an <firstterm>identifier</firstterm>) and addressing a particular subresource (referred to as a <firstterm>reference</firstterm>).</para>
        <para>A resource (or subresource) can be used in various ways; but in the context of this discussion, the most common use will be related to linking. In order to do this, we need to define the relevant regions of the resources participating in a link. Within the context of a link, these regions are referred to as <firstterm>anchors</firstterm>. In other words, a reference defines a resource (or subresource), which, in the context of a link, is treated as an anchor.</para>
        <para>Identifiers are typically implemented on the Web using universal resource identifiers (URIs), discussed further down. References (i.e., referrals to a section or fragment of a resource) are implemented by attaching a suitable fragment specification to a URI. This specification can take many forms, which typically are specific to the document or resource type. For example, with HTML documents, we simply specify the name of a particular anchor within the resource. With XML, on the other hand, we use <link linkend='xpointer'>XPointer</link> to identify a specific fragment. In other words, XPointer can be used only to identify fragments within XML documents, limiting its applicability to just these types of documents.</para>
        <para>So let&apos;s consider XPointer and its capabilities. XPointer provides a general way to select sections of an XML document, essentially by writing a set of expressions. The result of evaluating an expression will usually be a set of locations (not surprisingly, referred to as a <firstterm>location set</firstterm>). It is possible to select elements, attributes, text strings, and so forth. For example, the XPointer expression</para>
        <programlisting>xpointer(/child::body[position()=1]/child::p)</programlisting>
        <para>selects all elements (i.e., all descendants of the document root) that have an attribute called <varname>name</varname> with a value of <literal>book</literal>. In effect, the selection mechanisms can be concatenated to progressively identify a specific subset of nodes.</para>
        <para>XPointer is actually an application of the <link linkend='xpath'>XPath</link> standard. XPath was developed specifically to be a foundation for other standards such as XPointer. Another application of XPath is as part of XSL Transformations (XSLT). In XSLT, XPath expressions allow the selection of specific nodes that can then be transformed into an alternative textual form (often for presentation).</para>
        <para>Since XPath is intended to be relatively generic (to suit multiple applications), certain sections of documents cannot be specified using XPath expressions. For example, although both of the XPointer fragments just shown are constructed from valid XPath expressions, XPath cannot select an arbitrary string that crosses several nodes. It is in areas such as this that XPointer has extended XPath. For example, the following expression defines the set of all occurrences of the string <quote>links and anchors</quote> within all para elements in the <uri>http://a.b/c/d.xml</uri> resource, which could not be achieved using just XPath expressions:</para>
        <programlisting><![CDATA[http://a.b/c/d.xml#xpointer(string-range(//para,'links and anchors'))]]></programlisting>
        <para>As one further example, the following URI defines a range that extends from the beginning of the element with an identifier of sect-2.3 to the end of the element with an ID of sect-3.4.</para>
        <programlisting><![CDATA[http://a.b/c/d.xml#xpointer(id('sect-2.3')/range-to(id('sect-3.4')))]]></programlisting>
        <para>Note that, in this case, this may include only parts of nodes (for example, part of a Chapter-2 element and part of a Chapter-3 element)—again, something not possible with XPath.</para>
        <para>To summarize, URIs are a form of identifier that specifies a desired resource. XPointers are one of many forms of references that can specify a fragment of that resource (for XPointers, the resource must be an XML document).</para>
        <para>In the context of linking, this means that XPointers can be used to specify anchors—or arbitrary sections of resources that will participate in a link. In XML, they are referred to as <firstterm>locator elements</firstterm>, rather than anchors. Alocator element is, however, more than just an XPointer— we can also specify the role that the resource will play and provide a title for the resource. For example, consider the following XLink fragment (don&apos;t worry too much about the syntax yet—just look at the overall structure):</para>
        <programlisting><![CDATA[<siblings xlink:type="extended">
<child xlink:type="locator"
       xlink:href="people.xml#xpointer(id('anna'))"
       xlink:title="Anna"/>
<child xlink:type="locator"
       xlink:href="people.xml#xpointer(id('bill'))"
       xlink:title="Bill"/>
<child xlink:type="locator"
       xlink:href="people.xml#xpointer(id('carl'))"
       xlink:title="Carl"/>
</siblings>]]></programlisting>
        <para>In this example, we define three locator elements, each of which uses an XPointer as part of the locator required to specify the remote resource that is participating in the link. We also give each locator element a title.</para>
        <para>Before moving on from the concept of a link, two additional concepts need to be clarified—links and arcs. This requires an understanding of a third concept—traversal. In an HTML link, we have a single-source anchor, a single-destination anchor, and an implied connection between them. When we view an HTML document and activate the anchor (in most user interfaces by simply clicking on it), then the link is traversed to the link destination.</para>
        <para>The situation is somewhat different with linking in XML. XLink allows the definition of links, but a link does not imply traversal! Rather, in XLink a link is simply an association between a number of resources. For example, consider the XLink example just given. In this example, the link associates three resources but does not specify any traversal semantics among them. There is no link source, nor is there a link destination. This is because XLink has separated the concept of associating resources from the concept of traversal among these resources. In many cases, we may not need to provide traversal information—especially where the association is being defined for a reason other than to support navigational hyperlinking (for example, to define a collection of resources to be analyzed by computer, rather than to be viewed by a human user).</para>
        <para>Where we do want to specify traversal information, this is done separately from the specification of the association through the use of an arc.</para>
        <para>See, for example, the following:</para>
        <programlisting><![CDATA[<person xlink:type="extended">
  <name
    xlink:type="locator"
    xlink:href="staff.xml#xpointer(string-range(/,'David Lowe'))"
    xlink:label="src"/>
  <details
    xlink:type="locator"
    xlink:href="David.xml"
    xlink:label="dest"/>
  <go
    xlink:type="arc"
    xlink:from="src"
    xlink:to="dest"/>
</person>]]></programlisting>
        <para>Here we specify an association between two resources (defined by locators): the first resource is all occurrences of a given string (<userinput>&apos;David Lowe&apos;</userinput>) within one XML document, and the second is another XML document (about David Lowe). We then specify the traversal semantics using an arc from the first resource to the second resource. What this effectively means is that we now have separate mechanisms for specifying an association between resources (a link) and for specifying how we might traverse between these resources (an arc within that link).</para>
        <para>Indeed, we can have a single link involving a number of resources, with multiple different traversal rules. Consider the following example, where we have two arc specifications. Also, note that the second arc specification actually creates three arcs since there are multiple destinations specified by the given to label. We end up with arcs from <filename>a.xml</filename> to <filename>b.xml</filename>, from <filename>b.xml</filename> to <filename>c.xml</filename>, from <filename>b.xml</filename> to <filename>d.xml</filename>, and from <filename>b.xml</filename> to <filename>e.xml</filename>.</para>
        <programlisting><![CDATA[<extendedlink xlink:type="extended">
  <loc xlink:type="locator" xlink:href="a.xml" xlink:label="x"/>
  <loc xlink:type="locator" xlink:href="b.xml" xlink:label="y"/>
  <loc xlink:type="locator" xlink:href="c.xml" xlink:label="z"/>
  <loc xlink:type="locator" xlink:href="d.xml" xlink:label="z"/>
  <loc xlink:type="locator" xlink:href="e.xml" xlink:label="z"/>
  <go xlink:type="arc" xlink:from="x" xlink:to="y"/>
  <go xlink:type="arc" xlink:from="y" xlink:to="z"/>
</extendedlink>]]></programlisting>
        <para>Before leaving this topic, there is one final comment about some of the definitions in the XLink standard. The standard defines <firstterm>traversal</firstterm> as <quote>using or following a link for any purpose,</quote> and it defines an <firstterm>arc</firstterm> as <quote>information about how to traverse a pair of resources, including the direction of traversal and possibly application behavior information as well.</quote> This can be a little confusing, insofar as we can have links without arcs (and therefore no definition of traversal behavior), but the links can obviously still be used and therefore (according to the definitions) traversed. All this means is that they are being used (i. e., traversed) in a way determined beyond the XLink specification.</para>
        <para>This raises an interesting issue—that XLink can be used to specify the existence of a link without specifying rules for how that link will be used. XLink does support some attributes for defining behaviors—such as how and when an arc should be traversed—but these are optional and when present their interpretation is left to the applications using the XML documents. For example, where multiple arcs emanate from one resource, and that resource is activated, the standard does not say how the application should respond. Example alternatives include traversing all arcs, giving a user the choice of which arc to traverse, or using some internal logic to make the choice.</para>
        <para>One mechanism that is supported by XLink is the inclusion of arc roles. For example, consider the following:</para>
        <programlisting><![CDATA[<extendedlink xlink:type="extended">
  <loc xlink:type="locator"
    xlink:href="a.xml"
    xlink:label="x"/>
  <loc xlink:type="locator"
    xlink:href="b.xml"
    xlink:label="y"/>
  <go xlink:type="arc"
    xlink:from="x"
    xlink:to="y"
    xlink:arcrole="http://q.r/s.dat"/>
</extendedlink>]]></programlisting>
        <para>In this case the arc has an <varname>arcrole</varname> attribute that provides a unique role identifier. This identifier may allow the application to obtain information that assists in determining the appropriate behavior when traversing the arc. This, however, is beyond the XLink specification and is application-dependent.</para>
      </section> <!-- </sect1> -->
      <section>
        <title>Resource Identification: URL, URI, and URN</title>
        <para>We mentioned in the previous section that XPointers can be used in the definition of XLink locators—those XLink elements used to identify remote resources that are participating in a link. We also alluded to the fact that XPointers on their own are not enough. XPointers can define a fragment of a resource but cannot identify the resource itself. This is the purpose of <firstterm>Uniform Resource Locators</firstterm> (URLs), <firstterm>Uniform Resource Identifiers</firstterm> (URIs), and <firstterm>Uniform Resource Names</firstterm> (URNs).</para>
        <para>The most general form of identifier is a URI (defined in RFC 2396. URIs are intended to provide a broad mechanism for identifying a resource. This identification can happen in many ways. It can take the form of a specification of the mechanism to access the resource, a unique name for the resource, or a combination of both. As stated in RFC 2396,</para>
        <blockquote>[a] URI can be further classified as a locator, a name, or both. The term <firstterm>Uniform Resource Locator</firstterm> (URL) refers to the subset of URI that identify resources via a representation of their primary access mechanism (e. g., their network <quote>location</quote>), rather than identifying the resource by name or by some other attribute(s) of that resource. The term <firstterm>Uniform Resource Name</firstterm> (URN) refers to the subset of URI that are required to remain globally unique and persistent even when the resource ceases to exist or becomes unavailable.</blockquote>
        <para>URLs were originally defined in RFC 1738 and RFC 1808 (dealing with relative URLs), though they are now viewed as a specific subset of URIs and are defined in RFC 2396. URLs specify resources using two parts. The first part of the URL defines the mechanism used to access the resource (e.g., http, mailto, ftp, and so on). The second part defines a mechanism-specific set of information (e.g., //a.b/c/d.xml#blah ) that defines the protocol-specific information, which provides sufficient information to uniquely identify the resource. This second part has a syntax that is specific to the scheme. For example, many hierarchical schemes (such as http and ftp) use the following syntax (some examples are included):</para>
        <programlisting><![CDATA["//" [user[":" password] "@"]host[":" port]"/"url-path "?" query]]></programlisting>
        <para>as in these examples:</para>
        <programlisting><![CDATA[//erik:test@transcluding.com:81/book/examples/code.html
//transcluding.com/book/tw.pdf
//transcluding.com/book/tw.xml
//transcluding.com/book/tw.pl?chap=3]]></programlisting>
        <para>The components of most interest in this case are the <userinput>url-path</userinput> and <userinput>query</userinput>. All the components before these provide information on finding the host that offers access to the required resource and any specific details required to obtain this access. The <varname>url-path</varname> specifies how the resource can be accessed on the specific host, and the <varname>query</varname> provides information to be interpreted by the resource.</para>
        <para>One of the problems with URLs is that in order to identify a particular resource using them, we need to know both the scheme and the scheme-specific information required to access the resource. For schemes such as http , this typically means knowing on which host the resource is located and exactly where. This creates significant problems in several situations. If a resource is moved (for example, because of maintenance changes), then any URLs referring to that resource will become invalid. Similarly, we can have multiple identical resources, but a URL must point to a specific one. If the host for that particular resource is temporarily unavailable, then again, the URL becomes invalid, even though other copies of the resource may be available elsewhere.</para>
        <para>URNs are intended to circumvent these problems. As stated earlier in this section, the RFC 2396 standard defines a URN as a subset of URI that requires a global uniqueness and persistence even without the resource. In other words, even when resources are moved, a URN should still be valid! The standard does not discuss implementation issues, though a typical implementation might allow a URN to be resolved dynamically to obtain a specific instance of the resource (through a mechanism similar to the Domain Name Service used to resolve Internet host names into IP addresses). At present such an infrastructure does not yet exist, and URNs are neither used nor supported. Work on URNs is currently highly volatile and changing rapidly. It is worth noting that once a URN-specified resource has been located, we may still often wish to refer to a particular fragment of that resource. As such, the concept of <firstterm>fragment identifiers</firstterm> (including the use of XPointers) is still relevant to URNs.</para>
        <para>Finally, it is worth reiterating that URIs are a generalization of both URLs and URNs. All recent Web standards use URIs rather than URLs. In general, it is preferable to avoid the term URL altogether and use URI whenever possible—given that every URL is a URI and only very rarely are only URLs (and not URNs) permitted.</para>
      </section> <!-- </sect1> -->
      <section>
        <title>Persistence of Identifiers and References</title>
        <para>In the previous discussion we mentioned the fact that URNs are intended to provide a persistent identifier for a resource. In other words, given a particular URN, we will still be able to locate the resource being identified irrespective of whether the location has changed. This concept is important to the Web in general and to linking in particular. Since we regularly define links by specifying references to the resources (or resource fragments) that participate in the links and if the references are not persistent, then we will regularly find links that contain invalid references. The consequences of not having persistent references is evident in the ubiquitous broken links and invalid search engine results found in the current Web. The current solution is typically to regularly check for broken links (there are numerous tools that can automate this process) and to manually rectify any that are found. This is, however, a rather unsatisfactory solution. It requires considerable effort and should not be necessary.</para>
        <para>In effect there are two separate and distinct aspects to be considered: persistence of the identifier for a resource, and persistence of the reference for the resource fragment. These two aspects are orthogonal and typically addressed using distinct approaches.</para>
        
        <section sect='sect2'>
          <title>Persistence of Identifiers</title>
          <para>Identifier persistence is the ability to locate resources, based on a given identifier, irrespective of changes to the location (or other characteristics) of that resource. One obvious way to attain this is by using URNs in preference to URLs. However, given the current lack of an infrastructure to support URNs, this is not a viable solution at present.</para>
          <para>This means that we must consider approaches to ensuring the persistence of URLs as identifiers. The specific approach will be dependent on the particular scheme being used in the URL. For example, with mailto URLs, the scheme-specific part defines an e-mail address. We can therefore promote persistence by using mail forwarding if a mail address changes.</para>
          <para>More interestingly, with the http scheme, the scheme-specific part defines a host and a resource within this host. Utilizing approaches such as Web server aliases allows us to change the physical location of a resource but retain the Web address.</para>
          <para>In both of these cases, however, ensuring the persistence of the identifier requires manual intervention. This, in turn, requires an awareness of the potential changes to locations of the resources being identified.</para>
        </section> <!-- </sect2> -->
          
        <section sect='sect2'>
          <title>Persistence of References</title>
          <para>Even if we are able to correctly identify a resource, we may still have problems with persistence of fragment identifiers. This may be best explained by using an example. Consider the following very simple XML document (called <filename>staff.xml</filename>):</para>
          <programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE People SYSTEM "People.dtd">
  <People>
    <Person StaffID="123456">
      <Name>Anna Smith</Name>
      <Position>Sales Manager</Position>
    </Person>
    <Person StaffID="987654">
      <Name>Bill Black</Name>
      <Position>XML Programmer</Position>
    </Person>
    <Person StaffID="555555">
      <Name>Carl Green</Name>
      <Position>Personal Assistant</Position>
    </Person>
  </People>]]></programlisting>
          <para>If we wish to create a reference to Carl Green&apos;s position, then we could write this in various ways:</para>
          <programlisting><![CDATA[staff.xml#xpointer(/1/3/2)
staff.xml#xpointer(//Person[3]/Position)
staff.xml#xpointer(//Person[last()]/Position)
staff.xml#xpointer(//Person[@StaffID="555555"]/Position)]]></programlisting>
          <para>In the first example, we select the first element (<userinput><![CDATA[<People>]]></userinput>), then the third child of this ( <userinput><![CDATA[<Person StaffID="555555">]]></userinput>), and then the second child of this ( <userinput><![CDATA[<Position>]]></userinput>). This gives the required information but results in a reference which is not particularly robust. We can edit the document to add a new element at the start, as follows:</para>
          <programlisting><![CDATA[<People>
  <Company OrgID="546431">
  <Name>ACME Linking, Inc.</Name>
  ...]]></programlisting>
          <para>Then <userinput><![CDATA[<Person StaffID="987654">]]></userinput> would become the third child element of <userinput><![CDATA[<People>]]></userinput> rather than <userinput><![CDATA[<Person StaffID="555555">]]></userinput>. In some respects this is worse than a broken reference since we have no indication that the reference is incorrect. It still points to a valid XML element—just the wrong one!</para>
          <para>The second reference is somewhat better. It says that we want the third Person element, rather than just the third element of any type. This is still potentially dangerous, however, as there is nothing stopping us from adding another Person element to the beginning of the document, thereby changing the element we want from the third Person to the fourth Person . The third reference is another attempt to solve this, but it too has some obvious limitations.</para>
          <para>The final reference is where we select the desired element based on a unique identifier (in this case a specific attribute). The result is a fragment reference that holds up to many (but not all!) possible changes in the document.</para>
          <para>So, in effect we have a situation where resource identifier persistence relies on the ability to locate a resource irrespective of its actual location and fragment ID persistence relies on the ability to locate relevant sections of a document irrespective of changes in the document. As we&apos;ve discussed, resource identifier persistence is currently only poorly supported—though eventually URNs will help. Fragment identifier persistence relies on the good design of the references. Referring to an element by an ID, its type, or the value of an attribute is preferable to referring to it by its position in the document.</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Third-Party Links and Linkbases</title>
          <para>One of the issues discussed in the previous chapter is the concept of adding links to read-only material. This is a rather unusual concept for people who are familiar only with the Web (as distinct from other more sophisticated hypermedia systems), where all links must be embedded into the source content. Being required to embed all links into the source content is, however, very restrictive. For example, we might want to be able to annotate material that doesn&apos;t belong to us with our own links, or the material may be stored on read-only media, or we may want to use different sets of links at different times.</para>
          <programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE Dictionary SYSTEM "Dictionary.dtd">
  <Dictionary>
    <Entry word="Anchor">
      <Pronunciation>...</Pronunciation>
      <Definition>An identified region of a node that can be explicitly addressed and identified within the presentation of a node. </Definition>
    </Entry>
    <Entry word="Link">
      <Pronunciation>...</Pronunciation>
      <Definition>A connection between multiple anchors (and nodes, where there is an implied anchor that encompasses the entire node) that represents an association between the concepts captured by the anchors. </Definition>
    </Entry>
    <!-- Further entries go here -->
    <Xref xlink:type="extended">
      <word xlink:type="locator"
        xlink:href="#xpointer(string-range(//Definition,'anchor'))"
        xlink:label="src"/>
      <defn xlink:type="locator"
        xlink:href="#xpointer(//Entry[@word='anchor'])"
        xlink:label="dest"/>
      <go xlink:type="arc" xlink:from="src" xlink:to="dest"/>
    </Xref>
    <!-- Further cross references go here -->
  </Dictionary>]]></programlisting>
          <!-- page 54 -->
          <para>In this example, the document contains a series of words and definitions. At the end of the document, we have a set of XLinks, which link any occurrence of specific words in the definitions to the definition of those words. For example, the word <quote>anchor</quote> appearing in the definition of the word link would be the starting point for a link to the definition of <wordasword>anchor</wordasword>.</para>
          <para>In this case, the links are termed third-party links. This is because they are not embedded into any of the anchors participating in the link.</para>
          <para>We can take this one step further and actually separate the links out into a separate file. We would then have an XML file (<filename>Dict.xml</filename>) containing definitions and another XML file (<filename>XRefs.xml</filename>) containing the links. The link file might look something like the following:</para>
          <programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE XRefs SYSTEM "XRefs.dtd">
  <XRefs>
    <Xref xlink:type="extended">
      <word xlink:type="locator"
        xlink:href="Dict.xml#xpointer(string-range(//Definition,'anchor'))"
        xlink:label="src"/>
      <defn xlink:type="locator"
        xlink:href="Dict.xml#xpointer(//Entry[@word='anchor'])"
        xlink:label="dest"/>
      <go xlink:type="arc" xlink:from="src" xlink:to="dest"/>
    </Xref>
    <!-- Further cross references go here -->
  </XRefs>]]></programlisting>
          <para>This file, containing a series of third-party links, is what is known as a link database, or <firstterm>linkbase</firstterm>. The problem then arises as to how to ensure that these link definitions are actually utilized. The simplest way is, where possible, to modify the source information so that it includes a reference to the linkbase. This is supported by XLink using a special form of extended link (i.e., it contains an arc from the content to the linkbase with an <varname>arcrole</varname> attribute with a special value). When the XML document is viewed or processed, the link to the linkbase will be traversed, and the linkbase will be loaded. This linkbase will contain links rather than content to be presented to the user or for some other form of processing. It is also worth noting (as we shall see in a moment) that linkbases can include links to other linkbases, creating hierarchies of linkbases.</para>
          <para>This solution is fine where we have access to the source information so that we can add a link to our linkbase, but one of the benefits of XML linking is that we can define third-party links for content to which we do not have access to edit. So what do we do in this situation? One solution would be to simply allow the user to specify directly within the browser (or whatever other tool we are using to view or process the documents) the linkbases we wish to use. This is analogous to the functionality supported in some Web browsers of being able to specify a particular style sheet to use for presentation of Web pages.</para>
          <para>To further illustrate this concept, consider the following scenario (extending the one described before): Joe Teacher is preparing the material for the coming semester&apos;s course on XML and linking. To support this, he wishes to provide additional links from numerous external resources. He begins by creating a linkbase for each external document. Then, rather than requiring the students to specify all of these individual linkbases, he creates a master linkbase that all students will utilize. This master linkbase contains a collection of links from the various documents to their relevant linkbases. Here is an example of a link from a document to a linkbase:</para>
          <programlisting><![CDATA[<otherlinks xlink:type="extended">
  <loc xlink:type="locator"
    xlink:href="http://othersite.com/info/aboutXML.xml"
    xlink:label="src"/>
  <loc xlink:type="locator"
    xlink:href="aboutXML-links.xml"
    xlink:label="linkbase"/>
  <go xlink:type="arc"
    xlink:arcrole="http://www.w3.org/1999/xlink/properties/linkbase"
    xlink:actuate="onLoad"
    xlink:from="src"
    xlink:to="linkbase"/>
  </otherlinks>]]></programlisting>
          <para>This way, whenever a student (who will have initially specified only the master linkbase) accesses a relevant external document, the appropriate link in the master linkbase is activated, and the additional linkbase for that document is loaded.</para>
        </section> <!-- </sect2> -->
        
        <!-- page 55 -->
        
        <section sect='sect2'>
          <title></title>
          <para></para>
          
          <para></para>
          
          <para></para>
          
          <para></para>
          
          <para></para>
          
          <para></para>
        </section> <!-- </sect2> -->
        
        
      </section> <!-- </sect1> -->
      
    </chapter>  <!-- end of "Hypermedia" -->

    <chapter xml:id='metadata'>
      <info>
        <title>Metadata</title>
        <abstract>
          <blockquote>
            <para>Metadata (or metainformation) is <quote>data that provides information about other data</quote>, but not the content of the data itself, such as the text of a message or the image itself.</para>
          </blockquote>
          <para>Now, to a large extent DocBook implements metadata through its <tag linkend='docbook.info'>info</tag> element...</para>
        </abstract>
      </info>

      <section>
        <info>
          <title>Introduction to Metadata*</title>
        </info>
        <para>Metadata is defined as the information that describes and explains data. Metadata means <quote>data about data</quote>. It provides information about one or more aspects of the data and is used to summarize basic information about data that can make tracking and working with specific data easier.</para>
        <para>Some examples of metadata include:</para>
        <itemizedlist>
          <listitem>Means of creation of the data</listitem>
          <listitem>Purpose of the data</listitem>
          <listitem>Time and date of creation</listitem>
          <listitem>Creator or author of the data</listitem>
          <listitem>Location on a computer network where the data was created</listitem>
          <listitem>Standards used</listitem>
          <listitem>File size</listitem>
          <listitem>Data quality</listitem>
          <listitem>Source of the data</listitem>
          <listitem>Process used to create the data</listitem>
        </itemizedlist>
        <para>For example, a digital image may include metadata that describes the size of the image, its color depth, resolution, when it was created, the shutter speed, and other data.</para>
      </section>

      <section xml:id='metadata.importance'>
        <title>Why is metadata important?</title>
        <para>Metadata ensures that data is: discoverable, trustworthy, relevant, accessible, secure, and interoperable. Without metadata, a data set is incomprehensible.</para>
        <variablelist>
          <varlistentry>
            <term>Discoverable</term>
            <listitem>Metadata makes data easier to find using a text-based search. Each search result will provide enough context to explain what it is about. Metadata also helps to sort and filter through the search results, thus significantly reducing the time spent in data search and discovery.</listitem>
          </varlistentry>
          <varlistentry>
            <term>Trustworthy</term>
            <listitem>Metadata helps to track the lineage of each asset throughout its lifecycle. Documenting changes to an asset over time makes it easier to verify, validate, and use. For example, it is possible to check for issues whenever changes are made to data and notify the relevant downstream data users.</listitem>
          </varlistentry>
          <varlistentry>
            <term>Relevant</term>
            <listitem>It is essential to know whether the data stored is up-to-date and useful for the data teams. For instance, if no one has accessed a data set in over 120 days, then it is either stale or not discoverable. If it is stale, it can be purged completely.</listitem>
          </varlistentry>
          <varlistentry>
            <term>Accessible</term>
            <listitem>Once the data needed is found, metadata provides details on how to access it — authentication and authorization methods.</listitem>
          </varlistentry>
          <varlistentry>
            <term>Secure</term>
            <listitem>Metadata can be used to trace who accessed or modified a specific data set. It also helps to keep track of the various versions of data and classify data to set up data access controls. This, in turn, ensures the security and integrity of data.</listitem>
          </varlistentry>
          <varlistentry>
            <term>Interoperable</term>
            <listitem>Proper metadata management ensures that the entire tech stack — different systems, platforms, and tools — speaks a common language, thus making the systems interoperable.</listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id='metadata.types'>
        <info>
          <title>Types of Metadata</title>
        </info>
        <section>
          <title>Major Metadata Categories</title>
          <para>Metadata can be classified into 6 types:</para>
          <variablelist>
            <varlistentry>
              <term>Descriptive metadata</term>
              <listitem>The descriptive information about a resource. It is used for discovery and identification. It includes elements such as title, abstract, author, and keywords.</listitem>
            </varlistentry>
            <varlistentry>
              <term>Structural metadata</term>
              <listitem>Metadata about containers of data and indicates how compound objects are put together, for example, how pages are ordered to form chapters. It describes the types, versions, relationships, and other characteristics of digital materials.</listitem>
            </varlistentry>
            <varlistentry>
              <term>Administrative metadata</term>
              <listitem>The information to help manage a resource, like resource type, permissions, and when and how it was created.</listitem>
            </varlistentry>
            <varlistentry>
              <term>Reference metadata</term>
              <listitem>The information about the contents and quality of statistical data.</listitem>
            </varlistentry>
            <varlistentry>
              <term>Statistical metadata</term>
              <listitem>Also called <firstterm>process data</firstterm>, may describe processes that collect, process, or produce statistical data.</listitem>
            </varlistentry>
            <varlistentry>
              <term>Legal metadata</term>
              <listitem>Provides information about the creator, copyright holder, and public licensing, if provided.</listitem>
            </varlistentry>
          </variablelist>
          <?alternative
          <variablelist>
            <varlistentry>
              <term>Technical</term>
              <listitem>This includes technical metadata such as row or column count, data type, schema, etc.</listitem>
            </varlistentry>
            <varlistentry>
              <term>Governance</term>
              <listitem>This includes governance terms, data classification, ownership information, etc.</listitem>
            </varlistentry>
            <varlistentry>
              <term>Operational</term>
              <listitem>This includes information on the flow of data such as dependencies, code, and runtime</listitem>
            </varlistentry>
            <varlistentry>
              <term>Collaboration</term>
              <listitem>This includes data-related comments, discussions, and issues</listitem>
            </varlistentry>
            <varlistentry>
              <term>Quality</term>
              <listitem>This includes quality metrics and measures, such as dataset status, freshness, tests run, and their statuses</listitem>
            </varlistentry>
            <varlistentry>
              <term>Usage</term>
              <listitem>This includes information on how much a dataset is used, such as view count, popularity, top users, and more</listitem>
            </varlistentry>
          </variablelist>
          ?>
        </section>
        <section>
          <title>Descriptive, Structural, and Administrative Metadata</title>
          <para>NISO (USA&apos;s National Information Standards Organization) distinguishes three types of metadata: descriptive, structural, and administrative. <firstterm>Descriptive metadataz</firstterm> is typically used for discovery and identification, as information to search and locate an object, such as title, authors, subjects, keywords, and publisher. <firstterm>Structural metadata</firstterm> describes how the components of an object are organized. An example of structural metadata would be how pages are ordered to form chapters of a book. Finally, <firstterm>administrative metadata</firstterm> gives information to help manage the source. Administrative metadata refers to the technical information, such as file type, or when and how the file was created. Two sub-types of administrative metadata are rights management metadata and preservation metadata. Rights management metadata explains intellectual property rights, while preservation metadata contains information to preserve and save a resource.</para>
        </section>
        <section>
          <title>Active Metadata vs. Passive Metadata</title>
          <para><firstterm>Passive metadata</firstterm> is the technical metadata collected and managed via manual processes.</para>
          <para>Active metadata is data that describes data, as well as any actions taken on it. Unlike passive metadata, active metadata is an always-on, intelligent, action-oriented, API-driven system that is open by default.</para>
        </section>
      </section>

      <section xml:id='Dublin-Core'>
        <info>
          <title>Dublin Core</title>
          <abstract></abstract>
        </info>
        <section>
          <title>Dublin Core Metadata Element Set</title>
          <para>The original DCMES Version 1.1 consists of 15 metadata elements, defined this way in the original specification:</para>
          <variablelist>
            <varlistentry>
              <term>Contributor</term>
              <listitem><quote>An entity responsible for making contributions to the resource.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Coverage</term>
              <listitem><quote>The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Creator</term>
              <listitem><quote>An entity primarily responsible for making the resource.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Date</term>
              <listitem><quote>A point or period of time associated with an event in the lifecycle of the resource.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Description</term>
              <listitem><quote>An account of the resource.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Format</term>
              <listitem><quote>The file format, physical medium, or dimensions of the resource.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Identifier</term>
              <listitem><quote>An unambiguous reference to the resource within a given context.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Language</term>
              <listitem><quote>A language of the resource.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Publisher</term>
              <listitem><quote>An entity responsible for making the resource available.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Relation</term>
              <listitem><quote>A related resource.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Rights</term>
              <listitem><quote>Information about rights held in and over the resource.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Source</term>
              <listitem><quote>A related resource from which the described resource is derived.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Subject</term>
              <listitem><quote>The topic of the resource.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Title</term>
              <listitem><quote>A name given to the resource.</quote></listitem>
            </varlistentry>
            <varlistentry>
              <term>Type</term>
              <listitem><quote>The nature or genre of the resource.</quote></listitem>
            </varlistentry>
          </variablelist>
          <para>Each Dublin Core element is optional and may be repeated. The DCMI has established standard ways to refine elements and encourage the use of encoding and vocabulary schemes. There is no prescribed order in Dublin Core for presenting or using the elements. The Dublin Core became a NISO standards, Z39.85, and IETF RFC 5013 in 2007, ISO 15836 standard in 2009 and is used as a base-level data element set for the description of learning resources in the ISO/IEC 19788-2 Metadata for learning resources (MLR) – Part 2: Dublin Core elements, prepared by the ISO/IEC JTC 1/SC 36.</para>
          <para>Full information on element definitions and term relationships can be found in the Dublin Core Metadata Registry.</para>
        </section>
        <section>
          <title>DCMI Metadata Terms</title>
          <para>The DCMI Metadata Terms lists the current set of the Dublin Core vocabulary.[12] This set includes the fifteen terms of the DCMES (in italic), as well as the qualified terms. Each term has a unique URI in the namespace http://purl.org/dc/terms, and all are defined as RDF properties.</para>
          <simplelist columns='2'>
            <member>abstract</member>
            <member>accessRights</member>
            <member>accrualMethod</member>
            <member>accrualPeriodicity</member>
            <member>accrualPolicy</member>
            <member>alternative</member>
            <member>audience</member>
            <member>available</member>
            <member>bibliographicCitation</member>
            <member>conformsTo</member>
            <member><emphasis>contributor</emphasis></member>
            <member><emphasis>coverage</emphasis></member>
            <member>created</member>
            <member><emphasis>creator</emphasis></member>
            <member><emphasis>date</emphasis></member>
            <member>dateAccepted</member>
            <member>dateCopyrighted</member>
            <member>dateSubmitted</member>
            <member><emphasis>description</emphasis></member>
            <member>educationLevel</member>
            <member>extent</member>
            <member><emphasis>format</emphasis></member>
            <member>hasFormat</member>
            <member>hasPart</member>
            <member>hasVersion</member>
            <member><emphasis>identifier</emphasis></member>
            <member>instructionalMethod</member>
            <member>isFormatOf</member>
            <member>isPartOf</member>
            <member>isReferencedBy</member>
            <member>isReplacedBy</member>
            <member>isRequiredBy</member>
            <member>issued</member>
            <member>isVersionOf</member>
            <member><emphasis>language</emphasis></member>
            <member>license</member>
            <member>mediator</member>
            <member>medium</member>
            <member>modified</member>
            <member>provenance</member>
            <member><emphasis>publisher</emphasis></member>
            <member>references</member>
            <member><emphasis>relation</emphasis></member>
            <member>replaces</member>
            <member>requires</member>
            <member><emphasis>rights</emphasis></member>
            <member>rightsHolder</member>
            <member><emphasis>source</emphasis></member>
            <member>spatial</member>
            <member><emphasis>subject</emphasis></member>
            <member>tableOfContents</member>
            <member>temporal</member>
            <member><emphasis>title</emphasis></member>
            <member><emphasis>type</emphasis></member>
            <member>valid</member>
          </simplelist>


        </section>
      </section>  <!-- end of "Dublin Core" -->

      <section>
        <info>
          <title>***</title>
        </info>
      </section>

      <section>
        <info>
          <title>***</title>
        </info>
      </section>

    </chapter>

  </part>



  <part>
  <info>
    <title>XML-based Technologies</title>
    <subtitle>HTML, XML, and Other Conforming Languages</subtitle>
  </info>
    <partintro>...</partintro>
  
    <chapter>
      <title>HTML</title>
      <para>HTML was born as an SGML application for writing and exchanging documents over the Web relying on a much reduced subset of SGML.</para>
  
      <section>
        <title>The Anatomy of a Simple HTML Document</title>
        <para>In the following example, the first line declares the type of document. The remainder appears inside the <tag>html</tag> element, which comprises a <tag>head</tag> and a <tag>body</tag> element. The <tag>head</tag> contains a <tag>title</tag> and maybe a <tag>link</tag> to a stylesheet. The <tag>body</tag> must contain at least one <firstterm>block</firstterm> element, that is one that is displayed on its own, like a paragraph.</para>
      <programlisting><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <title>This is the page title</title>
    <link rel='stylesheet' type="text/css" href="my_style_sheet.css">
  </head>
  <body>
    <h1>My First Heading</h1>
    <p>My first paragraph.</p>
  </body>
</html>]]></programlisting>

    <para>Withing the body, the <tag>h1</tag> holds the text of a level 1 heading. Smaller, subordinate headings are shown through tags <tag>h2</tag>, <tag>h3</tag> etc.</para>
    <para>The element <tag>p</tag> holds the text of a paragraph.</para>
    
    <section sect='sect2'>
      <title>The XML Declaration</title>
    </section>
    
    <section sect='sect2'>
      <title>The Doctype</title>
      <para>First, we have the Document Type Declaration, or doctype. This is simply a way to tell the browser — or any other parser — what type of document it&apos;s looking at. In the case of HTML files, it means the specific version and flavor of HTML. The doctype should always be the first item at the top of any HTML file. Many years ago, the doctype declaration was an ugly and hard-to-remember mess. For XHTML 1.0 Strict:</para>
      <programlisting><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">]]></programlisting>
      <para>And for HTML4 Transitional:</para>
      <programlisting><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/loose.dtd">]]></programlisting>
      <para>Although that long string of text at the top of our documents hasn&apos;t really hurt us (other than forcing our sites&apos; viewers to download a few extra bytes), HTML5 has done away with that indecipherable eyesore. Now all you need is this:</para>
      <programlisting><![CDATA[<!doctype html>]]></programlisting>
      <para>Simple, and to the point. The doctype can be written in uppercase, lowercase, or mixed case. You&apos;ll notice that the &quot;5&quot; is conspicuously missing from the declaration. Although the current iteration of web markup is known as &quot;HTML5,&quot; it really is just an evolution of previous HTML standards — and future specifications will simply be a development of what we have today.</para>
      <para>Because browsers are usually required to support all existing content on the Web, there&apos;s no reliance on the doctype to tell them which features should be supported in a given document. In other words, the doctype alone is not going to make your pages HTML5-compliant. It&apos;s really up to the browser to do this. In fact, you can use one of those two older doctypes with new HTML5 elements on the page and the page will render the same as it would if you used the new doctype.</para>
    </section> <!-- </sect2> -->

    <section>
      <title>Declaring character encodings in HTML</title>
      <para>You should always specify the encoding used for an HTML or XML page. If you don&apos;t, you risk that characters in your content are incorrectly interpreted. This is not just an issue of human readability, increasingly machines need to understand your data too. A character encoding declaration is also needed to process non-ASCII characters entered by the user in forms, in URLs generated by scripts, and so forth.</para>
      <para>Always declare the encoding of your document using a meta element with a charset attribute, or using the http-equiv and content attributes (called a pragma directive). The declaration should fit completely within the first 1024 bytes at the start of the file, so it's best to put it immediately after the opening head tag.</para>
      <programlisting><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
...]]></programlisting>
      <para>or</para>
      <programlisting><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="Content-Type" 
      content="text/html; charset=utf-8">
...]]></programlisting>
      <para>It doesn&apos;t matter which you use, but it&apos;s easier to type the first one. It also doesn&apos;t matter whether you type UTF-8 or utf-8.</para>
      <para>You should always use the UTF-8 character encoding. (Remember that this means you also need to save your content as UTF-8.)</para>
    </section>

    <section sect='sect2'>
      <title>A Taste of <tag>div</tag> Element</title>
      <para>Right at the start, you might want to create sections in your web page. You use the <tag>div</tag> tag, with no visual effect until you program your style sheet (either CSS or whatever).</para>
      <programlisting><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <title>This is the page title</title>
    <link rel='stylesheet' type="text/css" href="my_style_sheet.css">
  </head>
  <body>
    <div>
      <h1>First Section</h1>
      <p>First paragraph in my first section.</p>
    </div>
    <div>
      <h1>Second Section</h1>
      <p>First paragraph in my second section.</p>
    </div>
  </body>
</html>]]></programlisting>
      </section>
      
      <section>
        <title>Declaring character encodings in XHTML5</title>
        <para>An XHTML5 document is served as XML and has XML syntax. XML parsers do not recognise the encoding declarations in meta elements. They only recognise the XML declaration. Here is an example:</para>
        <programlisting><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html ...]]></programlisting>
        <para>The XML declaration is only required if the page is not being served as UTF-8 (or UTF-16), but it can be useful to include it so that developers, testers, or translation production managers can visually check the encoding of a document by looking at the source.</para>
      </section>

    </section> <!-- </sect1> -->
    
    <section>
      <title>Setting the Language</title>
      <para>Always use a language attribute on the <tag>html</tag> tag to declare the default language of the text in the page. This is inherited by all other elements, and so will set a default language for the text in the document head element. When the page contains content in another language, add a language attribute to an element surrounding that content.</para>
      <para>Use the <varname>lang</varname> attribute for pages served as HTML, and the <varname>xml:lang</varname> attribute for pages served as XML. For XHTML 1.x and HTML5 polyglot documents, use both together.</para>
      <para>Use language tags from the IANA Language Subtag Registry.</para>
      <para>Use nested elements to take care of content and attribute values on the same element that are in different languages.</para>
    </section> <!-- </sect1> -->
  
    <section>
      <title>The <tag>link</tag> Tag for Media</title>
      <para>The <tag>link</tag> element belongs in the <tag>head</tag> element of an HTML document. Here <quote>media</quote> refers to the viewer&apos; characteristics, limitations and preferences, and is an attribute in the <tag>link</tag> tag. Here are its possible values:</para>
      <table>
        <caption>the HTML media attribute in <tag>link</tag>&apos;s</caption>
        <thead> <tr> <th>Value</th> <th>Purpose</th> </tr> </thead>
        <tbody>
          <tr> <td>all</td> <td>Suitable for all devices.</td> </tr>
          <tr> <td>Braille</td> <td>Intended for Braille tactical feedback devices.</td> </tr>
          <tr> <td>embossed</td> <td>Intended for paged Braille printers.</td> </tr>
          <tr> <td>handheld</td> <td>Intended for handheld devices.</td> </tr>
          <tr> <td>print</td> <td>Intended for presentation to a printer (in a browser use print</td> </tr>
          <tr> <td>preview</td> <td>to view the print style sheet).</td> </tr>
          <tr> <td>projection</td> <td>Intended for projected presentations.</td> </tr>
          <tr> <td>screen</td> <td>Intended for presentation on a color computer screen.</td> </tr>
          <tr> <td>speech | aural</td> <td>Intended for presentation to a speech synthesizer (called aural in CSS 2 and speech in CSS 2.1).</td> </tr>
          <tr> <td>tty</td> <td>Intended for media using a fixed-pitch character grid (such as teletypes, terminals, or portable devices with limited display capabilities).</td> </tr>
          <tr> <td>tv</td> <td>Intended for television (low resolution, low color, limited scrollability).</td> </tr>
        </tbody>
      </table>
      
      <para>And here is an example of how to use the <tag>link</tag> tag:</para>
      <programlisting><![CDATA[<link rel='stylesheet' href='path/to/some_css_doc.css' type='text/css' media='scñreen'/>]]></programlisting>
      <para>you can apply the media attribute to an embedded style sheet using the following:</para>
      <programlisting><![CDATA[<style type='text/css' media='screen'>]]></programlisting>
        
      <para>Then in a CSS you would write:</para>
      <programlisting>@media print {
  body { font-size: 10pt; }
}
@media screen {
  body { font-size: 1em; }
}</programlisting>
    
  </section> <!-- </sect1> -->  <!-- end of "The <tag>link</tag> Tag for Media" -->
  
  <section xml:id='html_global_attr'>
    <title>HTML Global Attributes</title>
    <para>The global attributes below can be used on any HTML element:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>accesskey</parameter></term>
        <listitem>Specifies a shortcut key to activate/focus an element</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>class</parameter></term>
        <listitem>Specifies one or more classnames for an element (refers to a class in a style sheet)</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>contenteditable</parameter></term>
        <listitem>Specifies whether the content of an element is editable or not</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>data-*</parameter></term>
        <listitem>Used to store custom data private to the page or application</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>dir</parameter></term>
        <listitem>Specifies the text direction for the content in an element</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>draggable</parameter></term>
        <listitem>Specifies whether an element is draggable or not</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>dropzone</parameter></term>
        <listitem>Specifies whether the dragged data is copied, moved, or linked, when dropped</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>hidden</parameter></term>
        <listitem>Specifies that an element is not yet, or is no longer, relevant</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>id</parameter></term>
        <listitem>Specifies a unique id for an element</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>lang</parameter></term>
        <listitem>Specifies the language of the element's content</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>spellcheck</parameter></term>
        <listitem>Specifies whether the element is to have its spelling and grammar checked or not</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>style</parameter></term>
        <listitem>Specifies an inline CSS style for an element</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>tabindex</parameter></term>
        <listitem>Specifies the tabbing order of an element</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>title</parameter></term>
        <listitem>Specifies extra information about an element</listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>translate</parameter></term>
        <listitem>Specifies whether the content of an element should be translated or not</listitem>
      </varlistentry>
    </variablelist>
  </section> <!-- </sect1> -->
  
  <section xml:id='html_links'>
    <title>HTML Links</title>
    <para>A <firstterm>hyperlink</firstterm> sends the user to another document in the Web, while other links in similar syntax move the browser window to another passage in the <emphasis>same</emphasis> document. A hyperlink may also specify a definite passage in another document to jump to.</para>
    <para>A linked page is normally displayed in the current browser window, unless you specify another target (through the <parameter>target</parameter> attribute.</para>
    <para>Links are instantiated through the <tag>a</tag> (for <quote>anchor</quote>) element. The most important attribute of the <tag>a</tag> element is the <parameter>href</parameter> attribute, which indicates the link&apos;s destination.</para>
    
    <para>Here is a simple example of a hyperlink:</para>
    <programlisting><![CDATA[<!DOCTYPE html>
<html>
  <body>
    <a href="http://www.w3schools.com">This is a link</a>
  </body>
</html>]]></programlisting>
    <para>The user reads the text <quote>This is a link</quote>, and may decide to click on it and get sent to <computeroutput>http://www.w3schools.com</computeroutput>.</para>
    
    <section sect='sect2'>
      <title>The Color of the Text in a Link <tag>a</tag> Element</title>
      <para>By default, links will appear as follows in all browsers:</para>
      <itemizedlist>
        <listitem>An unvisited link is underlined and blue</listitem>
        <listitem>A visited link is underlined and purple</listitem>
        <listitem>An active link is underlined and red</listitem>
      </itemizedlist>
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>The HTML <tag>a</tag> Element&apos;s <parameter>target</parameter> Attribute</title>
      <para>The <parameter>target</parameter> attribute specifies where to open the linked document.</para>
      <para>Its allowed values, besides the <parameter>id</parameter> of a frame, may be:</para>
      <itemizedlist>
        <listitem><constant>_blank</constant>: Opens the linked document in a new window or tab</listitem>
        <listitem><constant>_self</constant>: Opens the linked document in the same frame as it was clicked (this is default)</listitem>
        <listitem><constant>_parent</constant>: Opens the linked document in the parent frame</listitem>
        <listitem><constant>_top</constant>: Opens the linked document in the full body of the window</listitem>
      </itemizedlist>
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>Other HTML <tag>a</tag> Attributes</title>
      <variablelist>
        
        <varlistentry>
          <term><parameter>download</parameter></term>
          <listitem>
            <para>Download file when clicking on the link (instead of navigating to the file):</para>
            <programlisting><![CDATA[<a href="/images/myw3schoolsimage.jpg" download>]]></programlisting>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><parameter>media</parameter></term>
          <listitem>
            <para>The media attribute specifies what media/device the linked document is optimized for, such as special devices (like iPhone) , speech or print media. This attribute can accept several values and may use operators <userinput>and</userinput> and <userinput>or</userinput>.</para>
            <note>This attribute is purely advisory.</note>
            <para>These are the devices that may be specified:</para>
            <itemizedlist>
              <listitem><constant>all</constant>: 	Default. Suitable for all devices</listitem>
              <listitem><constant>aural</constant>: 	Speech synthesizers</listitem>
              <listitem><constant>braille</constant>: 	Braille feedback devices</listitem>
              <listitem><constant>handheld</constant>: 	Handheld devices (small screen, limited bandwidth)</listitem>
              <listitem><constant>projection</constant>: 	Projectors</listitem>
              <listitem><constant>print</constant>: 	Print preview mode/printed pages</listitem>
              <listitem><constant>screen</constant>: 	Computer screens</listitem>
              <listitem><constant>tty</constant>: 	Teletypes and similar media using a fixed-pitch character grid</listitem>
              <listitem><constant>tv</constant>: 	Television type devices (low resolution, limited scroll ability)</listitem>
            </itemizedlist>
            <para>And these are the values that may be specified, to be combined with operators &quot;and&quot;, &quot;not&quot; and &quot;,&quot; (or):</para>
            <itemizedlist>
              <listitem><constant>width</constant>: 	Specifies the width of the targeted display area. &quot;min-&quot; and &quot;max-&quot; prefixes can be used. Example: media=&quot;screen and (min-width:500px)&quot;</listitem>
              <listitem><constant>height</constant>: 	Specifies the height of the  targeted display area. &quot;min-&quot; and &quot;max-&quot; prefixes can be used. Example: media=&quot;screen and (max-height:700px)&quot;</listitem>
              <listitem><constant>device-width</constant>: 	Specifies the width of the target display/paper. &quot;min-&quot; and &quot;max-&quot; prefixes can be used. Example: media=&quot;screen and (device-width:500px)&quot;</listitem>
              <listitem><constant>device-height</constant>: 	Specifies the height of the target display/paper. &quot;min-&quot; and &quot;max-&quot; prefixes can be used. Example: media=&quot;screen and (device-height:500px)&quot;</listitem>
              <listitem><constant>orientation</constant>: 	Specifies the orientation of the target display/paper. Possible values: &quot;portrait&quot; or &quot;landscape&quot; Example: media=&quot;all and (orientation: landscape)&quot;</listitem>
              <listitem><constant>aspect-ratio</constant>: 	Specifies the width/height ratio of the targeted display area. &quot;min-&quot; and &quot;max-&quot; prefixes can be used. Example: media=&quot;screen and (aspect-ratio:16/9)&quot;</listitem>
              <listitem><constant>device-aspect-ratio</constant>: 	Specifies the device-width/device-height ratio of the target display/paper. &quot;min-&quot; and &quot;max-&quot; prefixes can be used. Example: media=&quot;screen and (aspect-ratio:16/9)&quot;</listitem>
              <listitem><constant>color</constant>: 	Specifies the bits per color of target display. &quot;min-&quot; and &quot;max-&quot; prefixes can be used. Example: media=&quot;screen and (color:3)&quot;</listitem>
              <listitem><constant>color-index</constant>: 	Specifies the number of colors the target display can handle. &quot;min-&quot; and &quot;max-&quot; prefixes can be used. Example: media=&quot;screen and (min-color-index:256)&quot;</listitem>
              <listitem><constant>monochrome</constant>: 	Specifies the bits per pixel in a monochrome frame buffer. &quot;min-&quot; and &quot;max-&quot; prefixes can be used. Example: media=&quot;screen and (monochrome:2)&quot;</listitem>
              <listitem><constant>resolution</constant>: 	Specifies the pixel density (dpi or dpcm) of the target display/paper. &quot;min-&quot; and &quot;max-&quot; prefixes can be used. Example: media=&quot;print and (resolution:300dpi)&quot;</listitem>
              <listitem><constant>scan</constant>: 	Specifies scanning method of a tv display.</listitem> Possible values are &quot;progressive&quot; and &quot;interlace&quot;. Example: media=&quot;tv and (scan:interlace)&quot;
              <listitem><constant>grid</constant>: 	Specifies if the output device is grid or bitmap. Possible values are &quot;1&quot; for grid, and &quot;0&quot; otherwise. Example: media=&quot;handheld and (grid:1)&quot;</listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><parameter>type</parameter></term>
          <listitem>
            <para>The type attribute specifies the media type of the linked document:</para>
            <programlisting><![CDATA[<a href="https://www.w3schools.com" type="text/html">W3Schools</a>]]></programlisting>
            <para>The type attribute specifies the Internet media type (formerly known as MIME type) of the linked document.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><parameter>hreflang</parameter></term>
          <listitem>
            <para>The hreflang attribute specifies the language of the linked document (a two-letter language code).</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><parameter>rel</parameter></term>
          <listitem>
            <para>The rel attribute specifies the relationship between the current document and the linked document. Search engines can use this attribute to get more information about a link.</para>
            <para>These are its allowed values:</para>
            <itemizedlist>

              <listitem><constant>alternate</constant>: 	Provides a link to an alternate representation of the document (i.e. print page, translated or mirror)</listitem>
              <listitem><constant>author</constant>: 	Provides a link to the author of the document</listitem>
              <listitem><constant>bookmark</constant>: 	Permanent URL used for bookmarking</listitem>
              <listitem><constant>external</constant>: 	Indicates that the referenced document is not part of the same site as the current document</listitem>
              <listitem><constant>help</constant>: 	Provides a link to a help document</listitem>
              <listitem><constant>license</constant>: 	Provides a link to licensing information for the document</listitem>
              <listitem><constant>next</constant>: 	Provides a link to the next document in the series</listitem>
              <listitem><constant>nofollow</constant>: 	Links to an unendorsed document, like a paid link. (<constant>nofollow</constant> is used by Google, to specify that the Google search spider should not follow that link)</listitem>
              <listitem><constant>noreferrer</constant>: 	Requires that the browser should not send an HTTP referer header if the user follows the hyperlink</listitem>
              <listitem><constant>noopener</constant>: 	Requires that any browsing context created by following the hyperlink must not have an opener browsing context</listitem>
              <listitem><constant>prev</constant>: 	The previous document in a selection</listitem>
              <listitem><constant>search</constant>: 	Links to a search tool for the document</listitem>
              <listitem><constant>tag</constant>: 	A tag (keyword) for the current document</listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><parameter>ping</parameter></term>
          <listitem>
            <para>The ping attribute specifies a list of URLs to be notified if the user follows the hyperlink. When the user clicks on the hyperlink, the ping attribute will send a short HTTP POST request to the specified URL. This attribute is useful for monitoring/tracking.</para>
            <para>Example:</para>
            <para>When the user clicks on the w3schools.com/html link, notify w3schools.com/trackpings:</para>
            <programlisting><![CDATA[<a href="https://www.w3schools.com/html" ping="https://www.w3schools.com/trackpings"> ]]></programlisting>

          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term><parameter></parameter></term>
          <listitem>
            <para></para>
          </listitem>
        </varlistentry>
        
      </variablelist>
    </section> <!-- </sect2> -->
    
    <para>The <computeroutput>title</computeroutput> text is shown when the mouse is over the hyperlink.</para>
    <para>The <computeroutput>target</computeroutput> specifies where the new document is to open, and takes on values: <computeroutput>&lt;window_name&gt; | _parent | _blank | _top | _self </computeroutput>.</para>
<!-- _blank         Opens the linked document in a new window or tab
_self         Opens the linked document in the same frame as it was clicked (this is default)
_parent         Opens the linked document in the parent frame
_top         Opens the linked document in the full body of the window
framename         Opens the linked document in a named frame
  -->
    </section> <!-- </sect1> -->
    
    <section xml:id='block_vs_inline'>
      <title>Block and Inline Elements*</title>
      <para>Every HTML element has a default display value, depending on what type of element it is.</para>
      <para>There are two display values: block and inline.</para>
      <section>
        <title>Block-level Elements</title>
        <para>A block-level element always starts on a new line, and the browsers automatically add some space (a margin) before and after the element.</para>
        <para>A block-level element always takes up the full width available (stretches out to the left and right as far as it can).</para>
        <para>Two commonly used block elements are: <tag>p</tag> and <tag>div</tag>.</para>
        <para>The <tag>p</tag> element defines a paragraph in an HTML document.</para>
        <para>The <tag>div</tag> element defines a division or a section in an HTML document.</para>
        <para>The <tag>p</tag> element is a block-level element.</para>
        <para>The <tag>div</tag> element is a block-level element.</para>
        <para>Example</para>
        <programlisting><![CDATA[<p>Hello World</p>
          <div>Hello World</div>]]></programlisting>
        <para>Here are the block-level elements in HTML:</para>
        <itemizedlist>
          <listitem linkend='html_address'><tag>address</tag></listitem>
          <listitem linkend='html_article'><tag>article</tag></listitem>
          <listitem linkend='html_aside'><tag>aside</tag></listitem>
          <listitem linkend='html_blockquote'><tag>blockquote</tag></listitem>
          <listitem linkend='html_canvas'><tag>canvas</tag></listitem>
          <listitem linkend='html_dd'><tag>dd</tag></listitem>
          <listitem linkend='html_div'><tag>div</tag></listitem>
          <listitem linkend='html_dl'><tag>dl</tag></listitem>
          <listitem linkend='html_dt'><tag>dt</tag></listitem>
          <listitem linkend='html_fieldset'><tag>fieldset</tag></listitem>
          <listitem linkend='html_figcaption'><tag>figcaption</tag></listitem>
          <listitem linkend='html_figure'><tag>figure</tag></listitem>
          <listitem linkend='html_footer'><tag>footer</tag></listitem>
          <listitem linkend='html_form'><tag>form</tag></listitem>
          <listitem linkend='html_h'><tag>h1</tag> to <tag>h6</tag></listitem>
          <listitem linkend='html_header'><tag>header</tag></listitem>
          <listitem linkend='html_hr'><tag>hr</tag></listitem>
          <listitem linkend='html_li'><tag>li</tag></listitem>
          <listitem linkend='html_main'><tag>main</tag></listitem>
          <listitem linkend='html_nav'><tag>nav</tag></listitem>
          <listitem linkend='html_noscript'><tag>noscript</tag></listitem>
          <listitem linkend='html_ol'><tag>ol</tag></listitem>
          <listitem linkend='html_p'><tag>p</tag></listitem>
          <listitem linkend='html_pre'><tag>pre</tag></listitem>
          <listitem linkend='html_section'><tag>section</tag></listitem>
          <listitem linkend='html_table'><tag>table</tag></listitem>
          <listitem linkend='html_tfoot'><tag>tfoot</tag></listitem>
          <listitem linkend='html_ul'><tag>ul</tag></listitem>
          <listitem linkend='html_video'><tag>video</tag></listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Inline Elements</title>
        <para>An inline element does not start on a new line.</para>
        <para>An inline element only takes up as much width as necessary.</para>
        <para>Here are the inline elements in HTML:</para>
        <itemizedlist>
          <listitem linkend='html_a'><tag>a</tag></listitem>
          <listitem linkend='html_abbr'><tag>abbr</tag></listitem>
          <listitem linkend='html_acronym'><tag>acronym</tag></listitem>
          <listitem linkend='html_b'><tag>b</tag></listitem>
          <listitem linkend='html_bdo'><tag>bdo</tag></listitem>
          <listitem linkend='html_big'><tag>big</tag></listitem>
          <listitem linkend='html_br'><tag>br</tag></listitem>
          <listitem linkend='html_button'><tag>button</tag></listitem>
          <listitem linkend='html_cite'><tag>cite</tag></listitem>
          <listitem linkend='html_code'><tag>code</tag></listitem>
          <listitem linkend='html_dfn'><tag>dfn</tag></listitem>
          <listitem linkend='html_em'><tag>em</tag></listitem>
          <listitem linkend='html_mark'><tag>mark</tag></listitem>
          <listitem linkend='html_i'><tag>i</tag></listitem>
          <listitem linkend='html_img'><tag>img</tag></listitem>
          <listitem linkend='html_input'><tag>input</tag></listitem>
          <listitem linkend='html_kbd'><tag>kbd</tag></listitem>
          <listitem linkend='html_label'><tag>label</tag></listitem>
          <listitem linkend='html_map'><tag>map</tag></listitem>
          <listitem linkend='html_object'><tag>object</tag></listitem>
          <listitem linkend='html_output'><tag>output</tag></listitem>
          <listitem linkend='html_q'><tag>q</tag></listitem>
          <listitem linkend='html_samp'><tag>samp</tag></listitem>
          <listitem linkend='html_script'><tag>script</tag></listitem>
          <listitem linkend='html_select'><tag>select</tag></listitem>
          <listitem linkend='html_small'><tag>small</tag></listitem>
          <listitem linkend='html_span'><tag>span</tag></listitem>
          <listitem linkend='html_strong'><tag>strong</tag></listitem>
          <listitem linkend='html_sub'><tag>sub</tag></listitem>
          <listitem linkend='html_sup'><tag>sup</tag></listitem>
          <listitem linkend='html_textarea'><tag>textarea</tag></listitem>
          <listitem linkend='html_time'><tag>time</tag></listitem>
          <listitem linkend='html_tt'><tag>tt</tag></listitem>
          <listitem linkend='html_var'><tag>var</tag></listitem>
        </itemizedlist>
        <note>An inline element cannot contain a block-level element!</note>
      </section>
    </section>
    
  
    <section>
      <title>HTML Common Tags</title>
    
      <section sect='sect2'>
        <title>Headers and Paragraphs</title>
        <para>Inside the body of your document, you first want to structure your text into headers and paragraphs by writing them between opening and closing header and paragraph tags.</para>
        <para>Headers come in levels. The top level header has tag <tag>h1</tag>, the second-level header has tag <tag>h2</tag> and so on.</para>
        <para>For paragraphs there is one, short tag: <tag>p</tag>.</para>
        <para>Additionally, you may use indentation for sectioning, but neither is this specified by the standard nor does it aid or affect how the browser displays your text.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title><tag>br</tag>, <tag>b</tag>, and <tag>i</tag></title>
        <para>These tags are used to break a line, set the current font weight to bold, and set the current font style to italic. Avoid them, especially <tag>br</tag>.</para>
        <para>You should rarely cause a line break because line breaks are used to mark the end of a paragraph. Enclose your paragraphs in <tag>p</tag> elements instead. As for setting bold and italic versions of your font, use content-oriented tags <tag>strong</tag> for louder enunciation (bold) and <tag>em</tag> for emphasis (italic).</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Inline <tag>em</tag>, <tag>mark</tag>, <tag>q</tag>...</title>
        
        <section xml:id='html_em'>
          <title><tag>em</tag> for Emphasis!!!</title>
          <para>...</para>
        </section>
        
        <section xml:id='html_q'>
          <title><tag>q</tag> for &quot;an Inline Quotation&quot;</title>
          <para>The <tag>q</tag> tag defines a short quotation.</para>
          <para>Browsers normally insert quotation marks around the quotation.</para>
          <para>It may bear a <parameter>cite</parameter> attribute to specify the source URL of the quote.</para>
          <tip>Use <tag>blockquote</tag> for long quotations.</tip>
        </section>
        
        <section xml:id='html_mark'>
          <title><tag>mark</tag></title>
          <para>The <tag>mark</tag> tag defines text that should be marked or highlighted.</para>
          <para>Most browsers will display the <tag>mark</tag> element with the following default values:</para>
          <programlisting><![CDATA[mark {
  background-color: yellow;
  color: black;
}]]></programlisting>
            
            
        </section>
      </section>
      
      <section sect='sect2'>
        <title><tag>div</tag> and <tag>span</tag></title>
        <para>The <tag>div</tag> container is a generic <emphasis>block</emphasis>-level tag to create sections or <quote>divisions</quote>.</para>
        
        <para>The <tag>span</tag> container is a generic <emphasis>inline</emphasis>-level tag that serves no purpose other than the delivery of style.</para>
        <para>The <tag>span</tag> container adds no real meaning to the document&apos;s structure, but is a standards-acceptable method of applying style to specific text. You can use it to partition part of a paragraph or line of text for styling. It can be used, for example, to highlight a portion of text with a different background color or to underline or strike through text that pertains solely to presentation.</para>
        
        <section sect='sect3' xml:id='html_div'>
          <title>The HTML <tag>div</tag> Tag</title>
          <para>The <tag>div</tag> tag is an empty container that is used to define a division or a section. It does not affect the content or layout and is used to group HTML elements to be styled with CSS or manipulated with scripts.</para>
          <note>It is recommended to use <tag>div</tag> tag only when no other semantic elements introduced in HTML5 (such as <tag>nav</tag>, <tag>main</tag> or <tag>article</tag>) are appropriate.</note>
          <para>It is possible to place any HTML element within a <tag>div</tag> tag, including another.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Creating Positionable Elements (Layers) with <tag>div</tag></title>
          <para>Now that you understand a little more about how the DOM is structured, you should be able to start thinking about how you can control any element in a web page, such as a paragraph or an image. For example, you can use the DOM to change the position, visibility, and other attributes of an element.</para>
          <para>Before the W3C DOM and CSS2 standards (remember, we&apos;re now on CSS3), you could only reposition layers, or special groups of elements defined with a proprietary tag. Although you can now position any element individually, it&apos;s still useful to work with groups of elements in many cases.</para>
          <para>You can effectively create a layer, or a group of HTML objects that can be controlled together, using the <tag>div</tag> container element.</para>
          <para>To create a layer with <tag>div</tag>, enclose the content of the layer between the two division tags and specify the layer&apos;s properties in the style attribute of the <tag>div</tag> tag. Here&apos;s a simple example:</para>
          <programlisting><![CDATA[<div id="layer1" style="position:absolute; left:100px; top:100px;">
   This is the content of the layer.
 </div>]]></programlisting>
          <para>This code defines a container with the name layer1. This is a movable container positioned 100 pixels down and 100 pixels to the right of the upper-left corner of the browser window.</para>
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Semantic Elements in HTML5</title>
        <para>Below is a list of some of the semantic elements in HTML:</para>
        
        <variablelist>
          <varlistentry>
            <term><sgmltag>article</sgmltag></term>
            <listitem>
              <para>Defines independent, self-contained content</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><sgmltag>section</sgmltag></term>
            <listitem>
              <para>Defines a section in a document</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><sgmltag>aside</sgmltag></term>
            <listitem>
              <para>Defines content aside from the page content. You might want it to stand to the left or right of the preceding block, so you&apos;re likely to style it like this:</para>
              <programlisting><![CDATA[<style>
aside {
  width: 30%;
  padding-left: 15px;
  margin-left: 15px;
  float: right;
  font-style: italic;
  background-color: lightgray;
}
</style>]]></programlisting>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term><sgmltag>details</sgmltag></term>
            <listitem>
              <para>Defines additional details that the user can view or hide</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><sgmltag>summary</sgmltag></term>
            <listitem>
              <para>Defines a visible heading for a details element</para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term><sgmltag>figure</sgmltag></term>
            <listitem>
              <para>Specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><sgmltag>figcaption</sgmltag></term>
            <listitem>
              <para>Defines a caption for a figure element</para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term><sgmltag>header</sgmltag></term>
            <listitem>
              <para>Specifies a header for a document or section</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><sgmltag>nav</sgmltag></term>
            <listitem>
              <para>Defines navigation links</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><sgmltag>main</sgmltag></term>
            <listitem>
              <para>Specifies the main content of a document</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><sgmltag>footer</sgmltag></term>
            <listitem>
              <para>Defines a footer for a document or section</para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term><sgmltag>mark</sgmltag></term>
            <listitem>
              <para>Defines marked/highlighted text</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><sgmltag>time</sgmltag></term>
            <listitem>
              <para>Defines a date/time</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    <section xml:id='html_layout'>
      <title>HTML Layout Elements and Techniques</title>
      <para>Websites often display content in multiple columns (like a magazine or a newspaper)...</para>
      <section>
        <title>HTML Layout Elements</title>
        <para>HTML has several semantic elements that define the different parts of a web page:</para>
        <mediaobject>
          <imageobject>
            <imagedata format='GIF' fileref='Electric_files/pictures/Communicating/img_sem_elements.gif'/>
          </imageobject>
        </mediaobject>
        <variablelist>
          
          <varlistentry xml:id='html_header'>
            <term><tag>header</tag></term>
            <listitem>
              <para>Defines a header for a document or a section. The <tag>header</tag> element represents a container for introductory content or a set of navigational links.</para>
              <para>If it is a child of <tag>body</tag> it defines the global header of a webpage, but if it&apos;s a child of an <tag>article</tag> or <tag>section</tag> it defines a specific header for that section (try not to confuse this with titles and headings).</para>
              <para>A <tag>header</tag> element typically contains:</para>
              <itemizedlist>
                <listitem>one or more heading elements (<tag>h1</tag> - <tag>h6</tag>)</listitem>
                <listitem>logo or icon</listitem>
                <listitem>authorship information</listitem>
              </itemizedlist>
              <note>You can have several <tag>header</tag> elements in one HTML document. However, <tag>header</tag> cannot be placed within a <tag>footer</tag>, <tag>address</tag> or another <tag>header</tag> element.</note>
            </listitem>
          </varlistentry>
          
          
          <varlistentry xml:id='html_main'>
            <term><tag>main</tag></term>
            <listitem>
              <para>The <tag>main</tag> tag specifies the main content of a document.</para>
              <para>The content inside the <tag>main</tag> element should be unique to the document. It should not contain any content that is repeated across documents such as sidebars, navigation links, copyright information, site logos, and search forms.</para>
              <note>There must not be more than one <tag>main</tag> element in a document. The <tag>main</tag> element must NOT be a descendant of an <tag>article</tag>, <tag>aside</tag>, <tag>footer</tag>, <tag>header</tag>, or <tag>nav</tag> element.</note>
            </listitem>
          </varlistentry>
          
          <varlistentry xml:id='html_nav'>
            <term><tag>nav</tag></term>
            <listitem>
              <para>Defines a set of navigation links</para>
              <para>Notice that NOT all links of a document should be inside a <tag>nav</tag> element. The <tag>nav</tag> element is intended only for major blocks of navigation links.</para>
              <para>Browsers, such as screen readers for disabled users, can use this element to determine whether to omit the initial rendering of this content.</para>
            </listitem>
          </varlistentry>
          
          <varlistentry xml:id='html_section'>
            <term><tag>section</tag></term>
            <listitem>
              <para>Defines a section in a document</para>
              <para>According to W3C&apos;s HTML documentation: <quote>A section is a thematic grouping of content, typically with a heading</quote>.</para>
              <para>Examples of where a <tag>section</tag> element can be used: chapters, introduction, news items, contact information</para>
              <para>A web page could normally be split into sections for introduction, content, and contact information.</para>
            </listitem>
          </varlistentry>
    
          <varlistentry xml:id='html_article'>
            <term><tag>article</tag></term>
            <listitem>
              <para>Defines an independent, self-contained content. An article should make sense on its own, and it should be possible to distribute it independently from the rest of the web site.</para>
              <para>Examples of where the <tag>article</tag> element can be used: forum posts, blog posts, user comments, product cards, newspaper articles</para>
              <note>Can we use the definitions of <tag>article</tag> and <tag>section</tag> to decide how to nest those elements? No, we cannot! So, you will find HTML pages with <tag>section</tag> elements containing <tag>article</tag> elements, and <tag>article</tag> elements containing <tag>section</tag> elements.</note>
            </listitem>
          </varlistentry>
          
          <varlistentry xml:id='html_aside'>
            <term><tag>aside</tag></term>
            <listitem>
              <para>Defines content aside from the content (like a sidebar). The <tag>aside</tag> content should be indirectly related to the surrounding content.</para>
              </listitem>
          </varlistentry>
          
          
          <varlistentry xml:id='html_blockquote'>
            <term><tag>blockquote</tag></term>
            <listitem>
              <para>The <tag>blockquote</tag> tag specifies a section that is quoted from another source.</para>
              <para>Browsers usually indent <tag>blockquote</tag> elements (look at example below to see how to remove the indentation).</para>
            </listitem>
          </varlistentry>
          
          
          <varlistentry xml:id='html_footer'>
            <term><tag>footer</tag></term>
            <listitem>
              <para>Defines a footer for a document or a section</para>
              <para>A <tag>footer</tag> element typically contains: authorship information, copyright information, contact information, sitemap, back to top links, related documents.</para>
              <para>You can have several <tag>footer</tag> elements in one document.</para>
            </listitem>
          </varlistentry>
          
          <varlistentry xml:id='html_details'>
            <term><tag>details</tag></term>
            <listitem><para>Defines additional details that the user can open and close on demand</para></listitem>
          </varlistentry>
          
          <varlistentry xml:id='html_figure'>
            <term><tag>figure</tag> and <tag>figcaption</tag></term>
            <listitem>
              <para>The <tag>figure</tag> tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.</para>
              <para>The <tag>figcaption</tag> tag defines a caption for a <tag>figure</tag> element. The <tag>figcaption</tag> element can be placed as the first or as the last child of a <tag>figure</tag> element.</para>
              <para>The <tag linkend='html_id'>img</tag> element defines the actual image/illustration.</para>
            </listitem>
          </varlistentry>
          
          
          <varlistentry xml:id='html_summary'>
            <term><tag>summary</tag></term>
            <listitem><para>Defines a heading for the <tag>details</tag> element</para></listitem>
          </varlistentry>
          
        </variablelist>
        
      </section>  <!-- end of "HTML Layout Elements" -->
      
    </section>  <!-- end of "HTML Layout Elements and Techniques" -->
    
    <section>
      <title>Code in HTML</title>
      <para>Use <tag>code</tag> for inline code that can wrap and <tag xml:id='html_pre'>pre</tag> for block code that must not wrap. <tag xml:id='html_samp'>samp</tag> is for sample output, so I would avoid using it to represent sample code (which the reader is to input).</para>
      <para>Most browsers will display <tag>kbd</tag>, <tag>code</tag>, <tag>samp</tag> etc. elements with the following default values:</para>
        <programlisting><![CDATA[kbd, code, samp {
  font-family: monospace;
}]]></programlisting>
      <section sect='sect2' xml:id='html_code'>
        <title>Code with the <tag>code</tag> Element</title>
        <para>It defines a piece of computer code.</para>
      </section> <!-- </sect2> -->
      <section sect='sect2' xml:id='html_kbd'>
        <title>Keyboard Input with <tag>kbd</tag></title>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section> <title>HTML Tables</title>
      <para>Tables are defined with the <computeroutput>&lt;table&gt;</computeroutput> tag.</para>
      <para>A table is divided into rows (with the <computeroutput>&lt;tr&gt;</computeroutput> tag), and each row is divided into data cells (with the <computeroutput>&lt;td&gt;</computeroutput> tag). td stands for <quote>table data</quote> and holds the content of a data cell. A <computeroutput>&lt;td&gt;</computeroutput> tag can contain text, links, images, lists, forms, other tables, etc.</para>
      <para>Besides rows (<tag>tr</tag>), an HTML table may contain a header row (<tag>thead</tag>), footer (<tag>tfoot</tag>), and a body (<tag>tbody</tag>). A body is made up of ordinary rows (<tag>tr</tag>). A <tag>th</tag> element defines a header cell in a table.</para>
      <para>If you do not specify a border attribute, the table will be displayed without borders. To display a table with borders, specify the border attribute as <computeroutput>&quot;1&quot;</computeroutput>.</para>
      <para>Here is the code of a simple table:</para>
      <programlisting><![CDATA[<table border="1">
  <tr>
    <td>col 1</td> <td>col 2</td>
  </tr>
  <tr>
    <td>row 1, cell 1</td> <td>row 1, cell 2</td>
  </tr>
  <tr>
    <td>row 2, cell 1</td> <td>row 2, cell 2</td>
  </tr>
</table>]]></programlisting>
<para>And this is what it looks like:</para>
<table border="1">
  <tr> <td>col 1</td> <td>col 2</td> </tr>
  <tr> <td>row 1, cell 1</td> <td>row 1, cell 2</td> </tr>
  <tr> <td>row 2, cell 1</td> <td>row 2, cell 2</td> </tr>
</table>

      <bridgehead>Description of HTML table elements</bridgehead>
        <variablelist>
          <varlistentry> <term>table</term> <listitem> <para>Defines a table</para></listitem> </varlistentry>
          <varlistentry> <term>th</term> <listitem> <para>Defines a header cell in a table</para></listitem> </varlistentry>
          <varlistentry> <term>tr</term> <listitem> <para>Defines a row in a table</para></listitem> </varlistentry>
          <varlistentry> <term>td</term> <listitem> <para>Defines a cell in a table</para> </listitem> </varlistentry>
          <varlistentry> <term>caption</term> <listitem> <para>Defines a table caption</para> </listitem> </varlistentry>
          <varlistentry> <term>colgroup</term> <listitem> <para>Specifies a group of one or more columns in a table for formatting</para> </listitem> </varlistentry>
          <varlistentry> <term>col</term>         <listitem> <para>Specifies column properties for each column within a colgroup element</para> </listitem> </varlistentry>
          <varlistentry> <term>thead</term> <listitem> <para>Groups the header content in a table</para> </listitem> </varlistentry>
          <varlistentry> <term>tbody</term> <listitem> <para>Groups the body content in a table</para> </listitem> </varlistentry>
          <varlistentry> <term>tfoot</term>         <listitem><para>Groups the footer content in a table </para> </listitem> </varlistentry>
        </variablelist>

<para>This is the code for a more common type of table with a header and body:</para>
<programlisting><![CDATA[<table border="1">
  <thead>
    <tr> <td>col1</td> <td>col2</td> </tr>
  </thead>
  <tbody>
    <tr> <td>row 1, cell 1</td> <td>row 1, cell 2</td> </tr>
    <tr> <td>row 2, cell 1</td> <td>row 2, cell 2</td> </tr>
  </tbody>
</table>]]></programlisting>

<para>alternatively, you may write inside <tag>tbody</tag> or <tag>table</tag>: <userinput><![CDATA[<tr> <th>col1</th> <th>col2</th> </tr>]]></userinput> and will get a similar layout. This is what the preceding code produces:</para>
<table border="1">
  <thead>
    <tr> <td>col1</td> <td>col2</td> </tr>
  </thead>
  <tbody>
    <tr> <td>row 1, cell 1</td> <td>row 1, cell 2</td> </tr>
    <tr> <td>row 2, cell 1</td> <td>row 2, cell 2</td> </tr>
  </tbody>
</table>

    <section sect='sect2'> <title>HTML Table Caption and Headers</title>
    <para>A caption can be defined right inside a <computeroutput>&lt;table&gt;</computeroutput> element with <computeroutput>&lt;caption&gt;</computeroutput>.</para>
    <para>Header information for each column in a table is defined with the <computeroutput>&lt;th&gt;</computeroutput> tag, inside a table row (<computeroutput>&lt;tr&gt;</computeroutput>) element. All major browsers display the text in the <computeroutput>&lt;th&gt;</computeroutput> element as bold and centered.</para>
    <para>Here is an example:</para>
    <programlisting><![CDATA[<table border="1">
  <caption>My Caption</caption>
  <tr>
    <th>Header 1</th>
    <th>Header 2</th>
  </tr>
  <tr>
    <td>row 1, cell 1</td>
    <td>row 1, cell 2</td>
  </tr>
  <tr>
    <td>row 2, cell 1</td>
    <td>row 2, cell 2</td>
  </tr>
</table>]]></programlisting>
<para>This produces:</para>
<table border="1">
  <caption>My Caption</caption>
  <tr>
    <th>Header 1</th>
    <th>Header 2</th>
  </tr>
  <tr>
    <td>row 1, cell 1</td>
    <td>row 1, cell 2</td>
  </tr>
  <tr>
    <td>row 2, cell 1</td>
    <td>row 2, cell 2</td>
  </tr>
</table>

    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>Helping to Split Up Tables Using <tag>thead</tag>, <tag>tbody</tag>, and <tag>tfoot</tag></title>
      <para>The separation of the parts of the table allows for the richer formatting of tables by browsers. For example, when printing a table, browsers could print the head and foot of a table on each page if the table spreads to more than one page. It was also intended that if a table was too large for a single page then the header and footer would remain in view, while the body of the table would gain a scroll bar. However, this feature has not been supported in the majority of browsers.</para>
      <warning>Note that the <tag>tfoot</tag> element must appear <emphasis>before</emphasis> the <tag>tbody</tag> element in the source document.</warning>
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>Grouping Columns Using the <tag>colgroup</tag> Element</title>
      <para>The <tag>colgroup</tag> element is used for grouping columns.</para>
      <para>If you are creating complex tables, you can group one or more adjacent columns together using the <tag>colgroup</tag> element, with attribute <varname>span</varname> taking as values the number of columns grouped together. <tag>colgroup</tag> is particularly helpful when two or more adjacent columns contain similar types of information. This allows you to apply formatting to the group of columns rather than having to style each column separately. The class attribute may be used to associate each column group with a particular style.</para>
      <para>In the following example, the former two columns are grouped together, and so are the latter two columns:</para>
      <programlisting><![CDATA[<table>
  <colgroup span="2" width="50" class="formerColumns" />
  <colgroup span="2" width="50" class="latterColumns" />
  <tr> <td>a1</td> <td>a2</td> <td>a3</td> <td>a4</td> </tr>
  <tr> <td>b1</td> <td>b2</td> <td>b3</td> <td>b4</td> </tr>
  <tr> <td>c1</td> <td>c2</td> <td>c3</td> <td>c4</td> </tr>
</table>]]></programlisting>
      <para>In addition to the universal attributes, the <tag>colgroup</tag> element can carry the following attributes: <varname>align</varname>, <varname>char</varname>, <varname>charoff</varname>, <varname>span</varname>, <varname>valign</varname>, <varname>width</varname>. The <varname>span</varname> attribute is used to indicate how many columns the group contains, the <varname>width</varname> attribute sets the width of each column in the group (although in XHTML you should use CSS instead), and the <varname>class</varname> attribute can be used to attach further styles using CSS.</para>
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>Columns Sharing Styles Using the <tag>col</tag> Element</title>
      <para>The <tag>col</tag> element is used for sharing attributes between unrelated columns. It can be used to perform a similar role as the <tag>colgroup</tag> element, but without actually implying a structural group of columns. It can also be used to indicate that just one column needs formatting different from the rest of the group. The <tag>col</tag> elements are always empty elements, and are therefore used only to carry attributes, not content. For example, the following table would have four columns, and the first three, while not a group, could be formatted differently than the last column because it belongs to a separate set.</para>
      <programlisting><![CDATA[<table>
  <colgroup span="4">
    <col span="3" width="200" id="formerColumns" />
    <col span="1" width="100" id="latterColumns" />
  </colgroup>
  <tr> <td>a1</td> <td>a2</td> <td>a3</td> <td>a4</td> </tr>
  <tr> <td>b1</td> <td>b2</td> <td>b3</td> <td>b4</td> </tr>
  <tr> <td>c1</td> <td>c2</td> <td>c3</td> <td>c4</td> </tr>
</table>
]]></programlisting>
      <para>The attributes that the <tag>col</tag> element can carry are the same as for the <tag>colgroup</tag> element. Unfortunately, browser support for grouping columns is currently limited.</para>
    </section> <!-- </sect2> -->    
    
    <section sect='sect2'> <title>Tables that span several columns or rows</title>
    <para>You need to assign a number greater than 1 to the <computeroutput>colspan</computeroutput> or <computeroutput>rowspan</computeroutput> attribute.</para>
    <para>This is a table where one header cell spans two columns:</para>
    <programlisting><![CDATA[<table border="1">
  <tr>
    <th>Name</th>
    <th colspan="2">Telephone</th>
  </tr>
  <tr>
    <td>Bill Gates</td>
    <td>555 77 854</td>
    <td>555 77 855</td>
  </tr>
</table>]]></programlisting>
<para>This is what it looks like:</para>
<table border="1">
  <tr>
    <th>Name</th>
    <th colspan="2">Telephone</th>
  </tr>
  <tr>
    <td>Bill Gates</td>
    <td>555 77 854</td>
    <td>555 77 855</td>
  </tr>
</table>

    <para>And this is a table where one cell spans two rows:</para>
    <programlisting><![CDATA[<table border="1">
  <tr>
    <th>First Name:</th>
    <td>Bill Gates</td>
  </tr>
  <tr>
    <th rowspan="2">Telephone:</th>
    <td>555 77 854</td>
  </tr>
  <tr>
    <td>555 77 855</td>
  </tr>
</table>]]></programlisting>
<para>Again, this is what it looks like:</para>
<table border="1">
  <tr>
    <th>First Name:</th>
    <td>Bill Gates</td>
  </tr>
  <tr>
    <th rowspan="2">Telephone:</th>
    <td>555 77 854</td>
  </tr>
  <tr>
    <td>555 77 855</td>
  </tr>
</table>

      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>A rich <tag>table</tag> example</title>
        <para>I have borrowed this from <citetitle>Beginning CSS Cascading StyleSheets for Web Design</citetitle>, by Richard York, Wrox, 2005.</para>
        <programlisting><![CDATA[<table>
  <caption>Table: My favorite records.</caption>
  <colgroup> <col id='album' /> <col id='artist' /> <col id='released' /> </colgroup>
  <thead>
    <tr> <th> album </th> <th> artist </th> <th> released </th> </tr>
  </thead>
  <tbody>
    <tr> <td> Rubber Soul </td> <td> The Beatles </td> <td> 1965 </td> </tr>
    <tr> <td> Brown Eyed Girl </td> <td> Van Morrison </td> <td> 1967 </td> </tr>
    <tr> <td> Queen II </td> <td> Queen </td> <td> 1974 </td> </tr>
    <tr>
      <td> Mellon Collie and the Infinite Sadness </td>
      <td> The Smashing Pumpkins </td> <td> 1995 </td>
    </tr>
    <tr> <td></td> <td></td> <td></td> </tr>
  </tbody>
  <tfoot>
    <tr> <td> album</td> <td> artist</td> <td> released</td> </tr>
  </tfoot>
</table>]]></programlisting>
<para>Originally displayed as:</para>
<table>
  <caption>Table: My favorite records.</caption>
  <colgroup> <col id='album' /> <col id='artist' /> <col id='released' /> </colgroup>
  <thead>
    <tr> <th> album </th> <th> artist </th> <th> released </th> </tr>
  </thead>
  <tbody>
    <tr> <td> Rubber Soul </td> <td> The Beatles </td> <td> 1965 </td> </tr>
    <tr> <td> Brown Eyed Girl </td> <td> Van Morrison </td> <td> 1967 </td> </tr>
    <tr> <td> Queen II </td> <td> Queen </td> <td> 1974 </td> </tr>
    <tr>
      <td> Mellon Collie and the Infinite Sadness </td>
      <td> The Smashing Pumpkins </td> <td> 1995 </td>
    </tr>
    <tr> <td></td> <td></td> <td></td> </tr>
  </tbody>
  <tfoot>
    <tr> <td> album</td> <td> artist</td> <td> released</td> </tr>
  </tfoot>
</table>

<para>...</para>














































      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    <section>
      <title>HTML Lists, both bulleted and numbered</title>
      <para>Use tags <computeroutput>&lt;ul&gt;</computeroutput> and <computeroutput>&lt;ol&gt;</computeroutput> (for unordered and ordered list) surrounding items inside <computeroutput>&lt;li&gt;</computeroutput> tags.</para>
      <para>...</para>
      <section sect='sect2'>
        <title>Description Lists</title>
        <para>A description list is a list of items with a description or definition of each item. The description list is created using <tag>dl</tag> element. The <tag>dl</tag> element is used in conjunction with the <tag>dt</tag> element which specify a term, and the <tag>dd</tag> element which specify the term's definition.</para>
        <para>This is an example using a description list:</para>
        <programlisting><![CDATA[ <dl>
  <dt>Coffee</dt>
  <dd>Black hot drink</dd>
  <dt>Milk</dt>
  <dd>White cold drink</dd>
</dl> ]]></programlisting>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section>
      <title>HTML Images</title>
      <section sect='sect2' xml:id='html_id'>
        <title>Images with the <tag>img</tag> Element</title>
        <para>The <tag>img</tag> tag defines an image in an HTML page.</para>
        <para>The <tag>img</tag> tag has two required attributes: <parameter>src</parameter> and <parameter>alt</parameter>.</para>
        <note>Images are not technically inserted into an HTML page, images are linked to HTML pages. The <tag>img</tag> tag creates a holding space for the referenced image.</note>
        <bridgehead>Example:</bridgehead>
        <programlisting><![CDATA[ <figure>
  <img src="pic_trulli.jpg" alt="Trulli">
  <figcaption>Fig1. - Trulli, Puglia, Italy.</figcaption>
</figure> ]]></programlisting>
        <tip>To link an image to another document, simply nest the <tag>img</tag> tag inside an <tag>a</tag> tag.</tip>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>HTML Background images</title>
        <para>Set the CSS <parameter>background-image</parameter> property. You may write your CSS code in the <tag>head</tag> tag, as in:</para>
        <programlisting><![CDATA[<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>page with background image</title>
    <style>
      body {
        background-image: url("../compost-002.1021x1536.jpg");
        background-color: #cccccc;
      }
      
    </style>
  </head>
  <body>
    ...
  </body>
<html>]]></programlisting>

<warning>You shouldn&apos;t set a background image as an attribute of the <tag>body</tag> element because this is not supported by HTML5. The syntax for this obsolete feature is <userinput><![CDATA[<body background="URL">]]></userinput>, where URL is a relative path.</warning>

<para>By default, a background-image is placed at the top-left corner of an element, and repeated both vertically and horizontally. You are advised always to set a background-color to be used if the image is unavailable.</para>

      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section>
      <title>HTML Forms</title>
      <para>An HTML form is used to collect user input. The HTML <tag linkend='html_form'>form</tag> element defines a form that is used to collect user input.</para>
      
      <para>HTML Forms are used to collect different kinds of user inputs, such as contact details like name, email address, phone numbers, or details like credit card information, etc.</para>
      <para>Forms contain special elements called controls like inputbox, checkboxes, radio-buttons, submit buttons, etc. Users generally complete a form by modifying its controls e.g. entering text, selecting items, etc. and submitting this form to a web server for further processing.</para>
      <section sect='sect2' xml:id='html_form'>
        <title>HTML <tag>form</tag> Element</title>
        <para>The <tag>form</tag> tag is used to create an HTML form for user input.</para>
        <para>The <tag>form</tag> element can contain one or more of the following form elements:</para>
        <itemizedlist>
          <listitem><tag linkend='html_input'>input</tag></listitem>
          <listitem><tag linkend='html_textarea'>textarea</tag></listitem>
          <listitem><tag>button</tag></listitem>
          <listitem><tag>select</tag></listitem>
          <listitem><tag>option</tag></listitem>
          <listitem><tag>optgroup</tag></listitem>
          <listitem><tag>fieldset</tag></listitem>
          <listitem><tag linkend='html_label'>label</tag></listitem>
          <listitem><tag>output</tag></listitem>
        </itemizedlist>

      </section> <!-- </sect2> -->
      <section sect='sect2' xml:id='html_input'>
        <title>The <tag>input</tag> Element</title>
        <para>The <tag>input</tag> element is the most important form element. The <tag>input</tag> element is displayed in several ways, depending on the type attribute.</para>
        <para>Here are some examples:</para>
        <itemizedlist>
          <listitem><userinput><![CDATA[<input type="text">]]></userinput>: Defines a single-line text input field</listitem>
          <listitem><userinput><![CDATA[<input type="radio">]]></userinput>: Defines a radio button (for selecting one of many choices)</listitem>
          <listitem><userinput><![CDATA[<input type="submit">]]></userinput>: Defines a submit button (for submitting the form)</listitem>
        </itemizedlist>
      </section> <!-- </sect2> -->
      <section sect='sect2' xml:id='html_label'>
        <title>The <tag>label</tag> Element</title>
        <para>Notice the use of the <tag>label</tag> element in the example below.</para>
        <para>The <tag>label</tag> tag defines a label for many form elements.</para>
        <para>The <tag>label</tag> element is useful for screen-reader users, because the screen-reader will read out loud the label when the user is focused on the input element.</para>
        <para>The <tag>label</tag> element also helps users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the <tag>label</tag> element, it toggles the radio button/checkbox.</para>
        <para>The <parameter>for</parameter> attribute of the <tag>label</tag> tag should be equal to the <parameter>id</parameter> attribute of the <tag>input</tag> element to bind them together.</para>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>Text Fields</title>
        <para>Here is a form with two text input fields:</para>
        <programlisting><![CDATA[ <form>
  <label for="fname">First name:</label><br>
  <input type="text" id="fname" name="fname"><br>
  <label for="lname">Last name:</label><br>
  <input type="text" id="lname" name="lname">
</form> ]]></programlisting>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>Radio Buttons</title>
        <para>Radio buttons let a user select ONE of a limited number of choices.</para>
        <para>Example:</para>
        <programlisting><![CDATA[<form>
  <input type="radio" id="male" name="gender" value="male">
  <label for="male">Male</label><br>
  <input type="radio" id="female" name="gender" value="female">
  <label for="female">Female</label><br>
  <input type="radio" id="other" name="gender" value="other">
  <label for="other">Other</label>
</form>]]></programlisting>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>Checkboxes</title>
        <para>Checkboxes allows the user to select one or more option from a pre-defined set of options. It is created using an <tag>input</tag> element whose <parameter>type</parameter> attribute has a value of <literal>checkbox</literal>.</para>
        <para>Here&apos;s an example of checkboxes that can be used to collect information about user&apos;s hobbies:</para>
        <programlisting><![CDATA[<form>
    <input type="checkbox" name="sports" id="soccer">
    <label for="soccer">Soccer</label>
    <input type="checkbox" name="sports" id="cricket">
    <label for="cricket">Cricket</label>
    <input type="checkbox" name="sports" id="baseball">
    <label for="baseball">Baseball</label>
</form>]]></programlisting>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>File Select Box</title>
        <para>The file fields allow a user to browse for a local file and send it as an attachment with the form data. Web browsers such as Google Chrome and Firefox render a file select input field with a Browse button that enables the user to navigate the local hard drive and select a file.</para>
        <para>This is also created using an <tag>input</tag> element, whose <parameter>type</parameter> attribute value is set to <literal>file</literal>.</para>
        <para>Example:</para>
        <programlisting><![CDATA[<form>
    <label for="file-select">Upload:</label>
    <input type="file" name="upload" id="file-select">
</form>]]></programlisting>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>The Submit Button</title>
        <para><userinput><![CDATA[<input type="submit">]]></userinput> defines a button for submitting the form data to a form-handler.</para>
        <para>The form-handler is typically a page on the server with a script for processing input data.</para>
        <para>The form-handler is specified in the form&apos;s action attribute.</para>
        <para>Example</para>
        <programlisting><![CDATA[<form action="/action_page.php">
  <label for="fname">First name:</label><br>
  <input type="text" id="fname" name="fname" value="John"><br>
  <label for="lname">Last name:</label><br>
  <input type="text" id="lname" name="lname" value="Doe"><br><br>
  <input type="submit" value="Submit">
</form>]]></programlisting>
        <section sect='sect3'>
          <title>The <parameter>action</parameter> Attribute</title>
          <para>The <parameter>action</parameter> attribute defines the action to be performed when the form is submitted.</para>
          <para>Usually, the form data is sent to a page on the server when the user clicks on the submit button.</para>
          <para>In the example above, the form data is sent to a page on the server called <filename>/action_page.php</filename>. This page contains a server-side script that handles the form data:</para>
          <programlisting><![CDATA[<form action="/action_page.php">]]></programlisting>
          <para>If the action attribute is omitted, the action is set to the current page.</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>The <parameter>target</parameter> Attribute</title>
          <para>The <parameter>target</parameter> attribute specifies if the submitted result will open in a new browser tab, a frame, or in the current window.</para>
          <para>The default value is <constant>_self</constant>, which means the form will be submitted in the current window.</para>
          <para>To make the form result open in a new browser tab, use the value <constant>_blank</constant>.</para>
          <para>Example. Here, the submitted result will open in a new browser tab:</para>
          <programlisting><![CDATA[<form action="/action_page.php" target="_blank">]]></programlisting>
          <para>Other legal values are <literal>_parent</literal>, <literal>_top</literal>, or a name representing the name of an <tag>iframe</tag>.</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>The <parameter>method</parameter> Attribute</title>
          <para>The <parameter>method</parameter> attribute specifies the HTTP method (<literal>GET</literal> or <literal>POST</literal>) to be used when submitting the form data.</para>
          <para>Example. Use the GET method when submitting the form:</para>
          <programlisting><![CDATA[<form action="/action_page.php" method="get">]]></programlisting>
          <para>or:</para>
          <para>Use the POST method when submitting the form:</para>
          <programlisting><![CDATA[<form action="/action_page.php" method="post">]]></programlisting>
          <section sect='sect4'>
            <title>When to Use <literal>GET</literal>?</title>
            <para>The default HTTP method when submitting form data is <literal>GET</literal>.</para>
            <para>However, when <literal>GET</literal> is used, the form data will be visible in the page&apos;s address field:</para>
            <programlisting><![CDATA[/action_page.php?firstname=John&lastname=Doe]]></programlisting>
            <bridgehead>Notes on GET:</bridgehead>
            <itemizedlist>
              <listitem>Appends form-data into the URL in name/value pairs</listitem>
              <listitem>The length of a URL is limited (2048 characters)</listitem>
              <listitem>Never use GET to send sensitive data! (will be visible in the URL)</listitem>
              <listitem>Useful for form submissions where a user wants to bookmark the result</listitem>
              <listitem>GET is better for non-secure data, like query strings in Google</listitem>
            </itemizedlist>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>When to Use <literal>POST</literal>?</title>
            <para>Always use <literal>POST</literal> if the form data contains sensitive or personal information. The <literal>POST</literal> method does not display the form data in the page address field.</para>
            <bridgehead>Notes on POST:</bridgehead>
            <itemizedlist>
              <listitem>POST has no size limitations, and can be used to send large amounts of data.</listitem>
              <listitem>Form submissions with POST cannot be bookmarked</listitem>
            </itemizedlist>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        
        <section sect='sect3' xml:id='html_textarea'>
          <title>Textarea</title>
          <para>Textarea is a multiple-line text input control that allows a user to enter more than one line of text. Multi-line text input controls are created using an <tag>textarea</tag> element.</para>
          <para>Example:</para>
          <programlisting><![CDATA[<form>
  <label for="address">Address:</label>
  <textarea rows="3" cols="30" name="address" id="address"></textarea>
</form>]]></programlisting>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Grouping Form Controls</title>
          <para>You also group logically related controls and labels within a web form using the <tag>legend</tag> and <tag>fieldset</tag> elements. Grouping form controls into categories makes it easier for users to locate a control which makes the form more user-friendly. Let&apos;s try out the following example to see how it works:</para>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section>
      <title>HTML Frames for Flexibility</title>
      <section>
        <title>Overview of Frames</title>
        <para>A <firstterm>frame</firstterm> is an HTML construct that is displayed as a rectangle made up of several pages or files as included frames (rectangles too). Frames meet the need of displaying several pages in one. Often enough there is a narrower frame on the left showing hyperlinks or a menu and a wider frame on its right holding heftier content.</para>
        <para>Overall, frames allow you to do several things that make a Web page more powerful:</para>
        <itemizedlist>
          <listitem>Fix Content: Different sections could have a fixed position in the page.</listitem>
          <listitem>Independent scrolling: Different sections could scroll without scrolling the entire page.</listitem>
          <listitem>Mix and match: Content could be loaded from various sources.</listitem>
          <listitem>Dynamic: Content could be changed without reloading the entire page.</listitem>
        </itemizedlist>
      </section>
      
      <section>
        <title>Frames Within Framesets (Deprecated)</title>
        <para>Frames within framesets have come to be disliked mainly because users don&apos;t know what page they are viewing and therefore can&apos;t bookmark it. Another drawback is that different browsers implement the inheritance of CSS properties from the container page differently. The fact is that although browsers will continue to recognize them for a few more oncoming versions, HTML5 has dropped them and only supports <tag>iframe</tag>, if grudgingly.</para>
        <para>This is how a page holding two frames could be coded:</para>
        <programlisting><![CDATA[<html>
  <frameset cols="30% ,*">
    <frame name="leftframe" src="navigation.html">
    <frame name="mainframe" src="main.html">
  </frameset>
</html>]]></programlisting>
        <para>Note that <tag>frame</tag>&apos;s hold a name to be the target of a link.</para>
      </section>

      <section sect='sect2'>
        <title><tag>iframe</tag> to replace <tag>frame</tag> within <tag>frameset</tag></title>
        <para>Whereas frames split the browser into separate discrete pages, an iframe is a frame that is embedded directly into a another Web page.</para>
        <para>One significant change that HTML 5 will be making to the <tag>iframe</tag>, though, is that you can no longer specify position and dimension as attributes in the tag. Instead, this is all handled with CSS instead, which is as it should be. By using CSS, then we can add an <tag>iframe</tag> in a fixed position, that is independently scrollable, and mix and match content, which begins to meet our stated wishes.</para>
        <para>This is how you would code the menu + contents composite page with <tag>iframe</tag>&apos;:</para>
        <programlisting><![CDATA[<body>
  <iframe id="menu_frame" name="menu_frame" src="menu.html"></iframe>
  <iframe id="main_frame" name="main_frame" src="hombre.html"></iframe>
</body>]]></programlisting>
<para>To be styled in your CSS file:</para>
<programlisting><![CDATA[body {
  margin: 0;
  padding: 0;
  padding-left: 20%;
}

#menu_frame {
  position: absolute;
  background-color: lightgreen;
  top: 0;
  left: 0;
  height: 100%;
  width: 20%;
  border: 0;
  border-right: 3px solid green;}

#main_frame {
  position: absolute;
  background-color: palegreen;
  top: 0;
  left: 20%;
  border: 0;
  height: 100%;
  width: 80%;
  border-left: 3px solid green;
} ]]></programlisting>
      </section> <!-- </sect2> -->
      
      
      <section sect='sect2'>
        <title>The Difference Between Frames and Iframes</title>
        <para>When you use <tag>frameset</tag> you split the visual real estate of a browser window into multiple frames. Each frame has it&apos;s own contents and the content in one don&apos;t spill into the next.</para>
        <para>An <tag>iframe</tag>, on the other hand, embeds a frame directly inline with the other elements of a webpage.</para>
        <para>While both frames and iframes perform a similar function – embedding a resource into a webpage – they are fundamentally different.</para>
        <itemizedlist>
          <listitem>Frames are layout-defining elements.</listitem>
          <listitem>Iframes are a content-adding elements.</listitem>
        </itemizedlist>
        <warning>Frames have been deemed obsolete by the W3C in HTML5. The reasoning given for this is that frames create usability and accessibility issues. Let&apos;s consider each of these charges.</warning>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Using the New, Preferred <tag>div</tag> Element, instead</title>
        
        <section sect='sect3'>
          <title>Keeping certain elements of a page visible...</title>
          <para>Keeping certain elements of a page visible when the rest of the page is scrolled. Whether you should do this is a question I leave to the reader, but the following is a way to acomplish this using only valid XHTML 1.0 Strict and CSS.</para>
          <para>Remember that however good your interface is, it would be better if there were less of it.</para>
          <para>The solution presented here was designed to replace a framed website that had a top frame to contain a header and a left-hand frame that displayed a navigation menu. The basic idea is to create three <tag>div</tag>s, one each for the header, navigation and content. The header and navigation divs are positioned absolutely, while the content is left relative.</para>
          <programlisting><![CDATA[<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/1999/xhtml/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Example of CCS-simulated framed page</title>

<style type="text/css">
        body {
                margin: 0;
                padding: 0 10px 0 10px;
                height: 100%;
                overflow-y: auto;
        }

        #content {
                margin: 113px 0px 0px 150px;
                display: block;
                padding: 10px;
        }

        #header {
                display: block;
                top: 0px;
                left: 0px;
                width: 100%;
                height: 112px;
                position: fixed;
                background-color: #ffffff;
                border: 1px solid #888;
        }

        #navigation {
                display: block;
                top: 113px;
                left: 0px;
                width: 142px;
                height: 100%;
                position: fixed;
                border: 1px solid #888;
        }

        * html #header {position: absolute;}
        * html #navigation {position: absolute;}
</style>

  </head>

  <body>
    <div id="header">my header at top</div>
    <div id="navigation">My navigation on the left</div>
    <div id="content">My scrollable content</div>
  </body>
  
</html>]]></programlisting>
          <section sect='sect4'>
            <title>Problems with this solution</title>
            <para>If you&apos;ve played with the links in the above example, you&apos;ll have noted one of the problems with this method of simulating frames: namely that if you link to a section in a document, when navigating to that link the browser displays the first part of the content behind the header. This happens with both Mozilla and IE, and it&apos;s very irritating. I&apos;m still working on a solution for this; in the meantime, don&apos;t use this technique if you need to link to sections within a document.</para>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title><tag>div</tag> vs <tag>frameset</tag></title>
            <para>div&apos;s and framesets do completely different things. If your site was previously using frames and you want to use div&apos;s you should copy and paste the code out of the files you&apos;re using as the source of those frames, and place it in divs structured in an identical layout to the way your frameset was structured.</para>
            <para>divs are for visual enhancement of sites. framesets were essentially the same thing essentially as an iframe. Frames and iframes are intended for displaying another pages content within your page. The best metaphor for them is like having a window to another website inside of your page.</para>
            <para>On the modern web there are usually a lot better methods of integrating another sites content into your own than using frames.</para>
          </section> <!-- </sect3> -->
          
          <section sect='sect3' xml:id='css_flexbox'>
            <info>
              <title>Flexbox (<userinput>display: flex;</userinput>)</title>
              <para>In modern websites float-based layouts are being replaced with Flexbox. The main idea behind Flexbox is that with it, you can control the alignment, direction, order, and size of the items inside the container.</para>
              <para>Flexbox is a one-dimensional layout method for arranging items in rows or columns. Items flex (expand) to fill additional space or shrink to fit into smaller spaces.</para>
            </info>
            
            <section>
              <title>Why Flexbox?</title>
              <para>For a long time, the only reliable cross-browser compatible tools available for creating CSS layouts were features like floats and positioning. These work, but in some ways they&apos;re also limiting and frustrating.</para>
              <para>The following simple layout designs are either difficult or impossible to achieve with such tools in any kind of convenient, flexible way:</para>
              <itemizedlist>
                <listitem>Vertically centering a block of content inside its parent.</listitem>
                <listitem>Making all the children of a container take up an equal amount of the available width/height, regardless of how much width/height is available.</listitem>
                <listitem>Making all columns in a multiple-column layout adopt the same height even if they contain a different amount of content.</listitem>
              </itemizedlist>
              <para>As you&apos;ll see in subsequent sections, flexbox makes a lot of layout tasks much easier. Let&apos;s look into it!!!</para>
            </section>
            
            <section>
              <title>Specifying what elements to lay out as flexible boxes</title>
              <para>To start with, we need to select which elements are to be laid out as flexible boxes. To do this, we set a special value of display on the parent element of the elements you want to affect. In this case we want to lay out the <tag>article</tag> elements, so we set this on the <tag>section</tag>:</para>
              <programlisting>section {
  display: flex;
}</programlisting>
              <para>This causes the <tag>section</tag> element to become a flex container and its children to become flex items.</para>
              <para>So, this single declaration gives us everything we need. Incredible, right? We have our multiple column layout with equal-sized columns, and the columns are all the same height. This is because the default values given to flex items (the children of the flex container) are set up to solve common problems such as this.</para>
              <para>To be clear, let&apos;s reiterate what is happening here. The element we&apos;ve given a display value of flex to is acting like a block-level element in terms of how it interacts with the rest of the page, but its children are laid out as flex items. The next section will explain in more detail what this means. Note also that you can use a display value of inline-flex if you wish to lay out an element&apos;s children as flex items, but have that element behave like an inline element.</para>
            </section>
            
            <section>
              <title>The flex model</title>
              <para>When elements are laid out as flex items, they are laid out along two axes:</para>
              <mediaobject>
                <imageobject>
                  <imagedata format='PNG' fileref='Electric_files/pictures/Communicating/flex_terms.png' alt='Flex Terms'/>
                </imageobject>
                <!--<caption>A simple graph.</caption>-->
              </mediaobject>
              <itemizedlist>
                <listitem>The main axis is the axis running in the direction the flex items are laid out in (for example, as rows across the page, or columns down the page.) The start and end of this axis are called the main start and main end.</listitem>
                <listitem>The cross axis is the axis running perpendicular to the direction the flex items are laid out in. The start and end of this axis are called the cross start and cross end.</listitem>
                <listitem>The parent element that has display: flex set on it (the <tag>section</tag>  in our example) is called the flex container.</listitem>
                <listitem>The items laid out as flexible boxes inside the flex container are called flex items (the <tag>article</tag> elements in our example).</listitem>
              </itemizedlist>
              <para>Bear this terminology in mind as you go through subsequent sections. You can always refer back to it if you get confused about any of the terms being used.</para>
            </section>
            
            <section>
              <title>*</title>
            </section>
            
            <section>
              <title>*</title>
            </section>
            
            <programlisting><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <title>Title of the document</title>
    <style>
      .flex-container {
        display: flex;
        align-items: center; /* Use another value to see the result */
        width: 100%;
        height: 200px;
        background-color: #1faadb;
      }
      .flex-container > div {
        width: 25%;
        height: 60px;
        margin: 5px;
        border-radius: 3px;
        background-color: #8ebf42;
      }
    </style>
  </head>
  <body>
    <div class="flex-container">
      <div></div>
      <div></div>
      <div></div>
    </div>
  </body>
</html>]]></programlisting>
            <para>...</para>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>***</title>
            
            <para></para>
          </section> <!-- </sect3> -->

        </section> <!-- </sect2> -->  <!-- end of "Using the New, Preferred <tag>div</tag> Element, instead" -->


    </section> <!-- </sect1> -->
    
    <section>
      <title>HTML in Email</title>
      <itemizedlist>
        <listitem>Use an html editor (like DreamWeaver, TextWrangler, Coda, or whatever you may have) and create the email in the editor. Then save the file with a <filename>.html</filename> extension. Where you save the file does not matter at all, but it&apos;s probably easiest just to save the HTML file on your desktop so you can easily access it in step 2.</listitem>
        <listitem>Open that html file in an internet browser – Firefox, Safari, Internet Explorer, Google Chrome, etc. If you just click on the file it should just directly open up in a browser, since your computer is smart enough to know that a <filename>.html</filename> file should be opened in a browser. If the file does not open directly in a browser, simply open a browser window, and then in the browser menu go to <quote>File->Open File</quote>, and choose the .html file.</listitem>
        <listitem>In your browser menu, go to Edit, and then <quote>Select All</quote> or Ctrl+A ( or Command + A if you are on a Mac) to select everything that is displayed in the browser. This is the magic step that stores all the HTML onto your clipboard – so make sure you get this one right!</listitem>
        <listitem>Paste (CTRL + V or Command +V) the html to the Gmail or Yahoo Mail message. Then you are done! This should work like a charm – and you should be able to see the HTML message directly in your message before you send it</listitem>
      </itemizedlist>
      
      <section sect='sect2'>
        <title>Including Banners in your E-Mail</title>
        <para>To make your emails appear more professional, consider adding a banner at the top of your message. Using HTML code in your email, you can embed a banner image so your email has the same feel as a Web page. This can help instill reader confidence in your email and allow your email offers to convert better. With a higher converting email design, you will generate more interest in your offer than with a plain-text email.</para>
        <para>First, you have to determine the size of your banner. The standard size for a traditional header banner is 428 by 60 pixels. However, you can use whatever size you desire. Then Design the look of the banner in your image editing software. You can include your logo or any other images you feel fit the style of your email.</para>
        <para>Upload your image to your Web-hosting service. If you do not have your own Web host, you can use a free image-hosting service such as Imageshack, Photobucket, or Tinypic. Copy the URL assigned to your uploaded image. This is the unique file name that is given to your image.</para>
        <para>Last, open the email where you want your banner to appear using a text editor. Type the HTML code . Replace "YOURURL" with the actual image URL, keeping the quotation marks intact. This can be applied to a template email and sent to multiple recipients, or can be added to a message sent to a single reader.</para>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section xml:id='rddl'>
      <title>Resource Directory Description Language (RDDL)*</title>
    </section> <!-- </sect1> -->
    
    <section xml:id='canvas'>
      <title>Canvas</title>
      <para>The canvas element is part of HTML5 and allows for dynamic, scriptable rendering of 2D shapes and bitmap images. It is a low level, procedural model that updates a bitmap and does not have a built-in scene graph, but through WebGL it allows 3D shapes and images to be displayed. HTML5 Canvas also helps in making 2D games.</para>
      <section sect='sect2'>
        <title>Canvas versus Scalable Vector Graphics (<link linkend='svg'>SVG</link>)</title>
        <para>SVG is an earlier standard for drawing shapes in browsers. However, unlike canvas, which is raster-based, SVG is vector-based, so that each drawn shape is remembered as an object in a scene graph or Document Object Model, which is subsequently rendered to a bitmap. This means that if attributes of an SVG object are changed, the browser can automatically re-render the scene.</para>
        <para>Canvas objects, on the other hand, are drawn in immediate mode. In the canvas example above, once the rectangle is drawn the model it was drawn from is forgotten by the system. If its position were to be changed, the entire scene would need to be redrawn, including any objects that might have been covered by the rectangle. But in the equivalent SVG case, one could simply change the position attributes of the rectangle and the browser would determine how to repaint it. There are additional JavaScript libraries that add scene-graph capabilities to the canvas element. It is also possible to paint a canvas in layers and then recreate specific layers.</para>
        <para>SVG images are represented in XML, and complex scenes can be created and maintained with XML editing tools.</para>
        <para>The SVG scene graph enables event handlers to be associated with objects, so a rectangle may respond to an onClick event. To get the same functionality with canvas, one must manually match the coordinates of the mouse click with the coordinates of the drawn rectangle to determine whether it was clicked.</para>
        <para>Conceptually, canvas is a lower-level API upon which an engine, supporting for example SVG, might be built. There are JavaScript libraries that provide partial SVG implementations using canvas for browsers that do not provide SVG but support canvas, such as the browsers in Android 2.x. However, this is not normally the case—they are independent standards. The situation is complicated because there are scene graph libraries for canvas, and SVG has some bitmap manipulation functionality.</para>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->

    <section>
      <title>Microformats</title>
      <para><firstterm>Microformats</firstterm> are standards used to embed semantics and structured data in HTML, and provide an API to be used by social web applications, search engines, aggregators, and other tools. These minimal patterns of HTML are used for marking up entities that range from fundamental to domain-specific information, such as people, organizations, events, and locations.</para>
      <para>Microformats are, in the words of microformats.org,</para>
      <blockquote>Designed for humans first and machines second, microformats are a set of simple, open data formats built upon existing and widely adopted standards. Instead of throwing away what works today, microformats intend to solve simpler problems first by adapting to cur- rent behaviors and usage patterns (e.g., XHTML, blogging).</blockquote>
      <para>Or, more succinctly,</para>
      <blockquote>. . . a set of simple open data format standards that many are actively developing and implementing for more/better structured blogging and web microcontent publishing in general.</blockquote>

      <para>Some microformats are:</para>
      <variablelist>
        <varlistentry>
          <term>hCard</term>
          <listitem>For marking up contact information for people or organizations</listitem>
        </varlistentry>
        <varlistentry>
          <term>hCalendar</term>
          <listitem>For marking up information about events such as seminars, conferences, meetings, concerts, and parties</listitem>
        </varlistentry>
        <varlistentry>
          <term>XFN</term>
          <listitem>For marking up the relationships between people (e.g., who has met whom, who is friends with whom, who is a colleague of whom)</listitem>
        </varlistentry>
        <varlistentry>
          <term>hReview</term>
          <listitem>To help solve the reviews on the Web problem previously discussed</listitem>
        </varlistentry>
      </variablelist>

      <para>Microformats use supporting vocabularies to describe objects and name-value pairs to assign values to their properties. The properties are carried in class attributes that can be added to any HTML element, while the data values re-use HTML element content and semantic attributes.</para>
      <para>To create a microformats object, h-* class names are used in the <varname>class</varname> attribute.</para>
      <para>To add a property to an object, the p-*, u-*, dt-*, e-* class names are used on one of the object&apos;s descendants.</para>

      <section>
        <title>Principles</title>
        <para>Underpinning every microformat is a set of principles that help to guide the outcome of developing new microformats. Microformats</para>
        <itemizedlist>
          <listitem>Solve a specific problem</listitem>
          <listitem>Start as simply as possible</listitem>
          <listitem>Are designed for humans first, machines second</listitem>
          <listitem>Reuse building blocks from widely adopted standards</listitem>
          <listitem>Are modular and embeddable</listitem>
          <listitem>Enable and encourage decentralized development, content, and services</listitem>
        </itemizedlist>
      </section>


      <section>
        <title>Microformats2</title>
        <para><firstterm>Microformats2</firstterm> (sometimes referred to as mf2) is an update to microformats that provides a simpler way of annotating HTML structured syntax and vocabularies than previous approaches of using RDFa and microdata. These previous approaches require learning new attributes.</para>
        <para>There are open source parsing libraries for most languages for microformats2.</para>
      </section>

      <section>
        <title>How Microformats Work</title>
        <para>An author of a webpage can add microformats to their HTML. For example if they wanted to identify themselves they could use an h-card such as:</para>
        <programlisting><![CDATA[<a class="h-card" href="https://alice.example.com">Alice Blogger</a>]]></programlisting>
        <para>When a parser encounters this data, it will know that this page contains a "card" which describes a person or organization named Alice Blogger with a URL of https://alice.example.com/. The parser makes this data available via APIs that can be used for different applications. For example, an application could scan a page for a h-card to use as profile information for someone who has signed up to a service.</para>
        <para>As in this example, some markup patterns require only a single microformat root class name, which parsers use to find a few generic properties such as name, url, photo.</para>
      </section>
      <section>
        <title>Microformats Use Cases</title>
        <para>Microformats have numerous use cases. First, the Webmention standard uses microformats to provide a way in which messages and comments can be sent from one site to another. The Webmention specification defines specific attributes that sites may publish and consume to create a rich, interoperable way of publishing messages and comments. Microformats can also be used with Webmentions to enable sending social reactions such as likes, reposts, and bookmarks from one site to another.</para>
        <para>Microformats also enable easy syndication across sites. An aggregator could parse a page with published microformats to look for information such as a post title, a post body, and the author of a post. This aggregator could then use the semantic information gathered to render a result on their site. For instance, news aggregators and community posting boards could facilitate submissions and use microformats to exact relevant content from a page. Further, a website could use microformats to send crafted requests to third-parties to publish content, such as social networks.</para>
        <para>All major search engines support reading and interpreting microformats. Search engines benefit greatly from direct access to this structured data because it allows them to understand the information on web pages. With this information, search engines can provide more relevant results to users. Some search engines may render special snippets such as star ratings on a search result page based on the data provided in microformats.</para>
        <para>In addition to being machine-readable, microformats are designed to be easily read by humans. This approach makes it easy for people to understand and maintain microformats data.</para>
      </section>
      <section>
        <title>Microformats Prefixes</title>
        <para>All microformats consist of a root, and a collection of properties. Properties are all optional and potentially multivalued - applications needing a singular value may use the first instance of a property. Hierarchical data is represented with nested microformats, typically as property values themselves.</para>
        <para>All microformats class names use prefixes. Prefixes are syntax independent of vocabularies, which are developed separately.</para>
        <itemizedlist>
          <listitem>
            <para>&quot;h-*&quot; for root class names, e.g. &quot;h-card&quot;, &quot;h-entry&quot;, &quot;h-feed&quot;, and many more. These top-level root classes usually indicate a type and corresponding expected vocabulary of properties. For example:</para>
            <itemizedlist>
              <listitem>h-card describes a person or organization</listitem>
              <listitem>h-entry describes episodic or date stamped online content like a blog post</listitem>
              <listitem>h-feed describes a stream or feed of posts</listitem>
            </itemizedlist>
            <note>You can find many more vocabularies on the microformats2 wiki.</note>
          </listitem>
          <listitem>
            <para>&quot;p-*&quot; for plain (text) properties, e.g. &quot;p-name&quot;, &quot;p-summary&quot;</para>
            <itemizedlist>
              <listitem>Generic plain text parsing, element text in general. On certain HTML elements, use special attributes first, e.g. img/alt, abbr/title.</listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>&quot;u-*&quot; for URL properties, e.g. &quot;u-url&quot;, &quot;u-photo&quot;, &quot;u-logo&quot;</para>
            <para>Special parsing: element attributes a/href, img/src, object/data etc. attributes over element contents.</para>
          </listitem>
          <listitem>
            <para>&quot;dt-*&quot; for datetime properties, e.g. &quot;dt-start&quot;, &quot;dt-end&quot;, &quot;dt-bday&quot;</para>
            <para>Special parsing: time element datetime attribute, value-class-pattern and separate date time value parsing for readability.</para>
          </listitem>
          <listitem>
            <para>&quot;e-*&quot; for element tree properties where the entire contained element hierarchy is the value, e.g. &quot;e-content&quot;. The &quot;e-&quot; prefix can also be mnemonically remembered as <quote>element tree</quote>, <quote>embedded markup</quote>, or <quote>encapsulated markup</quote>.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Some microformats examples</title>
        <section>
          <title>h-card</title>
          <para>The <firstterm>h-card</firstterm> microformat represents a person or organization.</para>
          <para>The value of each property is defined in HTML using the class property any element can carry</para>
          <bridgehead>Example h-card</bridgehead>
          <programlisting><![CDATA[<p class="h-card">
  <img class="u-photo" src="https://example.org/photo.png" alt="" />
  <a class="p-name u-url" href="https://example.org">Joe Bloggs</a>
  <a class="u-email" href="mailto:jbloggs@example.com">jbloggs@example.com</a>,
  <span class="p-street-address">17 Austerstræti</span>
  <span class="p-locality">Reykjavík</span>
  <span class="p-country-name">Iceland</span>
</p>]]></programlisting>
          <bridgehead>Properties</bridgehead>
          <variablelist>
            <varlistentry>
              <term>p-name</term>
              <listitem>The full/formatted name of the person or organization.</listitem>
            </varlistentry>
            <varlistentry>
              <term>u-email</term>
              <listitem>email address</listitem>
            </varlistentry>
            <varlistentry>
              <term>u-photo</term>
              <listitem>a photo of the person or organization</listitem>
            </varlistentry>
            <varlistentry>
              <term>u-url</term>
              <listitem>home page or other URL representing the person or organization</listitem>
            </varlistentry>
            <varlistentry>
              <term>u-uid</term>
              <listitem>universally unique identifier, preferably canonical URL</listitem>
            </varlistentry>
            <varlistentry>
              <term>p-street-address</term>
              <listitem>street number + name</listitem>
            </varlistentry>
            <varlistentry>
              <term>p-locality</term>
              <listitem>city/town/village</listitem>
            </varlistentry>
            <varlistentry>
              <term>p-country-name</term>
              <listitem>country name</listitem>
            </varlistentry>
          </variablelist>
          <bridgehead>Nested h-card example</bridgehead>
          <programlisting><![CDATA[<div class="h-card">
  <a class="p-name u-url" href="https://blog.lizardwrangler.com/">
    Mitchell Baker
  </a>
  (<a class="p-org h-card" href="https://mozilla.org/">Mozilla Foundation</a>)
</div>]]></programlisting>
          <bridgehead>Parsed JSON:</bridgehead>
          <programlisting><![CDATA[{
  "items": [
    {
      "type": ["h-card"],
      "properties": {
        "name": ["Mitchell Baker"],
        "url": ["https://blog.lizardwrangler.com/"],
        "org": [
          {
            "value": "Mozilla Foundation",
            "type": ["h-card"],
            "properties": {
              "name": ["Mozilla Foundation"],
              "url": ["https://mozilla.org/"]
            }
          }
        ]
      }
    }
  ]
}
]]></programlisting>
          <para>In this example, a h-card is specified for both a person and the organization they represent. The person's affiliation with the linked organization is specified using the p-org property.</para>
          <note>the nested h-card has implied &apos;name&apos; and &apos;url&apos; properties, just like any other root-class-name-only h-card on an &lt;a href&gt; would.</note>
        </section>
        <section>
          <title>h-entry</title>
          <para>The h-entry microformat represents episodic or datestamped content on the web. h-entry is often used with content intended to be syndicated, e.g. blog posts and short notes.</para>
          <para>Example h-entry as a blog post:</para>
          <programlisting><![CDATA[<article class="h-entry">
  <h1 class="p-name">Microformats are amazing</h1>
  <p>
    Published by
    <a class="p-author h-card" href="https://example.com">W. Developer</a> on
    <time class="dt-published" datetime="2013-06-13 12:00:00">
      13<sup>th</sup> June 2013
    </time>
  </p>

  <p class="p-summary">In which I extoll the virtues of using microformats.</p>

  <div class="e-content">
    <p>Blah blah blah</p>
  </div>
</article>
]]></programlisting>
          <bridgehead>Properties</bridgehead>
          <variablelist>
            <varlistentry>
              <term>p-name</term>
              <listitem>entry name/title</listitem>
            </varlistentry>
            <varlistentry>
              <term>p-author</term>
              <listitem>who wrote the entry, optionally embedded h-card</listitem>
            </varlistentry>
            <varlistentry>
              <term>dt-published</term>
              <listitem>when the entry was published</listitem>
            </varlistentry>
            <varlistentry>
              <term>p-summary</term>
              <listitem>short entry summary</listitem>
            </varlistentry>
            <varlistentry>
              <term>e-content</term>
              <listitem>full content of the entry</listitem>
            </varlistentry>
          </variablelist>
          <bridgehead>Parsed reply h-entry example</bridgehead>
          <programlisting><![CDATA[<div class="h-entry">
  <p>
    <span class="p-author h-card">
      <a href="https://quickthoughts.jgregorymcverry.com/profile/jgmac1106">
        <img
          class="u-photo"
          alt="Greg McVerry"
          src="https://quickthoughts.jgregorymcverry.com/file/2d6c9cfed7ac8e849f492b5bc7e6a630/thumb.jpg" />
      </a>
      <a
        class="p-name u-url"
        href="https://quickthoughts.jgregorymcverry.com/profile/jgmac1106">
        Greg McVerry
      </a>
    </span>
    Replied to
    <a
      class="u-in-reply-to"
      href="https://developer.mozilla.org/en-US/docs/Web/HTML/microformats">
      a post on <strong>developer.mozilla.org</strong>
    </a>
    :
  </p>
  <p class="p-name e-content">
    Hey thanks for making this microformats resource
  </p>
  <p>
    <a href="https://quickthoughts.jgregorymcverry.com/profile/jgmac1106">
      Greg McVerry
    </a>
    published this
    <a
      class="u-url url"
      href="https://quickthoughts.jgregorymcverry.com/2019/05/31/hey-thanks-for-making-this-microformats-resource">
      <time class="dt-published" datetime="2019-05-31T14:19:09+0000">
        31 May 2019
      </time>
    </a>
  </p>
</div>
]]></programlisting>
          <bridgehead>JSON</bridgehead>
          <programlisting><![CDATA[{
  "items": [
    {
      "type": ["h-entry"],
      "properties": {
        "in-reply-to": [
          "https://developer.mozilla.org/en-US/docs/Web/HTML/microformats"
        ],
        "name": ["Hey thanks for making this microformats resource"],
        "url": [
          "https://quickthoughts.jgregorymcverry.com/2019/05/31/hey-thanks-for-making-this-microformats-resource"
        ],
        "published": ["2019-05-31T14:19:09+0000"],
        "content": [
          {
            "html": "Hey thanks for making this microformats resource",
            "value": "Hey thanks for making this microformats resource",
            "lang": "en"
          }
        ],
        "author": [
          {
            "type": ["h-card"],
            "properties": {
              "name": ["Greg McVerry"],
              "photo": [
                "https://quickthoughts.jgregorymcverry.com/file/2d6c9cfed7ac8e849f492b5bc7e6a630/thumb.jpg"
              ],
              "url": [
                "https://quickthoughts.jgregorymcverry.com/profile/jgmac1106"
              ]
            },
            "lang": "en",
            "value": "Greg McVerry"
          }
        ]
      },
      "lang": "en"
    }
  ]
}
]]></programlisting>
        </section>

        <section>
          <title>h-feed</title>
          <para>The <firstterm>h-feed</firstterm> is a stream or feed of h-entry posts, like complete posts on a home page or archive pages, or summaries or other brief lists of posts.</para>
          <bridgehead>Example h-feed</bridgehead>
          <programlisting><![CDATA[<div class="h-feed">
  <h1 class="p-name">Microformats Blogs</h1>
  <article class="h-entry">
    <h2 class="p-name">Microformats are amazing</h2>
    <p>
      Published by
      <a class="p-author h-card" href="https://example.com">W. Developer</a> on
      <time class="dt-published" datetime="2013-06-13 12:00:00">
        13<sup>th</sup> June 2013
      </time>
    </p>
    <p class="p-summary">
      In which I extoll the virtues of using microformats.
    </p>
    <div class="e-content"><p>Blah blah blah</p></div>
  </article>
</div>
]]></programlisting>
          <bridgehead>Propterties</bridgehead>
          <variablelist>
            <varlistentry>
              <term>p-name</term>
              <listitem>name of the feed</listitem>
            </varlistentry>
            <varlistentry>
              <term>p-author</term>
              <listitem>author of the feed, optionally embed an h-card</listitem>
            </varlistentry>
          </variablelist>
          <bridgehead>Children</bridgehead>
          <variablelist>
            <varlistentry>
              <term>Nested h-entry</term>
              <listitem>objects representing the items of the feed</listitem>
            </varlistentry>
          </variablelist>
        </section>

        <section>
          <title>h-event</title>
          <para>The h-event is for events on the web. h-event is often used with both event listings and individual event pages.</para>
          <programlisting><![CDATA[<div class="h-event">
  <h1 class="p-name">Microformats Meetup</h1>
  <p>
    From
    <time class="dt-start" datetime="2013-06-30 12:00">
      30<sup>th</sup> June 2013, 12:00
    </time>
    to <time class="dt-end" datetime="2013-06-30 18:00">18:00</time> at
    <span class="p-location">Some bar in SF</span>
  </p>
  <p class="p-summary">
    Get together and discuss all things microformats-related.
  </p>
</div>
]]></programlisting>
          <bridgehead>Properties:</bridgehead>
          <variablelist>
            <varlistentry>
              <term>p-name</term>
              <listitem>event name (or title)</listitem>
            </varlistentry>
            <varlistentry>
              <term>p-summary</term>
              <listitem>short summary of the event</listitem>
            </varlistentry>
            <varlistentry>
              <term>dt-start</term>
              <listitem>datetime the event starts</listitem>
            </varlistentry>
            <varlistentry>
              <term>dt-end</term>
              <listitem>datetime the event ends</listitem>
            </varlistentry>
            <varlistentry>
              <term>p-location</term>
              <listitem>where the event takes place, optionally embedded h-card</listitem>
            </varlistentry>
          </variablelist>
          <bridgehead>Parsed h-event Example</bridgehead>
          <programlisting><![CDATA[<div class="h-event">
  <h2 class="p-name">IndieWeb Summit</h2>
  <time class="dt-start" datetime="2019-06-29T09:00:00-07:00">
    June 29, 2019 at 9:00am (-0700)
  </time>
  <br />through
  <time class="dt-end" datetime="2019-06-30T18:00:00-07:00">
    June 30, 2019 at 6:00pm (-0700)
  </time>
  <br />
  <div class="p-location h-card">
    <div>
      <span class="p-name">Mozilla</span>
    </div>
    <div>
      <span class="p-street-address">1120 NW Couch St</span>,
      <span class="p-locality">Portland</span>,
      <span class="p-region">Oregon</span>,
      <span class="p-country">US</span>
    </div>
    <data class="p-latitude" value="45.52345"></data>
    <data class="p-longitude" value="-122.682677"></data>
  </div>
  <div class="e-content">Come join us</div>
  <div>
    <span class="p-author h-card">
      <a class="u-url p-name" href="https://aaronparecki.com">Aaron Parecki</a>
    </span>
    Published this
    <a href="https://aaronparecki.com/2019/06/29/1/" class="u-url">event </a>on
    <time class="dt published" datetime="2019-05-25T18:00:00-07:00">
      May 5th, 2019
    </time>
  </div>
</div>
]]></programlisting>
          <bridgehead>JSON</bridgehead>
          <programlisting><![CDATA[{
  "items": [
    {
      "type": ["h-event"],
      "properties": {
        "name": ["IndieWeb Summit"],
        "url": ["https://aaronparecki.com/2019/06/29/1/"],
        "author": [
          {
            "type": ["h-card"],
            "properties": {
              "name": ["Aaron Parecki"],
              "url": ["https://aaronparecki.com"]
            },
            "lang": "en",
            "value": "Aaron Parecki"
          }
        ],
        "start": ["2019-06-29T09:00:00-07:00"],
        "end": ["2019-06-30T18:00:00-07:00"],
        "published": ["2019-05-25T18:00:00-07:00"],
        "content": [
          {
            "html": "Come join us",
            "value": "Come join us",
            "lang": "en"
          }
        ],
        "location": [
          {
            "type": ["h-card"],
            "properties": {
              "name": ["Mozilla"],
              "p-street-address": ["1120 NW Couch St"],
              "locality": ["Portland"],
              "region": ["Oregon"],
              "country": ["US"],
              "latitude": ["45.52345"],
              "longitude": ["-122.682677"]
            },
            "lang": "en",
            "value": "Mozilla"
          }
        ]
      },
      "lang": "en"
    }
  ]
}
]]></programlisting>
        </section>

      </section>  <!-- end of "Some microformats examples" -->

      <section>
        <title>Microformats rel property examples</title>
        <para>There are some microformats that are applied to a page by using a special rel= property. These microformats describe a relation between a current document and a linked document. For a full list of these, see the rel property on the microformats wiki.</para>
      </section>

    </section>  <!-- end of "Microformats" -->

  
  <section>
    <title>XHTML</title>
    <para>XHTML is an XML-compliant version 4.01 HTML. That is, stricter HTML. Remember to type all your closing tags or use empty ones, such as <userinput>&lt;br/&gt;</userinput> instead of just <userinput>&lt;br&gt;</userinput> on its own.</para>
    <para>The document type declaration and opening <tag>html</tag> tag must be:</para>
    <programlisting><![CDATA[<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">]]></programlisting>
    <para>Also, all tag and attribute names are case-sensitive and lower-case into the bargain. Tags like <userinput>&lt;P&gt;</userinput> or <userinput>&lt;BODY&gt;</userinput> are no longer recognized.</para>
  </section> <!-- </sect1> -->
  
  <section>
    <title>HTML5: Back to the Future</title>
    <para> Starting in 2004, a group of well-known organizations and individuals got together to form a
standards body called the Web Hypertext Application Technology Working Group, or
WHATWG (www.whatwg.org), whose goal was to produce a new version of HTML. The exact
reasons and motivations for this effort seem to vary depending on who you talk to—slow
uptake of XHTML, frustration with the lack of movement by the Web standards body, need for
innovation, or any one of many other reasons—but, whatever the case, the aim was to create a
new, rich future for Web applications that include HTML as a foundation element. Aspects of
the emerging specification such as the canvas element have already shown up in browsers
like Safari and Firefox, so by 2008, the efforts of this group were rolled into the W3C and drafts
began to emerge. Whether this makes HTML5 become official or likely to be fully adopted is
obviously somewhat at the mercy of the browser vendors and the market, but clearly another
very likely path for the future of markup goes through HTML5. Already we see Google
adopting it in various places, so its future looks bright.</para>
<note>While HTML5 stabilized somewhat around October 2009, with a W3C final candidate
recommendation goal of 2012, you are duly warned that the status of HTML5 may change.
Because of the early nature of the specification, specific documentation of HTML5 focuses more on
what works now than on what may make it into the specification later.</note>
<para>HTML5 is meant to represent a new version of HTML along the HTML 4 path. The
emerging specification also suggests that it will be a replacement for XHTML, yet it ends up
supporting most of the syntax that end users actually use, particularly self-identifying
empty elements (for example, <computeroutput>&lt;br/&gt;</computeroutput>).
It also reverses some of the trends, such as case
sensitivity, that have entered into markup circles, so it would seem that the HTML styles of
the past will be fine in the future. In most ways, HTML5 doesn&apos;t present much of a
difference, as you saw earlier in the chapter&apos;s introductory example, shown again here:</para>
<programlisting><![CDATA[<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Hello HTML World</title>
<!-- Simple hello world in HTML5 example -->
</head>
<body>
<h1>Welcome to the Future World of HTML5</h1>
<hr>
<p>HTML5 <em>really</em> isn&apos;t so hard!</p>
<p>Soon you will &hearts; using HTML.</p>
<p>You can put lots of text here if you want.
We could go on and on with fake text for you
to read, but let&apos; get back to the book.</p>
</body>
</html>]]></programlisting>

    <section sect='sect2'>
      <title>Three Layers</title>
      <para>The most accurate way to approach web design is to view web pages in terms of three layers:</para>
      <itemizedlist>
        <listitem>Structure</listitem>
        <listitem>Style</listitem>
        <listitem>Behavior</listitem>
      </itemizedlist>
      <para>Each one of these layers requires a different technology. The respective technologies are</para>
      <itemizedlist>
        <listitem>HyperText Markup Language</listitem>
        <listitem>Cascading Style Sheets</listitem>
        <listitem>JavaScript and the Document Object Model</listitem>
      </itemizedlist>
    </section> <!-- </sect2> -->
  </section> <!-- </sect1> -->
   
  
  
  <section>
    <title>(X)HTML Weaknesses and Strengths</title>
    <section sect='sect2'>
      <title>(X)HTML Shortcomings</title>
      <para>The author of a document is not free to choose the structure and content labeling of a document but is stuck with the HTML schema. This restriction may hinder creativity. The author that wants this freedom should look to XML, described in the next chapter.</para>
    </section> <!-- </sect2> -->
    
    
  </section> <!-- end of "(X)HTML Weaknesses and Strengths" -->
  
  <section>
    <title>Polyglot HTML</title>
    <para><firstterm>Polyglot HTML</firstterm> is HTML that has been written to conform to both the HTML and XHTML specifications. A polyglot document can therefore be parsed as either HTML (which is SGML-compatible) or XML, and will produce the same DOM structure either way. For example, in order for an HTML5 document to meet these criteria, the two requirements are that it must have an HTML5 doctype, and be written in well-formed XHTML. The same document can then be served as either HTML or XHTML, depending on browser support and MIME type.</para>
    
    <bridgehead>Polyglot HTML requirements</bridgehead>
    <itemizedlist>
      <listitem>Processing instructions and the XML declaration are both forbidden in polyglot markup</listitem>
      <listitem>Specifying a document&apos;s character encoding</listitem>
      <listitem>The DOCTYPE</listitem>
      <listitem>Namespaces</listitem>
      <listitem>Element syntax (i.e. End tags are not optional. Use self-closing tags for void elements.)</listitem>
      <listitem>Element content</listitem>
      <listitem>Text (i.e. pre and textarea should not start with newline character)</listitem>
      <listitem>Attributes (i.e. Values must be quoted)</listitem>
      <listitem>Named entity references (i.e. Only amp, lt, gt, apos, quot)</listitem>
      <listitem>Comments (i.e. Use &lt;!-- syntax --&gt;)</listitem>
      <listitem>Scripting and styling polyglot markup</listitem>
      <listitem></listitem>
    </itemizedlist>
    <para>The most basic possible polyglot markup document would therefore look like this:</para>
    <programlisting><![CDATA[<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
  <head>
    <title>The title element must not be empty.</title>
  </head>
  <body>
  </body>
</html>]]></programlisting>
    <para>In a polyglot markup document non-void elements (such as script, p, div) cannot be self-closing even if they are empty, as this is not valid HTML. For example, to add an empty textarea to a page, one cannot use <userinput><![CDATA[<textarea/>]]></userinput>, but has to use <userinput><![CDATA[<textarea></textarea>]]></userinput> instead.</para>
  </section>
  
  </chapter>
  
  <chapter>
    <title>EPUB</title>
    <section>
      <title>EPUB Readers</title>
      <para>On linux there is <application>fbreader</application>.</para>
      
      <section sect='sect2'>
        <title>Best eBook Reader Apps for Android</title>
        <para>While some people still buy dedicated e-reader devices, many readers have moved on to smartphones and tablets. Apple&apos;s Books (retooled as part of iOS 12) and Google Play Books already do a great job as stock apps, but specialist reading apps can add numerous extras, from highly configurable settings, support for odd formats, read-all-you-can subscriptions and more.</para>
        
        <variablelist>
          
          <varlistentry>
            <term>Google Play Books (Android, iOS: Free)</term>
            <listitem>
              <para>Google Play Books (Android, iOS) is the search giant&apos;s own entry in the ebook reader app field. Of the two versions, the Android version is the stronger, with Google Play integration letting you easily shop for books (as opposed to going to the browser in iOS). Reading customization lets you tweak the typeface, font size, and line space, while night space keeps it easy for your eyes in the dark. Text highlighting, a built-in dictionary and map search give you lots of features to play with, and the obligatory syncing features saves your reading position across devices. In addition to reading your Google Play Books titles, you can also upload their own PDF and EPUB files if you want to import an existing collection.</para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>Libby by Overdrive (Android, iOS: Free)</term>
            <listitem>
              <para>Why spend a ton of money on ebooks if your local library already has a digital media lending system? Libby (Android, iOS) is the latest incarnation of Overdrive&apos;s popular digital media management system, allowing users to borrow ebooks and audiobooks from participating libraries. Simply sign in with your library card and then you can browse your library&apos;s digital media collection, allowing you to search for titles, set holds, borrow ebooks and audiobooks with a tap, and return or extend a lend just as easily. You can preview books from the app, downloading borrowed titles or streaming them to your phone or tablet if you prefer to save space.</para>
            </listitem>
          </varlistentry>
          
          

          <varlistentry>
            <term>Amazon Kindle</term>
            <listitem>
              <para>Kindle offers a wide selection of books, magazines and newspapers, making it one of the most popular eBook reader apps for smartphones and tablets. You don&apos;t have to own a Kindle device to enjoy books through the Kindle app, it&apos;s available on Android and iOS devices too. Kindle is powered by technology from Amazon that allows you to sync your last read page, bookmarks, highlights and notes across all devices. It also includes a built-in dictionary that makes it easy to look up new words while reading. The Kindle app provides access to Google search and Wikipedia, features that enhance your reading pleasure.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Aldiko Book Reader</term>
            <listitem>
              <para>Aldiko Book Reader is a great alternative to some of the more famous eBook reader apps. It is the perfect e-reader for books in PDF and ePub formats. Aldiko Book Reader does not automatically save a book and hence does not take up memory. However, if you do want the app to save your reading sessions you will need to import the book, which will put the book on its virtual shelf. Aldiko provides several options to adjust font size, font face and background settings to suit the reader&apos;s needs. Aldiko offers a great reading experience with its extensive features.</para>
              <para>Aldiko is a neat Android e-book reader app that supports EPUB, PDF, and Adobe DRM encrypted e-books. A clean and customizable interface includes settings for text size, margins, page layouts, brightness, fonts, colors and more. A library management system allows you to easily sort your material by tags and collections. The core reader is free, but a Premium version includes the ability to add notes, highlights, notes and an ad-free experience.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Cool Reader</term>
            <listitem>
              <para>Cool Reader offers a fully customizable palette, text formatting for any font size and extra smooth scrolling that makes reading a pleasurable activity. Cool Reader is the only e-reader app that provides text-to-speech for free. It also offers a day/night toggle that renders two sets of colors, background and backlight levels for convenient reading. Cool Reader provides information on page count, percentage read and chapter marks at the top of the screen. It supports a wide range of file formats, such as ePub, fb2, html, rtf, txt and more.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>FBReader</term>
            <listitem>
              <para>FBReader is a highly customizable eBook reader for all types of devices. It is available for devices that run on Android, Linux, Mac OS X, Windows, BlackBerry10 and other platforms. You can choose colors, font face, size, animations, bookmarks, etc. to suit your reading style. It organizes your library by authors and titles providing a simple view. It supports several eBook formats and direct reading from zip archives, and is localized for 29 languages! FBReader comes bundled with eight online catalogs that provide access to a large set of eBooks. It is integrated with popular dictionaries like SlovoEd, Fora and ColorDict.</para>
              <para>FB Reader for Android devices supports EPUB, RTF, DOC, HTML, MOBI and other formats. While it doesn&apos;t feature an attached store like other apps, FB Reader makes up for it with its highly customizable nature. Users can tweak text fonts, size, hyphenation, text colors and backgrounds, margins, page animations and more. External dictionary support, a browser/downloader for finding books online, language localizations and plugin support for PDFs and library syncing round out an impressive free package.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Moon+ Reader</term>
            <listitem>
              <para>Moon+ Reader offers a unique reading pleasure by providing fine control over display settings. The app has a status bar that displays your reading progress. It also provides information on your reading progress within the current chapter apart from the whole book. The app is available for free, though a pro version of the app provides additional statistics, such as the number of books in your shelf, pages turned and reading hours. Overall, Moon+ Reader is a great eBook app for the avid reader.</para>
              <para>Moon+ Reader is a nifty Android e-book reader app known for its highly customizable interface. While it may not come with a dedicated marketplace, Moon+&apos;s UI makes it stand out from the pack. You can set font styles and sizes, backgrounds, spacing, paging modes, autoscroll, multiple view modes and more. The app is free, but a pro version is also available to remove ads and add PDF support, as well as other extra features. If you already have a sizable e-book collection and are just looking for an Android app to read with, then consider Moon+ for your e-book reading needs.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>NOOK</term>
            <listitem>
              <para>Barnes and Noble offers its own eBook reader app, NOOK, which hosts over two million books, magazines, kid&apos;s books and newspapers. NOOK offers several features that make reading easy and comfortable. The app offers a synchronization feature that automatically syncs the last page read across devices, rendering a seamless reading experience. You can also adjust the brightness for reading in dim lighting during night. The NOOK app is available on Android, iTunes and Windows.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Bluefire Reader</term>
            <listitem>
              <para>Bluefire Reader is available for Android, iOS and Windows devices. The app provides several features including bookmarking, highlighting, dictionary lookup, note taking, contextual searching and more. You can customize display and reading settings to cater to your reading requirements. Day/Night mode is also available, which enables reading in low light. Bluefire offers a page sync feature so that you can read across devices without losing tracking of your current page. Bluefire also provides analytic services that provide key metrics. It also provides in-app browsing and a downloading feature, which makes reading easy and enjoyable.</para>
              <para>Bluefire Reader (Android, iOS) is a versatile e-book reader that handles EPUB and PDF files, with support for annotations and Adobe Content Server DRM. Bluefire has a clean, customizable viewer that allows you to set text size and margin widths, themes and a night mode, as well as a table of contents and bookmarks. Users can highlight, set annotations, search the text, look up definitions and share excerpts. The iOS version also includes reading location synchronization, allowing you to switch between devices without losing your reading location.</para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>Mantano Reader Lite and Bookari</term>
            <listitem>
              <para>Mantano Reader Lite eBook reader has a great look and feel. The user interface is light and easy to use. A series of menus appears on the left and your eBooks are presented on the right. Finding a book on this app is never difficult with its simple interface. A small status bar at the bottom right allows you to manage your books. Another unique feature of the app is the ability to sync your current reading to the Mantano Cloud. The app allows you to sort the book by categories that you have created. Importing files into this app is also fairly simple with its one-click import feature.</para>
              <para>Bookari (Android, iOS) (formerly known as Mantano Reader) supports EPUB and PDF formats (including Adobe DRM support). It features a customizable and feature-packed reader, with a variety of features such as reader themes, a night mode, text search, annotation and a pinnable navigation panel for easy jumping between chapters, bookmarks and pages. The $4.99 paid version of the app adds additional features, and a premium subscription to Mantano Cloud adds support for library and reading progress syncing across devices.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Wattpad</term>
            <listitem>
              <para>Wattpad is a simple eBook reader with a friendly user interface. Getting an eBook is easy with this app: you can either find the book via the app&apos;s internal browser or key in the book code. Wattpad allows you to change the background and text color to your preference. You can also adjust the font size so that it is comfortable while you read. If you are low on space, you can download the books in parts. Wattpad is a simple eBook reader app that is adequate for light readers.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Kobo</term>
            <listitem>
              <para>The Kobo eBook reader presents a special feature called Reading Life that will introduce you to a new world of social reading. You can share quotes, notes and discuss books on social media with its integrated Facebook feature. With Kobo, you can read anytime, anywhere, from a catalog of over four million titles. Kobo&apos;s huge database of interesting titles will satisfy the interests of all kinds of readers. The Kobo app is available on iOS, Android, Blackberry 10 and Windows 8.</para>
              <para>While not as well known in the US, Kobo (Android, iOS) is especially popular in Canada and France. Featuring a library of more than 5 million ebooks and publications, Kobo lets you access content from its online store while also letting you import your own content. The app supports numerous formats, such as epub, PDF, CBZ and CBR. Obligatory view and text customizations let you get comfortable, and the app syncs across devices and platforms.</para>
            </listitem>
          </varlistentry>
          
        </variablelist>
        
        <section sect='sect3'>
          <title>Non-free, iOS-only, and Specialized EPUB Readers</title>
          
          <variablelist>
            
            <varlistentry>
              <term>Scribd (Android, iOS: $8.99/month)</term>
              <listitem>
                <para>While Amazon boasts of its Unlimited program, it wasn&apos;t first off the bat in providing an unlimited access program for books. Scribd (Android, iOS) offers an unlimited access program for ebooks, which was compared to a "Netflix for books." Scribd features a library of more than 500,000 books from 900-plus publishers across a variety of genres. The app features a customizable display as well as curated editorial collections, personalized recommendations based on your reading history and the ability to download books for offline reading.</para>
              </listitem>
            </varlistentry>
            
            <varlistentry>
              <term>KyBook 2 (iOS: Free)</term>
              <listitem>
                <para>Kybook 2 is an all-in-one ebook reader that supports DRM-free formats like epub, RTF, DJVU, CBR and CBZ. Whether you&apos;re looking to read poetry or prose, comicbooks or RPG rules, Kybook&apos;s likely to do an OK job. You can configure the viewer&apos;s fonts (including supplying your own font files), themes, and other layout settings like margins and line spacing. Readers can upload files through iTunes, or access their ebooks in supported cloud services like iCloud, Google Drive, Dropbox, and Yandex Disk. There&apos;s even support for OPDS catalogs, allowing you to access tons of free and public domain content online.</para>
              </listitem>
            </varlistentry>
            
            <varlistentry>
              <term>Comixology (Android, iOS: Free)</term>
              <listitem>
                <para>ComiXology is one of the most popular digital comic platforms online, featuring content from major comics publishers such as Marvel, DC and Image, which readers can purchase and read from the ComiXology website. The company&apos;s mobile app (Android, iOS) also serves as an outstanding mobile comic reader, allowing users to download and read their ComiXology purchases. Of particular note is the Guided View mode, which is great for reading on a small screen, as well as a new Unlimited mode that works as a <quote>read-all-you-can</quote> subscription. On the downside, you can&apos;t import in an existing comics collection or make in-app purchases on iOS.</para>
              </listitem>
            </varlistentry>
              
            <varlistentry>
              <term>Chunky (iOS: Free)</term>
              <listitem>
                <para>On the other hand, if you already have a collection of DRM-free comics you may want to check out Chunky, a free and feature-packed comics option for the iPad. On the technical side, Chunky supports CBR, CBZ and PDF comics, as well as metadata tags from ComicRack and ComicBookLover. A smart upscaling mode renders even low-res files as crisply as possible, while multiple view modes let you read however you like. There&apos;s even an auto-contrast/tint fix to adjust for faded comic scans. The app can download comics from your cloud storage services, such as Dropbox and Google Drive, straight into the app&apos;s self-organizing library. Plus, a parental lock allows you to flag and hide titles behind password protection. It&apos;s a fantastic free package whose only fault is a lack of iPhone support.</para>
              </listitem>
            </varlistentry>
            
            <varlistentry>
              <term>ComiCat (Android: $2.99)</term>
              <listitem>
                <para>For DRM-free comic reading on Android, check out, Comicat, a premium Android comic book reader that gives you a ton of features and customizability for less than the price of a single comic issue. The app auto-scans your mobile device (or selected library folders) for comics in supported formats (such as CBR, CBZ, and PDF). It then automatically sorts them into series in a nice bookshelf view which you can manually organize. Once you&apos;re in the reader view, the interface is unobtrusive, with long press or slide controls bringing out options and settings. The app supports cloud storage folders, password protection, manga-style right to left displays, image enhancement to correct contrast, brightness, and saturation among other tweaks.</para>
              </listitem>
            </varlistentry>
            
            <varlistentry>
              <term>Marvin (iOS: $3.99)</term>
              <listitem>
                <para>Marvin is a feature-packed and extremely configurable iOS reader app for DRM-free EPUB files. As a reader, Marvin comes packed with great reading features, from a variety of fonts (including a specialty font for dyslexic readers), a night mode and customizable themes, highlighting, annotation and dictionary tools. You&apos;ll also find numerous format tweaks ranging from text justification, to paragraph indentation and spacing. Marvin comes with a solid set of organizing tools, allowing you to sort into collections, choose from list or cover views, collection sorting and more. Extremely configurable and feature-packed, Marvin&apos;s main downside is that it&apos;s zeroed-in on EPUB reading, and supports no other formats.</para>
              </listitem>
            </varlistentry>
              
          </variablelist>
          
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    <section> <title>The creation process</title>
    <para>1. The first step in making an EPUB is to create your content document(s). These must be either XHTML5 documents, SVG images, or a mixture of the two (we&apos;ll skip how to use nonstandard formats for now). If you&apos;ve created web pages before, marking up your EPUB content will be a breeze. And if not, there are many sophisticated layout programs that can make the process no more painful than formatting a Word document. (Some of these programs can even do the entire EPUB creation process.) Note, however, that your content document will typically reference many other types of resources required for its proper rendering—CSS style-sheets, images, multimedia clips, script files, and so on—all of which you will need to keep together to bundle up into the finished distribution file later.</para>
    <para>2. Once you&apos;ve crafted your content, the next step is to create the package document, a special document used by reading systems to glean information about your publication—for ordering in your bookshelf, to render the content, and the like. The first step in creating this file is to list all of the resources you assembled in the content creation step in the manifest section of the package document (most of these resources will be in the EPUB file, but some, such as audio and video, can live on the Web). Reading systems need this list to determine whether a publication is complete or not and to discover which remote files will have to be retrieved. All your publication metadata (title, author, etc.) also goes in this file, consolidating it in a single, common location so that it can be easily extracted and used in distribution channels and by reading systems. You also have to include the default reading order in the spine section—a sequential list of your content files, from the first one to display to the last. And finally, the package document identifies which of the resources represents the navigation document (the table of contents).</para>
    <para>3. The last step is to zip up your content documents, associated resources, and the package document into a single file with the .epub extension for distribution. This process isn&apos;t quite as simple as a standard zipping, however: a special mimetype file has to be added first to indicate that your zip file contains an EPUB and not something else, and a file called container.xml has to go in a directory named META-INF to tell reading systems where to find your package document.</para>
    </section> <!-- </sect1> -->
    <section>
      <title>The HTML in ePUB</title>
      <para>An example skeleton of an XHTML file for EPUB looks like this:</para>
      <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8" />
    <title>Pride and Prejudice</title>
    <link rel="stylesheet" href="css/main.css" type="text/css" />
  </head>
  <body>
    ...
  </body>
</html>]]></programlisting>

      <section sect='sect2'>
        <title>What HTML tags to use when making an epub book?</title>
        <para>The ePub specification supports most (but not all) of the valid XHTML tags. For best results though, keep it simple. Not all readers will support all the tags and CSS that the official ePub spec supports. That, and the simpler the HTML, the nicer the book will look (not to mention it will be easier to edit.) The tags I re commend are:</para>
        <itemizedlist>
          <listitem>&lt;p&gt; for paragraphs. This seems simple, but some of the automatic conversion tools (or if you&apos;ve saved as HTML from Word) put a bunch of &lt;span&gt; and other stuff in there. Sigil is really fond of trying to use <tag>div</tag> tags instead of &lt;p&gt; tags as well.</listitem>
          <listitem>&lt;h1&gt; for any of the heading tags, but I recommend to use the &lt;h1&gt; tag for the title and all chapter headings. We&apos;ll get into why later.</listitem>
          <listitem>&lt;li&gt; or &lt;ol&gt; for any lists.</listitem>
        </itemizedlist>
        <para>That&apos; really about all you need for most books. Yes, you can use &lt;b&gt; and &lt;i&gt; for bold and italics, but it&apos; preferred to to that with CSS.</para>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section> <title> Formatting your book with CSS</title>
    <para>Speaking of CSS, that&apos; where you want to do all your styling. It&apos; the preferred way to stylize things in both XHTML and the ePub standard. (There are a very few reader programs out there that won&apos;t recognize CSS. Mot of them do by now though, and if you keep the HTML to the basics, the book will still be readable if the reader program doesn&apos;t recognize CSS.</para>
    <para>Sample CSS file:</para>
    <programlisting>body {
  margin-left:2%;
  margin-right:2%;
  margin-top:2%;
  margin-bottom:2%;
}
p {
  text-indent: .3in;
  margin-left:0;
  margin-right:0;
  margin-top:0;
  margin-bottom:0;
  text-align: justify;
  font-family:"Times New Roman";
}
h1, h2, h3 { text-align: center; 
font-family:"Times New Roman"; }</programlisting>
    </section> <!-- </sect1> -->
    
    <section xml:id='epub_by_hand'> <title> How to Make an ePub eBook by Hand</title>
    <para>The process of making an ePub book can be broken down into three parts:</para>
    <orderedlist>
      <listitem>Prepare the content</listitem>
      <listitem>Prepare the XML files</listitem>
      <listitem>Put in in the container.</listitem>
    </orderedlist>
    <para>Tools Needed:</para>
    <para>A text editor. Anything that can edit text files, HTML, and XML. (Example: Notepad)A .zip program. Anything that can create .zip files. (Example: Windows XP&apos; built-in .zip support)</para>
    <para>The official specs: don&apos;t let them scare you though, we really only have to fiddle with two XML files, the rest is either straight XHTML, or files that you can copy from the sample file that we&apos;ll be looking at later.</para>
    
      <section sect='sect2'> <title>Folders and Files</title>
      <para>A .epub file contains, at a bare minimum, the following files/folders:</para>
      <itemizedlist>
        <listitem>the  mimetype - tells a reader/operating system what&apos;s in here - This file is just a plain ASCII text file that contains the line: &quot;application/epub+zip&quot; The operating system can look at this file to figure out what a .epub file is instead of using the file extension. This file must be the first file in the zip file, and must not be compressed.</listitem>
        <listitem>META-INF folder - This folder contains, at least, the <filename>container.xml</filename> file, which tells the reader software where in the zip file to find the book. It points to the location of the <filename>Content.opf</filename> file. This folder is the same for every e-book, so you should be able to copy the whole folder from a sample epub file without making any changes.</listitem>
        <listitem>OEBPS folder - Recommended location for the books content. It contains:
          <itemizedlist>
            <listitem>images folder - images go here - according to the OPF spec, only PNG must be supported by reading system</listitem>
            <listitem>Content.opf - XML file that lists what&apos;s in the zip file - this file can be named anything you want to call it, as long as the container.xml file mentioned above points to the correct filename</listitem>
            <listitem>toc.ncx - This is the table of Contents</listitem>
            <listitem>xhtml files - The book&apos;s contents are in these page</listitem>
            <listitem>page-template.xpgt - This file isn&apos;t really needed, but it makes it look pretty in Adobe Digital Editions. It isn&apos;t part of the IDPF spec, but Adobe Digital Editions uses it for formatting and setting column settings and whatnot. You don&apos;t need this file at all, but your book will look nicer in Digital Editions if you include it. Other readers should just ignore it.</listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <para>(The filenames are case sensitive!)</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>The <filename>mimetype</filename> file</title>
        <para>This is the first file to be added. It must be added with no compression.</para>
        <programlisting>application/epub+zip</programlisting>
      </section> <!-- </sect2> -->
      <section sect='sect2'>
        <title>The <filename>container.xml</filename> file in the META-INF folder</title>
        <programlisting><![CDATA[<?xml version='1.0' encoding='utf-8'?>
<container xmlns="urn:oasis:names:tc:opendocument:xmlns:container" version="1.0">
  <rootfiles>
    <rootfile full-path="content.opf" media-type="application/oebps-package+xml"/>
  </rootfiles>
</container>]]></programlisting>
</section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>The <filename>content.opf</filename> file</title>
        
        <para>The <filename>content.opf</filename> file is the most important part of the EPUB package, because it defines the structure of the eBook and the metadata. It is also the file that will tend to cause EPUB validation errors for newcomers, so please be careful with the syntax and markup. The OPF file is an XML document, and it uses a defined set of tags to encode data (similar to HTML) specified by the IDPF.</para>
        <para>These elements are held inside a <tag>package</tag> element:</para>
        <programlisting><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<package version="2.0" xmlns="http://www.idpf.org/2007/opf" unique-identifier="BookId">
  <!-- Metadata section -->
  <!-- Manifest section -->
  <!-- Spine section -->
  <!-- Guide section -->
</package>]]></programlisting>
        
        <variablelist>
          <varlistentry>
            <term><tag>metadata</tag> Section</term>
            <listitem>
              <para>This section contains data about the eBook such as the title, author, and product description. The eReading devices vary in how they utilize this metadata, but certain elements are <emphasis>required</emphasis> for a valid EPUB.</para>
              <para>Inside the <tag>metadata</tag> element there should be a <tag>dc:identifier</tag> element holding a unique id, as in <userinput><![CDATA[<dc:identifier id="BookId">urn:uuid:circularia.com06282007214712</dc:identifier>]]></userinput>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><tag>manifest</tag> Section</term>
            <listitem>
              <para>This section is a list of all the content files, media, fonts, and stylesheets used in the eBook. The files can be listed in any order. However, you should not include a file in the Manifest Section that is not in the EPUB package. Also, you should not have undeclared files in the EPUB package that have not been declared in the Manifest Section.</para>
              <para>It comprises a list of <tag>item</tag> elements with attributes <parameter>href</parameter>, <parameter>id</parameter>, and <parameter>media-type</parameter>=application/xhtml+xml | image/jpeg | text/css |application/x-dtbncx+xml etc</para>
              <para>Foremost among them are the HTML files. The <tag>manifest</tag> element&apos;s <tag>item</tag>s map an identifier to a file (attributes <parameter>id</parameter> and <parameter>href</parameter> for the <filename>*.xhtml</filename>).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><tag>spine toc=&quot;ncx&quot;</tag> Section</term>
            <listitem>
              <para>This section contains linear instructions on how the eBook is ordered. The content files should be listed from top to bottom the same way you would read a book from left to right.</para>
              <para>It is made up of <tag>itemref</tag> elements each with an attribute <parameter>idref</parameter>=&lt;id&gt;</para>
              <para>The spine doesn&apos;t have to list every file in the manifest, just the reading order. For example, if the manifest lists images, they do not have to be listed in the spine, and in fact, can&apos;t be. Only content (i.e. the XHTML files) can be listed here. The value for the idref tag in the spine has to match the ID tag for that entry in the manifest.</para>
              <tip>While not required, you can add the attribute <userinput><![CDATA[linear="no"]]></userinput> to any of the <tag>itemref</tag> elements. This means that the section will be skipped if the reader is paging through the eBook. However, you can permit access to the content by creating a hyperlink. This may be a useful feature if you want to create an educational eBook with hidden answer keys.</tip>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><tag>guide</tag> Section</term>
            <listitem>
              <para>This section contains links to the cover, beginning of the eBook, and the HTML Table of Contents. eReading devices vary widely in how this information is interpreted and rendered.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        
        <note>The <tag>spine</tag> elements establishes the reading order, while the <filename>toc.ncx</filename> determines what is shown in the Table of Contents.</note>
        
        <section sect='sect3'>
          <title>Schema for a <tag>metadata</tag> Section/Element in a <filename>content.opf</filename> File</title>
          <programlisting><![CDATA[<metadata xmlns:opf="http://www.idpf.org/2007/opf" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <!-- Required metadata -->
    <dc:title>[TITLE]</dc:title>
    <dc:creator opf:file-as="[LASTNAME, NAME]" opf:role="aut">[NAME LASTNAME]</dc:creator>
    <dc:publisher>[PUBLISHER NAME]</dc:publisher>
    <dc:date opf:event="publication">[YYYY-MM-DD]</dc:date>
    <dc:identifier id="BookId" opf:scheme="[ISBN/UUID]">urn:isbn:[ISBN]/[UUID]</dc:identifier><!--Use the Same for the toc.ncx file -->
    <dc:language>[LANGUAGE CODE]</dc:language>
    <meta name="cover" content="[COVER_NAME].jpg" /> <!--Required for KindleGen-->
    <!-- Optional metadata -->
    <dc:subject>[LIST / OF / SUBJECTS]</dc:subject><!-- Recommended at least 7 keywords (in 7 different lines) -->
    <dc:description>[DESCRIPTION]</dc:description><!-- Don't use HTML -->
    <dc:rights>Copyright © [YEAR] [COPYRIGHT HOLDER]. All rights reserved.</dc:rights>
    <dc:type>Text</dc:type><!-- Do not change -->
    <dc:source>[SOURCE URL/ISBN/UUID]</dc:source>
    <dc:relation>[RELATION URL/ISBN/UUID]</dc:relation>
    <dc:coverage>[Worldwide/Territorial]</dc:coverage>   
    <dc:contributor opf:file-as="[LASTNAME, NAME]" opf:role="[MARC CODE]">[NAME LASTNAME]</dc:contributor>
</metadata>]]></programlisting>
          <section sect='sect4'>
            <title>Optional Metadata Help</title>
            <variablelist>
              <varlistentry>
                <term>Keywords:</term>
                <listitem> These are labels that apply to your eBook, similar to the way bloggers tag their posts. Every individual one gets placed inside a dc:subject element. So, if your steamy romance could be described with the keywords <quote>Romance, Steamy and Hot, Erotic, Love, Women, Caribbean, Buns</quote>, you would place each keyword within the XML element like &lt;dc:subject&gt;Romance&lt;/dc:subject&gt;, &lt;dc:subject&gt;Steamy and Hot&lt;/dc:subject&gt;, etc. You can list as many as you like, but seven is generally recommended. You can use BISAC Subject Heading List for inspirations</listitem>
              </varlistentry>
              <varlistentry>
                <term>Description:</term>
                <listitem>This is typically the backjacket description or blurb of the eBook. You should only have one long paragraph and do not enter HTML here; this will cause your EPUB to fail validation. Fancy quotes are okay, but make sure your text editor can support UTF-8 encoding.</listitem>
              </varlistentry>
              <varlistentry>
                <term>Rights/Copyright Information:</term>
                <listitem>This is a standard statement on the rights of the eBook such as &quot;All Rights Reserved&quot; or &quot;Public Domain&quot;. It is not widely recognized by eReading devices, but it does no harm to add this metadata. It is placed within the dc:rights XML markup.</listitem>
              </varlistentry>
              <varlistentry>
                <term>Type:</term>
                <listitem>This is from the Dublin Core metadata specification for dc:type. For eBooks, this will always be “Text”. Please note that eReading devices rarely use this metadata.</listitem>
              </varlistentry>
              <varlistentry>
                <term>Source:</term>
                <listitem>This is more Dublin Core metadata, which defines the dc:source XML markup as “A Reference to a resource from which the present resource is derived.” If your eBook is part of a series or a portion of another larger periodical, you may consider adding this metadata by including an ISBN or UUID for the relevant publication. You can also reference the print version of your book by its ISBN. If your eBook is a compilation of a blog post, you can consider placing the URL to your blog.</listitem>
              </varlistentry>
              <varlistentry>
                <term>Relation:</term>
                <listitem>This is some more Dublin Core metadata that also seems rather ambiguous. The dc:relation XML markup is defined as “A reference to a related resource.” If your eBook is a spin-off from another publication, you may consider placing a URL, ISBN, or UUID. However, eReading devices rarely make use of this metadata.</listitem>
              </varlistentry>
              <varlistentry>
                <term>Coverage:</term>
                <listitem>This defines the coverage of your copyright, which is typically “Worldwide” or “Territorial”. If you eBook is public domain, you can simply say “Public Domain.” dc:coverage is the applicable XML markup and you don&apos;t typically see this in metadata. It is part of the Dublin Core specification and included here for completeness.</listitem>
              </varlistentry>
            </variablelist>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Extra Metadata Help</title>
            <variablelist>
              <varlistentry>
                <term>Contributors:</term>
                <listitem>With the dc:contributor element, you can add one or more entries of additional people who contributed to the eBook publication. This can include an illustrator, editor, and even the rubricator (we&apos;re not sure what that guy does). You state what their contribution is with the attribute opf:role plus a three-letter code indicating the nature of the contribution. The example in the above XML is for an editor. The three-letter codes come from the Marc Code List for Relators, which is an initiative from the United States Library of Congress. Like the dc:creator element, you can add an attribute with the file-as attribute if you want to file the last name first.</listitem>
              </varlistentry>
            </variablelist>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>The <tag>manifest</tag> Section</title>
          <para>As already said, the <tag>manifest</tag> section is a listing of all HTML, CSS, media files, and other assets inside the EPUB package. It is divided into self-closing, individual XML elements denoted as <tag>item</tag>. For each <tag>item</tag> element there are three required attributes:</para>
          <itemizedlist>
            <listitem><parameter>href</parameter> – specifies the relative path from the content.opf location to your asset</listitem>
            <listitem><parameter>id</parameter> – a unique identifier in the <filename>content.opf</filename> file. Each id value should follow the same syntax conventions as id values in HTML (i.e. must start with a letter, must not have special characters, and it must be unique).</listitem>
            <listitem><parameter>media-type</parameter> – the MIME Type (or Internet Media Type) of the asset.</listitem>
          </itemizedlist>
          <para>The media-type values are ways to specify file formats and they follow the same standard used by email clients and websites. The MIME Type (now called the “Internet Media Type”) is the convention utilized in the EPUB standard, and an exhaustive list of all MIME Types is here. Below is a list of MIME Types commonly used in eBook production for your convenience:</para>
          <itemizedlist>
            <listitem><filename>toc.ncx</filename>: Meta TOC File - <userinput>application/x-dtbncx+xml</userinput></listitem>
            <listitem><filename>*.html</filename> Content files - <userinput>application/xhtml+xml</userinput></listitem>
            <listitem><filename>*.css</filename> Stylesheets – <userinput>text/css</userinput></listitem>
            <listitem><filename>*.jpg</filename> .jpeg, or .jpe images – <userinput>image/jpeg</userinput></listitem>
            <listitem><filename>*.png</filename> images – <userinput>image/png</userinput></listitem>
            <listitem><filename>*.gif</filename> images – <userinput>image/gif</userinput></listitem>
            <listitem><filename>*.svg</filename> images – <userinput>image/svg+xml</userinput></listitem>
            <listitem><filename>*.ttf</filename> True Type Fonts – <userinput>font/truetype</userinput></listitem>
            <listitem><filename>*.otf</filename> OpenType Fonts – <userinput>font/opentype</userinput></listitem>
            <listitem><filename>*.mp3</filename> Audio file – <userinput>audio/mpeg</userinput></listitem>
            <listitem><filename>*.mp4</filename> Video File – <userinput>video/mp4</userinput></listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>The <tag>guide</tag> Section</title>
          <para>The Guide Section provides extra metadata that declares target locations for the extra buttons that are available on some eReaders such as “Cover” or “Beginning”. It was supposed to be a way for eBook designers to annotate where commonly used sections such as footnotes, the bibliography, and index were located in the HTML, so that the reader could have easy access to them on her device. A full list of the type attribute you can define in the Guide Section is available at the IDPF EPUB 2.0.1 standard. Unfortunately, the interpretation of the XML in the Guide Section varies widely from device to device. Due to the confusion, the IDPF is actually getting rid of this section for EPUB 3 in favor of a different standard.</para>
          <para>Due to the poor adoption of the standards laid out by the IDPF for this section, this guide recommends using only three XML entries (and only two for Kindle-source EPUBs), but we specify every available type in the starter kit file:</para>
          <programlisting><![CDATA[<guide>
    <reference href="coverpage.html" type="cover" title="Cover" /> <!-- Remove for Kindle -->
    <reference href="content/htmltoc.html" type="toc" title="Table of Contents" />
    <reference href="content/content002.html" type="text" title="Beginning" />
</guide>]]></programlisting>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Sample <filename>content.opf</filename> file</title>
          <programlisting><![CDATA[<?xml version="1.0"?>
<package version="2.0" xmlns="http://www.idpf.org/2007/opf" unique-identifier="BookId">
  <metadata xmlns:dc="http://pu rl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
    <dc:title>Sample .epub eBook</dc:title> 
    <dc:creator opf:role="aut">ffvh</dc:creator>
    <dc:language>en</dc:language> 
    <dc:rights>Public Domain</dc:rights>
    <dc:publisher>circularia.t15.org</dc:publisher>
    <dc:identifier id="BookId">urn:uuid:circularia.com06282007214712</dc:identifier>
  </metadata>
  <manifest>
    <item id="ncx" href="toc.ncx" media-type="application/x-dtbncx+xml" />
    <item id="style" href="stylesheet.css" media-type="text/css" />
    <item id="pagetemplate" href="page-template.xpgt" media type="application/vnd.adobe-page-template+xml" />
    <item id="titlepage" href="title_page.xhtml" media-type="application/xhtml+xml" />
    <item id="chapter01" href="chap01.xhtml" media-type="application/xhtml+xml" />
    <item id="chapter02" href="chap02.xhtml" media-type="application/xhtml+xml" />
    <item id="imgl" href="images/sample.png" media-type="image/png" />
  </manifest> 
  <spine toc="ncx">
    <itemref idref="titlepage" />
    <itemref idref="chapter01" />
    <itemref idref="chapter02" />
  </spine>
</package>]]></programlisting>
      </section> <!-- </sect3> -->
    </section> <!-- </sect2> -->

    <section sect='sect2'>
      <title>The Table of Contents ( = <filename>toc.ncx</filename> File)</title>
      <para>This is the table of contents. This file controls what shows up in the Table of Contents pane or page.</para>
      <para>The NCX Table of Contents XML is divided into 3 sections as follows:</para>
      <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE ncx PUBLIC "-//NISO//DTD ncx 2005-1//EN" "http://www.daisy.org/z3986/2005/ncx-2005-1.dtd">
<ncx xmlns="http://www.daisy.org/z3986/2005/ncx/" version="2005-1" xml:lang="en">
  <head><!-- Metadata Section --></head>
  <docTitle><!-- Title and Author Section --></docTitle>
  <navMap><!-- Navigation Map Section --></navMap>
</ncx>]]></programlisting>
      
      <section sect='sect3'>
        <title>The <tag>metadata</tag> Section/Element in <filename>toc.ncx</filename></title>
        <para>In the Metadata Section you must specify the unique identifier (i.e. the UUID or the ISBN) that is exactly the same as your <filename>content.opf</filename> file in the dc:identifier element. Failing to specify the exact same identifier may result in failed EPUB validation. Recall that cut-and-paste is the greatest invention ever.</para>
        <para>The Metadata Section is also where you define how many “levels” are in the NCX Table of Contents. For example, if you have a main section with a series of sub-sections, you could have a two-level Table of Contents. Most eReading devices will render the sub-level as indented from the main level.</para>
        <para>This method of crafting the Table of Contents with multiple levels is a useful feature if you have a complicated non-fiction eBook. However, a single-level NCX Table of Contents is generally fine for most works of fiction. You specify the number of levels in the meta element with the dtb:depth attribute, and you are permitted up to four levels. The way to annotate which entries are sub-levels of other entries is discussed in the Navigation Map Section.</para>
        <note>The Barnes &amp; Noble PubIt! guidelines only allow a single-level NCX Table of Contents. However, if you have encoded the Navigation Map Section with multiple levels, it will flatten out the structure and not delete individual entries.</note>
        <para>Some sample XML of the Metadata Section for a single-level Table of Contents is as follows:</para>
        <programlisting><![CDATA[<head>
  <meta name="dtb:uid" content="urn:isbn:[ISBN]"/> <!-- Must be exactly the same as dc:identifier in the content.opf file -->
  <meta name="dtb:depth" content="1"/> <!-- Set for 2 if you want a sub-level. It can go up to 4 -->
  <meta name="dtb:totalPageCount" content="0"/> <!-- Do Not change -->
  <meta name="dtb:maxPageNumber" content="0"/> <!-- Do Not change -->
</head>]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>The <tag>docTitle</tag> Title and Author Section/Element in <filename>toc.ncx</filename></title>
        <para>The information in the Title and Author Section of the toc.ncx is simply is the metadata about the author and title of the eBook. While this data is not currently implemented by any eReading devices, it is required for EPUB validation.</para>
        <para>An example:</para>
        <programlisting><![CDATA[<docTitle>
    <text>Mentalism: The Ultimate Guide to Mastering Mentalism in Life (Mentalism, mentalism tricks, learn mentalism, hypnotism, mesmerism, magic tricks)</text>
  </docTitle>]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>The <tag></tag> Navigation Map Section/Element in <filename>toc.ncx</filename></title>
        <para>The Navigation Map Section is rather complex XML markup that is comprised of individual navPoint elements. Each navPoint element basically has markup that declares three characteristics: hyperlink target for the entry (with a relative path from the toc.ncx file), text for the hyperlink as it appears to the reader, and a linear play order. The “play order” provides navigation for when you click the Next/Previous Section button on an eReader, if it has one.</para>
        <note>The playOrder attributes must be sequentially marked starting at 1.</note>
        <programlisting><![CDATA[<navMap>
    <navPoint id="navpoint1" playOrder="1"> <!-- Remove for Kindle, and reordering others -->
        <navLabel>
            <text>Cover</text>
        </navLabel>
        <content src="Text/cover.xhtml"/>
    </navPoint>
    <navPoint id="navpoint2" playOrder="2">
        <navLabel>
            <text>Title Page</text>
        </navLabel>
        <content src="Text/title-page.xhtml"/>
    </navPoint>
    <navPoint id="navpoint3" playOrder="3">
        <navLabel>
            <text>Colophon</text>
        </navLabel>
        <content src="Text/colophon.xhtml"/>
    </navPoint>
    <navPoint id="navpoint4" playOrder="4">
        <navLabel>
            <text>Dedication</text>
        </navLabel>
        <content src="Text/dedication.xhtml"/>
    </navPoint>
    <navPoint id="navpoint5" playOrder="5">
        <navLabel>
            <text>Epigraph</text>
        </navLabel>
        <content src="Text/epigraph.xhtml"/>
    </navPoint>
    <navPoint id="navpoint6" playOrder="6">
        <navLabel>
            <text>Table of Contents</text>
        </navLabel>
        <content src="Text/toc.xhtml"/>
    </navPoint>
    <navPoint id="navpoint7" playOrder="7">
        <navLabel>
            <text>Foreword</text>
        </navLabel>
        <content src="Text/foreword.xhtml"/>
    </navPoint>
    <navPoint id="navpoint8" playOrder="8">
        <navLabel>
            <text>Preface</text>
        </navLabel>
        <content src="Text/preface.xhtml"/>
    </navPoint>
    <navPoint id="navpoint9" playOrder="9">
        <navLabel>
            <text>Acknowledgements</text>
        </navLabel>
        <content src="Text/acknowledgements.xhtml"/>
    </navPoint>
    <navPoint id="navpoint10" playOrder="10">
        <navLabel>
            <text>Chapter 01</text>
        </navLabel>
        <content src="Text/chapter01.xhtml"/>
    </navPoint>
    <navPoint id="navpoint11" playOrder="11">
        <navLabel>
            <text>Chapter 02</text>
        </navLabel>
        <content src="Text/chapter02.xhtml"/>
    </navPoint>
    <navPoint id="navpoint12" playOrder="12">
        <navLabel>
            <text>Chapter 03</text>
        </navLabel>
        <content src="Text/chapter03.xhtml"/>
    </navPoint>
    <navPoint id="navpoint13" playOrder="13">
        <navLabel>
            <text>Glossary</text>
        </navLabel>
        <content src="Text/glossary.xhtml"/>
    </navPoint>
    <navPoint id="navpoint14" playOrder="14">
        <navLabel>
            <text>Bibliography</text>
        </navLabel>
        <content src="Text/bibliography.xhtml"/>
    </navPoint>
    <navPoint id="navpoint15" playOrder="15">
        <navLabel>
            <text>Index</text>
        </navLabel>
        <content src="Text/index.xhtml"/>
    </navPoint>
    <navPoint id="navpoint16" playOrder="16">
        <navLabel>
            <text>List of illustrations</text>
        </navLabel>
        <content src="Text/loi.xhtml"/>
    </navPoint>
    <navPoint id="navpoint17" playOrder="17">
        <navLabel>
            <text>List of tables</text>
        </navLabel>
        <content src="Text/lot.xhtml"/>
    </navPoint>
    <navPoint id="navpoint18" playOrder="18">
        <navLabel>
            <text>Notes</text>
        </navLabel>
        <content src="Text/notes.xhtml"/>
    </navPoint>
    <navPoint id="navpoint19" playOrder="19">
        <navLabel>
            <text>Copyright Page</text>
        </navLabel>
        <content src="Text/copyright-page.xhtml"/>
    </navPoint>
</navMap>]]></programlisting>
        <para>For the attribute id within the <tag>navPoint</tag> element, its value can be anything as long as there are no duplicates. The playOrder attributes must be sequentially ordered. The self-closing <tag>content</tag> element points to the target for the hyperlink with the src attribute. You can establish anchors inside your HTML content the same way you do when constructing the HTML Table of Contents. It is considered a good practice to have the anchors in your HTML content be used by both the NCX and HTML Tables of Contents.</para>
        
        <section sect='sect4'>
          <title>Multiple Levels in the Table of Contents(<filename>toc.ncx</filename>)</title>
          <para>In order to make a multiple-level Table of Contents, you need to adjust the nesting of the navPoint elements. Much the same way that ordered and unordered lists are nested in HTML markup, you need to shift the closing &lt;/navPoint&gt; tag from the end of a top level <tag>navPoint</tag> element to after its sub-level elements. The <parameter>playOrder</parameter> attributes do not need adjusting. Some example XML is as follows:</para>
          <programlisting><![CDATA[<navPoint id="NCX_Chapter1" playOrder="51">
    <navLabel>
        <text>Chapter 1 - Joshua Tree</text>
    </navLabel>
    <content src="content/content001.html" />
    <!-- closing navPoint tag removed here -->

        <navPoint id="NCX_Chapter1" playOrder="52">
            <navLabel>
                <text>Chapter 1 - Section I</text>
            </navLabel>
            <content src="content/content001.html#section1" />
        </navPoint>
        <navPoint id="NCX_Chapter1" playOrder="53">
            <navLabel>
                <text>Chapter 1 - Section II</text>
            </navLabel>
            <content src="content/content001.html#section2" />
        </navPoint>
</navPoint> <!-- navPoint closing tag from Chapter 1 added down here -->
<navPoint id="NCX_Chapter2" playOrder="54">
    <navLabel>
        <text>Chapter 2 - Reflections</text>
    </navLabel>
    <content src="content/content002.html" />
</navPoint>]]></programlisting>
        </section> <!-- </sect4> -->
          
        
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>An example</title>
        <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<ncx xmlns="http://www.daisy.org/z3986/2005/ncx/" version="2005-1">
<head>
    <meta name="dtb:uid" content="circularia.t15.org06282007 214712"/><meta name="dtb:depth" content="1"/>
    <meta name="dtb:totalPageC ount" content="0"/>
    <meta name="dtb:maxPageNumber" content="0"/>
  </head>
<docTitle> <text>Sample .epub eBook</text> </docTitle>
  <navMap >
    <navPoint id="title_page" playOrder="1">
      <navLabel> <text>Title Page</text> </navLabel>
      <content src="title_page.xhtml"/>
    </navPoint>
    <navPoint id="chapter01" playOrder="2">
      <navLabel> <text>Chapter 1</text> </navLabel>
      <content src="chap01.xhtml"/>
    </navPoint>
    <navPoint id="chapter02" playOrder="3">
      <navLabel> <text>Chapter 2</text> </navLabel>
      <content src="chap02.xhtml"/>
    </navPoint>
  </navMap>
</ncx>]]></programlisting>

    <para>Things you need to change (if you copy and re-use the sample toc.ncx file):</para>
    <itemizedlist>
      <listitem>Make sure the id matches what you have in <filename>content.opf</filename></listitem>
      <listitem>doctitle: The text inside the <tag>text</tag> tag is what will show up as the books title in the reader software</listitem>
      <listitem>The navpoint tag</listitem>
    </itemizedlist>
    <para>(If you want to present a formatted table of contents to the reader, you need to make a XHTML file with the contents formatted however you want. In fact, this is a good idea as there are still some ePub reading programs that don&apos;t use toc.ncx.)</para>
      </section> <!-- </sect3> -->    
    </section> <!-- </sect2> -->
    
    <section sect='sect2'> <title>A Note about Cover Images</title>
    <para>The ePub specification doesn&apos;t say anything about where or how to do your book cover, but there are a few &quot;best practices&quot; that have emerged into a kind of non-spoken convention. Most readers will display the first image in the book as the book&apos;s cover, but not all of them do this. Almost all readers that support cover images will correctly display a cover if you do this:</para>
    <itemizedlist>
      <listitem>save your cover in the JPEG format</listitem>
      <listitem>name your cover &quot;Cover.jpg&quot;</listitem>
      <listitem>Save it in the &quot;Images&quot; folder inside the &quot;OEPBS&quot; folder in your ePub zip container.</listitem>
      <listitem>Make a file called &quot;Cover.xhtml&quot; as the first file in your book.</listitem>
      <listitem>The only thing in the Cover.xhtml file should be the cover image (Put the title page, author, etc, in another XHTML file)</listitem>
    </itemizedlist>
    </section> <!-- </sect2> -->
  
  <section sect='sect2'>
    <title>Last you pack it all in the Container</title>
  <para>Now we make the .epub container that all these files go in.</para>
  <itemizedlist>
    <listitem>Create an empty .zip file with whatever name you like (See notes below for detailed instructions on how to do this.)</listitem>
    <listitem>Copy the mimetype file into the zip file (don&apos;t use compression on this file)</listitem>
    <listitem>Copy the rest of the files and folders mentioned above into the zip file</listitem>
    <listitem>Re-name the .zip extension to .epub</listitem>
  </itemizedlist>
  <para>The specification recommends that the books files go in an "OEBPS" folder inside the zip file. If you put them in another spot, be sure that container.xml in the META-INF folder points to the correct location of the *.opf file. Note also that some readers won&apos;t open the book if the content files are not in the OEBPS folder.</para>
  <para>One thing to note is that the ePub specification calls the mimetype file to be the first file in the container. If you are using a GUI zip program, this is done by making a blank zip file, then copying just the mimetype file into the zip file, then the rest of the files.</para>
  <para>If you are using a command line zip utility, then you can either add the mimetype file first, or if your zip program of choice supports a dding multiple files/folders at a time, make sure the mimetype file is the first one in the list.</para>
  </section> <!-- </sect2> -->
  
</section> <!-- </sect1> -->  <!-- end of " How to Make an ePub eBook by Hand" -->

<section xml:id='tools_to_make_epub_ebooks'>
  <title> Tools to Make ePub eBooks</title>
  <section sect='sect2' xml:id='pandoc_for_epub'>
    <title>Pandoc</title>
    <para>Pandoc is a Haskell library for converting from one markup format to another, and a command-line tool that uses this library.</para>
  </section> <!-- </sect2> -->
  <section sect='sect2' xml:id='sigil'>
    <title>Sigil</title>
    <para>Sigil is a free, open source, multi-platform WYSIWYG ebook editor for the ePub format. It supports import of EPUB and HTML files, images, and style sheets, and is HTML-tidy: all imported files have their formatting corrected, and your editing can be optionally cleaned.</para>
    <para>You can add a file (HTML or other) to your project through <quote>adding and existing file</quote>, that is either File | Add | Existing File or plus-sign-marked push button.</para>
  </section> <!-- </sect2> --> <!-- end of "Sigil" -->
  <section sect='sect2' xml:id='sisu'>
    <title>Sisu</title>
    <para>SiSU seems to be a different beast from <application>pandoc</application> and <application>sigil</application>: <quote>a lightweight markup-based, commandline-oriented, document-structuring, publishing and search, static content tool for document collections.</quote></para>
    <para>Using its own mark-up syntax in plain text (UTF-8), you can get SiSU to generate a number of document formats, including plain text, HTML, XHTML, XML, EPUB, OpenDocument text (ODF:ODT), LaTeX, PDF files.</para>
    <para>SiSU can also be used to populate an SQL database with objects (roughly paragraph-sized chunks) so searches may be performed and matches returned with that degree of granularity.</para>
      
  </section> <!-- </sect2> --> <!-- end of "Sisu" -->
</section> <!-- </sect1> -->  <!-- end of "Tools to Make ePub eBooks" -->
  
  </chapter>
  
  <chapter xml:id='xml'>
  <title>XML</title>
  <para>XML is not a language but a family of languages or syntax for languages aimed at content <link linkend='mark_up'>mark up</link>. It is a strict subset of <link linkend='sgml'>SGML</link> where many SGML features have been removed so as to make XML parsers easier to implement.</para>
  
  <para>An XML file is made up of a <link linkend='xml_header'>header</link> and a body. The body comprises <firstterm>elements</firstterm> which are either empty (i.e. containing neither other elements nor text) or enclosed between an opening and a closing tag, and may only appear within a parent element if the requirement of being <firstterm>well-formed</firstterm> is met. This amounts up to saying that as far as the body is concerned XML is a <firstterm>tree</firstterm> representation language: being a subbranch of a parent branch is equivalent to being included in an enclosing element.</para>
  <para>A tree representation is equivalent to a hierarchical representation.</para>
  <para>XML being a family of languages, the structure and meaning of its elements is left for the user to specify.</para>
  
  <section>
    <title>A Very Simple XML File</title>
    <para>Here is a simple XML program:</para>
    <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8" encoding="UTF-8"?>
<!DOCTYPE book SYSTEM "/xml-resources/dtds/book.dtd">
<?xml-stylesheet type="text/css" href="docbook.css"?>
<book>
  <title>The Book of Chapters</title>
  <chapter>(Chapter one)</chapter>
  <chapter>(Chapter two)</chapter>
</book>]]></programlisting>
      <para>At the top of the document is the XML declaration, &lt;?xml version="1.0" encoding="UTF-8"?&gt;. This helps an XML-processing program identify the version of XML, and what kind of character encoding it has, helping the XML processor to get started on the document. It is optional, but a good thing to include in a document.</para>
      <para>After that comes the document type declaration, containing a reference to a grammar-describing document, located on the system in the file /xml-resources/dtds/telegram.dtd. This is known as a document type definition (DTD). &lt;!DOCTYPE...&gt; is one example of a type of markup called a declaration. Declarations are used to constrain grammar and declare pieces of text or resources to be included in the document. This line isn&apos;t required unless you want a parser to validate your document&apos;s structure against a set of rules you provide in the DTD.</para>
      <para>Note that elements do not overlap. Therefore this would be full wrong: <computeroutput><![CDATA[<elem1> <tag2> </elem1> </elem2>]]></computeroutput>.</para>
      <para>XML enables writing at the <link linkend='content_markup'>contents</link> level (*.xml) and delegating <link linkend='presentation_markup'>presentation</link> to a style sheet (.css or .xsl), as specified in the second line of the foregoing example. It also enables <firstterm linkend='XML_conformance_and_validation'>validation</firstterm>, that is adherence to a set of rules such as the need for a <computeroutput>&lt;title&gt;</computeroutput> element etc through a DTD (Document Type Definition) or an XML Schema, which effectively specify a grammar.</para>
    </section> <!-- </sect1> -->
    
    <section xml:id='XML_conformance_and_validation'>
      <title>XML Conformance and Validation</title>
      <para>XML <firstterm>validation</firstterm> is the process of checking a document written in XML (eXtensible Markup Language) to confirm that it is both well-formed and also <quote>valid</quote> in that it follows a defined structure. A <firstterm>well-formed document</firstterm> follows the basic syntactic rules of XML, which are the same for all XML documents. A <firstterm>valid</firstterm> document also respects the rules dictated by a particular <link linkend='dtd'>DTD</link> or XML <link linkend='schema'>schema</link>.</para>
      
      <section sect='sect2' xml:id='dtd'>
        <title>DTD</title>
        <para>DTDs are built into the XML 1.0 specification. They are usually separate documents that your document can refer to, although parts of DTDs can also reside inside your document. A DTD is a collection of rules, or declarations, describing elements and other markup objects. An element declaration adds a new element type to the vocabulary and defines its content model, what the element can contain and in which order. Any element type not declared in the DTD is illegal. Any element containing something not declared in the DTD is also illegal. The DTD doesnT&apos;t restrict what kind of data can go inside elements, which is the primary flaw of this kind of document model.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='schema'>
        <title>XML Schema</title>
        <para>Schemas are a later invention, offering more flexibility and a way to specify patterns for data, which is absent from DTDs. For example, in a schema you could declare an element called date and then require that it contains a legal date in the format YYYY-MM-DD. With DTDs the best you could do is say whether the element can contain characters or elements.<!-- Unfortunately, there is a lot of controversy around schemas because different groups have put forth competing proposals. Perhaps there will always be different types of schemas, which is fine with me.--></para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='schematron'>
        <title>Schematron</title>
        <para>In markup languages, Schematron is a rule-based validation language for making assertions about the presence or absence of patterns in XML trees. It is a structural schema language expressed in XML using a small number of elements and XPath.</para>
        <para>In a typical implementation, the Schematron schema XML is processed into normal XSLT code for deployment anywhere that XSLT can be used.</para>
        <para>Schematron is capable of expressing constraints in ways that other XML schema languages like XML Schema and DTD cannot. For example, it can require that the content of an element be controlled by one of its siblings. Or it can request or require that the root element, regardless of what element that is, must have specific attributes. Schematron can also specify required relationships between multiple XML files.</para>
        <para>Constraints and content rules may be associated with <quote>plain-English</quote> validation error messages, allowing translation of numeric Schematron error codes into meaningful user error messages.</para>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section xml:id='xml_features'>
      <title>XML Features</title>
      <para>The main features of the XML format are:</para>
      <itemizedlist>
        <listitem><link linkend='xml_header'>The XML Header</link>,</listitem>
        <listitem><link linkend='xml_tags'>XML Tags</link>, and</listitem>
        <listitem><link linkend='xml_entities'>XML Entities</link>.</listitem>
        <listitem><link linkend='xml_namespaces'>XML Namespaces</link>, and</listitem>
      </itemizedlist>
      
      <para>Some other features of the XML format are:</para>
      <itemizedlist>
        <listitem><link linkend='xml_commentaries'>XML Commentaries</link>,</listitem>
        <listitem><link linkend='xml_processing_instructions'>XML Processing Instructions</link>.</listitem>
        <listitem><link linkend='xml_CDATA_sections'>XML CDATA sections</link>,</listitem>
      </itemizedlist>
      
      <section sect='sect2' xml:id='xml_header'>
        <title>The XML Header*</title>
      </section> <!-- </sect2> -->
    
    <section sect='sect2' xml:id='xml_tags'>
      <title>XML Tags</title>
      <para>Tags are text between angle brackets. They may be stand-alone or come in pairs. A stand-alone tag has a slash before its closing angle bracket, like <computeroutput>&lt;red/&gt;</computeroutput>. Paired tags are used to enclose text or other elements (composition). The opening tag has no slash (e.g. <computeroutput>&lt;chapter&gt;</computeroutput> but the closing tag has a slash right after the opening angle bracket, as in <computeroutput>&lt;/chapter&gt;</computeroutput>.</para>
      <para>Tags may additionally hava <firstterm>attibutes</firstterm>, which appear inside either an opening or an empty tag (standalone), as in <computeroutput><![CDATA[<header color="blue">]]></computeroutput>.</para>
    </section> <!-- </sect2> -->
    
    <section sect='sect2' xml:id='xml_namespaces'>
      <title>XML Namespaces</title>
      <para>Namespaces have two purposes in XML:</para>
      <itemizedlist>
        <listitem>To distinguish between elements and attributes from different vocabularies with different meanings and that happen to share the same name.</listitem>
        <listitem>To group all the related elements and attributes from a single XML application together so that software can easily recognize them.</listitem>
      </itemizedlist>
      <para>The first purpose is easier to explain and to grasp, but the second purpose is more important in practice.</para>
      <para>Namespaces are implemented by attaching a prefix to each element and attribute. Each prefix is mapped to a URI by an xmlns:prefix attribute. Default URIs can also be provided for elements that don&apos;t have a prefix by xmlns attributes. Elements and attributes that are attached to the same URI are in the same namespace. Elements from many XML applications are identified by standard URIs.</para>
      <section sect='sect3'>
        <title>The Need for Namespaces</title>
        <para>Some documents combine markup from multiple XML applications. For example, an XHTML document may contain both SVG pictures and MathML equations. An XSLT stylesheet will contain both XSLT instructions and elements from the result-tree vocabulary. And XLinks are always symbiotic with the elements of the document in which they appear since XLink itself doesn&apos;t define any elements, only attributes.</para>
        <para>In some cases, these applications may use the same name to refer to different things. For example, in SVG a <userinput>set</userinput> element sets the value of an attribute for a specified duration of time, while in MathML a <userinput>set</userinput> element represents a mathematical set such as the set of all positive even numbers. It&apos;s essential to know when you&apos;re working with a MathML set and when you&apos;re working with an SVG set. Otherwise, validation, rendering, indexing, and many other tasks will get confused and fail.</para>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Namespace Syntax</title>
        <para>Namespaces disambiguate elements with the same name from each other by assigning elements and attributes to URIs. Generally, all the elements from one XML application are assigned to one URI, and all the elements from a different XML application are assigned to a different URI. These URIs are sometimes called <firstterm>namespace names</firstterm>. The URIs partition the elements and attributes into disjoint sets. Elements with the same name but different URIs are different elements. Elements with the same name and the same URIs are the same. Most of the time there&apos;s a one-to-one mapping between namespaces and XML applications, though a few applications use multiple namespaces to subdivide different parts of the application. For instance, XSL uses different namespaces for XSL Transformations (XSLT) and XSL Formatting Objects (XSL-FO).</para>
        <section sect='sect4'>
          <title>Qualified Names, Prefixes, and Local Parts</title>
          <para>Since URIs frequently contain characters such as /, %, and ~ that are not legal in XML names, short prefixes such as rdf and xsl stand in for them in element and attribute names. Each prefix is associated with a URI. Names whose prefixes are associated with the same URI are in the same namespace. Names whose prefixes are associated with different URIs are in different namespaces. Prefixed elements and attributes in namespaces have names that contain exactly one colon. They look like this:</para>
          <literallayout>    rdf:description
    xlink:type
    xsl:template</literallayout>
          <para>Everything before the colon is called the <firstterm>prefix</firstterm>. Everything after the colon is called the <firstterm>local part</firstterm>. The complete name including the colon is called the <firstterm>qualified name</firstterm>, <firstterm>QName</firstterm>, or <firstterm>raw name</firstterm>. The prefix identifies the namespace to which the element or attribute belongs. The local part identifies the particular element or attribute within the namespace.</para>
          <para>In a document that contains both SVG and MathML set elements, one could be an <userinput>svg:set</userinput> element, and the other could be a <userinput>mathml:set</userinput> element. Then there&apos;d be no confusion between them. In an XSLT stylesheet that transforms documents into XSL formatting objects, the XSLT processor would recognize elements with the prefix <userinput>xsl</userinput> as XSLT instructions and elements with the prefix <userinput>fo</userinput> as literal result elements.</para>
          <para>Prefixes may be composed from any legal XML name character except the colon. Prefixes beginning with the three letters <userinput>xml</userinput> (in any combination of case) are reserved for use by XML and its related specifications. Otherwise, you&apos;re free to name your prefixes in any way that&apos;s convenient. One further restriction namespaces add to XML 1.0 is that the local part may not contain any colons. In short, the only legal uses of a colon in XML are to separate a namespace prefix from the local part in a qualified name or for the attributes XML itself defines, such as <userinput>xml:space</userinput> and <userinput>xml:lang</userinput>.</para>
        </section> <!-- </sect4> -->
        <section sect='sect4'>
          <title>Binding Prefixes to URIs</title>
          <para>Each prefix in a qualified name must be associated with a URI. For example, all XSLT elements are associated with the http://www.w3.org/1999/XSL/Transform URI. The customary prefix <userinput>xsl</userinput> is used in place of the longer URI http://www.w3.org/1999/XSL/Transform.</para>
          <note>You can&apos;t use the URI in the name directly. For one thing, the slashes in most URIs aren&apos;t legal characters in XML names. However, it&apos;s occasionally useful to refer to the full name without assuming a particular prefix. One convention used on many XML mailing lists and in XML documentation is to enclose the URI in curly braces and prefix it to the name. For example, the qualified name <userinput>xsl:template</userinput> might be written as the full name <userinput>{http://www.w3.org/1999/XSL/Transform}template</userinput>. Another convention is to append the local name to the namespace name after a sharp sign so that it becomes a URI fragment identifier. For example, <userinput>http://www.w3.org/1999/XSL/Transform#template</userinput>. However, both forms are only conveniences for communication among human beings when the URI is important but the prefix isn&apos;t. Neither an XML parser nor an XSLT processor will accept or understand the long forms.</note>
          <para>Prefixes are bound to namespace URIs by attaching an <userinput>xmlns:<varname>prefix</varname></userinput> attribute to the prefixed element or one of its ancestors. (The <varname>prefix</varname> should be replaced by the actual prefix used.) For example, the <userinput>xmlns:rdf</userinput> attribute of this <userinput>rdf:RDF</userinput> element binds the prefix <userinput>rdf</userinput> to the namespace URI http://www.w3.org/TR/REC-rdf-syntax#:</para>
          <programlisting><![CDATA[<rdf:RDF xmlns:rdf="http://www.w3.org/TR/REC-rdf-syntax#">
 <rdf:Description
      about="http://www.cafeconleche.org/examples/impressionists.xml">
    <title> Impressionist Paintings </title>
    <creator> Elliotte Rusty Harold </creator>
    <description>
      A list of famous impressionist paintings organized
      by painter and date
    </description>
    <date>2000-08-22</date>
  </rdf:Description>
</rdf:RDF>]]></programlisting>
          <para>Bindings have scope within the element where they&apos;re declared and within its contents. The <userinput>xmlns:rdf</userinput> attribute declares the <varname>rdf</varname> prefix for the <varname>rdf:RDF</varname> element, as well as its child elements. An RDF processor will recognize <userinput>rdf:RDF</userinput> and <userinput>rdf:Description</userinput> as RDF elements because both have prefixes bound to the particular URI specified by the RDF specification. It will not consider the title, creator, description, and date elements to be RDF elements because they do not have prefixes bound to the http://www.w3.org/TR/REC-rdf-syntax# URI.</para>
          <para>The prefix can be declared in the topmost element that uses the prefix or in any ancestor thereof. This may be the root element of the document, or it may be an element at a lower level. If necessary, a single element can include multiple namespace declarations for different namespaces.</para>
          <para>It is possible to redefine a prefix within a document so that in one element the prefix refers to one namespace URI, while in another element it refers to a different namespace URI. In this case, the closest ancestor element that declares the prefix takes precedence. However, in most cases redefining prefixes is a very bad idea that only leads to confusion and is not something you should actually do.</para>
        </section> <!-- </sect4> -->
        <section sect='sect4'>
          <title>Namespace URIs</title>
          <para>Many XML applications have customary prefixes. For example, SVG elements often use the prefix <userinput>svg</userinput>, and RDF elements often have the prefix <userinput>rdf</userinput>. However, these prefixes are simply conventions and can be changed based on necessity, convenience, or whim. Before a prefix can be used, it must be bound to a URI like http://www.w3.org/2000/svg or http://www.w3.org/1999/02/22-rdf-syntax-ns#. It is these URIs that are standardized, not the prefixes. The prefix can change as long as the URI stays the same. An RDF processor looks for the RDF URI, not any particular prefix. As long as nobody outside the w3.org domain uses namespace URIs in the w3.org domain, and as long as the W3C can keep a careful eye on what its people are using for namespaces, all conflicts can be avoided.</para>
          <para>Namespace URIs do not necessarily point to any actual document or page. In fact, they don&apos;t have to use the http scheme. They might even use some other protocol like mailto in which URIs don&apos;t even point to documents. However, if you&apos;re defining your own namespace using an http URI, it would not be a bad idea to place some documentation for the specification at the namespace URI. <!--The W3C got tired of receiving broken-link reports for the namespace URIs in their specifications, so they added some simple pages at their namespace URIs.--> For more formal purposes that offer some hope of automated resolution and other features, you can place a Resource Directory Description Language (RDDL) document at the namespace URI.<!-- This possibility will be discussed further in Chapter 14.--> You are by no means required to do this, though. Many namespace URIs lead to 404-Not Found errors when you actually plug them into a web browser. Namespace URIs are purely formal identifiers. They are not the addresses of a page, and they are not meant to be followed as links.</para>
        </section> <!-- </sect4> -->
        <section sect='sect4'>
          <title>Setting a Default Namespace with the xmlns Attribute</title>
          <para>You often know that all the content of a particular element will come from a particular XML application. For instance, inside an SVG <userinput>svg</userinput> element, you&apos;re only likely to find other SVG elements. You can indicate that an unprefixed element and all its unprefixed descendant elements belong to a particular namespace by attaching an xmlns attribute with no prefix to the top element. For example:</para>
          <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg"
         width="12cm" height="10cm">
      <ellipse rx="110" ry="130" />
      <rect x="4cm" y="1cm" width="3cm" height="6cm" />
    </svg>]]></programlisting>
          <para>Here, although no elements have any prefixes, the <userinput>svg</userinput>, <userinput>ellipse</userinput>, and <userinput>rect</userinput> elements are in the http://www.w3.org/2000/svg namespace.</para>
          <para>The attributes are a different story. Default namespaces only apply to elements, not to attributes. Thus in the previous example the width, height, rx, ry, x, and y attributes are not in any namespace.</para>
          <para>You can change the default namespace within a particular element by adding an xmlns attribute to the element.</para>
          <para>The default namespace does not apply to any elements or attributes with prefixes. These still belong to whatever namespace to which their prefix is bound. However, an unprefixed child element of a prefixed element still belongs to the default namespace.</para>
        </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
    </section> <!-- </sect2> -->
    
    <section sect='sect2'><title>Escaping and verbatim text</title>
    <para>Remember to use <computeroutput>&amp;lt;</computeroutput> and <computeroutput>&amp;gt;</computeroutput> instead of <computeroutput>&lt;</computeroutput> and <computeroutput>&gt;</computeroutput>, and to use <computeroutput>&amp;amp;</computeroutput>, <computeroutput>&amp;apos;</computeroutput> and <computeroutput>&amp;quot;</computeroutput> instead of <computeroutput>&amp;</computeroutput>, <computeroutput>&apos;</computeroutput> and <computeroutput>&quot;</computeroutput> because these characters are part of the XML language and need to be escaped.</para>
    </section> <!-- </sect2> -->
   
    <section sect='sect2' xml:id='xml_commentaries'>
      <title>Commentaries</title>
      <para>Commentaries are written between the sequences <quote>&lt;!--</quote> and <quote>--&gt;</quote>, as in</para>
      <programlisting><![CDATA[<!-- my commentary -->]]></programlisting>
      
    </section> <!-- </sect2> -->
    
    <section sect='sect2' xml:id='xml_CDATA_sections'>
      <title>XML CDATA Sections</title>
      <para>If you mark up characters frequently in your text, you may find it tedious to use the predefined entities &lt;, &gt;, and &amp;. They require typing and are generally hard to read in the markup. There&apos;s another way to include lots of forbidden characters, however: the CDATA section.</para>
      <para>CDATA is an acronym for <quote>character data,</quote> which just means <quote>not markup.</quote> Essentially, you&apos;re telling the parser that this section of the document contains no markup and should be treated as regular text. The only thing that cannot go inside a CDATA section is the ending delimiter (]]&gt;).</para>
      <para>A CDATA section begins with the nine-character delimiter &lt;![CDATA[ (1), and it ends with the delimiter ]]&gt; (3). The content of the section (2) may contain markup characters (&lt;, &gt;, and &amp;), but they are ignored by the XML processor.</para>
    </section> <!-- </sect2> -->
    
    <section sect='sect2' xml:id='xml_entities'>
      <title>Entities</title>
      <para>Entities are placeholders in XML. You declare an entity in the document prolog or in a DTD, and you can refer to it many times in the document. Different types of entities have different uses. You can substitute characters that are difficult or impossible to type with character entities. You can pull in content that lives outside of your document with external entities. And rather than type the same thing over and over again, such as boilerplate text, you can instead define your own general entities.</para>
      <para>An entity consists of a name and a value. When an XML parser begins to process a document, it first reads a series of declarations, some of which define entities by associating a name with a value. The value is anything from a single character to a file of XML markup. As the parser scans the XML document, it encounters <firstterm>entity references</firstterm>, which are special markers derived from entity names. An entity reference consists of an ampersand (&amp;), the entity name, and a semicolon (;). For each entity reference, the parser consults a table in memory for something with which to replace the marker. It replaces the entity reference with the appropriate replacement text or markup, then resumes parsing just before that point, so the new text is parsed too. Any entity references inside the replacement text are also replaced; this process repeats as many times as necessary.</para>
      
      <para>Entities may be:</para>
      <variablelist>
        
        <varlistentry>
          <term>single character: either predefined or numeric</term>
          <listitem>
            <para>The predefined character entities are: <userinput>lt gt apos quot amp</userinput> for <quote>less than</quote> (&lt;), <quote>greater than</quote> (&gt;), <quote>apostrophe</quote> (&apos;, <quote>quote</quote> (&quot;), and <quote>Amper&apos;s and</quote> (&amp;). These five characters are reserved in XML syntax.</para>
            <para>And here are some common numeric entities:</para>
            <programlisting><![CDATA[non-breaking space      &nbsp;  &#160;
¢       cent    &cent;  &#162;
£       pound   &pound;         &#163;
¥       yen     &yen;   &#165;
€       euro    &euro;  &#8364;
©       copyright       &copy;  &#169;
®       registered trademark    &reg;   &#174;]]></programlisting>
            </listitem>
        </varlistentry>
        
        <varlistentry>
          <term>Internal entities</term>
          <listitem>
            <para>Internal mixed-content entities are most often used to stand in for oft-repeated phrases, names, and boilerplate text. Not only is an entity reference easier to type than a long piece of text, but it also improves accuracy and maintainability, since you only have to change an entity once for the effect to appear everywhere.</para>
            <para>This is an example of an internal entity:</para>
            <programlisting><![CDATA[<!ENTITY bobco "Bob's Bolt Bazaar, Inc.">]]></programlisting>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term>External entities</term>
          <listitem>
            <para>Sometimes you may need to create an entity for such a large amount of mixed content that it is impractical to fit it all inside the entity declaration. In this case, you should use an <firstterm>external entity</firstterm>, an entity whose replacement text exists in another file. External entities are useful for importing content that is shared by many documents, or that changes too frequently to be stored inside the document. They also make it possible to split a large, monolithic document into smaller pieces that can be edited in tandem and that take up less space in network transfers.</para>
            <para>External entities effectively break a document into multiple physical parts. However, all that matters to the XML processor is that the parts assemble into a perfect whole. That is, all the parts in their different locations must still conform to the well-formedness rules. The XML parser stitches up all the pieces into one logical document; with the correct markup, the physical divisions should be irrelevant to the meaning of the document.</para>
            <para>External entities are a linking mechanism. They connect parts of a document that may exist on other systems, far across the Internet. The difference from traditional XML links (XLinks) is that for external entities the XML processor must insert the replacement text at the time of parsing.</para>
            <para>External entities must always be declared so the parser knows where to find the replacement text. In the following example, a document declares the three external entities &amp;part1;, &amp;part2;, and &amp;part3; to hold its content:</para>
            <programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE doc SYSTEM "http://www.dtds-r-us.com/generic.dtd"
[
  <!ENTITY part1 SYSTEM "p1.xml">
  <!ENTITY part2 SYSTEM "p2.xml">
  <!ENTITY part3 SYSTEM "p3.xml">
]>
<longdoc>
  &part1;
  &part2;
  &part3;
</longdoc>]]></programlisting>
            <para>Whenever possible, make each subdocument contain at most one XML tree. While you can't validate a subdocument on its own, you can usually perform a well-formedness check if it has no more than one tree. The parser will think it's looking at a lone document without a prolog.</para>
          </listitem>
        </varlistentry>
        
        <varlistentry>
          <term>Unparsed Entities</term>
          <listitem>
            <para>The last kind of entity discussed in this chapter is the unparsed entity. This kind of entity holds content that should not be parsed because it contains something other than text or XML and would probably confuse the parser. The only place from which unparsed entities can be referred to is in an attribute value. They are used to import graphics, sound files, and other noncharacter data.</para>
            <para>The declaration for an unparsed entity looks similar to that of an external entity, with some additional information at the end. For example:</para>
            <para>This declaration differs from an external entity declaration in that there is an NDATA keyword following the system path information. This keyword tells the parser that the entity's content is in a special format, or notation, other than the usual parsed mixed content. The NDATA keyword is followed by a notation identifier that specifies the data format. In this case, the entity is a graphic file encoded in the GIF format, so the word GIF is appropriate.</para>
            <programlisting><![CDATA[<!DOCTYPE doc [
<!ENTITY mypic SYSTEM "photos/erik.gif" NDATA GIF>
]>
<doc>
<para>Here's a picture of me:</para>
<graphic src="&mypic;" />
</doc>]]></programlisting>
          </listitem>
        </varlistentry>
        
      </variablelist>
      
      <para>Here are two instances of entity declaration:</para>
      <programlisting><![CDATA[<!DOCTYPE book [
  <!ENTITY nwalsh "Norman Walsh">
  <!ENTITY chap1 SYSTEM "chap1.xml">
]>]]></programlisting>
      <para>And this is how to use them. To include file <filename>chap1.xml</filename>, just type: <userinput>&amp;chap1;</userinput> where you want it in your container file.</para>
        <!-- smallskip -->
      
    </section> <!-- </sect2> -->
    
    <section sect='sect2' xml:id='xml_processing_instructions'>
      <title>Processing Instructions</title>
      <para>XML allows for <firstterm>processing instructions</firstterm> to be embedded in sources. A processing instruction is of the form shown:</para>
      <programlisting><![CDATA[<?my_processor attr1="never" attr2="1" ... ?>]]></programlisting>
      <para>After the initial <userinput><![CDATA[<?]]></userinput> the name of the application for which this instruction is intended appears. All other applications that process the input should completely ignore the item. The application pays attention only to those that start with <userinput><![CDATA[<?my_processor]]></userinput>.</para>
      <para>A processing instruction can contain any number of parameter settings and may extend over more than one line. Each parameter specifies a value as a quoted string, the interpretation of which depends on the particular parameter.</para>
    </section> <!-- </sect2> -->
    
    </section> <!-- </sect1> -->  <!-- end of "XML Features" -->
    
    <section xml:id='xpath'>
      <title>XPath</title>
      <para>XPath is a syntax for specifying parts of an XML document. XPath is particularly used by <link linkend='xslt'>XSLT</link> (eXtensible Stylesheet Language Transformations).</para>
      <para>With XPath, you can refer to the first <sgmltag>para</sgmltag> element, the quantity attribute of the <sgmltag>part-number</sgmltag> element, all <sgmltag>first-name</sgmltag> elements that contain the text "Joe" , and many other variations. An XSLT stylesheet uses XPath expressions in the match and select attributes of various elements to indicate how a document should be transformed.</para>
      <para>XPath is designed to be used inside an attribute in an XML document. The syntax is a mix of basic programming language expressions (such as $x*6 ) and Unix-like path expressions (such as /sonnet/author/last-name ). In addition to the basic syntax, XPath provides a set of useful functions that allow you to find out various things about the document.</para>
      <note>XPath works with the parsed version of your XML document. That means that some details of the original document aren&apos;t accessible to you from XPath. For example, entity references are resolved beforehand by the XSLT processor before instructions in our stylesheet are evaluated. CDATA sections are converted to text, as well. That means we have no way of knowing if a text node in an XPath tree was in the original XML document as text, as an entity reference, or as part of a CDATA section. As you get used to thinking about your XML documents in terms of XPath expressions, this situation won&apos;t be a problem, but it may confuse you at first.</note>

      <para>There are two types of XPath&apos;s: expressions and patterns. <firstterm>Expressions</firstterm> return a value, which might be a node set that is processed or a string that is output. <firstterm>Patterns</firstterm> either match a particular node or don&apos;t match that node.</para>

            <section>
        <title>The XPath Data Model</title>
        <para>XPath views an XML document as a tree of nodes. This tree is very similar to a Document Object Model (DOM) tree, so if you&apos;re familiar with the DOM, you should have some understanding of how to build basic XPath expressions. (To be precise, this is a conceptual tree; an XSLT processor or anything else that implements the XPath standard doesn&apos;t have to build an actual tree.) There are seven kinds of nodes in XPath:</para>
        <variablelist>
          <varlistentry>
            <term>The root node (one per document)</term>
            <listitem>
              <para>The root node is the XPath node that contains the entire document. In an XPath expression, the root node is specified with a forward slash ('/').</para>
              <para>Unlike other nodes, the root node has no parent. It always has at least one child, the document element. The root node also contains comments or processing instructions that are outside the document element.</para>
              <para>The string value of the root node (returned by <sgmltag>xsl:value-of select="/" /</sgmltag> , for example), is the concatenation of all text nodes of the root node&apos; descendants.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Element nodes</term>
            <listitem>
              <para>An element node&apos; children include text nodes, element nodes, comment nodes, and processing instruction nodes that occur within that element in the original document.</para>
              <para>An element node&apos; string value is the concatenation of the text of this node and all of its children, in document order (the order in which they appear in the original document).</para>
              <para>The name of an element node (returned by the XPath <function>name()</function> function) is the element name and any namespace in effect. Other XPath functions, such as <function>local-name()</function> and <function>namespace-uri()</function>, return other information about the name of the element node.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Attribute nodes</term>
            <listitem>
              <para>At a minimum, an element node is the parent of one attribute node for each attribute in the XML source document. A couple of complications for attribute nodes exist, however:</para>
              <itemizedlist>
                <listitem>Although an element node is the parent of its attribute nodes, those attribute nodes are not children of their parent. The children of an element are the text, element, comment, and processing instruction nodes contained in the original element. If you want a document&apos; attributes, you must ask for them specifically. That relationship seems odd at first, but you'll find that treating an element&apos; attributes separately is usually what you want to do.</listitem>
                <listitem>If a DTD or schema defines default values for certain attributes, those attributes don&apos;t have to appear in the XML document. Of course, if the document codes a value other than the default, the attribute node&apos; value will be whatever was coded in the document.</listitem>
                <listitem>The XML 1.0 specification defines two attributes (xml:lang and xml:space) that work like default namespaces. xml:space defines whether whitespace in an element should be preserved; valid values for this attribute are preserve and default . Whether these attributes are in effect for a given element or not, the only attribute nodes an element node contains are those tagged in the document and those defined with a default value in the DTD.</listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
          <varlistentry><term>Text nodes</term> <listitem><para></para></listitem> </varlistentry>
          <varlistentry>
            <term>Comment nodes</term>
            <listitem><para>A comment node is very simple: it contains some text. Every comment in the source document (except for comments in the DTD) becomes a comment node. The text of the comment node (returned by the <function>text()</function> node test) contains everything inside the comment, except the opening <![CDATA[<!--]]> and the closing <![CDATA[-->]]> .</para></listitem>
          </varlistentry>
          <varlistentry>
            <term>Processing instruction nodes</term>
            <listitem><para></para>A processing instruction node has two parts, a name (returned by the <function>name()</function> function) and a string value. The string value is everything after the name, including whitespace, but not including the <![CDATA[?>]]> that closes the processing instruction.</listitem>
          </varlistentry>
          <varlistentry>
            <term>Namespace nodes</term>
            <listitem><para>Namespace nodes are almost never used in XSLT stylesheets; they exist primarily for the XSLT processor&apos; benefit. Remember that the declaration of a namespace (such as xmlns:auth="http://www.authors.net" ), even though it is technically an attribute in the XML source, becomes a namespace node, not an attribute node.</para></listitem>
          </varlistentry>
        </variablelist>

        <section>
          <title>XPath Datatypes*</title>
        </section>

      </section> <!-- end of "The XPath Data Model" -->

      <section sect='sect2'>
        <title>XPath expressions</title>
        <para> The three main ways in which XPath expressions are used within XSLT are to select nodes for processing, to test whether a condition is true or not, and to return a value.</para>
        <section sect='sect3'>
          <title>Node Set expressions</title>
          <para>The most common way that XSLT uses XPath&apos;s is to select node sets either for processing immediately or to assign to a variable and process later. These XPath&apos;s usually occur within a select attribute, for example on xsl:for–each or xsl:apply–templates, and are known as location paths.</para>
          <para>The purpose of location paths is to select node sets from a node tree. As with directory paths, location paths can be absolute or relative. Absolute location paths start from a known location such as the root node or a particular element identified by an ID or a key. Relative location paths start from the context node. You can get the context node with the following expression: self::node()</para>
          <para>This can be abbreviated to simply: .</para>
        </section>
        <section>
          <title>The Current Node and Current Node List</title>
          <para>In XSLT, there&apos;s also the concept of a current node list and a current node. The current node list is a list of the nodes that are currently being processed within the XSLT stylesheet, and the current node is the node that is being processed right now.</para>
          <para>The current node and the context node start out being the same node at the beginning of an XPath. And while the context node changes within an XPath, the current node always remains the same. You can get the current node with the current() function.</para>
        </section>
      </section> <!-- end of "XPath expressions" -->

      <section>
        <title>Locating Nodes</title>
        <para>A location path is made up of a number of <firstterm>steps</firstterm>. Each step takes you from a node to a node set. Each step is separated from the one before it with a /. When you put steps together, each of the nodes that are selected from one step are used as starting points for the node set generated by the next step. Every step is made up of an axis and a node test. The axis specifies the direction that the step is taken in, whereas the node test specifies the kinds of nodes that should be collected in that direction. Within a step, the axis and the node test are separated by a double colon (::).</para>
        <para>The default axis is the child axis. This takes you from the context node to the children of that node. The second important axis is the attribute axis. This takes you from the context node to the attributes of that node. This is quite a useful axis, so there is a shorthand for specifying it, namely an @. The final essential axis is the parent axis. This takes you from the context node to the parent of that node. The shortcut that you can use to get to the parent of the context node is ... The other axes are as follows:</para>
        <itemizedlist>
          <listitem>descendant: Takes you to the descendants of the context node.</listitem>
          <listitem>descendant–or–self: Takes you to the descendants of the context node and the context node itself.</listitem>
          <listitem>ancestor: Takes you to the ancestors of the context node.</listitem>
          <listitem>ancestor–or–self: Takes you to the ancestors of the context node and the context node itself.</listitem>
          <listitem>preceding–sibling: Takes you to the siblings (children of the same parent) of the context node that occur before it in document order.</listitem>
          <listitem>following–sibling: Takes you to the siblings of the context node that occur after it in document order.</listitem>
          <listitem>preceding: Takes you to the nodes that occur before the context node in document order, but that aren&apos;t its ancestors</listitem>
          <listitem> following: Takes you to the nodes that occur after the context node in document order, but that aren&apos;t its descendants. </listitem>
          <listitem>namespace: Takes you to the namespaces associated with the context node.</listitem>
          <listitem>self: Takes you to the context node itself.</listitem>
        </itemizedlist>

        <para>The second part of a step is the <firstterm>node test</firstterm>, which tests each node available along an axis to see whether it should be part of the node set returned by the step. Each axis has a <firstterm>principal node type</firstterm>. The principal node type is the type of node that you expect to find along an axis. For most axes, the principal node type is elements; if the attribute axis is used, then the principal node type is attributes, and if the namespace axis is used, it&apos; namespace nodes. You can also select all nodes of the principal node type with the node test *.</para>
        <para>Using a name as a node test selects nodes of the principal node type that have that name. You can test for nodes of types other than the principal node type using different kinds of node tests:</para>
        <itemizedlist>
          <listitem>node(): Tests whether the node is a node (always true, so collects all nodes along the axis)</listitem>
          <listitem>text(): Tests whether the node is a text node</listitem>
          <listitem>processing–instruction(): Tests whether the node is a processing instruction</listitem>
          <listitem>comment(): Tests whether the node is a comment</listitem>
        </itemizedlist>

        <section>
          <title>Location Paths</title>
          <para>One of the most common uses of XPath is to create <firstterm>location paths</firstterm>. A location path describes the location of something in an XML document. In our examples of XSLT, we used location paths on the <function>match</function> and <function>select</function> attributes of various elements. Those location paths described the parts of the XML document we wanted to work with. Most of the XPath expressions you'll use are location paths, and most of them are pretty simple. Before we dive in to the wonders of XPath, we need to discuss the <emphasis>context</emphasis>.</para>
          <para>Everything we do in XPath is interpreted with respect to the <firstterm>context</firstterm>. Most of the time, we can think of the context as the node in the tree from which any expression is evaluated. To be completely accurate, the context consists of five things:</para>
          <itemizedlist>
            <listitem>The context node (the "current directory"). The XPath expression is evaluated from this node. </listitem>
            <listitem>Two integers, the context position and the context size. These integers are important when we&apos;re processing a group of nodes. For example, we could write an XPath expression that selects all of the <sgmltag>li</sgmltag> elements in a given document. The context size refers to the number of <sgmltag>li</sgmltag> items selected by that expression, and the context position refers to the position of the <sgmltag>li</sgmltag> we&apos;re currently processing. </listitem>
            <listitem>A set of variables. This set includes names and values of all variables that are currently in scope.</listitem>
            <listitem>A set of all the functions available to XPath expressions. Some of these functions are defined by the XPath and XSLT standards themselves; others might be extension functions defined by whomever created the stylesheet.</listitem>
            <listitem>A set of all the namespace declarations currently in scope.</listitem>
          </itemizedlist>
        </section>
        <section>
          <title>Selecting</title>
          <para>You can select elements either absolutely ("/" or "/book/chapter") or relatively (to where you are on the parsing tree, as in "para", ".", or even ".."). Besides, you can select other things like attributes (as in "para/@lang"), the text of an element (as in "/chapter/title/text()"), comments (through the <function>comment()</function> function), or processing instructions (through the <function>processing-instruction()</function> function).</para>
        </section>
        <section>
          <title>Wildcards</title>
          <para>XPath features three wildcards:</para>
          <itemizedlist>
            <listitem>The asterisk ( * ), which selects all element nodes in the current context. Be aware that the asterisk wildcard selects element nodes only; attributes, text nodes, comments, or processing instructions aren&apos;t included. You can also use a namespace prefix with an asterisk: in our sample sonnet, the XPath expression auth:* returns all element nodes in the current context that are associated with the namespace URL http://www.authors.com.</listitem>
            <listitem>The at-sign and asterisk ( @* ), which selects all attribute nodes in the current context. You can use a namespace prefix with the attribute wildcard. In our sample sonnet, @auth:* returns all attribute nodes in the current context that are associated with the namespace URL http://www.authors.com.</listitem>
            <listitem>The node() node test, which selects all nodes in the current context, regardless of type. This includes elements, text, comments, processing instructions, attributes, and namespace nodes.</listitem>
          </itemizedlist>
          <para>In addition to these wildcards, XPath includes the double slash ( // ), which indicates that zero or more elements may occur between the slashes. For example, the XPath expression //para selects all <sgmltag>para</sgmltag> elements, regardless of where they appear in the document. This is an absolute XPath expression because it begins with a slash. You can also use the double slash at any point in an XPath expression; the expression /chapter//para selects all <sgmltag>para</sgmltag> elements that are descendants of the <sgmltag>chapter</sgmltag> element at the root of the XML document. The expressions /chapter//para and /chapter/descendant-or-self::para are equivalent.</para>
          <caution>The double slash ( // ) is a very powerful operator, but be aware that it can make your stylesheets incredibly inefficient. If we use the XPath expression //para , the XSLT processor has to check every node in the document to see if there are any <sgmltag>para</sgmltag> elements. The more specific you can be in your XPath expressions, the less work the XSLT processor has to do, and the faster your stylesheets will execute.</caution>
        </section>
        <section>
          <title>Axes</title>
          <para>To this point, we&apos;ve been able to select child elements, attributes, text, comments, and processing instructions with some fairly simple XPath expressions. Obviously, we might want to select many other things, such as:</para>
          <itemizedlist>
            <listitem>All ancestors of the context node</listitem>
            <listitem>All descendants of the context node</listitem>
            <listitem>All previous siblings or following siblings of the context node (siblings are nodes that have the same parent)</listitem>
          </itemizedlist>
          <para>To select these things, XPath provides thirteen <firstterm>axes</firstterm> that let you specify various collections of nodes. We'll discuss all of them here, even though most of them won&apos;t be particularly useful to you. To use an axis in an XPath expression, type the name of the axis, a double colon ( :: ), and the name of the element you want to select, if any.</para>
          <para>To this point, all the XPath expressions we&apos;ve looked at used the XPath abbreviated syntax. Most of the time, that&apos; what you'll use; however, most of the lesser-used axes can only be specified with the unabbreviated syntax. For example, when we wrote an XPath expression to select all of the <sgmltag>para</sgmltag> elements in the current context, we used the abbreviated syntax:</para>
          <programlisting><![CDATA[<xsl:apply-templates select="para"/>]]></programlisting>
          <para>you can use the unabbreviated syntax to specify that you want all of the <sgmltag>para</sgmltag> children of the current context:</para>
          <programlisting><![CDATA[<xsl:apply-templates select="child::para"/>]]></programlisting>
          <para>These are all of the axes defined by the XPath standard, with a brief description of each.</para>
          <variablelist>
            <varlistentry>
              <term>child</term>
              <listitem><para>Contains the children of the context node. As we&apos;ve already mentioned, the XPath expression child::sect/child::title is equivalent to sect/title . If an XPath expression (such as /chapter ) doesn&apos;t have an axis specifier, the child axis is used by default. The children of the context node include all comment, element, processing instruction, and text nodes. Attribute and namespace nodes are not considered children of the context node.</para></listitem>
            </varlistentry>
            <varlistentry>
              <term>parent</term>
              <listitem><para>Contains the parent of the context node, if there is one. (If the context node is the root node, the parent axis returns an empty node-set.) This axis can be abbreviated with a double period ( .. ). The expressions parent::sect and ../sect are equivalent.</para></listitem>
            </varlistentry>
            <varlistentry>
              <term>self</term>
              <listitem><para>Contains the context node itself. The self axis can be abbreviated with a single period ( . ). The expressions self::* and . are equivalent.</para></listitem>
            </varlistentry>
            <varlistentry>
              <term>attribute</term>
              <listitem><para>Contains the attributes of the context node. If the context node is not an element node, this axis is empty. The attribute axis can be abbreviated with the at-sign ( @ ). The expressions attribute::type and @type are equivalent.</para></listitem>
            </varlistentry>
            <varlistentry>
              <term>ancestor</term>
              <listitem><para>Contains the parent of the context node, the parent&apos; parent, etc. The ancestor axis always contains the root node unless the context node is the root node.</para></listitem>
            </varlistentry>
            <varlistentry>
              <term>ancestor-or-self</term>
              <listitem><para>Contains the context node, its parent, its parent&apos; parent, and so on. This axis always includes the root node.</para></listitem>
            </varlistentry>
            <varlistentry>
              <term>descendant</term>
              <listitem><para>Contains all children of the context node, all children of all the children of the context node, and so on.</para></listitem>
            </varlistentry>
            <varlistentry>
              <term>descendant-or-self</term>
              <listitem><para></para></listitem>
            </varlistentry>
            <varlistentry>
              <term>preceding-sibling</term>
              <listitem><para>Contains all preceding siblings of the context node; in other words, all nodes that have the same parent as the context node and appear before the context node in the XML document. If the context node is an attribute node or a namespace node, the preceding-sibling axis is empty.</para></listitem>
            </varlistentry>
            <varlistentry>
              <term>following-sibling</term>
              <listitem><para></para></listitem>
            </varlistentry>
            <varlistentry>
              <term>preceding</term>
              <listitem><para>Contains all nodes that appear before the context node in the document, except ancestors, attribute nodes, and namespace nodes.</para></listitem>
            </varlistentry>
            <varlistentry>
              <term>following</term>
              <listitem><para>Contains all nodes that appear after the context node in the document, except descendants, attribute nodes, and namespace nodes.</para></listitem>
            </varlistentry>
          </variablelist>
        </section>

      </section> <!-- end of "Locating Nodes" -->
      
      <section sect='sect2'>
        <title>Predicates</title>
        <para>Predicates act as filters on node sets. They test the nodes in a node set: when the test is false, the node is filtered out of the node set. Predicates are placed in square brackets either at the end of a step or at the end of a location path. Predicate placement is important because predicates often test nodes according to their position in the context node list.</para>
        <para>Positional predicates test the position of a node in the context node list against a number. For example, the following path selects the third transaction child element of the context node: transaction[3]</para>

        <para>Each predicate is evaluated and converted to a Boolean value (either true or false ). If the predicate is true for a given node, that node will be selected; otherwise, the node is not selected. Predicates always appear inside square brackets ( [] ). Here&apos; an example:</para>
        <programlisting><![CDATA[<xsl:apply-templates select="para[3]"/>]]></programlisting>
        <para>This expression selects the third <sgmltag>para</sgmltag> element in the current context. If there are two or fewer <sgmltag>para</sgmltag> elements in the current context, this XPath expression returns an empty node-set.<!-- Several things can be part of a predicate; we'll go through them here. --></para>
        <para>A number inside square brackets selects nodes that have a particular position. For example, the XPath expression para[7] selects the seventh <sgmltag>para</sgmltag> element in the context node. XPath also provides the boolean and and or operators as well as the union operator ( | ) to combine predicates. The expression <userinput>para[position()=3 and @style]</userinput> matches all <sgmltag>para</sgmltag> elements that occur third and have a style attribute, while <userinput>para[position()=3 or @style]</userinput> matches all <sgmltag>para</sgmltag> elements that either occur third or have a style attribute. With the union operator, the expression para[3|7] matches all third and seventh <sgmltag>para</sgmltag> elements in the current context, as does the more verbose para[3] | para[7].</para>
        <para>In addition to numbers, we can use XPath and XSLT functions inside predicates. Here are some examples:</para>
        <variablelist>
          <varlistentry>
            <term>para[last()]</term>
            <listitem><para>Selects the last <sgmltag>para</sgmltag> element in the current context.</para></listitem>
          </varlistentry>
          <varlistentry>
            <term>para[position() mod 2 = 0]</term>
            <listitem><para>Selects all even-numbered <sgmltag>para</sgmltag> elements. (The mod operator returns the remainder after a division; the position of any even-numbered element divided by 2 has a remainder of 0.)</para></listitem>
          </varlistentry>
          <varlistentry>
            <term>sonnet[@type="Shakespearean"]</term>
            <listitem><para>Selects all <sgmltag>sonnet</sgmltag> elements that have a type attribute with the value Shakespearean.</para></listitem>
          </varlistentry>
          <varlistentry>
            <term>ancestor::table[@border="1"]</term>
            <listitem><para>Selects all <sgmltag>table</sgmltag> ancestors of the current context that have a the value 1.</para></listitem>
          </varlistentry>
          <varlistentry>
            <term>count(/chapter/table[@border="1"])</term>
            <listitem><para>Returns the number of <sgmltag>table</sgmltag> elements with a border attribute equal to 1 that are children of <sgmltag>chapter</sgmltag> elements that are children of the root node. Notice that in this case we&apos;re using an XPath predicate expression as an argument to a function.</para></listitem>
          </varlistentry>
        </variablelist>
      </section>
      
      <section sect='sect2' xml:id='xpath_functions'>
        <title>XPath Functions</title>
        
        <section sect='sect3'>
          <title>XPath Boolean Operators</title>
          <variablelist>
            <varlistentry>
              <term><function>and</function></term>
              <listitem>both conditions to be satisfied</listitem>
            </varlistentry>
            <varlistentry>
              <term><function>or</function></term>
              <listitem>any one of the condition to be satisfied</listitem>
            </varlistentry>
            <varlistentry>
              <term><function>not()</function></term>
              <listitem>function to check condition not to be satisfied.</listitem>
            </varlistentry>
          </variablelist>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>XPath Context Functions</title>
          <variablelist>
            <varlistentry>
              <term><function>position()</function></term>
              <listitem>position of the context item within the current sequence of items</listitem>
            </varlistentry>
            <varlistentry>
              <term><function>last()</function></term>
              <listitem>the size of the current sequence of items</listitem>
            </varlistentry>
            <varlistentry>
              <term><function>current-date</function> or <function>current-time()</function></term>
              <listitem>date or time value of now</listitem>
            </varlistentry>
          </variablelist>
        </section> <!-- </sect3> -->
        
        <section sect='sect3' xml:id='xpath_string_functions'>
          <title>XPath String Functions</title>
          <variablelist>
            
            <varlistentry>
              <term><function>starts-with(string1, string2)</function></term>
              <listitem>Returns true when first string starts with the second string.</listitem>
            </varlistentry>
            
            <varlistentry>
              <term><function>contains(string1, string2)</function></term>
              <listitem>Returns true when the first string contains the second string.</listitem>
            </varlistentry>
            
            <varlistentry>
              <term><function>substring(string, offset, length?)</function></term>
              <listitem>Returns a section of the string. The section starts at offset up to the length provided.</listitem>
            </varlistentry>
            
            <varlistentry>
              <term><function>substring-before(string1, string2)</function></term>
              <listitem>Returns the part of string1 up before the first occurrence of string2.</listitem>
            </varlistentry>
            
            <varlistentry>
              <term><function>substring-after(string1, string2)</function></term>
              <listitem>Returns the part of string1 after the first occurrence of string2.</listitem>
            </varlistentry>
            
            <varlistentry>
              <term><function>string-length(string)</function></term>
              <listitem>Returns the length of string in terms of characters.</listitem>
            </varlistentry>
            
            <varlistentry>
              <term><function>normalize-space(string)</function></term>
              <listitem>Trims the leading and trailing space from string.</listitem>
            </varlistentry>
            
            <varlistentry>
              <term><function>translate(string1, string2, string3)</function></term>
              <listitem>Returns string1 after any matching characters in string2 have been replaced by the characters in string3.</listitem>
            </varlistentry>
            
            <varlistentry>
              <term><function>concat(string1, string2, ...)</function></term>
              <listitem>Concatenates all strings.</listitem>
            </varlistentry>
            
            <varlistentry>
              <term><function>format-number(number1, string1, string2)</function></term>
              <listitem>Returns a formatted version of number1 after applying string1 as a format string. string2 is an optional locale string.</listitem>
            </varlistentry>
            
          </variablelist>
        </section> <!-- </sect3> -->
        
      </section> <!-- end of "XPath Functions" -->

      <section>
        <title>Attribute Value Templates</title>
        <para>An attribute value template is an XPath expression that is evaluated, and the result of that evaluation replaces the attribute value template. For example, we could create an HTML <sgmltag>table</sgmltag> element like this:</para>
        <programlisting><![CDATA[<table border="{@size}"/>]]></programlisting>
        <para>In this example, the XPath expression @size is evaluated, and its value, whatever that happens to be, is inserted into the output tree as the value of the border attribute. Attribute value templates can be used in any literal result elements in your stylesheet (for HTML elements and other things that aren&apos;t part of the XSLT namespace, for example).</para>
      </section>
      
    </section> <!-- </sect1> -->  <!-- end of "XPath" -->
    
          <section xml:id='xquery'>
        <info>
          <title>XQuery</title>
          <para>XQuery is a language for finding and extracting elements and attributes from XML documents.</para>
          <para>Here is an example of what XQuery could solve:</para>
          <blockquote>Select all CD records with a price less than $10 from the CD collection stored in <filename>cd_catalog.xml</filename></blockquote>
          <para>XQuery is to XML what SQL is to databases. It was designed to query XML data. It relies on XPath expressions. It is supported by all major databases and is a W3C Recommendation</para>
          <para>XQuery 1.0 and XPath 2.0 share the same data model and support the same functions and operators. If you have already studied XPath you will have no problems with understanding XQuery.</para>
          <para>Here is another XQuery Example:</para>
          <programlisting><![CDATA[for $x in doc("books.xml")/bookstore/book
where $x/price>30
order by $x/title
return $x/title]]></programlisting>
        </info>

                <section xml:id='xquery.intro'>
          <title>What is XQuery? Plus an Example.</title>
          <itemizedlist>
            <listitem>XQuery is <emphasis>the</emphasis> language for querying XML data</listitem>
            <listitem>XQuery for XML is like SQL for databases</listitem>
            <listitem>XQuery is built on XPath expressions</listitem>
            <listitem>XQuery is supported by all major databases</listitem>
            <listitem>XQuery is a W3C Recommendation</listitem>
          </itemizedlist>

          <mediaobject>
            <imageobject>
              <imagedata format='GIF' fileref='directory_files/pictures/XML-technologies-diagram.gif'/>
            </imageobject>
          </mediaobject>

          <para>This is an XQuery example (a <link linkend='xquery.FLWOR'>FLWOR</link>):</para>
          <programlisting><![CDATA[for $x in doc("books.xml")/bookstore/book
where $x/price>30
order by $x/title
return $x/title]]></programlisting>
        </section>

        <section xml:id='xquery.example'>
          <title>An Example*</title>
          <para></para>
          <programlisting><![CDATA[]]></programlisting>
          <para></para>
          <screen><![CDATA[]]></screen>
          <para></para>
          <programlisting><![CDATA[]]></programlisting>
          <para></para>
          <screen><![CDATA[]]></screen>
          <para></para>
          <programlisting><![CDATA[]]></programlisting>
          <para></para>
          <screen><![CDATA[]]></screen>
          <para></para>
        </section>

        <section xml:id='xquery.FLWOR'>
          <info>
            <title>FLWOR</title>
            <abstract>
              <para><firstterm>FLWOR</firstterm> (pronounced <quote>flower</quote>) is an acronym for <quote>For, Let, Where, Order by, Return</quote>.</para>
              <variablelist>
                <varlistentry>
                  <term><command>for</command></term>
                  <listitem>selects a sequence of nodes</listitem>
                </varlistentry>
                <varlistentry>
                  <term><command>let</command></term>
                  <listitem>binds a sequence to a variable</listitem>
                </varlistentry>
                <varlistentry>
                  <term><command>where</command></term>
                  <listitem>filters the nodes</listitem>
                </varlistentry>
                <varlistentry>
                  <term><command>order by</command></term>
                  <listitem>sorts the nodes</listitem>
                </varlistentry>
                <varlistentry>
                  <term><command>return</command></term>
                  <listitem>what to return (gets evaluated once for every node)</listitem>
                </varlistentry>
              </variablelist>
            </abstract>
          </info>

          <para>Look at the following path expression:</para>
          <programlisting><![CDATA[doc("books.xml")/bookstore/book[price>30]/title]]></programlisting>
          <para>The expression above will select all the title elements under the book elements that are under the bookstore element that have a price element with a value that is higher than 30.</para>
          <para>The following FLWOR expression will select exactly the same as the path expression above:</para>
          <programlisting><![CDATA[for $x in doc("books.xml")/bookstore/book
where $x/price>30
return $x/title]]></programlisting>
<para>The result will be:</para>
<screen><![CDATA[<title lang="en">XQuery Kick Start</title>
<title lang="en">Learning XML</title>]]></screen>
          <para>With FLWOR you can sort the result:</para>
          <programlisting><![CDATA[for $x in doc("books.xml")/bookstore/book
where $x/price>30
order by $x/title
return $x/title]]></programlisting>
          <para>The result of the XQuery expression above will be:</para>
          <screen><![CDATA[<title lang="en">Learning XML</title>
<title lang="en">XQuery Kick Start</title> ]]></screen>

          <section>
            <title>XQuery <userinput>for</userinput> Clause</title>
            <para>A for clause sets up an iteration that allows the rest of the FLWOR to be evaluated multiple times, once for each item in the sequence returned by the expression after the <userinput>in</userinput> keyword. This sequence, also known as the <firstterm>binding sequence</firstterm>, can evaluate to any sequence of zero, one or more items. It could also be atomic values, or nodes of any kind, or a mixture of items. If the binding sequence is the empty sequence, the rest of the FLWOR issimply not evaluated (it iterates zero times).</para>
            <bridgehead>Range expressions</bridgehead>
            <para>Another useful technique is to supply a sequence of integers in the <userinput>for</userinput> clause in order to specify the number of times to iterate. This can be accomplished through a <firstterm>range expression</firstterm>, which creates a sequence of consecutive integers. For example, the range expression 1 to 3 evaluates to a sequence of integers (1, 2, 3). The FLWOR shown the example below iterates three times and returns three oneEval elements.</para>
            <programlisting><![CDATA[for $i in 1 to 3
return <oneEval> { $i } </oneEval>]]></programlisting>
            <para>Range expressions can be included within parenthesized expressions, as in (1 to 3, 6, 8 to 10). They can also use variables, as in 1 to $prodCount. Each of the expressions before and after the to keyword must evaluate to an integer.</para>
            <para>If the first integer is greater than the second, as in 3 to 1, or if either operand is the empty sequence, the expression evaluates to the empty sequence. The reason for this is to ensure that for $i in 1 to count($seq) does the expected thing even if $seq is an empty sequence.</para>
            <para>You can use the reverse function if you want to descend in value, as in:</para>
            <programlisting><![CDATA[for $i in reverse(1 to 3)]]></programlisting>
            <para>You can also increment by some value other than 1 using an expression like:</para>
            <programlisting><![CDATA[for $i in (1 to 100)[. mod 2 = 0]]]></programlisting>
            <para>which gives you every other number (2, 4, 6, etc.) up to 100.</para>
            <bridgehead>Multiple <userinput>for</userinput> clauses</bridgehead>
            <para>You can use multiple for clauses in a FLWOR, which is similar to nested loops in a programming language. The result is that the rest of the FLWOR is evaluated for every combination of the values of the variables. The following example shows a query with two for clauses, and demonstrates the order of the results.</para>
            <programlisting><![CDATA[for $i in (1,2)
for $j in ("a","b")
return <oneEval>i is {$i} and j is {$j}</oneEval>]]></programlisting>
            <para>The order is significant; it uses the first value of the first variable ($i) and iterates over the values of the second variable ($j), then takes the second value of $i and iterates over the valuesof $j.</para>
            <para>Also, multiple variables can be bound in a single for clause, separated by commas. This has the same effect as using multiple for clauses. The example shown below returns the same results as before. This syntax is shorter but can be less clear in the case of complex expressions.</para>
            <programlisting><![CDATA[for $i in (1,2), $j in ("a","b")
return <oneEval>i is {$i} and j is {$j}</oneEval>]]></programlisting>
            <para>Specifying multiple variable bindings (or multiple for clauses) is especially useful for joining data. This is described further in <citetitle class='section' linkend='xquery.joins'>Joins</citetitle>.</para>
          </section>

          <section>
            <title>XQuery <userinput>let</userinput> Clause</title>
            <para>A let clause is a convenient way to bind a variable to a value. Unlike a for clause, a let clause does not result in iteration; it binds the whole sequence to the variable rather than binding each item in turn. The let clause serves as a programmatic convenience that avoids repeating the same expression multiple times. With some implementations, it may improve performance, because the expression is evaluated only once instead of each time it is needed.</para>
            <para>To illustrate the difference between for and let clauses, look at the following example:</para>
            <programlisting><![CDATA[let $i := (1 to 3)
return <oneEval>{$i}</oneEval>]]></programlisting>
            <para>which returns:</para>
            <screen><![CDATA[<oneEval>1 2 3</oneEval>]]></screen>
            <para>The FLWOR with the let clause returns only a single oneEval element, because no iteration takes place and the return clause is evaluated only once.</para>
            <para>One or more let clauses can be intermingled with one or more for clauses. Each of the let and for clauses may reference a variable bound in any previous clause. The only requirement is that they all appear before any where, order by, or return clauses of that FLWOR. The following example shows such a FLWOR.</para>
            <programlisting><![CDATA[let $doc := doc("catalog.xml")
for $prod in $doc//product
let $prodDept := $prod/@dept
let $prodName := $prod/name
where $prodDept = "ACC" or $prodDept = "WMN"
return $prodName]]></programlisting>
            <para>As with for clauses, adjacent let clauses can be represented using a slightly shortened syntax that replaces the let keyword with a comma, as in:</para>
            <programlisting><![CDATA[let $prodDept := $prod/@dept, $prodName := $prod/name]]></programlisting>
            <para>Another handy use for the let clause is to perform several functions or operations in order. For example, suppose you want to take a string and replace all instances of at with @, replace all instances of dot with a period (.), and remove any remaining spaces. You could write the expression: </para>
            <programlisting><![CDATA[replace(replace(replace($myString,'at','@'),'dot','.'),' ','')]]></programlisting>
            <para>but that is difficult to read and debug, especially as more functions are added. An alternative is the expression:</para>
            <programlisting><![CDATA[let $myString2 := replace($myString,'at','@')
let $myString3 := replace($myString2,'dot','.')
let $myString4 := replace($myString3,' ','')
return $myString4]]></programlisting>
            <para>which makes the query clearer.</para>
            </section>

          <section>
            <title>XQuery <userinput>where</userinput> Clause</title>
            <para>The where clause is used to specify criteria that filter the results of the FLWOR.</para>
            <para>The where clause can reference variables that were bound by a for or let clause. For example:</para>
            <programlisting><![CDATA[where $prodDept = "ACC" or $prodDept = "WMN"]]></programlisting>
            <para>A where clause can be composed of many expressions joined by and and or keywords, as shown in the example below.</para>
            <programlisting><![CDATA[for $prod in doc ("catalog.xml")//product
let $prodDept := $prod/@dept
where $prod/number > 100 and starts-with($prod/name,"F")
  and exists ($prod/colorChoices)
  and ($prodDept = "ACC" or $prodDept = "WMN")
return $prod]]></programlisting>
            <para>Starting in version 3.0, it is also possible to have multiple where clauses in the same FLWOR. In previous versions, only one was allowed.</para>
            <para>Note that when using paths within the where clause, they need to start with an expression thatsets the context. For example, it has to say <userinput><![CDATA[$prod/number > 100]]></userinput> rather than just <userinput><![CDATA[number > 100]]></userinput>. Otherwise, the processor does not know where to look for the number child.</para>
          </section>
          <section>
            <title>XQuery Quantified Expressions</title>
            <para>A quantified expression determines whether some or all of the items in a sequence meet aparticular condition. For example, if you want to know whether any of the items in an order are from the accessory department, you can use the expression shown in the example below. This expression will return true.</para>
            <programlisting><![CDATA[some $dept in doc("catalog.xml")//product/@dept
satisfies($dept = "ACC")]]></programlisting>
            <para>Alternatively, if you want to know if every item in an order is from the accessory department, you can simply change the word some to every, as shown in the example below. This expression will return false. </para>
            <programlisting><![CDATA[every $dept in doc("catalog.xml")//product/@dept
satisfies($dept = "ACC")]]></programlisting>
            <para></para>
            <screen><![CDATA[]]></screen>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
            <para></para>
          </section>

          <section>
            <title>XQuery <userinput>***</userinput> Clause</title>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
            <para></para>
            <screen><![CDATA[]]></screen>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
            <para></para>
            <screen><![CDATA[]]></screen>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
            <para></para>
            <screen><![CDATA[]]></screen>
          </section>

        </section>

        <section xml:id='xquery.HTML'>
          <title>XQuery FLWOR + HTML</title>
          <subtitle>Present the Results in an HTML List</subtitle>
          <para>Look at the following XQuery FLWOR expression:</para>
          <programlisting><![CDATA[for $x in doc("books.xml")/bookstore/book/title
order by $x
return $x]]></programlisting>
          <para>The expression above will select all the title elements under the book elements that are under the bookstore element, and return the title elements in alphabetical order.</para>
          <para>Now we want to list all the book-titles in our bookstore in an HTML list. We add <tag>ul</tag> and <tag>li</tag> tags to the FLWOR expression:</para>
          <programlisting><![CDATA[<ul>
{
for $x in doc("books.xml")/bookstore/book/title
order by $x
return <li>{$x}</li>
}
</ul>]]></programlisting>
          <para>The result of the above will be:</para>
          <screen><![CDATA[<ul>
  <li><title lang="en">Everyday Italian</title></li>
  <li><title lang="en">Harry Potter</title></li>
  <li><title lang="en">Learning XML</title></li>
  <li><title lang="en">XQuery Kick Start</title></li>
</ul> ]]></screen>
          <para>Now we want to eliminate the title element, and show only the data inside the title element:</para>
          <programlisting><![CDATA[<ul>
{
  for $x in doc("books.xml")/bookstore/book/title
  order by $x
  return <li>{data($x)}</li>
}
</ul>]]></programlisting>
          <para>The result will be (an HTML list):</para>
          <screen><![CDATA[<ul>
  <li>Everyday Italian</li>
  <li>Harry Potter</li>
  <li>Learning XML</li>
  <li>XQuery Kick Start</li>
</ul>]]></screen>
        </section>

        <section xml:id='xquery.terms'>
          <title>Terminology</title>

          <variablelist>

            <varlistentry>
              <term>nodes</term>
              <listitem>
                <para>In XQuery, there are seven kinds of nodes: element, attribute, text, namespace, processing-instruction, comment, and document (root) nodes.</para>
                <para>XML documents are treated as trees of nodes. The root of the tree is called the document node (or root node).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>atomic values</term>
              <listitem>
                <para>Atomic values are nodes with no children or parent.</para>
                <para>Example of atomic values:</para>
                <programlisting><![CDATA[J K. Rowling
"en"]]></programlisting>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>items</term>
              <listitem><para>Items are atomic values or nodes</para></listitem>
            </varlistentry>

          </variablelist>

        </section>

        <section xml:id='xquery.syntax'>
          <title>XQuery Syntax</title>
          <para>XQuery is case-sensitive and XQuery elements, attributes, and variables must be valid XML names.</para>
          <section>
            <title>XQuery Basic Syntax Rules</title>
            <para>Some basic syntax rules:</para>
            <itemizedlist>
              <listitem>XQuery is case-sensitive</listitem>
              <listitem>XQuery elements, attributes, and variables must be valid XML names</listitem>
              <listitem>An XQuery string value can be in single or double quotes</listitem>
              <listitem>An XQuery variable is defined with a $ followed by a name, e.g. $bookstore</listitem>
              <listitem>XQuery comments are delimited by (: and :), e.g. (: XQuery Comment :)</listitem>
            </itemizedlist>
          </section>
          <section>
            <title>XQuery Conditional Expressions</title>
            <para><quote>If-Then-Else</quote> expressions are allowed in XQuery.</para>
            <para>Look at the following example:</para>
            <programlisting><![CDATA[for $x in doc("books.xml")/bookstore/book
return if ($x/@category="children")
then <child>{data($x/title)}</child>
else <adult>{data($x/title)}</adult>]]></programlisting>
            <para>Notes on the <quote>if-then-else</quote> syntax: parentheses around the if expression are required. else is required, but it can be just else ().</para>
            <para>The result of the example above will be:</para>
            <screen><![CDATA[
<adult>Everyday Italian</adult>
<child>Harry Potter</child>
<adult>XQuery Kick Start</adult>
<adult>Learning XML</adult> ]]></screen>
          </section>
          <section>
            <title>XQuery Comparisons</title>
            <para>In XQuery there are two ways of comparing values.</para>
            <itemizedlist>
              <listitem>General comparisons: =, !=, &lt;, &lt;=, &gt;, &gt;=</listitem>
              <listitem>Value comparisons: eq, ne, lt, le, gt, ge</listitem>
            </itemizedlist>
            <para>The difference between the two comparison methods are shown below.</para>
            <para>The following expression returns true if any q attributes have a value greater than 10:</para>
            <programlisting><![CDATA[$bookstore//book/@q > 10]]></programlisting>
            <para>The following expression returns true if there is only one q attribute returned by the expression, and its value is greater than 10. If more than one q is returned, an error occurs:</para>
            <programlisting><![CDATA[$bookstore//book/@q gt 10]]></programlisting>
          </section>
        </section>
        <section xml:id='xquery.add'>
          <title>Adding Elements and Attributes in XQuery</title>
          <bridgehead>Adding Elements and Attributes to the Result</bridgehead>
          <para>As we have seen in a previous chapter, we may include elements and attributes from the input document ("books.xml) in the result:</para>
          <programlisting><![CDATA[for $x in doc("books.xml")/bookstore/book/title
order by $x
return $x]]></programlisting>
          <para>The XQuery expression above will include both the title element and the lang attribute in the result, like this:</para>
          <screen><![CDATA[<title lang="en">Everyday Italian</title>
            <title lang="en">Harry Potter</title>
            <title lang="en">Learning XML</title>
            <title lang="en">XQuery Kick Start</title>]]></screen>
          <para>The XQuery expression above returns the title elements the exact same way as they are described in the input document. We now want to add our own elements and attributes to the result!</para>
          <bridgehead>Add HTML Elements and Text</bridgehead>
          <para>Now, we want to add some HTML elements to the result. We will put the result in an HTML list - together with some text:</para>
          <programlisting><![CDATA[<html>
<body>

<h1>Bookstore</h1>

<ul>
{
for $x in doc("books.xml")/bookstore/book
order by $x/title
return <li>{data($x/title)}. Category: {data($x/@category)}</li>
}
</ul>

</body>
</html>]]></programlisting>
          <para>The XQuery expression above will generate the following result:</para>
          <screen><![CDATA[
<html>
<body>

<h1>Bookstore</h1>

<ul>
<li>Everyday Italian. Category: COOKING</li>
<li>Harry Potter. Category: CHILDREN</li>
<li>Learning XML. Category: WEB</li>
<li>XQuery Kick Start. Category: WEB</li>
</ul>

</body>
</html> ]]></screen>

          <bridgehead>Add Attributes to HTML Elements</bridgehead>
          <para>Next, we want to use the category attribute as a class attribute in the HTML list:</para>
          <programlisting><![CDATA[<html>
<body>

<h1>Bookstore</h1>

<ul>
{
for $x in doc("books.xml")/bookstore/book
order by $x/title
return <li class="{data($x/@category)}">{data($x/title)}</li>
}
</ul>

</body>
</html>]]></programlisting>
          <para>The XQuery expression above will generate the following result:</para>
          <screen><![CDATA[<html>
<body>
<h1>Bookstore</h1>

<ul>
<li class="COOKING">Everyday Italian</li>
<li class="CHILDREN">Harry Potter</li>
<li class="WEB">Learning XML</li>
<li class="WEB">XQuery Kick Start</li>
</ul>

</body>
</html> ]]></screen>

        </section>
        <section xml:id='xquery.select'>
          <title>XQuery Selecting and Filtering</title>
          <para>As we have seen in the previous chapters, we are selecting and filtering elements with either a Path expression or with a FLWOR expression.</para>
          <bridgehead>Selecting and Filtering Elements</bridgehead>
          <para>[...]</para>
          <bridgehead>The for Clause</bridgehead>
          <para>The for clause binds a variable to each item returned by the in expression. The for clause results in iteration. There can be multiple for clauses in the same FLWOR expression.</para>
          <para>To loop a specific number of times in a for clause, you may use the to keyword:</para>
          <programlisting><![CDATA[for $x in (1 to 5)
return <test>{$x}</test>]]></programlisting>
          <para>Result:</para>
          <screen><![CDATA[<test>1</test>
<test>2</test>
<test>3</test>
<test>4</test>
<test>5</test>]]></screen>
          <para>The at keyword can be used to count the iteration:</para>
          <programlisting><![CDATA[for $x at $i in doc("books.xml")/bookstore/book/title
return <book>{$i}. {data($x)}</book>]]></programlisting>
          <para>Result:</para>
          <screen><![CDATA[<book>1. Everyday Italian</book>
<book>2. Harry Potter</book>
<book>3. XQuery Kick Start</book>
<book>4. Learning XML</book>]]></screen>
          <para>It is also allowed with more than one in expression in the for clause. Use comma to separate each in expression:</para>
          <programlisting><![CDATA[for $x in (10,20), $y in (100,200)
return <test>x={$x} and y={$y}</test>]]></programlisting>
          <para>Result:</para>
          <screen><![CDATA[<test>x=10 and y=100</test>
<test>x=10 and y=200</test>
<test>x=20 and y=100</test>
<test>x=20 and y=200</test>]]></screen>
          <bridgehead>The let Clause</bridgehead>
          <para>The let clause allows variable assignments and it avoids repeating the same expression many times. The let clause does not result in iteration.</para>
          <programlisting><![CDATA[let $x := (1 to 5)
return <test>{$x}</test>]]></programlisting>
          <para>Result:</para>
          <screen><![CDATA[<test>1 2 3 4 5</test> ]]></screen>
          <bridgehead>The where Clause</bridgehead>
          <para>The where clause is used to specify one or more criteria for the result:</para>
          <programlisting><![CDATA[where $x/price>30 and $x/price<100 ]]></programlisting>
          <bridgehead>The order by Clause</bridgehead>
          <para>The order by clause is used to specify the sort order of the result. Here we want to order the result by category and title:</para>
          <programlisting><![CDATA[for $x in doc("books.xml")/bookstore/book
order by $x/@category, $x/title
return $x/title]]></programlisting>
          <para>Result:</para>
          <screen><![CDATA[<title lang="en">Harry Potter</title>
<title lang="en">Everyday Italian</title>
<title lang="en">Learning XML</title>
<title lang="en">XQuery Kick Start</title>]]></screen>
          <bridgehead>The return Clause</bridgehead>
          <para>The return clause specifies what is to be returned.</para>
          <programlisting><![CDATA[for $x in doc("books.xml")/bookstore/book
return $x/title]]></programlisting>
          <para>Result:</para>
          <screen><![CDATA[<title lang="en">Everyday Italian</title>
<title lang="en">Harry Potter</title>
<title lang="en">XQuery Kick Start</title>
<title lang="en">Learning XML</title>]]></screen>
        </section>
        <section xml:id='xquery.functions'>
          <info>
            <title>XQuery Functions</title>
            <abstract>
              <para>XQuery is built on XPath expressions. XQuery 1.0 and XPath 2.0 share the same data model and support the same functions and operators.</para>
              <para>You can also define your own functions in XQuery.</para>
              <para>XQuery shares the same data types as XML Schema 1.0 (XSD): String, Date, Numeric, and Misc</para>
            </abstract>
          </info>
          <para>A call to a function can appear where an expression may appear. Look at the examples below:</para>
          <para>Example 1: In an element</para>
          <programlisting><![CDATA[<name>{upper-case($booktitle)}</name>]]></programlisting>
          <para>Example 2: In the predicate of a path expression</para>
          <programlisting><![CDATA[doc("books.xml")/bookstore/book[substring(title,1,5)='Harry']]]></programlisting>
          <para>Example 3: In a let clause</para>
          <programlisting><![CDATA[let $name := (substring($booktitle,1,4)) ]]></programlisting>

          <bridgehead>XQuery User-Defined Functions</bridgehead>
          <para>If you cannot find the XQuery function you need, you can write your own.</para>
          <para>User-defined functions can be defined in the query or in a separate library.</para>
          <para>Syntax</para>
          <cmdsynopsis>declare function prefix:function_name($parameter as datatype)
as returnDatatype
{
...function code here...
};</cmdsynopsis>
          <para></para>
          <para>Notes on user-defined functions:</para>
          <itemizedlist>
            <listitem>Use the declare function keyword</listitem>
            <listitem>The name of the function must be prefixed</listitem>
            <listitem>The data type of the parameters are mostly the same as the data types defined in XML Schema</listitem>
            <listitem>The body of the function must be surrounded by curly braces</listitem>
          </itemizedlist>
          <para>Example of a User-defined Function Declared in the Query</para>
          <programlisting><![CDATA[declare function local:minPrice($p as xs:decimal?,$d as xs:decimal?)
as xs:decimal?
{
let $disc := ($p * $d) div 100
return ($p - $disc)
};]]></programlisting>
          <para>Below is an example of how to call the function above:</para>
          <programlisting><![CDATA[<minPrice>{local:minPrice($book/price,$book/discount)}</minPrice>]]></programlisting>
        </section>

        <section xml:id='xquery.joins'>
          <info>
            <title>XQuery Joins</title>
            <abstract>
              <para>One of the major benefits of FLWORs is that they can easily join data from multiple sources...</para>
            </abstract>
          </info>
          <para>One of the major benefits of <link linkend='xquery.FLWOR'>FLWORs</link> is that they can easily join data from multiple sources. For example, suppose you want to join information from your product catalog (<filename>catalog.xml</filename>) and your order (<filename>order.xml</filename>). You want a list of all the items in the order, along with their number, name, and quantity.</para>
          <para>The name comes from the product catalog, and the quantity comes from the order. The product number appears in both input documents, so it is used to join the two sources. The following example shows a FLWOR that performs this join.</para>
          <programlisting><![CDATA[for $item in doc("order.xml")//item
let $name := doc("catalog.xml")//product[number= $item/@num]/name
return <item num="{$item/@num}" name="{$name}" quan="{$item/@quantity}"/>]]></programlisting>
          <para>Results:</para>
          <screen><![CDATA[
<item num= "557" name= "Fleece Pullover" quan="1" />
<item num="563" name="Floppy Sun Hat" quan="1" />
<item num="443" name="Deluxe Travel Bag" quan="2" />
<!-- and so on -->]]></screen>
          <para>The for clause sets up an iteration through each item from the order. For each item, the let clause goes to the product catalog and gets the name of the product. It does this by finding the product element whose number child equals the item&apos;s num attribute, and selecting its name child. Because the FLWOR iterated six times, the results contain one new item element for each of the six item elements in the order document.</para>

          <section>
            <title>Selecting with Path Expressions*</title>
            <para>For example, the expression:</para>
            <programlisting><![CDATA[doc("catalog.xml")//product[@dept = "ACC"]/name ]]></programlisting>
            <para>can be used to select the names of all the products in the ACC department. You can add multiple predicates (expressions in square brackets) to filter the results based on more than one criterion. You can even add logical and other expressions to predicates, as in:</para>
            <programlisting><![CDATA[doc("catalog.xml")//product[@dept = "ACC" or @dept = "WMN"]/name]]></programlisting>
            <para>A path expression can be the entire content of a query; there is no requirement that there be a FLWOR expression in every query. Path expressions are useful for queries where no new elements and attributes are being constructed and the results don&apos;t need to be sorted. A path expression can be preferable to a FLWOR because it is more compact and some implementations will be able to evaluate it faster.</para>
            <programlisting><![CDATA[]]></programlisting>
            <para></para>


            <para></para>
            <screen><![CDATA[]]></screen>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
          </section>

          <section>
            <title>***</title>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
            <para></para>
            <screen><![CDATA[]]></screen>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
          </section>

        </section> <!-- end of "XQuery Joins" -->

        <section xml:id='xquery.aggregating-and-grouping-vals'>
          <info>
            <title>Aggregating and Grouping Values in XQuery</title>
            <abstract>
              <para>One common use for XQuery is to summarize and group XML data. It is sometimes useful to find the sum, average, or maximum of a sequence of values, grouped by a particular value.</para>
            </abstract>
          </info>
          <para>One common use for XQuery is to summarize and group XML data. It is sometimes useful to find the sum, average, or maximum of a sequence of values, grouped by a particular value. For example, suppose you want to know the number of items contained in an order, grouped by department. The query shown in the example below accomplishes this. It uses a <userinput>group by</userinput> clause to group the items by department, and the <function>sum</function> function to calculate the totals of the quantity attribute values for the items in each department.</para>
          <programlisting><![CDATA[
xquery version "3.0";
for $i in doc("order.xml")//item
let $d := $i/@dept
group by $d
order by $d
return <department name="{$d}" totQuantity="{sum($i/@quantity)}"/>
            ]]></programlisting>
          <para>Results:</para>
          <screen><![CDATA[
<department name="ACC" totQuantity="3"/>
<department name="MEN" totQuantity="2"/>
<!-- and so on -->]]></screen>
          <note>The version declaration on the first line of this example is used to show that use of the group by clause requires at least version 3.0 of XQuery.</note>
        </section> <!-- end of "Aggregating and Grouping Values in XQuery" -->

        <section xml:id='xquery.software'>
          <info>
            <title>XQuery Software</title>
            <abstract>
              <para>...</para>
            </abstract>
          </info>

          <section xml:id='xquery.software.xidel'>
            <info>
              <title><application>xidel</application></title>
              <abstract>
                <para>Xidel is a command line tool to download and extract data from HTML/XML pages using CSS selectors, XPath/XQuery 3.0, as well as querying JSON files or APIs (e.g. REST) using JSONiq.</para>
                <para>It can also create new or transformed XML/HTML/JSON documents.</para>
              </abstract>
            </info>
            <para>There are dependency-free binaries for Windows, Linux and Mac.</para>
            <para>It is a wrapper around my Pascal Internet Tools (see repository internettools), so it supports XPath 2.0, XPath 3.0, XQuery 1.0, XQuery 3.0, JSONiq, CSS selectors and my own extensions/languages (e.g. pattern matching) and if you can compile that project, you can compile Xidel.</para>
            <para>A simple example to return the titles of all pages linked by some starting page:</para>
            <programlisting><![CDATA[xidel http://example.org --follow //a --extract //title]]></programlisting>
            <para>or simpler</para>
            <programlisting><![CDATA[xidel http://example.org -f //a -e //title]]></programlisting>
            <para>The language can be explicitly chosen. For example</para>
            <programlisting><![CDATA[xidel input.html --css 'a'
              xidel input.html --xpath '//a/@href'
              xidel input.html --xquery 'for $var in //a order by $var return $var']]></programlisting>
            <para>returns all links, the target URI of each link or the text of all links alphabetically.</para>
            <para>There are more examples on the above page with binaries, the github wiki and in the directory examples.</para>
            <section>
              <title>Compilation and Installation</title>
              <para>You can compile it by calling build.sh and install it by calling build.sh -t. Alternatively you can compile it with the Lazarus IDE.</para>
              <para>You can call the commands from the .travis.yml script to download dependencies.</para>
            </section>

            <section>
              <title>More <command>xidel</command>*</title>
              <para></para>
              <programlisting><![CDATA[]]></programlisting>
              <para></para>
              <screen><![CDATA[]]></screen>
              <para></para>
              <programlisting><![CDATA[]]></programlisting>
              <para></para>
              <screen><![CDATA[]]></screen>
              <para></para>
              <programlisting><![CDATA[]]></programlisting>
              <para></para>
              <screen><![CDATA[]]></screen>
              <para></para>
            </section>

          </section> <!-- end of "<application>xidel</application>" -->

          <section xml:id='xquery.software.basex'>
            <title>BaseX*</title>
          </section>

        </section>


        <section>
          <title>Linux Implementations</title>
          <variablelist>
            <varlistentry xml:id='basex'>
              <term>basex</term>
              <listitem>
                <para>BaseX is a very fast and light-weight, yet powerful XML database and XPath/XQuery processor, including support for the latest W3C Full Text and Update Recommendations. It supports large XML instances and offers a highly interactive front-end (basexgui). Apart from two local standalone modes, BaseX offers a client/server architecture.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>galax</term>
              <listitem>
                <para>Galax is an implementation of XQuery, the W3C XML Query Language.</para>
                <para>Galax implements XQuery 1.0 as specified by the W3C, as well as XPath 2.0, which is subset of XQuery 1.0.</para>
                <para>Galax is a Schema-aware implementation of XQuery and supports static typing. Also thanks to that, Galax is a really fast implementation of the language.</para>
                <para>Galax supports some advanced XQuery features, such as XML Schema validation, XML updates, XQuery optimization and projection, applications of XQuery to Web services.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>xquilla</term>
              <listitem>
                <para>XQilla is a XQuery and XPath 2 library and command line utility written in C++, implemented on top of the Xerces-C library. It is made available under the terms of the Apache License v2.</para>
                <warning>I have been unable to get xqilla to open an xml document, so the following example is just annecdotal. I have turned to <application linkend='basex'>basex</application> instead.</warning>
                <para>Here is a simple example that you can run by typing: <userinput></userinput></para>
                <programlisting><![CDATA[(: Hello World with XQuery :)
let $i := "Hello World!"
return $i]]></programlisting>
              </listitem>
            </varlistentry>
          </variablelist>
        </section> <!-- </sect3> -->

      </section> <!-- end of "XQuery" -->


    <section xml:id='xml_hypermedia'>
      <info>
        <title>XML Hypermedia</title>
        <abstract>
          <para>...</para>
          <mediaobject>
            <imageobject>
              <imagedata format='GIF' fileref='Electric_files/pictures/Communicating/XQuery_XLink_XSLT.gif'/>
            </imageobject>
            <caption>Overlap of XQuery, XLink and XSLT</caption>
          </mediaobject>
        </abstract>
      </info>
    
    <section sect='sect2' xmlns:xlink="http://www.w3.org/1999/xlink" xml:id='xlink'>
      <title xlink:href="http://www.google.com"
             xlink:type="simple"
             xlink:show="new"
             xlink:actuate="onRequest">XLink</title>
    <para>A simple <emphasis>example</emphasis> of XLink in DocBook:</para>
    <programlisting><![CDATA[<section xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xlink:href="http://www.google.com"
             xlink:type="simple"
             xlink:show="new"
             xlink:actuate="onRequest">XLink</title>
</section> <!-- </sect1> -->]]></programlisting>
    <para>(You must click <emphasis>while</emphasis> holding control (Ctrl) or CapShift down! Ther former opens the link destination in a new tab, the latter in a new window.)</para>
    <para>XLink has unfortunately yet to garner much support in major web browsers. That&apos; the bad news. The good news is that the Firefox browser does include support for simple XLink links. You can create links in Firefox using XLink that approximate the same links supported in HTML. In other words, you can&apos;t create extended links or embedded links, which is somewhat of a bummer. An example:</para>
    <programlisting><![CDATA[<?xml version="1.0"?>
<?xml-stylesheet type="text/css" href="topfive.css"?>

<topfive xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Top Five Movies</title>

  <intro>Following are my top five favorite movies:</intro>

  <item>
    1. <itemLink xlink:type="simple" xlink:show="replace"
    xlink:actuate="onRequest" xlink:title="Number 1"
    xlink:href="http://www.amazon.com/exec/obidos/ASIN/B00004TDTO/">
    Jaws</itemLink>
  </item>

  <item>
    2. <itemLink xlink:type="simple" xlink:show="replace"
    xlink:actuate="onRequest" xlink:title="Number 2"
    xlink:href="http://www.amazon.com/exec/obidos/ASIN/6305499128/">
    Raising Arizona</itemLink>
  </item>

  <item>
    3. <itemLink xlink:type="simple" xlink:show="replace"
    xlink:actuate="onRequest" xlink:title="Number 3"
    xlink:href="http://www.amazon.com/exec/obidos/ASIN/B00003CWTI/">
    Magnolia</itemLink>
  </item>

  <item>
    4. <itemLink xlink:type="simple" xlink:show="replace"
    xlink:actuate="onRequest" xlink:title="Number 4"
    xlink:href="http://www.amazon.com/exec/obidos/ASIN/0767821408/">
    Bottle Rocket</itemLink>
  </item>

  <item>
    5. <itemLink xlink:type="simple" xlink:show="replace"
    xlink:actuate="onRequest" xlink:title="Number 5"
    xlink:href="http://www.amazon.com/exec/obidos/ASIN/B000286RKW/">
    GoodFellas</itemLink>
  </item>

  <conclusion>To find out more about me, please feel free to visit
  <popupLink xlink:type="simple" xlink:show="new"
  xlink:actuate="onRequest" xlink:title="xyz.com"
  xlink:href="http://www.xyz.com/">
  my Web site</popupLink>.
  </conclusion>
</topfive>]]></programlisting>
    

    <section sect='sect3'> <title>Xlink in firefox</title>
    <para>As we know firefox support xlink. When you open a xml file in firefox, firefox wouldn&apos;t treat xlink, for example:</para>
    <programlisting><![CDATA[<element xlink:type="simple" xlink:href="http://chaozhou.wordpress.com&quot; />]]></programlisting>
    <para>as a hyperlink. Actually firefox does support xlink, you should set page style to no style. Here is what should be done:</para>
    <itemizedlist>
      <listitem>Open a xml file.</listitem>
      <listitem>Menu -&gt; View -&gt; Page Style &gt; No Style</listitem>
    </itemizedlist>
    </section> <!-- </sect3> -->
    
    </section> <!-- </sect2> -->
    
    <section sect='sect2' xml:id='xinclude'>
      <title>Including (Text) Files in XML Documents</title>
      <note>Full documentation may be found at <link xlink:href='https://www.w3.org/TR/2003/WD-xinclude-20031110/'>w3</link>, where not enough examples are provided.</note>
      <para>Often enough, you want to include files that keep changing such as code that you are in the process of writing or any other writing that you do.</para>
      <para>Some good parts of xi::include are:</para>
      <itemizedlist>
        <listitem>You can nest XIncludes. That means an included file can contain XIncludes to further modularize the content. This might be useful when keeping a collection of section modules that can be assembled into several different versions of a chapter. Then the chapter file is included in the larger book file.</listitem>
        <listitem>You can select <link linkend='xinclude.part'>parts</link> of an included document instead of the whole content.</listitem>
      </itemizedlist>

      <section>
        <title>Including a Whole File in an Docbook Document</title>
        <para>The <parameter>href</parameter> attribute is used with the name of the file. The following is an example.</para>
        <programlisting><![CDATA[<xi:include
   href="intro.xml"
   xmlns:xi="http://www.w3.org/2001/XInclude" />]]></programlisting>
      </section>
      
      <section xml:id='xinclude.part'>
        <title>Including a Fragment of a File by ID</title>
        <para>The XInclude standard permits you to select part of a file for inclusion instead of the whole file. That is something that system entities were never able to do. In a modular source setup, that means you do not have to break out into a separate file every single piece of text that you want to include somewhere. You can organize your modules into logical units for writing and editing, and the select from within a file if you need just a piece of a module.</para>
        <para>The simplest syntax just has an id value in an xpointer attribute. The following is an example.</para>
        <programlisting><![CDATA[<xi:include  
   href="intro.xml"
   xpointer="Installing"  
   xmlns:xi="http://www.w3.org/2001/XInclude" />]]></programlisting>
        <para>If the following chapter file is named <filename>intro.xml</filename>, then this XInclude will select the section element because it has <userinput>id=&quot;Installing&quot;</userinput>:</para>

<programlisting><![CDATA[<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"> 
<chapter id="intro"> 
<title>Getting Started</title>
<section id="Installing">
  <title>Running the installation</title>
  ...
</section>
</chapter>]]></programlisting>

        <warning>For selections based on id, the included document must have a DOCTYPE declaration that correctly points to the DocBook DTD. It is the DTD that declares that id attributes are of the ID type (the name id is not sufficient). If the file does not have the DOCTYPE or if the DTD cannot be opened, then such references will not resolve.</warning>
        <warning>Earlier draft versions of the XInclude standard used a URI fragment syntax to select part of a document, as in <userinput><![CDATA[href="intro.xml#Installing"]]></userinput>. That syntax is no longer supported. Now the <varname>href</varname> must point to a file, and you must use an xpointer attribute to select part of it.</warning>
        
        <para>More complex selections can be made using the full XPointer syntax. Several XPointer schemes are defined, not all of which are supported by every XInclude processor. Each scheme has a fixed name followed in parentheses by an expression appropriate to that scheme. The following are several examples that are supported by the xsltproc processor.</para>
        <programlisting><![CDATA[xpointer="element(Installing)", xpointer="xpointer(id('Installing'))"]]></programlisting>
        <para>These two examples of the schemes named element() and xpointer() are equivalent to xpointer="Installing". They all select a single element with an id attribute. Be careful not to confuse the xpointer attribute with the xpointer() scheme name (see the Note below).</para>
        <programlisting><![CDATA[xpointer="element(/1/3/2)"]]></programlisting>
        <para>This example selects the second child of the third child of the root element of the included document. For example, an included document could consist of a book root element, which contains only chapter elements that contain only section elements. This inclusion takes the second section of the third chapter of the book. The element() scheme always selects a single element for inclusion.</para>
        <programlisting>xpointer="element(Installing/2)"</programlisting>
        <para>This example selects the second child of the element that has <userinput>id="Installing"</userinput> in the included document. With the element() scheme, you cannot refer to elements by element name, only by position number or id.</para>
        <programlisting><![CDATA[xpointer="xpointer(/book/chapter[3]/*)"]]></programlisting>
        <para>The xpointer() scheme uses a subset of XPath in its expressions. In this case, it selects all of the child elements of the third chapter in the book, but it does not include the chapter element itself. The xpointer() scheme can select more than one element to be included.</para>
        
        <note>Not all processors support all XPointer syntax in XIncludes. One confusing aspect of the XInclude standard is the use of the term xpointer. The standard specifies an xpointer attribute that supports several schemes for selecting content. The element() scheme shown above is one example. Another scheme is named xpointer(), hence the confusion. The xpointer() scheme includes a variant on the XPath language for selecting content, but it never went past the Working Draft stage. While all XInclude processors support the xpointer attribute, only xsltproc supports part of the xpointer() scheme. Check the documentation of your processor to see what parts of XInclude it supports.</note>
  
      </section> <!-- </sect3> -->

      <section>
        <title>Including Fragments Identified through Attribute <userinput>xpointer</userinput> Holding a Path Inside Function <function>xpointer</function></title>
        <note>Notice that the elements or steps in a path must be namespace-qualified, and the namespace must be declared somewhere.</note>
        <para>You use function <function>xpointer</function> like this:</para>
        <programlisting><![CDATA[<xi:include href="cyclopaedia.xml"
  xpointer='xmlns(db=http://docbook.org/ns/docbook)xpointer(/db:book/db:chapter[1]/db:title)'/>]]></programlisting>
      </section>
      
      <section sect='sect3'>
        <title>Including Plain Text Files</title>
        <para>XInclude handles two types of resources: XML and plain-text documents. Each of these resources can be included in a document being processed. XML documents are included as a new fragment of the result tree- no xml declaration etc just the root element- whereas plain-text documents are included as a text node, the whole document lock, stock and barrel. The type of the resource to be included is indicated using a <varname>parse</varname> attribute on an XInclude element, and permitted values are <option>xml</option> and <option>text</option>.</para>
        <para>Technical articles and the like often need to include example code: programs, XML and HTML documents, e-mail messages, and so on. Within these examples characters like &lt; and &amp; should be treated as raw text rather than parsed as markup. To include a document as plain text, you have to add a <userinput>parse=&quot;text&quot;</userinput> attribute to the xi:include element.</para>
        <para>All you need to do is point the href attribute to the filename, and add the <userinput><![CDATA[parse="text"]]></userinput> attribute:</para>
        <programlisting><![CDATA[<programlisting>
  <xi:include  href="my_code.c"  parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>]]></programlisting>
        <para>If you forget the <userinput><![CDATA[parse="text"]]></userinput> attribute, you will get validation errors if the included text has any of the XML special characters.</para>

        <note>To ensure that it is treated as text, any characters in the included content that are special to XML are converted to their respective entities: <![CDATA[&]]>; becomes <![CDATA[&amp;]]>, <![CDATA[<]]> becomes <![CDATA[&lt;]]>, <![CDATA[>]]> becomes <![CDATA[&gt;]]>, and <![CDATA["]]> becomes <![CDATA[&quot;]]>.</note>
        </section>

        <section>
          <title>Fallback</title>
          <para>Documents included from unreliable sources may be temporarily unavailable. The default action for an XInclude processor in such a case is simply to give up and report a fatal error. However, the <tag>xi:include</tag> element may contain an <tag>xi:fallback</tag> element which contains alternate content to be used if the requested resource cannot be found. For example, this <tag>xi:include element</tag> tries to load the file at http://www.whitehouse.gov/malapropisms.xml. However, if somebody deletes that file, then it provides some literal content instead:</para>
          <programlisting><![CDATA[<xi:include href="http://www.whitehouse.gov/malapropisms.xml">
  <xi:fallback>
    <para>This administration is doing everything we can to end the stalemate in
                          an efficient way. We&apos;re making the right decisions to bring the solution
                          to an end.</para>
  </xi:fallback>
</xi:include>]]></programlisting>
          <para>The xi:fallback element can even include another xi:include element. For example, this xi:include element begins by attempting to include the document at <filename>http://www.whitehouse.gov/malapropisms.xml</filename>. However, if somebody deletes that file, then it will try <filename>http://politics.slate.msn.com/default.aspx?id=76886</filename> instead.</para>
          <programlisting><![CDATA[<xi:include href="http://www.whitehouse.gov/malapropisms.xml">
  <xi:fallback>
    <xi:include
      href="http://politics.slate.msn.com/default.aspx?id=76886l" />
    </xi:fallback>
</xi:include>]]></programlisting>
            <note>The <tag>xi:fallback element</tag> is not used if the document can be located but is malformed. That is always a fatal error.</note>
          </section>

          <section sect='sect3'>
        <title>XIncludes and Entities for Filenames</title>
        <para>Although XIncludes are intended to replace <varname>SYSTEM</varname> entities, it is still possible to use regular entities with XInclude. You can declare regular entities for filenames in a file&apos;s DOCTYPE declaration, and then use an entity reference in the <varname>href</varname> attribute of an XInclude element. That lets you declare all the pathname information at the top of the file, where it can be more easily managed than scattered throughout the file in various includes.</para>
        <para>Here is an example:</para>
        <programlisting><![CDATA[<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY intro    "part1/introduction.xml">
<!ENTITY chapter1 "part1/getting_started.xml">
<!ENTITY chapter2 "part2/tweaking_configuration.xml">
<!ENTITY chapter3 "part3/advanced_topics.xml">
]>
<book>
  <title>User Guide</title>
  <para>This guide shows you how to use the software.</para>
  <xi:include  href="&intro;"    xmlns:xi="http://www.w3.org/2001/XInclude"/>
  <xi:include  href="&chapter1;" xmlns:xi="http://www.w3.org/2001/XInclude"/>
  <xi:include  href="&chapter2;" xmlns:xi="http://www.w3.org/2001/XInclude"/>
  <xi:include  href="&chapter3;" xmlns:xi="http://www.w3.org/2001/XInclude"/>
  <!-- some more stuff -->
</book>]]></programlisting>
      </section> <!-- </sect3> -->

          <section>
            <title>How to Resolve Includes</title>

            <section>
              <title>Processing</title>
              <para>XInclusion is not part of XML 1.0 or the XML Infoset. XML parsers do not perform inclusions automatically. To resolve XIncludes, a document must be passed through an XInclude processor that replaces the xi:include elements with the documents they point to. This may be done automatically by a server side process or it might be done on the client side by an XInclude-aware browser. It may be hooked into a custom SAX program using a SAX filter that resolves the XIncludes. However, if you want this to happen, you need to ask for it and install the necessary software to make it possible.</para>
            </section>

            <section>
              <title>Using <command>xsltproc</command> to resolve XIncludes</title>
              <para>The following is an example with <command>xsltproc</command> and its <userinput>--xinclude</userinput> option:</para>
              <programlisting>xsltproc  \
  --xinclude \
  --stringparam base.dir htmlout/  \
  docbook-xsl/html/chunk.xsl  bookfile.xml</programlisting>
              <para>...</para>
            </section>

            <section>
              <title>Using <command>xmllint</command> to resolve XIncludes</title>
              <para>You can use <command>xmllint</command>&apos;s <userinput>--xinclude</userinput> option to generate a version of the document with all the XIncludes resolved. The <command>xmllint</command> tool is included with libxml2 and is available for most platforms. The following example shows how it can be used.</para>
              <programlisting>xmllint  --xinclude  bookfile.xml  &gt;  resolved.xml</programlisting>
              <note>Unlike <command>xsltproc</command>, <command>xmllint</command> does not take an eXtended Stylesheet Language (.xsl) file.</note>
              <para>The result file <filename>resolved.xml</filename> is a copy of the input file <filename>bookfile.xml</filename> but with the XIncludes resolved. The XInclude fallback feature is implemented in <filename>xmllint</filename>, as is the XPointer syntax that is supported in <command>xsltproc</command>.</para>
            </section>

          </section>

        </section> <!-- end of "Including (Text) Files in XML Documents" -->

        <section sect='sect2' xml:id='xpointer'>
          <title>XPointer*</title>
        </section> <!-- </sect2> -->
    
    </section> <!-- </sect1> -->  <!-- end of "XML Hypermedia" -->
    
      <section xml:id='mathml'>
        <title>MathML</title>
  <para>MathML comprises two sets of elements: Presentation Markup, the XML equivalent of TeX math, and Content Markup, which may be used to encode the mathematical structure of an expression, regardless of the way this expression is rendered visually.</para>
  <para>OpenMath is another XML-based language for mathematics that focuses on the semantics (not the presentation).</para>
  <note>Equivalences between MathML and TeX/LaTex are explained <link linkend='mathml_tex_latex'>elsewhere</link> in this document.</note>

  <section sect='sect2'> <title>Including MathML Code</title>
  <para>Write your MathML code between <computeroutput>&lt;math&gt;</computeroutput> and <computeroutput>&lt;/math&gt;</computeroutput>. Use attibutes. Firefox Mozilla seems to understand:</para>
  <programlisting><![CDATA[<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline|block">]]></programlisting>
  <para>(Remember to close the element with a <computeroutput>&lt;/math&gt;</computeroutput> tag.</para>
  </section> <!-- </sect2> -->
  
  <section sect='sect2'> <title>Presentation MathML</title>
  
    <section sect='sect3'> <title>Basic Elements</title>
    <para>MathML most basic elements are <varname>mrow</varname>, <varname>mi</varname>, <varname>mo</varname> and <varname>mn</varname>. Example: x + y = 2 is encoded in MathML as:</para>
    <programlisting><![CDATA[<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline">
  <mrow>
    <mrow>
      <mi>x</mi>
      <mo>+</mo>
      <mi>y</mi>
    </mrow>
    <mo>=</mo>
    <mn>2</mn>
  </mrow>
</math>
]]></programlisting>
    <variablelist>
      <varlistentry> <term>math</term> <listitem><para>top, all-enclosing element. (It may containt children)</para></listitem> </varlistentry>
      <varlistentry> <term>mrow</term> <listitem><para>Use this element to group any number of subexpressions horizontally. (It may containt children)</para></listitem> </varlistentry>
      <varlistentry> <term>mi</term> <listitem><para>Use this element to specify an identifier, that is, the name of a variable, a constant, a function, etc. If this name is just one character long, the identifier is automatically rendered using an italic font, otherwise the name is rendered using a normal, upright, font.</para></listitem> </varlistentry>
      <varlistentry> <term>mo</term> <listitem><para>Use this element to specify an operator (e.g. '+'), a fence (e.g. '{') or a separator (e.g. ','). The appropriate amount of space is added on the left and on the right of an mo depending on the textual contents of this element. Example: if in the above expression you replace &lt;mo&gt;+&lt;/mo&gt; by &lt;mo&gt;,&lt;/mo&gt;, this will suppress the space at the left of the mo element. (The mo element stretches vertically or horizontally when needed to. The amount of stretching is normally automatically determined by the MathML renderer, but it is possible to influence it by specifying the minsize and/or maxsize attributes. Example: <![CDATA[<mo minsize="10">&#8594;</mo>]]> means: make the arrow at least 10 times its normal size.)</para></listitem> </varlistentry>
      <varlistentry> <term>mn</term> <listitem><para>Use this element to specify a numeric literal.</para></listitem> </varlistentry>
      <varlistentry> <term>mtext</term> <listitem><para>Use this element to type plain text</para></listitem> </varlistentry>
    </variablelist>
<!--
[0] MathML stuff must be enclosed in a <math></math> block.
[1] The namespace of all MathML elements is "http://www.w3.org/1998/Math/MathML". Specifying such namespace is mandatory but it will be omitted in this tutorial for brevity.
[2] Note the display="inline" attribute which specifies that the math element is to be displayed inline (like a word in a paragraph). The other value is display="block" which specifies that the math element is to be
displayed as a block (like a paragraph). This attribute has an influence on the typographic rules applied
  by the MathML rendering engine.-->


      <section sect='sect4'> <title>Explicit space between elements</title>
      <para>Leading and trailing whitespace characters are automatically removed from mi, mo, mn, and mtext by the MathML processor. Instead, you need to insert an mspace element in your MathML expression. Its attributes are:</para>
      <variablelist>
        <varlistentry> <term>width</term> <listitem><para>(optional) overall width of the mspace element.</para></listitem> </varlistentry>
        <varlistentry> <term>height</term> <listitem><para>(optional) overall height above the baseline.</para></listitem> </varlistentry>
        <varlistentry> <term>depth</term> <listitem><para>(optional) overall height below the baseline.</para></listitem> </varlistentry>
      </variablelist>
      <para>The value of these attributes is a number followed by one of the following units: em, ex, px, in, cm, mm, pt, pc.</para>
      </section> <!-- </sect4> -->
      
      <section sect='sect4'> <title>Fractions</title>
      <para>Use mfrac holding two children: numerator and denominator, as in:</para>
      <programlisting><![CDATA[<mfrac>
  <mrow>
    <mi>x</mi>
    <mo>-</mo>
    <mn>1</mn>
  </mrow>
  <mn>100</mn>
</mfrac>]]></programlisting>
      <para>(Attribute bevelled="true" may be used to change the style of the fraction.)</para>
      </section> <!-- </sect4> -->

      <section sect='sect4'> <title>Radicals</title>
      <para>MathML has two elements allowing to specify radicals:</para>
      <variablelist>
        <varlistentry> <term>msqrt</term> <listitem><para>Use this element to specify a square root.</para></listitem> </varlistentry>
        <varlistentry> <term>mroot</term> <listitem><para>Use this element to specify a radical with an arbitrary index. Unlike msqrt, mroot may only have two children: the base of the root and its index. If you need more that one element below the radical sign, then use an explicit mrow. Example:</para>
          <programlisting><![CDATA[<mroot>
  <mi>x</mi>
  <mn>3</mn>
</mroot>]]></programlisting>
        </listitem> </varlistentry>
      </variablelist>
      </section> <!-- </sect4> -->

      <section sect='sect4'> <title>Subscripts and superscripts</title>
      <variablelist>
        <varlistentry> <term>msub</term> <listitem><para>Use this element to attach a subscript to a base.</para></listitem> </varlistentry>
        <varlistentry> <term>msup</term> <listitem><para>Use this element to attach a superscript to a base.</para></listitem> </varlistentry>
        <varlistentry> <term>msubsup</term> <listitem><para>Use this element to attach both a subscript and a superscript to a base. Example:</para></listitem> </varlistentry>
      </variablelist>
      <programlisting><![CDATA[<msubsup>
  <mi>x</mi>
  <mi>i</mi>
  <mi>j</mi>
</msubsup>]]></programlisting>
      <para>(Note that for all the above elements, the base is the first child element.)</para>
      </section> <!-- </sect4> -->


      <section sect='sect4'> <title>Underscripts and overscripts</title>
      <para>Underscripts and overscripts are similar to subscripts and superscripts, except that script elements are centered above and/or below the base element.</para>
      <variablelist>
        <varlistentry> <term>munder</term> <listitem><para>Use this element to attach a underscript to a base.</para></listitem> </varlistentry>
        <varlistentry> <term>mover</term> <listitem><para>Use this element to attach a overscript to a base.</para></listitem> </varlistentry>
        <varlistentry> <term>munderover</term> <listitem><para>Use this element to attach both a underscript and a overscript to a base.</para></listitem> </varlistentry>
      </variablelist>
      </section> <!-- </sect4> -->

      <section sect='sect4'> <title>Alignment (matrices and equations)</title>
      <para>Matrices are specified using the mtable element which is similar to the simple — no tbody — XHTML table. An mtable table element contains mtr row elements and an mtr element contains mtd cell elements. Note that by default, an mtable element has no borders at all. This is why you'll generally need to add an mo containing a fence character (e.g. '[', ']', '(', ')', '|') before and after the mtable when you specify a matrix or the determinant of a matrix. Example:</para>
      <programlisting><![CDATA[<mrow>
  <mo>[</mo>
  <mtable>
    <mtr> <mtd> <mn>1</mn> </mtd> <mtd> <mn>0</mn> </mtd> <mtd> <mn>0</mn> </mtd> </mtr>
    <mtr> <mtd> <mn>0</mn> </mtd> <mtd> <mn>1</mn> </mtd> <mtd> <mn>0</mn> </mtd> </mtr>
    <mtr> <mtd> <mn>0</mn> </mtd> <mtd> <mn>0</mn> </mtd> <mtd> <mn>1</mn> </mtd> </mtr>
  </mtable>
  <mo>]</mo>
</mrow>]]></programlisting>
      <para>The MathML mtable element is fairly generic. Use it whenever you need to layout elements in a rectangular grid. This feature is of course useful to specify matrices. It is also useful to specify a set of equations.</para>
      <para>Replacing an mtr row element by an mlabeledtr labeled row element allows to use the first mtd cell element of this row as the caption of the equation.</para>
      </section> <!-- </sect4> -->
      
      <section sect='sect4'> <title>Other, less useful, elements</title>
      <variablelist>
        
        <varlistentry> <term>ms</term> <listitem><para>Use this element to specify a quoted string literal. Example: &lt;ms&gt;Hello word!&lt;/ms&gt;</para></listitem> </varlistentry>
        
        <varlistentry xml:id='mfenced'> <term>mfenced</term> <listitem><para>The mfenced element is a shorthand notation for common forms of mrow. The open, separators and close attributes of an mfenced element specify the opening fence added before its first child element, the separators added between child elements and the closing fence added after its last child element. By default, the values of these attributes are "(", "," and ")".For instance, to get (x, y, z) type:</para>
        <programlisting><![CDATA[<mfenced>
  <mi>x</mi>
  <mi>y</mi>
  <mi>z</mi>
</mfenced>]]></programlisting>
        </listitem>
        </varlistentry>
        
        <varlistentry> <term>menclose</term> <listitem><para>The menclose element allows to draw lines, typically a box, around its child elements. The notation attribute of an menclose element specify which kind of lines are drawn around the child elements. The allowed values for this attribute are: longdiv (default value), actuarial, radical, box, round- edbox, circle, left, right, top, bottom, updiagonalstrike, downdiagonalstrike, verticalstrike, horizontalstrike. Example:</para>
        <programlisting><![CDATA[<menclose notation="box">
  <mi>n</mi>
  <mo>!</mo>
</menclose>]]></programlisting>
</listitem> </varlistentry>

        <varlistentry> <term>mpadded</term> <listitem><para>The mpadded element allows to add padding, that is extra space, around its child elements. It&apos; an alternative to using mspace. The attributes allowing to specify the padding are:</para>
        <itemizedlist>
          <listitem>width: This optional attribute specifies the overall width of the mpadded element. The value of this attribute, as well as the values of the height and depth attributes (but not the lspace attribute) described below, may start with a "+" sign which means: add specified amount to the intrinsic size. </listitem>
          <listitem>lspace: This optional attribute specifies the amount of space added before the first child of the mpadded element. (There is no rspace attribute. The amount of space added after the last child of the mpadded element is: value of the above width attribute - intrinsic width of all the child elements - value of this lspace attribute.)</listitem>
          <listitem>height: This optional attribute specifies the overall height above the baseline.</listitem>
          <listitem>depth: This optional attribute specifies the overall height below the baseline.</listitem>
        </itemizedlist>
      </listitem></varlistentry>

      <varlistentry> <term>mphantom</term> <listitem><para>The mphantom element transforms its descendant elements into &apos;phantoms&apos;: they are there, they occupy some space, but you cannot see them. The mphantom element is often the only way to properly align some elements.</para></listitem> </varlistentry>

      <varlistentry> <term>mstyle</term> <listitem><para>The mstyle element allows to specify attributes which are intended to be inherited by all its descendant elements. As such, the mstyle element supports all the attributes of all the other MathML elements. The most commonly used attributes are those used to style the mi, mo, mn and mtext text container elements:</para>
      <itemizedlist>
        <listitem>mathvariant: normal | bold | italic | bold-italic | double-struck | bold-fraktur | script | bold-script | fraktur | sans-serif | bold-sans-serif | sans-serif-italic | sans-serif-bold- italic | monospace</listitem>
        <listitem>mathsize: small | normal | big | number v-unit </listitem>
        <listitem>mathcolor: #rgb | #rrggbb | html-color-name</listitem>
        <listitem>mathbackground: #rgb | #rrggbb | html-color-name </listitem>
      </itemizedlist>
      </listitem></varlistentry>
          
      <varlistentry> <term>maligngroup</term> <listitem><para>Use this element to properly align a set of equations. Each inserted maligngroup specifies a <quote>sub-column</quote> within the column of an mtable. The groupalign attribute of the mtable element specifies the horizontal alignment within each <quote>sub-column</quote>. The value of the groupalign attribute has the following syntax: one <quote>{...}</quote> group per column. A <quote>{...}</quote> group contains one alignment specification per sub-column (that is, per maligngroup). Alignment specifications are: left, center or right.</para></listitem> </varlistentry>
    </variablelist>
    </section> <!-- </sect4> -->
    </section> <!-- </sect3> -->
    
    <section sect='sect3'> <title>Examples of Presentation MathML*</title> </section> <!-- </sect3> -->
    
    <section sect='sect3'> <title>Mathematics style attributes common to token elements</title>
    <para>MathML 2.0 introduces four new mathematics style attributes. These attributes are valid on all presentation token elements except mspace and mglyph, and on no other elements except mstyle. The attributes are:</para>
    <!-- xml:id="ex.calstable" --> <table frame='all'>
      <title>Styles Table</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <colspec colname='Name'/>
        <colspec colname='Value'/>
        <tbody>
          <row> <entry>mathvariant:</entry> <entry>normal | bold | italic | bold-italic | double-struck | bold-fraktur | script | bold-script | fraktur | sans-serif | bold-sans-serif | sans-serif-italic | sans-serif-bold-italic | monospace         (default is normal except on &lt;mi&gt;)</entry> </row>
          <row> <entry>mathsize:</entry> <entry>small | normal | big | number v-unit (default=inherited)</entry> </row>
          <row> <entry>mathcolor:</entry> <entry>#rgb | #rrggbb | html-color-name (default=inherited)</entry></row>
          <row> <entry>mathbackground:</entry> <entry>#rgb | #rrggbb | html-color-name         (default=inherited)</entry></row>
        </tbody>
      </tgroup>
    </table>
    </section> <!-- </sect3> -->
    
    <section sect='sect3'> <title>Space (mspace)</title>
    <!-- xml:id="ex.calstable" --> <table frame='all'> <title>Space(s)</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname="Name"/>
      <colspec colname="Value"/>
      <tbody>
        <row> <entry>width:</entry> <entry>number h-unit | namedspace (default=0em)</entry> </row>
        <row> <entry>height:</entry> <entry>number v-unit (default=0em)</entry> </row>
        <row> <entry>depth:</entry> <entry>number v-unit (default=0em)</entry> </row>
        <row>
          <entry>linebreak:</entry> <entry>auto | newline | indentingnewline | nobreak | goodbreak | badbreak (default=auto)</entry>
        </row>
      </tbody>
    </tgroup>
    </table>
    <para>The linebreak attribute is used to give a linebreaking hint to a visual renderer. The default value is &lt;auto&gt;, which indicates that a renderer should use whatever default linebreaking algorithm it would normally use. The meanings of the other values are described in the table below:</para>
    <!-- xml:id="ex.calstable" --> <table frame='all'> <title>Linebreak(s)</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname="Value"/>
      <colspec colname="Description"/>
      <tbody>
        <row> <entry>newline:</entry> <entry>start a new line and do not indent</entry> </row>
        <row> <entry>indentingnewline:</entry> <entry>start a new line and do indent</entry> </row>
        <row> <entry>nobreak:</entry> <entry>do not allow a linebreak here</entry> </row>
        <row> <entry>goodbreak:</entry> <entry>if a linebreak is needed on the line, here is a good spot</entry> </row>
        <row> <entry>badbreak:</entry> <entry>if a linebreak is needed on the line, try to avoid breaking here</entry> </row>
      </tbody>
    </tgroup>
    </table>
    </section> <!-- </sect3> -->


  </section> <!-- </sect2> -->
  <section sect='sect2'> <title>Content MathML</title>
    <para>NOTE: Content MathML is not commonly recognized by browsers, but you can use a <filename>ctop.xsl</filename> file to render it.</para>
  <para>Content MathML represents mathematical objects as expression trees. In each branch, an operator is applied to its sub-objects. For example, the sum &apos;x+y&apos; can be thought of as an application of the addition operator (+) to two arguments x and y. And the expression &apos;cos(a)&apos; as the application of the cosine operator to the angle a.</para>
  <para>As a general rule, the terminal nodes in the tree represent basic mathematical objects such as numbers, variables, arithmetic operations and so on. The internal nodes in the tree represent function application or other mathematical constructions that build up a compound objects. [Function application provides the most important example; an internal node might represent the application of a function to several arguments, which are themselves represented by the nodes underneath the internal node.]</para>
  <para>MathML makes explicit a relatively small number of commonplace mathematical constructs, chosen carefully to be sufficient in a large number of applications. In addition, it provides a mechanism for referring to mathematical concepts outside of the base collection, allowing them to be represented, as well.</para>
  
    <section sect='sect3'> <title>Including Content MathML</title> </section> <!-- </sect3> -->
    <section sect='sect3'> <title>Content MathML examples</title> </section> <!-- </sect3> -->
    <section sect='sect3'> <title>Strict Content Markup</title> </section> <!-- </sect3> -->
    <section sect='sect3'> <title>Content Dictionaries</title> </section> <!-- </sect3> -->
    <section sect='sect3'> <title>Containers aka Constructors</title> </section> <!-- </sect3> -->
  </section> <!-- </sect2> -->
  
  <section sect='sect2'>
    <title>From MathML to (La)TeX</title>
    <para>The MathML Module is an extension to DocBook XML V4.1.2. It adds support for MathML in equation markup. This module adds support for MathML in the DocBook XML DTD. With this module, elements from the MathML namespace may be used inside <tag>equation</tag> and <tag>inlineequation</tag> elements.</para>
    <para>The XSLT MathML Library, <application>xsltml</application>, provides the XSLT developer with a set of XSLT templates for MathML 2.0 to LaTeX translation. These are implemented purely in XSLT, that is they do not use any extensions. <application>xsltml</application> is a SourceForge project.</para>
    <para>The XSLT MathML Library consist of seven files:</para>
    <itemizedlist>
      <listitem>mmltex.xsl: main file</listitem>
      <listitem>tokens.xsl</listitem>
      <listitem>glayout.xsl: fractions...</listitem>
      <listitem>scripts.xsl: subscript, superscript...</listitem>
      <listitem>tables.xsl</listitem>
      <listitem>entities.xsl</listitem>
      <listitem>cmarkup.xsl: content</listitem>
    </itemizedlist>
    <note>To transform to plain TeX format, these templates would have to be reworded. Neither is a valid LaTeX preamble generated, oh bother!</note>
  </section> <!-- </sect2> -->
  
  </section> <!-- </sect1> -->

  <section xml:id='svg'>
    <title>SVG</title>
    <!-- sample svg -->
  <mediaobject>
    <imageobject>
      <imagedata>
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" version="1.1">
          <rect x="10" y="10" width="80" height="80" style="fill:aqua; stroke:blue; stroke-width: 2; fill-opacity: 0.5; stroke-opacity: 0.9"/>
        </svg>
      </imagedata>
    </imageobject>
  </mediaobject>
  
  
<mediaobject>
  <imageobject>
    <imagedata>
      <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" version="1.1">
        <rect x="10" y="10" width="200" height="20" stroke="black" fill="none">
          <animate attributeName="width" attributeType="XML" from="200" to="20"
            begin="0s" dur="5s" fill="freeze" />
        </rect>
      </svg>
    </imagedata>
  </imageobject>
</mediaobject>
  
    
    <section sect='sect2'>
    <title>Introduction</title>
    <section sect='sect2'>
      <title>Overview and a Simple Example</title>
      <para>SVG, for Scalable Vector Graphics, is an XML-derived language that makes it possible to represent graphic information in a compact, portable form. All elements are defined between <computeroutput>&lt;svg&gt;</computeroutput> tags, as in:</para>
      <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg">
  ...
</svg>]]></programlisting>
<para>or, more generally:</para>
<programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  ...
</svg>]]></programlisting>
      <para>The functionality partially overlaps the graphic operators of PostScript and seems to improve on them and make right some of its shortcomings. For instance, SVG recognizes the whole gamut of units (mm, cm, pixels, points etc.), whereas PostScript only recognizes points.</para>
      <bridgehead>A Simple Example</bridgehead>
      <para>Below there is the code for a web page without an xml declarations (<userinput><![CDATA[<?xml version="1.0" encoding="UTF-8"?>]]></userinput>) or an SVG namespace declaration inside an opening tag (<userinput><![CDATA[xmlns:svg="http://www.w3.org/2000/svg"]]></userinput>)...</para>
      <programlisting><![CDATA[<html>
  <body>
    <h1>My first SVG</h1>
      <svg width="100" height="100">
        <circle cx="50" cy="50" r="40" stroke="green" stroke-width="4" fill="yellow" />
      </svg>
  </body>
</html>
      ]]></programlisting>
      <para>, which should show a page with a header and a yellow-filled, green-lined triangle like the picture below.</para>
      <note>ePUB 2, unlike ePUB 3, does not render SVG pictures.</note>
      <mediaobject>
        <imageobject>
          <imagedata>
            <svg width="100" height="100">
              <circle cx="50" cy="50" r="40" stroke="green" stroke-width="4" fill="yellow" />
            </svg>
          </imagedata>
        </imageobject>
      </mediaobject>
      
      
      <para>Next, where does SVG fit into the graphics world?</para>
      </section> <!-- </sect3> -->
    
      <section sect='sect3'>
      <title>Bitmap and Vector Graphics</title>
      <para>We need to understand that there are two ways of holding an image in a file or two kinds of graphic file: bitmap and vector.</para>
      <para>If you think of producing an image on graph paper, bitmap graphics work by describing which squares should be filled in with which colors. Vector graphics on the other hand work by describing the grid points at which lines or curves are to be drawn. Some people describe vector graphics as a set of instructions for a drawing, while bitmap graphics (rasters) are points of color in specific places. Vector graphics &quot;understand&quot; what they are - a square &quot;knows&quot; it&apos;s a square and text &quot;knows&quot; that it is text. Because they are objects rather than a series of pixels, vector objects can change their shape and color, whereas bitmap graphics cannot.</para>
      <!--
      <para>Another way to think of raster graphics is as paint on canvas, while vector graphics are lines and shapes made of a stretchable material which can be moved around on a background.</para>
      -->
      <para>In bitmap graphics, an image is represented as a rectangular array or matrix of picture elements, points, or pixels. Each pixel is represented either by its color value, by its gray value, or by a bit (the choice between 0 and 1) denoting whether it is black or white. This array is often stored in a compressed format. Since most modern display devices are also raster devices, that is bitmap, displaying an image requires a viewer program to do little more than uncompress the bitmap and transfer it to the screen.</para>

      <para>In a vector graphic system, an image is described as a series of geometric shapes. Rather than receiving a ready-made set of pixels, a vector viewing program receives commands to draw shapes at specified sets of coordinates.</para>
      <para>This is a simple SVG program for drawing a rectangle:</para>
      <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" version="1.1">
  <rect x="10" y="10" width="80" height="80" style="fill:none; stroke:blue;"/>
</svg>]]></programlisting>

      </section> <!-- </sect3> -->

 <section sect='sect3'><title>SVG&apos;s Role</title>
        <para>In 1998, the World Wide Web Consortium formed a working group to develop a representation of vector graphics as an XML application. Because SVG is an XML application, the information about an image is stored as plain text, and it brings the advantages of XML&apos;s openness, transportability, and interoperability.</para>
        <para>Since it is an XML application, SVG cooperates with other XML applications. A mathematical book, for example, could use XSL Formatting Objects for explanatory text, MathML to describe equations, and SVG to generate the graphs for the equations, all three XML languages.</para>
        <para>The SVG working group&apos;s specification is an official World Wide Web Consortium Recommendation. Some applications such as Adobe Illustrator and Jasc WebDraw export drawings in SVG format. On the Web, SVG viewer plug-ins let users view presentations with many of the same scripting and animation capabilities that Flash has.  Since the SVG files are XML, text in the SVG display is available to any user agent that can parse XML.</para>
      </section> <!-- </sect3> -->    
      
      <section sect='sect3'> <title>Including SVG code in other XML documents</title>
        <para>This is the preceding SVG code included in a DocBook file:</para>
        <programlisting><![CDATA[  <mediaobject>
    <imageobject>
      <imagedata>
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" version="1.1">
          <rect x="10" y="10" width="80" height="80" style="fill:none; stroke:blue;"/>
        </svg>
      </imagedata>
    </imageobject>
  </mediaobject>]]></programlisting>
  <para>In an HTML page you just write your code between opening and closing tags:</para>
  <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
...
</svg>]]></programlisting>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>SVG Units</title>
        <para></para>
        <para>em: The font size of the default font, usually equivalent to the height of a character</para>
        <para>ex: The height of the letter x</para>
        <para>px: Pixels</para>
        <para>pt: Points (1/72 of an inch)</para>
        <para>pc: Picas (1/6 of an inch)</para>
        <para>cm: Centimeters</para>
        <para>mm: Millimeters</para>
        <para>in: Inches</para>
        
        <para>(Angles are given in degrees, not radians.)</para>
      </section> <!-- </sect3> -->

    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>A Tour of SVG Shapes and Features (w3schools)</title>
      <section sect='sect3'>
        <title>Rectangle - <tag>rect</tag></title>
        <para>The <tag>rect</tag> element is used to create a rectangle and variations of a rectangle shape.</para>
        <bridgehead>Example 1:</bridgehead>
        <programlisting><![CDATA[<svg width="400" height="110">
  <rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />
</svg>  ]]></programlisting>
        <bridgehead>Example 2:</bridgehead>
        <programlisting><![CDATA[<svg width="400" height="180">
  <rect x="50" y="20" width="150" height="150"
  style="fill:blue;stroke:pink;stroke-width:5;fill-opacity:0.1;stroke-opacity:0.9" />
</svg>]]></programlisting>
        <bridgehead>Example 3:</bridgehead>
        <programlisting><![CDATA[<svg width="400" height="180">
  <rect x="50" y="20" width="150" height="150"
  style="fill:blue;stroke:pink;stroke-width:5;opacity:0.5" />
</svg>]]></programlisting>
        <bridgehead>Example 4:</bridgehead>
        <programlisting><![CDATA[<svg width="400" height="180">
  <rect x="50" y="20" rx="20" ry="20" width="150" height="150"
  style="fill:red;stroke:black;stroke-width:5;opacity:0.5" />
</svg>]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Circle - <tag>circle</tag></title>
        <para>The <tag>circle</tag> element is used to create a circle:</para>
        <bridgehead>Example:</bridgehead>
        <programlisting><![CDATA[ <svg height="100" width="100">
  <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" />
</svg> ]]></programlisting>
        <itemizedlist>
          <listitem>The <parameter>cx</parameter> and <parameter>cy</parameter> attributes define the x and y coordinates of the center of the circle. If cx and cy are omitted, the circle&apos;s center is set to (0,0)</listitem>
          <listitem>The <parameter>r</parameter> attribute defines the radius of the circle</listitem>
        </itemizedlist>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Ellipse - <tag>ellipse</tag></title>
        <para>The <tag>ellipse</tag> element is used to create an ellipse. An ellipse is closely related to a circle. The difference is that an ellipse has an <parameter>x</parameter> and a <parameter>y</parameter> radius that differs from each other, while a circle has equal x and y radius:</para>
        <bridgehead>Example 1:</bridgehead>
        <programlisting><![CDATA[<svg height="140" width="500">
  <ellipse cx="200" cy="80" rx="100" ry="50"
  style="fill:yellow;stroke:purple;stroke-width:2" />
</svg>]]></programlisting>
        <itemizedlist>
          <listitem>The <parameter>cx</parameter> attribute defines the x coordinate of the center of the ellipse</listitem>
          <listitem>The <parameter>cy</parameter> attribute defines the y coordinate of the center of the ellipse</listitem>
          <listitem>The <parameter>rx</parameter> attribute defines the horizontal radius</listitem>
          <listitem>The <parameter>ry</parameter> attribute defines the vertical radius</listitem>
        </itemizedlist>
        <bridgehead>Example 2:</bridgehead>
        <para>The following example creates three ellipses on top of each other:</para>
        <programlisting><![CDATA[<svg height="150" width="500">
  <ellipse cx="240" cy="100" rx="220" ry="30" style="fill:purple" />
  <ellipse cx="220" cy="70" rx="190" ry="20" style="fill:lime" />
  <ellipse cx="210" cy="45" rx="170" ry="15" style="fill:yellow" />
</svg>]]></programlisting>
        <bridgehead>Example 3:</bridgehead>
        <para>The following example combines two ellipses (one yellow and one white):</para>
        <programlisting><![CDATA[<svg height="100" width="500">
  <ellipse cx="240" cy="50" rx="220" ry="30" style="fill:yellow" />
  <ellipse cx="220" cy="50" rx="190" ry="20" style="fill:white" />
</svg>]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Line - <tag>line</tag></title>
        <bridgehead>Example:</bridgehead>
        <programlisting><![CDATA[<svg height="210" width="500">
  <line x1="0" y1="0" x2="200" y2="200" style="stroke:rgb(255,0,0);stroke-width:2" />
</svg>]]></programlisting>
        <itemizedlist>
          <listitem>The <parameter>x1</parameter> attribute defines the start of the line on the x-axis</listitem>
          <listitem>The <parameter>y1</parameter> attribute defines the start of the line on the y-axis</listitem>
          <listitem>The <parameter>x2</parameter> attribute defines the end of the line on the x-axis</listitem>
          <listitem>The <parameter>y2</parameter> attribute defines the end of the line on the y-axis</listitem>
        </itemizedlist>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>*</title>
        <para>...</para>
        <bridgehead>Example 1:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 2:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 3:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 4:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Polygon - <tag>polygon</tag></title>
        <para>The <tag>polygon</tag> element is used to create a graphic that contains at least three sides. Polygons are made of straight lines, and the shape is <quote>closed</quote> (all the lines connect up).</para>
        <bridgehead>Example 1:</bridgehead>
        <para>The following example creates a polygon with three sides:</para>
        <programlisting><![CDATA[<svg height="210" width="500">
  <polygon points="200,10 250,190 160,210" style="fill:lime;stroke:purple;stroke-width:1" />
</svg>]]></programlisting>
        <bridgehead>Example 2:</bridgehead>
        <para>Use the <tag>polygon</tag> element to create a star:</para>
        <note>Notice property <parameter linkend='fill-rule'>fill-rule</parameter>...</note>
        <programlisting><![CDATA[<svg height="210" width="500">
  <polygon points="100,10 40,198 190,78 10,78 160,198"
  style="fill:lime;stroke:purple;stroke-width:5;fill-rule:nonzero;" />
</svg>]]></programlisting>
        <bridgehead>Example 3:</bridgehead>
        <para>Change the fill-rule property to <literal>evenodd</literal>:</para>
        <programlisting><![CDATA[<svg height="210" width="500">
  <polygon points="100,10 40,198 190,78 10,78 160,198"
  style="fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;" />
</svg>]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Polyline - <tag>polyline</tag></title>
        <para>The <tag>polyline</tag> element is used to create any shape that consists of only straight lines (that is connected at several points):</para>
        <bridgehead>Example 1:</bridgehead>
        <programlisting><![CDATA[<svg height="200" width="500">
  <polyline points="20,20 40,25 60,40 80,120 120,140 200,180"
  style="fill:none;stroke:black;stroke-width:3" />
</svg>]]></programlisting>
        <bridgehead>Example 2:</bridgehead>
        <para>Another example with only straight lines:</para>
        <programlisting><![CDATA[<svg height="180" width="500">
  <polyline points="0,40 40,40 40,80 80,80 80,120 120,120 120,160"
  style="fill:white;stroke:red;stroke-width:4" />
</svg>]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Path - <tag>path</tag></title>
        <para>The <tag>path</tag> element is used to define a path.</para>
        <para>The following commands are available for path data:</para>
        <itemizedlist>
          <listitem>M = moveto</listitem>
          <listitem>L = lineto</listitem>
          <listitem>H = horizontal lineto</listitem>
          <listitem>V = vertical lineto</listitem>
          <listitem>C = curveto</listitem>
          <listitem>S = smooth curveto</listitem>
          <listitem>Q = quadratic Bézier curve</listitem>
          <listitem>T = smooth quadratic Bézier curveto</listitem>
          <listitem>A = elliptical Arc</listitem>
          <listitem>Z = closepath</listitem>
        </itemizedlist>
        <note>All of the commands above can also be expressed with lower letters. Capital letters means absolutely positioned, lower cases means relatively positioned.</note>
        <bridgehead>Example 1:</bridgehead>
        <para>The example below defines a path that starts at position 150,0 with a line to position 75,200 then from there, a line to 225,200 and finally closing the path back to 150,0:</para>
        <programlisting><![CDATA[<svg height="210" width="400">
  <path d="M150 0 L75 200 L225 200 Z" />
</svg>]]></programlisting>
        <bridgehead>Example 2:</bridgehead>
        <para>Bézier curves are used to model smooth curves that can be scaled indefinitely. Generally, the user selects two endpoints and one or two control points. A Bézier curve with one control point is called a quadratic Bézier curve and the kind with two control points is called cubic.</para>
        <para>The following example creates a quadratic Bézier curve.</para>
        <programlisting><![CDATA[<svg height="400" width="450">
  <path id="lineAB" d="M 100 350 l 150 -300" stroke="red"
  stroke-width="3" fill="none" />
  <path id="lineBC" d="M 250 50 l 150 300" stroke="red"
  stroke-width="3" fill="none" />
  <path d="M 175 200 l 150 0" stroke="green" stroke-width="3"
  fill="none" />
  <path d="M 100 350 q 150 -300 300 0" stroke="blue"
  stroke-width="5" fill="none" />
  <!-- Mark relevant points -->
  <g stroke="black" stroke-width="3" fill="black">
    <circle id="pointA" cx="100" cy="350" r="3" />
    <circle id="pointB" cx="250" cy="50" r="3" />
    <circle id="pointC" cx="400" cy="350" r="3" />
  </g>
  <!-- Label the points -->
  <g font-size="30" font-family="sans-serif" fill="black" stroke="none"
  text-anchor="middle">
    <text x="100" y="350" dx="-30">A</text>
    <text x="250" y="50" dy="-10">B</text>
    <text x="400" y="350" dx="30">C</text>
  </g>
</svg>]]></programlisting>
        <para>Complex? YES!!!! Because of the complexity involved in drawing paths it is highly recommended to use an SVG editor to create complex graphics.</para>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Text - <tag>text</tag></title>
        <para>The <tag>text</tag> element is used to define a text.</para>
        <bridgehead>Example 1:</bridgehead>
        <programlisting><![CDATA[<svg height="30" width="200">
  <text x="0" y="15" fill="red">I love SVG!</text>
</svg>]]></programlisting>
        <bridgehead>Example 2:</bridgehead>
        <para>Rotate the text:</para>
        <note>Notice how property <parameter linkend='svg_transformations'>transform</parameter> effects a geometrical transformation...</note>
        <programlisting><![CDATA[<svg height="60" width="200">
  <text x="0" y="15" fill="red" transform="rotate(30 20,40)">I love SVG</text>
</svg>]]></programlisting>
        <bridgehead>Example 3:</bridgehead>
        <para>The <tag>text</tag> element can be arranged in any number of sub-groups with the <tag>tspan</tag> element. Each <tag>tspan</tag> element can contain different formatting and position.</para>
        <para>Text on several lines (with the <tag>tspan</tag> element):</para>
        <programlisting><![CDATA[<svg height="90" width="200">
  <text x="10" y="20" style="fill:red;">Several lines:
    <tspan x="10" y="45">First line.</tspan>
    <tspan x="10" y="70">Second line.</tspan>
  </text>
</svg>]]></programlisting>
        <bridgehead>Example 4:</bridgehead>
        <para>Text as a link (with the <tag>a</tag> element):</para>
        <programlisting><![CDATA[<svg height="30" width="200" xmlns:xlink="http://www.w3.org/1999/xlink">
  <a xlink:href="https://www.w3schools.com/graphics/" target="_blank">
    <text x="0" y="15" fill="red">I love SVG!</text>
  </a>
</svg>]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Stroke Properties</title>
        <para>SVG offers a wide range of stroke properties. In this chapter we will look at the following:</para>
        <variablelist>
          <varlistentry>
            <term><parameter>stroke</parameter></term>
            <listitem>
              <para>The <parameter>stroke</parameter> property defines the color of a line, text or outline of an element:</para>
              <programlisting><![CDATA[<svg height="80" width="300">
  <g fill="none">
    <path stroke="red" d="M5 20 l215 0" />
    <path stroke="black" d="M5 40 l215 0" />
    <path stroke="blue" d="M5 60 l215 0" />
  </g>
</svg>]]></programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><parameter>stroke-width</parameter></term>
            <listitem>
              <para>The <parameter>stroke-width</parameter> property defines the thickness of a line, text or outline of an element:</para>
              <programlisting><![CDATA[<svg height="80" width="300">
  <g fill="none" stroke="black">
    <path stroke-width="2" d="M5 20 l215 0" />
    <path stroke-width="4" d="M5 40 l215 0" />
    <path stroke-width="6" d="M5 60 l215 0" />
  </g>
</svg>]]></programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><parameter>stroke-linecap</parameter></term>
            <listitem>
              <para>The <parameter>stroke-linecap</parameter> property defines different types of endings to an open path:</para>
              <programlisting><![CDATA[<svg height="80" width="300">
  <g fill="none" stroke="black" stroke-width="6">
    <path stroke-linecap="butt" d="M5 20 l215 0" />
    <path stroke-linecap="round" d="M5 40 l215 0" />
    <path stroke-linecap="square" d="M5 60 l215 0" />
  </g>
</svg>]]></programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><parameter>stroke-dasharray</parameter></term>
            <listitem>
              <para>The <parameter>stroke-dasharray</parameter> property is used to create dashed lines:</para>
              <programlisting><![CDATA[<svg height="80" width="300">
  <g fill="none" stroke="black" stroke-width="4">
    <path stroke-dasharray="5,5" d="M5 20 l215 0" />
    <path stroke-dasharray="10,10" d="M5 40 l215 0" />
    <path stroke-dasharray="20,10,5,5,5,10" d="M5 60 l215 0" />
  </g>
</svg>]]></programlisting>
            </listitem>
          </varlistentry>
        </variablelist>
        
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>*</title>
        <para>...</para>
        <bridgehead>Example 1:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 2:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 3:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 4:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Gradients: Linear and Radial*</title>
        <para>...</para>
        <bridgehead>Example 1:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 2:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 3:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 4:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>*</title>
        <para>...</para>
        <bridgehead>Example 1:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 2:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 3:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
        <bridgehead>Example 4:</bridgehead>
        <programlisting><![CDATA[]]></programlisting>
      </section> <!-- </sect3> -->
    </section> <!-- </sect2> --> <!-- end of "A Tour of SVG Shapes and Features (w3schools)" -->
    
    <section sect='sect2'>
      <title>Coordinates</title>
      <para>SVG pictures are painted on an infinite canvas. Here we&apos;ll discuss how you tell a viewer program where your picture is located, what its dimensions are, and how you locate points within that area.</para>
      <section sect='sect3'>
        <title>Coordinates</title>
        <para>In a normal cartesian coordinate system the point x=0, y=0 is at the lower left corner of the graph. In the SVG coordinate system the point x=0, y=0 is the upper left corner. The y-axis is thus reversed compared to a normal graph coordinate system. As y increases in SVG, the points, shapes etc. move down, not up.</para>
      </section> <!-- </sect3> -->
        
      <section sect='sect3'>
        <title>The Viewport</title>
        <para>The area of the canvas that your document intends to use is called the viewport. You establish the size of this viewport with the width and height attributes on the &lt;svg&gt; element. The values of these attributes can be simply a number, which is presumed to be in pixels. This is said to be specified in user coordinates. You may also specify width and height as a number followed by a unit identifier.</para>
        <para>Examples:</para>
        <programlisting><![CDATA[<svg width="200" height="150">
<svg width="200px" height="200px">]]></programlisting>
        <para>or:</para>
        <programlisting><![CDATA[<svg width="2cm" height="3cm">]]></programlisting>
        <para>(If you have one &lt;svg&gt; element nested within another &lt;svg&gt; element, the nested tag may also specify its width and height as a percentage, measured in terms of the enclosing element.)</para>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Using Default User Coordinates</title>
        <para>When you do not use unit specifiers on your &lt;svg&gt; element, the viewer sets up a coordinate system where the horizontal, or x-coordinate, increases as you go to the right, and the vertical, or y-coordinate, increases as you move vertically downward. The upper left corner of the viewport is defined to have an x- and y-coordinate of zero. This point, written as (0, 0) is also called the origin.</para>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Specifying User Coordinates for a Viewport (viewBox)</title>
        <para>In the examples so far, numbers without units have been considered to be pixels. Sometimes this is not what you want. For example, you might want to set up a system where each user coordinate represents one-sixteenth of a centimeter. (We&apos;re using this coordinate system to prove a point, not to show a paragon of good design.) In this system, a square that is 40 units by 40 units will display as 2.5 centimeters on a side.</para>
        <para>To accomplish this effect, you set the viewBox attribute on the &lt;svg&gt; element. The value of this attribute consists of four numbers that represent the minimum x-coordinate, minimum y-coordinate, width, and height of the user coordinate system that you want to superimpose on the viewport.</para>
        <para>So, to set up the sixteen-units-per-centimeter coordinate system for a four centimeter by five centimeter drawing, you'd use this starting tag:</para>
        <programlisting><![CDATA[<svg width="4cm" height="5cm" viewBox="0 0 64 80">]]></programlisting>
        <para>Example using a viewBox:</para>
        <programlisting><![CDATA[<svg width="4cm" height="5cm" viewBox="0 0 64 80">
  <rect x="10" y="35" width="40" height="40" style="stroke: black; fill: none;" />
  <!-- roof -->
  <polyline points="10 35, 30 7.68, 50 35" style="stroke:black; fill: none;" />
  <!-- door -->
  <polyline points="30 75, 30 55, 40 55, 40 75" style="stroke:black; fill: none;" />
</svg]]></programlisting>
</section> <!-- </sect3> -->

      <section sect='sect3'>
        <title>Preserving Aspect Ratio</title>
        <para>In the previous example, the aspect ratio, or ratio of width to height, of the viewport and the viewBox were identical (4/5 = 64/80). What happens, though, if the aspect ratio of the viewport and the viewBox are not the same, as in this example, where viewBox has an aspect ratio of one to one, but the viewport has an aspect ratio of one to three?</para>
        <para>There are three things that SVG can do in this situation:</para>
        <itemizedlist>
          <listitem>Scale the graphic uniformly according to the smaller dimension so the graphic will fit entirely into the viewport. In the example, the picture would become half its original width and height. We'll show you examples of this in a further section.</listitem>
          <listitem>Scale the graphic uniformly according to the larger dimension and cut off the parts that lie outside the viewport. In the example, the picture would become one and a half times its original width and height. We'll show you examples in another section.</listitem>
          <listitem>Stretch and squash the drawing so that it fits precisely into the new viewport. (That is, don&apos;t preserve the aspect ratio at all.) We will cover this in another section.</listitem>
        </itemizedlist>
        <para>In the first case, since the image will be smaller than the viewport in one dimension, you must specify where to position it. In the example, the picture will be scaled uniformly to a width and height of 45 pixels. The width of the reduced graphic fits the width of the viewport perfectly, but you must now decide whether the image meets (is aligned with) the top, middle, or bottom of the 135-pixel viewport height.</para>
        <para>In the second case, since the image will be larger than the viewport in one dimension, you must specify which area is to be sliced away. In the example, the picture will be scaled uniformly to a width and height of 135 pixels. Now the height of the graphic fits the viewport perfectly, but you must decide whether to slice off the right side, left side, or both edges of the picture to fit within the 45-pixel viewport width.</para>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Specifying Alignment for preserveAspectRatio</title>
        <para>The <computeroutput>preserveAspectRatio</computeroutput> attribute lets you specify the alignment of the scaled image with respect to the viewport, and whether you want it to meet the edges or be sliced off. The model for this attribute is:</para>
        <para text-align="center">preserveAspectRatio="alignment [meet | slice]"</para>
        <para>where <computeroutput>alignment</computeroutput> specifies the axis and location, and is one of <computeroutput>xMinYMin, xMinYMid, xMinYMax, xMidYMin, xMidYMid, xMidYMax, xMaxYMin, xMaxYMid,</computeroutput> or <computeroutput>xMaxYMax</computeroutput>. This alignment specifier is formed by concatenating an x-alignment and a y-alignment as shown in the table. The default value for <computeroutput>preserveAspectRatio</computeroutput> is <computeroutput>xMidYMid meet</computeroutput>.</para>
        <sidebar>The y-alignment begins with a capital letter, since the x- and y-alignments are concatenated into a single word.</sidebar>
      
        <para>So, if you want to have the picture with a <computeroutput>viewBox="0 0 90 90"</computeroutput> fit entirely within a viewport that is 45 pixels wide and 135 pixels high, aligned at the top of the viewport, you would write:</para>
        <programlisting><![CDATA[<svg width="45px" height="135px" viewBox="0 0 90 90"
        preserveAspectRatio="xMinYMin meet">]]></programlisting>
        <sidebar>In this case, since the width fits precisely, the x-alignment is irrelevant; you could equally well use xMidYmin or xMaxYMin. However, in the interests of consistency, it&apos;s usually best to make both specifiers the same when only one axis is affected.</sidebar>
        <para>This is all fairly abstract; here are some concrete examples that show you how the combinations of alignment and meet and slice interact with one another.</para>
      </section> <!-- </sect3> -->
      
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>Color</title>
      <para>You can specify the stroke color in a variety of ways:</para>
      <itemizedlist mark='bullet'>
        <listitem><para>One of the color keyword names: aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow.</para></listitem>
        <listitem><para>A six-digit hexadecimal specifier in the form #rrggbb, where rr is the red component, gg is the green component, and bb is the blue component in the range 0-ff.</para></listitem>
        <listitem><para>A three-digit hexadecimal specifier in the form #rgb, where r is the red component, g is the green component, and b is the blue component in the range0-f. This is a shorthand form of the previous method of specifying color. To produce the six-digit equivalent, each digit of the short form is duplicated; thus #d6e is the same as #dd66ee.</para></listitem>
        <listitem><para>An rgb specifier in the form rgb(red-value, green-value, blue-value), where each value is in the range 0-255 or a percentage in the range 0% to 100%</para></listitem>
      </itemizedlist>
    </section> <!-- </sect2> -->
    
          
    <section sect='sect2'>
      <title>Basic Shapes</title>
      <para>Once a coordinate system is established in the <computeroutput>&lt;svg&gt;</computeroutput> tag, you are ready to begin drawing. In this section, we will show the basic shapes you can use to create the major elements of most drawings: lines, rectangles, polygons, circles, and ellipses.</para>
      <para>These elements may include a <varname>style</varname> attribute. This is a very common style setting within a shape tag:</para>
      <programlisting>style="stroke: black; fill: none;"</programlisting>

      <section sect='sect3'>
        <title>Lines</title>
        <para>SVG lets you draw a straight line with the <computeroutput>&lt;line&gt;</computeroutput> element. Just specify the x- and y-coordinates of the line&apos;s endpoints. Coordinates may be specified without units, in which case they are considered to be user coordinates, or with units such as em, in, etc. as already described.</para>
        <programlisting><![CDATA[<line x1="0"  y1="10" x2="0"   y2="100" style="stroke:#006600;"/>]]></programlisting>
      </section> <!-- </sect3> -->
        
      <section sect='sect3'>
        <title>Rectangles</title>
        <para>The rectangle is the simplest of the basic shapes. You specify the x- and y-coordinates of the upper left corner of the rectangle, its width, and its height. The interior of the rectangle is filled with the fill color you specify. If you do not specify a fill color, the interior of the shape is filled with black. The fill color may be specified in any of the ways described previously, or it may take the value none to leave the interior unfilled and thus transparent. You may also specify a fill-opacity. Both fill and fill-opacity are presentation properties, and belong in the style attribute.</para>
        <para>Technically, the x value is the smaller of the x-coordinate values and the y is the smaller of the y-coordinate values of the rectangle&apos;s sides in the current user coordinate system. Since we are not yet using transformations, covered further down, this is the moral equivalent of the upper left corner.</para>
        <para>After the interior is filled (if necessary), the outline of the rectangle is drawn with strokes, whose characteristics you may specify as you did for lines. If you do not specify a stroke, the value none is presumed, and no outline is drawn.</para>
        <para>An example:</para>
        <programlisting><![CDATA[<!-- blue interior, thick semi-transparent red outline -->
<rect x="10" y="70" width="25" height="30" style="fill: #0000ff;
stroke: red; stroke-width: 7; stroke-opacity: 0.5;" />]]></programlisting>
        <para>If you do not specify a starting x or y value, it is presumed to be zero. If you specify a width or height of zero, then the rectangle is not displayed. It is an error to provide negative values for either width or height.</para>
        <section sect='sect4'> <title>Rounded Rectangles</title>
          <para>If you wish to have rectangles with rounded corners, specify the x- and y-radius of the corner curvature. The maximum number you may specify for rx (the x-radius) is one-half the width of the rectangle; the maximum value of ry (the y-radius) is one-half the height of the rectangle. If you specify only one of rx or ry, they are presumed to be equal.</para>
          <programlisting><![CDATA[<rect x="40" y="10" width="20" height="40" rx="5" style="stroke: black; fill: none;" />]]></programlisting>
        </section> <!-- </sect4> -->
      </section> <!-- </sect3> -->
      
      <section sect='sect3'> <title>Circles and Ellipses</title>
        <para>To draw a circle, use the <computeroutput>&lt;circle&gt;</computeroutput> element and specify the center x-coordinate, center y-coordinate, and radius with the <computeroutput>cx, cy,</computeroutput> and <computeroutput>r</computeroutput> attributes. As with a rectangle, the default is to fill the circle with black and draw no outline unless you specify some other combination of fill and stroke.</para>
        <para>An ellipse also needs an x-radius and a y-radius in addition to a center x- and y-coordinate. The attributes for these radii are named <computeroutput>rx</computeroutput> and <computeroutput>ry</computeroutput>.</para>
        <para>In both circles and ellipses, if the <computeroutput>cx</computeroutput> or <computeroutput>cy</computeroutput> is omitted, it is presumed to be zero. If the radius is zero, no shape will be displayed; it is an error to provide a negative radius.</para>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'> <title>Polygons</title>
      <para>In addition to rectangles, circles, and ellipses, you may want to draw hexagons, octagons, stars, or arbitrary closed shapes. The <computeroutput>&lt;polygon&gt;</computeroutput> element lets you specify a series of points that describe a geometric area to be filled and outlined as described earlier. The points attribute consists of a series of x- and y-coordinate pairs separated by commas or whitespace. You must give an even number of entries in the series of numbers. You don&apos;t have to return to the starting point; the shape will automatically be closed.</para>
      <programlisting><![CDATA[<!-- star -->
<polygon
points="35,37.5 3
7.9,46.1 46.9,46.1 39.7,51.5
42.3,60.1 35,55 27.7,60.1 30
.3,51.5
23.1,46.1 32.1,46.1"
style="fill: #ccffcc; stroke: green;" />]]></programlisting>
        <section sect='sect4'> <title>Filling Polygons That Have Intersecting Lines</title>
          <para>For the polygons shown so far, it&apos;s been easy to fill the shape. Since none of the lines forming the polygon cross over one another, the interior is easily distinguished from the exterior of the shape. However, when lines cross over one another, the determination of what is inside the polygon is not as easy.</para>
          <para>SVG has two different rules for determining whether a point is inside a polygon or outside it. The <computeroutput>fill-rule</computeroutput> (which is part of presentation) has a value of either <computeroutput>nonzero</computeroutput> or <computeroutput>evenodd</computeroutput>. Depending on the rule you choose, you get a different effect.</para>
            <sidebar xml:id='fill-rule'> <title>Explanation of the Fill Rules</title>
            <para>For the sake of completeness, we are describing how these <computeroutput>fill-rules</computeroutput> work, but you don&apos;t need to know the details in order to use them. The <computeroutput>nonzero</computeroutput> rule determines whether a point is inside or outside a polygon by drawing a line from the point in question to infinity. It counts how many times that line crosses the polygon&apos;s lines, adding one if the polygon line is going right to left, and subtracting one if the polygon line is going left to right. If the total comes out to zero, the point is outside the polygon. If the total is nonzero (hence the name) the point is inside the polygon.</para>
            <para>The <computeroutput>evenodd</computeroutput> rule also draws a line from the point in question to infinity, but it simply counts how many times that line crosses your polygon&apos;s lines. If the total number of crossings is odd, then the point is inside; if even, then the point is outside.</para>
            </sidebar>
        </section> <!-- </sect4> -->
      </section> <!-- </sect3> -->
      
      <section sect='sect3'> <title>Polylines</title>
      <para>Finally, to round out our discussion of basic shapes, we&apos;ll return to straight lines. Sometimes you want a series of lines that does not make a closed shape. You can use multiple <computeroutput>&lt;line&gt;</computeroutput> elements, but if there are many lines it might be easier to use the <computeroutput>&lt;polyline&gt;</computeroutput> element. It has the same attributes as <computeroutput>&lt;polygon&gt;</computeroutput>, except that the shape is not closed.</para>
      </section> <!-- </sect3> -->
      
    </section> <!-- </sect2> -->

    
    <section sect='sect2'>
      <title>Strokes</title>
      <para>Lines are considered to be strokes of a pen that draws on the canvas. The size, color, and style of the pen stroke are part of the line&apos;s presentation. Thus, these characteristics will go into the <computeroutput>style</computeroutput> attribute.</para>
      
      <section sect='sect3'>
        <title>stroke-width</title> <para>As mentioned previously, the canvas grid lines are infinitely thin. Where, then, does a line or stroke fall in relation to the grid line? The answer is that the grid line falls in the center of a stroke.</para>
      </section> <!-- </sect3> -->
    
      <section sect='sect3'>
        <title>stroke-opacity</title>
        <para>You control the opacity (which is the opposite of transparency) of a line by giving the stroke-opacity a value from 0.0 to 1.0, where zero is completely transparent and one is completely opaque. A value less than zero will be changed to zero; a value greater than one will be changed to one.</para>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>stroke-dasharray</title>
        <para>If you need dotted or dashed lines, use the stroke-dasharray attribute, whose value consists of a list of numbers, separated by commas or white- space, specifying dash length and gaps. The list should have an even number of entries, but if you give an odd number of entries, SVG will repeat the list so the total number of entries is even.</para>
        <programlisting><![CDATA[<svg width="200px" height="200px" viewBox="0 0 200 200">
<!-- nine-pixel dash, five-pixel gap -->
<line x1="10" y1="10" x2="100" y2="10" style="stroke-dasharray:9, 5; stroke:black; stroke-width: 2;" />]]></programlisting>

      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Line Caps and Joins</title>
        <para>When drawing a <computeroutput>&lt;line&gt;</computeroutput> or <computeroutput>&lt;polyline&gt;</computeroutput>, you may specify the shape of the endpoints of the lines by setting the <computeroutput>stroke-linecap</computeroutput> style property to one of the values <computeroutput>butt, round,</computeroutput> or <computeroutput>square</computeroutput>. <computeroutput>round</computeroutput> and <computeroutput>square</computeroutput> extend beyond the end coordinates; <computeroutput>butt</computeroutput>, the default, ends exactly at the specified endpoint.</para>
        <para>You may specify the way lines connect at the corners of a shape with the <computeroutput>stroke-linejoin</computeroutput> style property, which may have the values <computeroutput>miter</computeroutput> (pointed), <computeroutput>round</computeroutput> (round), or <computeroutput>bevel</computeroutput> (flat).</para>
      </section> <!-- </sect3> -->

      </section> <!-- </sect2> -->
    
    <section sect='sect2' xml:id='svg_transformations'>
      <title>Transformations</title>
      <para>It is possible to transform the shapes created in an SVG image. For instance move, scale and rotate the shapes. You can also apply transformation to the &lt;g&gt; element, thus effectively transforming a whole group of elements in one go. It is also possible to transform gradients and fill patterns.</para>
      <para>SVG provides five transformation functions. They do not transform the SVG shape themselves, but the underlying coordinate system of that shape. Thus, a shape with a width of 20 scaled up by a factor of 2, still has a width of 20 logically, even though it is displayed in double size.</para>
      <itemizedlist>
        <listitem>translate(<varname>dx</varname>, <varname>dy</varname>)</listitem>
        <listitem>rotate(<varname>angle</varname>) or rotate(<varname>angle</varname>, <varname>x</varname>, <varname>y</varname>) to rotate around point (x,y)</listitem>
        <listitem>scale(<varname>factor</varname>) or scale(<varname>x-factor</varname>, <varname>y-factor</varname>)</listitem>
        <listitem>skewX(<varname>angle</varname>) and skewY(<varname>angle</varname>) to skew the x-axis and y-axis.</listitem>
        <listitem>matrix(<varname>a</varname>, <varname>b</varname>, <varname>c</varname>, <varname>d</varname>, <varname>e</varname>, <varname>f</varname>)</listitem>
      </itemizedlist>
      
      <section sect='sect3'>
        <title>Example: translating a rectangle</title>
        <para>Here is an example showing two equally positioned and sized shapes with and without translation:</para>
        <programlisting><![CDATA[<rect x="20" y="20" width="50" height="50"
      style="fill: #cc3333"/>
<rect x="20" y="20" width="50" height="50"
      style="fill: #3333cc" transform="translate(75,25)" />]]></programlisting>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Using a transformation matrix(<varname>a</varname>, <varname>b</varname>, <varname>c</varname>, <varname>d</varname>, <varname>e</varname>, <varname>f</varname>)</title>
        <para>It is possible to effect transformations through a matrix, too. The matrix looks like this:</para>
        <programlisting>a  c  e
b  d  f
0  0  1</programlisting>
        <para>where <varname>e</varname> and <varname>f</varname> are the x and y displacements (for translation), and <varname>a</varname> and <varname>d</varname> are the x- and y-scale. Lastly, <varname>c</varname> and <varname>b</varname> are used for scaling.</para>
        <equation>x&apos; = ax + cy + e</equation>
        <equation>y&apos; = bx + dy + f</equation>
        <para>Thus, a translation by <parameter>(tx,ty)</parameter> is expressed through a matrix <userinput>matrix(1,0,0,1,tx,ty)</userinput>, a rotation is expressed through <userinput></userinput>matrix( cos(a), sin(a),-sin(a),cos(a),0,0 ), from</para>
        <programlisting>cos(a)   -sin(a)  0
sin(a)    cos(a)  0
     0        0   1</programlisting>
        <para>A skew transformation along the x-axis is expressed through <userinput>matrix(1,0,tan(a),1,0,0)</userinput> and a skew transformation along the y-axis through <userinput>matrix(1,tan(a),0,1,0,0)</userinput>, where <varname>a</varname> is an angle (degrees).</para>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Combining Transformations</title>
        <para>You can combine transformations by by putting multiple transformation specifications inside the transform attribute. In the following example a rectangle is first painted straight and filled in yellow and then it is displaced, rotated, and outlined in black:</para>
        <programlisting><![CDATA[<rect x="50" y="10" width="20" height="30"
      style="stroke: none; fill:yellow;"
        />
<rect x="50" y="10" width="20" height="30"
      style="stroke: black; fill:none;"
      transform="translate(50,0) rotate(30)" />]]></programlisting>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
	<title>Making the Top Y-HalfAxis Positive*</title>
	<para>In SVG, the top Y half-axis is negative by default. This is not compatible with PS, which is the other way round. One hack around this is to invert the Y axis by applying a negative scale factor, like so: <userinput>scale(1,-1)</userinput>. Also, since we want the figure to print below the origin, we need to translate the origin downwards as well by as high as the figure is:</para>
	<programlisting>transform="translate(0, <varname>height</varname>) scale(1,-1)"</programlisting>
	<para>Actually, we also need to translate horizontally if the figure does not start at x=0...</para>
      </section> <!-- </sect3> -->



    </section> <!-- </sect2> -->

    <section sect='sect2'>
      <title>Paths</title>
      <para>The &lt;path&gt; element is the most flexible drawing primitive in SVG. It contains subcommands that allow it to mimic all of the other basic shapes. It is a bit trickier to learn.</para>
      <para>Like other drawing primitives such as &lt;rect&gt; and &lt;ellipse&gt;, &lt;path&gt; can take attributes such as fill, stroke, and dash array. On the other hand, &lt;path&gt; uses a special syntax to describe the way it actually visits points on a plane.</para>
      <para>The SVG &lt;path&gt; element is very expressive due to the range of powerful path commands that it uses. As with the HTML5 &lt;canvas&gt; element, paths can be used to draw pen-up and pen-down movements, quadratic and cubic Bézier curves, and elliptical arcs, all within a single path. That is, you move the pen (or drawing point) from position to position, raise it and lower it, and make strokes of varying types. These instructions within the &lt;path&gt; syntax are called subcommands of the path object. In SVG, you&apos;ll find them in the data attribute (d) of the &lt;path&gt;.</para>
      <para>Paths typically begin with the M subcommand (<computeroutput>moveto</computeroutput> in PostScript), which instructs the drawing to begin at a specific (x,y) point, such as (100,100), like so:</para>
      <para>d = "M 100,100 ..."</para>
      <para>From there, you continue adding points—that is, (x,y) pairs—describing segments to be joined along the path.</para>
        <section sect='sect3'> <title>&lt;path&gt; Subcommands: M and L</title>
        <para>Start by specifying where the drawing will begin. As the first command for the d attribute, you insert a notation such as M x y, where x and y are numbers. You can think of M x y as meaning "Move the pen to the coordinates (x,y)." From there, you have the option of drawing a line (L), a quadratic curve (Q), a cubic curve (C), or an arc (A). For example, d="M 50 50 L 150 150" would draw a diagonal line from the point (50,50) to the point (150,150).</para>
        <programlisting><![CDATA[<path stroke="black"
d="M 50 50 L 150 150"/>
<path d="M 150 50
L 250 150 350 100"/>]]></programlisting>
        <para>Several points about this example:</para>
        <itemizedlist>
          <listitem>The second path does not specify a stroke; by default, the figure is filled with black. If you specify fill="none", the figure will be invisible unless you specify a stroke.</listitem>
          <listitem>You can, for the sake of legibility, use commas between pairs of coordinates, in which case the space after the comma is optional.</listitem>
          <listitem>You can omit the command letter on subsequent commands if the same command is used multiple times in a row, as shown in the second path, where the L command is followed by two pairs of values. Note also that if a MoveTo command (M or m) is directly followed by multiple pairs of coordinates, the subsequent pairs are treated as implicit LineTo commands.</listitem>
        </itemizedlist>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Fill Properties: nonzero and evenodd</title>
        <para>Since a path is filled with black by default, it is natural to wonder what happens when a path crosses itself. The default fill-rule value is nonzero, which means that by default, the union of the regions traversed by the path is filled unless you specify otherwise. You can find more information on this in the "Fill Properties" section of the SVG specification, at http://www.w3.org/TR/ SVG/painting.html#FillProperties.</para>
        <para> Here is an example to show the difference between the fill-rule values nonzero and evenodd.</para>
        <programlisting><![CDATA[<path d="M 70,290 L 150,150 200,250 40,250 100,150 170,290"/>
<path d="M 70,290 L 150,150 200,250 40,250 100,150 170,290"
fill-rule="evenodd" transform="translate(250,0)"/>]]></programlisting>
      <svg xmlns="http://www.w3.org/2000/svg">
        <path d="M 70,290 L 150,150 200,250 40,250 100,150 170,290" />
        <path d="M 70,290 L 150,150 200,250 40,250 100,150 170,290" fill-rule="evenodd" transform="translate(250,0)"/>
      </svg>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Quadratic Bézier Curves: The Q Subcommand</title>
        <para>Here&apos;s basically how a quadratic Bézier curve works in SVG. You define an initial point (e.g., 100,200) using a pen-down command. From there, you set a course heading toward the next point; however, instead of actually moving to the next point, you just aim in that direction. So, for example, while "M 100 200 L 200 400" will make you actually arrive at the point (200,400), "M 100 200 Q 200 400..." will merely point you in that direction. Ultimately, you also need a final destination, which is the final coordinate pair required for a quadratic Bézier curve. In the example that follows, the command "M 100,200 L 200,400 300,200" draws a red path between (and reaching each of) the three points indicated. But simply replacing the L with a Q (i.e., "M 100,200 Q 200,400 300,200") produces a curve that passes through both endpoints and is a tangent to the associated lines of the allied line path at the endpoints of the segments.</para>
        <programlisting><![CDATA[<path d="M 100 200 Q 200,400 300,200" fill="none" stroke="blue" />
<path d="M 100 200 L 200,400 300,200" fill="none" stroke="red"/>]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Creating Smooth Curves: The S and T Subcommands</title>
        <para>These shortcut commands help with creating smooth curves, and they require fewer data points than constructing cubic and quadratic Bézier curves without these shortcut commands. This is because one of the Bézier curve points is used simply as a reference point, which is then reflected to create a smooth curve.</para>
        <para>You use the S command to draw a smooth cubic Bézier spline segment from the current point to a new point (x,y). The previous segment must also be a smooth cubic Bézier spline, and that second control point is then reused via reflection relative to the current point as the segment&apos;s first control point. The second control must be explicitly specified.</para>
        <para>You use the T command to draw a smooth quadratic Bézier spline segment from the current point to a new point (x,y). The previous segment must also be a smooth quadratic Bézier spline, and that control point is then reused via reflection relative to the current point.</para>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Elliptical Arcs</title>
        <para>One other often-used path command is the elliptical arc command (A), which allows you to quickly draw subsets of ellipses or intersecting ellipses. The arc subcommand of the &lt;path&gt; element has the following syntax: A rx ry XAR large-arc-flag sweep-flag x y.</para>
        <mediaobject>
         <imageobject>
           <imagedata format='JPEG' fileref='Electric_files/pictures/Communicating/SVG_A_flag_sweep.jpeg' alt='arc choice'/>
          </imageobject>
          <caption>Arc choice.</caption>
        </mediaobject>
        <para>The arc begins at the current point (which is determined by the last coordinate specified) and ends at (x,y).</para>
        <para>You now have the choice of four elliptical arc segments: two small ones and two large ones. These arc segments can have a positive angular orientation (clockwise) or a negative orientation. The large-arc-flag (fl) controls the angular orientation of the larger arc segment via fl = 0 : small, fl = 1 : large. The sweep-flag (fs) controls the angular orientation analogously, via fs = 0 : positive, and fs = 1 : negative.</para>
        <para>To sum up, the <command>A</command> command draws an elliptical arc from the current point to a new point (<varname>x</varname>,<varname>y</varname>). The arc belongs to an ellipse that has radii <varname>rx</varname> and <varname>ry</varname> and a rotation with respect to the positive x-axis of <varname>x-axis-rotation</varname> (in degrees). If <varname>large-arc-flag</varname> is 0 (zero), then the small arc (less than 180 degrees) is drawn. A value of 1 results in the large arc (greater than 180 degrees) being drawn. If <varname>sweep-flag</varname> is 0, then the arc is drawn in a negative angular direction (counterclockwise); if it is 1, then the arc is drawn in a positive angular direction (clockwise).</para>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Summary of <userinput>path</userinput> Commands</title>
        <para>These are all one-letter commands. Upper-case commands take absolute parameters, whereas lowe-case commands take parameters relative to the current point.</para>
        <table>
          <thead>
            <tr> <td>command</td> <td>parameter</td> <td>meaning</td> </tr>
          </thead>
          <tbody>
            <tr> <td>M, m</td> <td>x, y</td> <td>Move to a new point (x,y)</td> </tr>
            <tr> <td>L, l</td> <td>x, y</td> <td>Draw a line from the current point to a new point (x,y)</td> </tr>
            <tr> <td>H, h</td> <td>x</td> <td>Draw a horizontal line from the current point to a new point (x,current-point-y)</td> </tr>
            <tr> <td>V, v</td> <td>y</td> <td>Draw a vertical line from the current point to a new point (current-point-x,y)</td> </tr>
            
            <tr>
              <td>A, a</td>
              <td>rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y</td>
              <td>Draw an elliptical arc from the current point to a new point (x,y). The arc belongs to an ellipse that has radii rx and ry and a rotation with respect to the positive x-axis of x-axis-rotation (in degrees). If large-arc-flag is 0 (zero), then the small arc (less than 180 degrees) is drawn. A value of 1 results in the large arc (greater than 180 degrees) being drawn. If sweep-flag is 0, then the arc is drawn in a negative angular direc- tion (counterclockwise); if it is 1, then the arc is drawn in a positive angular direction (clockwise).</td>
            </tr>
            <tr>
              <td>Q, q</td> <td>ctrl-x ctrl-y end-x end-y</td>
              <td>Draw a quadratic Bézier curve from the current point to a new point (end-x,end-y) using (ctrl-x, ctrl-y) as the control point</td>
            </tr>
            <tr>
              <td>T, t</td> <td>end-x end-y</td>
              <td>Draw a smooth quadratic Bézier curve segment from the current point to a new point (end-x,end-y). The control point is computed automatically as the reflection of the control point on the previous command relative to the current point. If there is no previous command or if the previous command was not a Q, q, T, or t, the control point is coincident with the current point.</td>
            </tr>
            <tr>
              <td>C, c</td> <td>start-ctrl-x start-ctrl-y end-ctrl-x end-ctrl-y end-x end-y</td>
              <td>Draw a cubic Bézier curve from the current point to a new point (end-x,end-y) using (start-ctrl-x, start-ctrl-y) and (end-ctrl-x, end-ctrl-y) as control points</td>
            </tr>
            <tr>
              <td>S, s</td> <td>end-ctrl-x end-ctrl-y end-x end-y</td>
              <td>Draw a smooth cubic Bézier curve segment from the current point to a new point (end-x, end-y). The first control point is computed automatically as the reflection of the control point on the previous command relative to the current point. If there is no previous command or if the previous command was not a C, c, S, or s, the first control point is coincident with the current point. (end-ctrl-x, end-ctrl-y) is the second control point.</td>
            </tr>
            </tbody>
        </table>
      </section> <!-- </sect3> -->
    </section> <!-- </sect2> -->
  
    <section sect='sect2'>
      <title>Text</title>
      <para>Text is rendered within a <tag>text</tag> element. Its position is determined by the x and y attributes. The x-attribute determines where to locate the left edge of the text (the start of the text). The y-attribute determines where to locate the bottom of the text (not the top). Thus, there is a difference between the y-position of a text and the y-position of lines, rectangles, or other shapes. This example shows a text and a line which both have y-position 40:</para>
      <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">

    <text x="20"  y="40">Example SVG text 1</text>
    <line x1="10" y1="40" x2="150" y2="40" style="stroke: #000000"/>

</svg>]]></programlisting>

      <para>There is no automatic word wrapping in SVG. You will have to position the text yourself, and break it into multiple lines. You can get some help from the relative positioning possible with the <tag>tspan</tag> element.</para>
      
      <section sect='sect3'>
        <title>Text anchor</title>
        <para> The <firstterm>anchor</firstterm> of a text determines what part of the text that is positioned at the x-position specified in the x attribute of the text element. By default the anchor of a text is the left edge of the the text. The beginning of the text. But you can also use the middle of the text as anchor, or the right edge - the end of the text.</para>
        <para>You can set the <varname>text-anchor</varname> CSS property to set the anchor of a text. It can take three values: <constant>start</constant>, <constant>middle</constant> and <constant>end</constant>.</para>
        <programlisting><![CDATA[<text x="50" y="20"
      style="text-anchor: start">
    Start
</text>
<text x="50" y="40"
      style="text-anchor: middle">
    Middle
</text>
<text x="50" y="60"
      style="text-anchor: end">
    End
</text>]]></programlisting>
      </section> <!-- </sect3> -->

      <section sect='sect3'>
        <title>Text stroke and fill</title>
        <para>Like other SVG shapes, text can have both a <parameter>stroke</parameter> and <parameter>fill</parameter> set on it. If you specify only a stroke, the text will appear as an outline of the text. If you specify only a fill, the text will look as text is rendered normally. You also set the <parameter>stroke-width</parameter> property.</para>
      </section> <!-- </sect3> -->

      <section sect='sect3'>
        <title><tag>tspan</tag> for showing multiline text</title>
        <para>The SVG <tag>tspan</tag> element (meaning a span of text) is used to draw multiple lines of text in SVG. Rather than having to position each line of text absolutely, the <tag>tspan</tag> element makes it possible to position a line of text relatively to the previous line of text. (The <tag>tspan</tag> element also makes it possible for the user to select and copy-paste several lines of text at a time, instead not just one text element.)</para>
        <para>You will probably want the lines to be positioned relative to each other vertically. You can do so using the <parameter>dy</parameter> attribute:</para>
        <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">

    <text x="20" y="10">
        <tspan>tspan line 1</tspan>
        <tspan dy="10">tspan line 2</tspan>
    </text>
</svg>]]></programlisting>
        
        <para>And to position the text relatively on the x-axis you can use the <parameter>dx</parameter> attribute</para>
        <para>You can also set the x attribute to fix the x-coordinate of the text lines. This is useful if you want to display a list of lines below each other, all left adjusted.</para>
        
        <bridgehead>Styling text with <tag>tspan</tag></bridgehead>
        <para>You can style <tag>tspan</tag> elements individually. Use a <tag>tspan</tag> element to style a block of text differently than the rest of the text, for instance to set a word in bold:</para>
        <programlisting><![CDATA[<text x="10" y="20">
    Here is a <tspan style="font-weight: bold;">bold</tspan> word.
</text>    ]]></programlisting>

        <para>To create a superscript or a subscript use the <parameter>baseline-shift</parameter> CSS property, as in:</para>
        <programlisting><![CDATA[<text x="10" y="20">
    Here is a text with <tspan style="baseline-shift: super;">superscript</tspan>
    and <tspan style="baseline-shift: sub;">subscript</tspan> mixed with normal
    text.
</text>]]></programlisting>

      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Text transformations</title>
        <para>It is possible to rotate SVG text just like it it is possible to rotate any other SVG shape. Here is an example:</para>
        <programlisting><![CDATA[<text x="20"  y="40"
  transform="rotate(30 20,40)">Rotated SVG text</text>]]></programlisting>
        
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Text Length</title>
        <para>You can set the length of a text using the <parameter>textLength</parameter> attribute of the <tag>text</tag> element. The length of the text is then made to fit the specified length by adjusting the space between the characters, and the size of the glyphs. Using the <constant>lengthAdjust</constant> attribute you can specify if both letter spacing and glyph size should be adjusted.</para>
        <para>Here are three SVG textLength and lengthAdjust examples:</para>
        <programlisting><![CDATA[<text x="5" y="20" textLength="140" lengthAdjust="spacing">
  A long, long, long text.
</text>
<text x="5" y="40" textLength="200" lengthAdjust="spacing">
    A long, long, long text.
</text>
<text x="5" y="60" textLength="200" lengthAdjust="spacingAndGlyphs">
    A long, long, long text.
</text>]]></programlisting>

      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Styling Text in SVG</title>
        <para>Here is a list of the text-specific CSS properties you can use to style text. Remember that you can also style the stroke and fill of text, and use gradients, fill patterns and masks to style text too.</para>
        <para>You have to write the attribute names in lower-case as done in the listing below, or the SVG viewers tend to ignore them!</para>
        <variablelist>
          <varlistentry> <term>font-family</term> <listitem>The font to use, for instance &apos;Arial&apos; or &apos;Verdana&apos;.</listitem> </varlistentry>
          <varlistentry> <term>font-size</term> <listitem>The size of the font, for instance &apos;12px&apos; or &apos;24px&apos;.</listitem> </varlistentry>
          <varlistentry> <term>?font-weight</term> <listitem>This may be <constant>bold</constant>...</listitem> </varlistentry>
          <varlistentry> <term>?font-style</term> <listitem>This may be <constant>italic</constant>...</listitem> </varlistentry>
          <varlistentry> <term>kerning</term> <listitem>Spacing between letters, for instance &apos;2&apos; or &apos;3&apos; (default=1).</listitem> </varlistentry>
          <varlistentry> <term>letter-spacing</term> <listitem>Spacing between letters, for instance &apos;2&apos; or &apos;3&apos;. Similar to kerning.</listitem> </varlistentry>
          <varlistentry> <term>word-spacing</term> <listitem>Spacing between words, for instance &apos;2&apos; or &apos;3&apos;.</listitem> </varlistentry>
          <varlistentry> <term>text-decoration</term> <listitem>Can be any of <constant>none</constant>, <constant>underline</constant>, <constant>overline</constant> and <constant>line-through</constant>.</listitem> </varlistentry>
          <varlistentry> <term>stroke</term> <listitem>The outline color of the font. By default text only has fill color, not stroke. Adding stroke will make the font appear bold.</listitem> </varlistentry>
          <varlistentry> <term>stroke-width</term> <listitem>The width of the outline color of the font.</listitem> </varlistentry>
          <varlistentry> <term>fill</term> <listitem>The fill color of the font.</listitem> </varlistentry>
        </variablelist>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Referencing (or Duplicating) Text in SVG with <tag>tref</tag>*</title>
      </section> <!-- </sect3> -->

    </section> <!-- </sect2> -->
  
    <section sect='sect2'> <title>Accessing and Reusing Graphics</title>
    <section sect='sect3'>
      <title>Referencing Vector and Bitmap Images </title>
      <para>The SVG language provides the &lt;image&gt; element, which can reference other SVG images, as well as PNG and JPEG bitmap images. The syntax for the &lt;image&gt; element is similar to the &lt;rect&gt; element in that it has x, y, width, and height attributes.</para>
      <para>The &lt;image&gt; element has the additional attribute xlink:href, which allows you to specify the location of the referenced image. Similar to HTML&apos;s href attribute, the xlink:href attribute allows the referenced image to be stored either locally or on the Internet. The code for referencing a bitmap image is as follows:</para>
      <programlisting><![CDATA[<image xlink:href="GrandMothersParty-121YO.png" x="340" y="0" width="140" height="160" opacity="0.5"/>]]></programlisting>
      <para>Referencing other SVG images is just as easy and becomes very useful in many application scenarios, such as reusing the same vector symbol on a page or dynamically loading vector images on demand.</para>
    </section> <!-- </sect3> -->
    <section sect='sect3'>
      <title>The Group Element</title>
      <para>The SVG group element, &lt;g&gt;, is great for logically grouping sets of related graphical objects. This group capability makes it easy to add styles, transformations, interactivity, and even animations to entire groups of objects.</para>
      <!-- <para>The following code groups a circle and a bitmap image together into a group named iris, which is then grouped together with an ellipse shape into another group named eye.</para> -->
    </section> <!-- </sect3> -->
    <section sect='sect3'>
      <title>The &lt;use&gt; Element References Code in a &lt;defs&gt; Element</title>
      <para>The &lt;use&gt; element lets you reuse existing elements and thus write less code. Like the &lt;image&gt; element, &lt;use&gt; takes x, y, height, and width attributes, and it references other content using the xlink:href attribute.</para>
      <para>As an example, you can reuse the following rectangle</para>
      <programlisting><![CDATA[<defs>
  <!-- Draw the upper-right rectangle. -->
  <rect fill="#ada1d9" fill-opacity="1" fill-rule="nonzero"
    stroke="#32287d" stroke-width="10" stroke-linecap="butt"
    stroke-linejoin="bevel" stroke-miterlimit="4" stroke-opacity="0.4"
    id="rectangle" width="20" height="20" x="90" y="-10"
  />
</defs>]]></programlisting>
    <para>by referencing it with the &lt;use&gt; element:</para>
    <programlisting><![CDATA[<!-- Reuse the first rectangle element and move it to a different position. -->
<use x="20" y="40" xlink:href="#rectangle" />]]></programlisting>
    </section> <!-- </sect3> -->
    <section sect='sect3'>
      <title>Creating Patterns</title>
      <para>The SVG language helps you create and reuse patterns with ease. Patterns are extremely useful—in fact, the grid background found in many of this book&apos;s examples is just a simple pattern that consists of a single 10-by-10-pixel rectangle. The &lt;defs&gt; element can be used to store content that will not be directly displayed. This stored hidden content can then be referenced and displayed by other SVG elements, which makes it ideal for things such as patterns that contain reusable graphics.</para>
      <para>To create a basic pattern in SVG, first place a rectangle within a &lt;pattern&gt; element, and then put everything inside of a &lt;defs&gt; element.</para>
      <programlisting><![CDATA[<defs>
  <pattern id="Pattern01" width="10" height="10" patternUnits="userSpaceOnUse">
    <rect width="10" height="10" fill="#FFFFFF" stroke="#000000" stroke-width="0.1"/>
  </pattern>
</defs>]]></programlisting>
<para>Now, to use this pattern anywhere in your SVG graphic, simply set your element&apos;s fill attribute
value to the id of the pattern, like this: url(#Pattern01).</para>
<programlisting><![CDATA[<rect id="Background" x="0" y="0" width="100%" height="100%"
  fill="url(#Pattern01)" stroke-width="0.5" stroke="#000000" />]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
        <title>Markers</title>
        <para>...</para>
        <programlisting><![CDATA[<marker orient="auto">]]></programlisting>
        <para>...</para>
        <programlisting><![CDATA[style="marker-start:url(#...);
  marker-mid:url(#...);
  marker-end:url(#...);"]]></programlisting>
        <para>...</para>
        
      </section> <!-- </sect3> -->
    
    </section> <!-- </sect2> -->
    
    <section sect='sect2'> <title>Presentation</title>
    <!--
    <para>We&apos;ve casually mentioned that SVG lets you separate a document&apos;s structure from its presentation. In this sect1, we&apos;re going to compare and contrast the two, discuss the presentational aspects of a document in more detail, and then show some of the SVG elements that you can use to make your document&apos;s structure clearer, more readable, and easier to maintain.</para>
    
      <section sect='sect3'> <title>Structure and Presentation</title>
      <para>As we mentioned previously, one of XML&apos;s goals is provide a way to structure data and separate this structure from its visual presentation. Consider the previous drawing of the cat; you recognize it as a cat because of its structure - the position and size of the geometric shapes that make up the drawing. If we were to make structural changes, such as shortening the whiskers, rounding the nose, and making the ears longer and rounding their ends, the drawing would become one of a rabbit, no matter what the surface presentation might be. The structure, therefore, tells you what a graphic is.</para>
      <para>This is not to say that information about visual style isn&apos;t important; had we drawn the cat with thick purple lines and a gray interior, it would have been recognizable as a cat, but its appearance would have been far less pleasing. XML encourages you to separate structure and presentation; unfortunately, many discussions of XML emphasize structure at the expense of presentation. We&apos;ll right this wrong by going into detail about how you specify presentation in SVG.</para>
      </section>
    -->
      <section sect='sect3'> <title>Inline Styles</title>
      <para>This is exactly the way we&apos;ve been using presentation information so far; we set the value of the style attribute to a series of visual properties and their values as described in an appendix.</para>
      <programlisting><!-- title: Use of inline styles --><![CDATA[<circle cx="20" cy="20" r="10" style="stroke: black; stroke-width: 1.5; fill: blue; fill-opacity: 0.6" />]]></programlisting>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'><title>Internal Stylesheets</title>
      <para>You don&apos;t need to place your styles inside each SVG element; you can create an internal stylesheet to collect commonly-used styles that you can apply to all occurrences of a particular element, or use as named classes to apply to individual elements. The following example sets up an internal stylesheet that will draw all circles in a blue double-thick dashed line with a light yellow interior. We have placed the stylesheet within a <computeroutput>&lt;defs&gt;</computeroutput> element, which we will discuss later.</para>
      <para>The example then draws several circles. The circles in the second row have inline styles that override the specification in the internal stylesheet.</para>
      <programlisting><!-- title: Use of internal stylesheet --><![CDATA[<svg width="200px" height="200px" viewBox="0 0 200 200">
<defs>
<style type="text/css"><![CDATA[
  circle {
    fill: #ffc;
    stroke: blue;
    stroke-width: 2;
    stroke-dasharray: 5 3
  }]]>]]&gt;<![CDATA[</style>
</defs>
<circle cx="20" cy="20" r="10"/>
<circle cx="60" cy="20" r="15"/>
<circle cx="20" cy="60" r="10" style="fill: #cfc"/>
<circle cx="60" cy="60" r="15" style="stroke-width: 1; stroke-dasharray: none;"/>
</svg>]]></programlisting>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'><title>External Stylesheets</title>
      <para>If you want to apply a set of styles to multiple SVG documents, you could copy and paste the internal stylesheet into each of them. This, of course, is impractical for a large volume of documents if you ever need to make a global change to all the documents. Instead, you should take all the information between the beginning and ending <computeroutput>&lt;style&gt;</computeroutput> tags (excluding the <computeroutput>&lt;![CDATA[</computeroutput> and <computeroutput>]]&gt;</computeroutput>) and save it in an external file, which becomes an external stylesheet. The example shows an external stylesheet that has been saved in a file named <computeroutput>ext_style.css</computeroutput> This stylesheet uses a variety of selectors, including <computeroutput>*</computeroutput>, which sets a default for all elements that don&apos;t have any other style.</para>
      <programlisting><!-- title: External stylesheet --><![CDATA[* { fill:none; stroke: black; } /* default for all elements */
rect { stroke-dasharray: 7 3; }
circle.yellow { fill: yellow; }
.thick { stroke-width: 5; }
  .semiblue { fill:blue; fill-opacity: 0.5; }]]></programlisting>
      <para>which is included by</para>
      <programlisting><!-- title: SVG file that references an external stylesheet --><![CDATA[<?xml version="1.0"?>
<?xml-stylesheet href="ext_style.css" type="text/css"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg width="200px" height="200px" viewBox="0 0 200 200" preserveAspectRat io="xMinYMin meet">
<line x1="10" y1="10" x2="40" y2="10"/>
<rect x="10" y="20" width="40" height="30"/>
<circle class="yellow" cx="70" cy="20" r="10"/>
<polygon class="thick" points="60 50, 60 80, 90 80"/>
<polygon class="thick semiblue"
points="100 30, 150 30, 150 50, 130 50"/>
</svg>]]></programlisting>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
	<title>Presentation Attributes (Related to Fill-ing and Stroke-ing)</title>
	<para>The <userinput>display</userinput> attribute lets you control the rendering of graphical or container elements. A value of <userinput>=&quot;none&quot;</userinput> indicates that the given element and its children will not be rendered. A value of <userinput>=&quot;inherit&quot;</userinput> indicates that the given element will inherit the value of <userinput>display</userinput> from its parent. Any other value indicates that the given element will be rendered by the browser, although in SVG you would not define a display attribute-value pair.</para>
	<para>The <userinput>visibility</userinput> attribute lets you control the visibility of graphical elements. With a value of <userinput>hidden</userinput> or <userinput>collapse</userinput> the current graphics element is invisible. If the <userinput>visibility</userinput> attribute is set to <userinput>hidden</userinput> on a &lt;tspan&gt;, &lt;tref&gt; or &lt;altglyph&gt; element, then the text is invisible but still takes up space in text layout calculations.</para>
	<para><userinput>opacity</userinput> refers to both <userinput>fill-opacity</userinput> and <userinput>stroke-opacity</userinput>.</para>
	
	<para>Presentation attributes related to filling:</para>
	<itemizedlist>
	  <listitem><userinput>fill=&apos;&lt;color&gt;&apos;</userinput></listitem>
	  <listitem><userinput>=fill-opacity=&apos;&lt;0-1 value&gt;&apos;</userinput></listitem>
	  <listitem><userinput>fill-rule=&apos;&lt;{ evenodd | nonzero }&gt;&apos;</userinput></listitem>
	</itemizedlist>
	<para>Presentation attributes related to stroking:</para>
	<itemizedlist>
	  <listitem><userinput>stroke=&apos;&lt;color&gt;&apos;</userinput></listitem>
	  <listitem><userinput>stroke-width=&apos;&lt;dimension&gt;&apos;</userinput></listitem>
	  <listitem><userinput>stroke-opacity=&apos;&lt;0-1 value&gt;&apos;</userinput></listitem>
	  <listitem><userinput>stroke-linejoin=&apos;&lt;&gt;&apos;</userinput></listitem>
	  <listitem><userinput>stroke-miterlimit=&apos;&lt;&gt;&apos;</userinput>, defaults to 4</listitem>
	  <listitem><userinput>stroke-linecap=&apos;&lt;&gt;&apos;</userinput></listitem>
	  <listitem><userinput>stroke-dasharray=&apos;&lt;&gt;&apos;</userinput></listitem>
	  <listitem><userinput>stroke-dashoffset=&apos;&lt;&gt;&apos;</userinput></listitem>
	</itemizedlist>
	
	<section sect='sect4'>
	  <title>Linejoin and Linecap*</title>
	</section> <!-- </sect4> -->
	
	<section sect='sect4'>
	  <title>Dash Lines*</title>
	</section> <!-- </sect4> -->
	
	<section sect='sect4'>
	  <title><userinput>fill-rule</userinput></title>
	  <para>(From https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule)</para>
	  <para>The fill-rule property provides two options for how the inside of a shape is determined:</para>
	  <variablelist>
	    <varlistentry>
	      <term>nonzero</term>
	      <listitem>This value determines the &quot;insideness&quot; of a point in the shape by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside</listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>evenodd</term>
	      <listitem>This value determines the &quot;insideness&quot; of a point in the shape by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.</listitem>
	    </varlistentry>
	  </variablelist>
	</section> <!-- </sect4> -->
	
      </section> <!-- </sect3> -->
    </section> <!-- </sect2> -->

    <section sect='sect2'>
    <title>Animation in SVG</title>
    <section sect='sect3'> <title>Using Links in SVG</title>
      <para>The easiest sort of interactivity to provide is linking, accomplished with the <computeroutput>&lt;a&gt;</computeroutput> element. By enclosing a graphic in this element, it becomes active; when clicked, you go to the URL specified in the <computeroutput>xlink:href</computeroutput> attribute. You can link to another SVG file or, depending upon your environment, a web page.
        <!-- In the Example, clicking the word "Cat" will link to an SVG drawing of a cat; clicking the red, green, and blue shapes will link to the World Wide Web Consortium&apos;s SVG page. All the items within the second link are individually linked to the same destination, not the entire bounding box. When you test this example and move the cursor between the shapes, you will see that those areas are not linked. -->
      </para>
    </section> <!-- </sect3> -->
    <!--
    <para>SVG animation, as it is often called, refers to the declarative constructs borrowed from another W3C standard: Synchronized Multimedia Integration Language (SMIL). Basically, the principle behind declarative animation (as with the allied concepts of declarative programming) is that the author tells the display device (computer screen, printer, mobile phone, etc.) what the end result is supposed to be and leaves the details of implementation up to the client software. For example, a programmer or developer can describe something like a circle and then let the device implement it to the best of its ability.</para>
    -->
    <!--
    <para>We need to explain several important notions:</para>
    <itemizedlist>
      <listitem>By declarative animation, we mean animation performed using markup rather than script.</listitem>
      <listitem>The term SMIL evokes different meanings for different audiences. Some use it to refer to the subset of SMIL incorporated into and then expanded within SVG. Others use it to refer to the much broader context of SMIL within the SMIL working group of the W3C. The latter is more correct, though the ambiguity has sometimes led to disputes in discussions about using SMIL within other W3C standards. The term SVG animation is more frequently used nowadays to refer to declarative animation in SVG; however, SVG/SMIL might be a better term to refer to this, because SVG also allows manipulation via CSS, and there is interest from several direc- tions in bringing at least a subset of the power of SVG/SMIL into CSS so it can also be lever- aged by HTML.</listitem>
      <listitem>All the major browsers except Internet Explorer have implemented declarative animation in SVG. A number of cell phone implementations also offer support for SVG animation—and some of these do not support JavaScript, leaving SVG animation as the only way for develop- ers to perform animations in those platforms.</listitem>
      <listitem>To work with the following material, you'll need a browser that handles it well. Opera and the ASV plug-in for Internet Explorer are the best implementations for SVG animation, followed by Firefox 4 (or above). Chrome is slightly ahead of Safari at the time of this writing. You can easily discover whether your browser supports SVG. Check to see if the following example works in your browser. This example adds an ellipse containing two &lt;animate&gt; elements children to the standard SVG template.</listitem>
    </itemizedlist>
    -->
    <para>An example:</para>
    <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%">
  <ellipse id="E" cx="90" cy="90" rx="30" ry="40" fill="#448">
    <animate attributeName="rx" dur="5s" values="20;90;20" repeatCount="indefinite"/>
    <animate attributeName="ry" dur="5s" values="30;60;30" repeatCount="indefinite"/>
  </ellipse>
</svg>]]></programlisting>
    <para>Almost all attributes of SVG objects can be animated declaratively. This implies that animation extends very broadly through the technology in ways that you might not always think of. Check http://srufaculty.sru.edu/david.dailey/svg/#SMIL and http://srufaculty.sru.edu/david​ .dailey/svg/newstuff/Newlist.htm for a variety of illustrations.</para>
    <section sect='sect3'> <title>Getting Started with Animation</title>
    <para>An example:</para>
    <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink=http://www.w3.org/1999/xlink
width="100%" height="100%">
  <ellipse id="E" cx="90" cy="90" rx="30" ry="40" fill="#448">
    <animate attributeName="rx" dur="5s" values="20;90;20" repeatCount="indefinite"/>
    <animate attributeName="ry" dur="5s" values="30;60;30" repeatCount="indefinite"/>
  </ellipse>
</svg>]]></programlisting>
<para>Inside the ellipse are two &lt;animate&gt; elements. One controls the width, and the other controls the
height of the ellipse during the animation. The attributes in this example control the following:</para>
<variablelist>
  <varlistentry><term>attributeName</term>  <listitem>This selects which attribute of the object will be animated.</listitem></varlistentry>
  <varlistentry><term>dur</term>  <listitem>This is a measure (by default specified in seconds) that determines how long the animation will last.</listitem></varlistentry>
  <varlistentry><term>values</term>  <listitem>This is a semicolon-delimited list of attribute values. These are often numeric, but need not be. In this case, there are three values, and the start and end values are the same. This means that the animation will start and stop with the same value.</listitem></varlistentry>
  <varlistentry><term>repeatCount</term>  <listitem>A value of indefinite is the correct choice for animations that are to loop continually. Alternatively, you could put a positive integer here, specifying the number of times that the animation has to repeat.</listitem></varlistentry>
</variablelist>
    <para>And here&apos; a fancier animation:</para>
    <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<rect x="100" y="85" rx="12" height="30" width="150" fill="purple" stroke="black" stroke-width="3" />
  <ellipse cx="100" cy="100" rx="30" ry="40" fill="#448" opacity=".75" stroke="black" stroke-width="3">
    <animate attributeName="rx" type="rotate" dur="5s" values="10;70;10" repeatCount="indefinite"/>
    <animate attributeName="ry" type="rotate" dur="5s" values="30;60;30" repeatCount="indefinite"/>
  </ellipse>
  <ellipse cx="250" cy="100" rx="30" ry="40" fill="#448" opacity=".75" stroke="black" stroke-width="3">
    <animate attributeName="rx" type="rotate" dur="5s" values="70;10;70" repeatCount="indefinite"/>
    <animate attributeName="ry" type="rotate" dur="5s" values="60;30;60" repeatCount="indefinite"/>
  </ellipse>
</svg>]]></programlisting>
<para>A still fancier one is:</para>
<programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <rect x="100" y="85" rx="12" height="30" width="150" fill="purple" stroke="black" stroke-width="3" >
    <animate attributeName="width" dur="3s" values="150;100;150" repeatCount="indefinite"/>
  </rect>
  <ellipse id="E" cx="100" cy="100" rx="30" ry="40" fill="#448" opacity=".75" stroke="black" stroke-width="6" stroke-dasharray="8,4">
    <animate attributeName="rx" dur="3s" values="10;70;10" repeatCount="indefinite"/>
    <animate attributeName="ry" dur="5s" values="30;60;30" repeatCount="indefinite"/>
  </ellipse>
  <ellipse cx="250" cy="100" rx="30" ry="40" fill="#448" opacity=".75" stroke="black" stroke-width="6" stroke-dasharray="8,4">
    <animate attributeName="rx" dur="5s" values="70;10;70" repeatCount="indefinite"/>
    <animate attributeName="ry" dur="3s" values="60;30;60" repeatCount="indefinite"/>
    <animate attributeName="cx" dur="3s" values="250;200;250" repeatCount="indefinite"/>
  </ellipse>
</svg>
]]></programlisting>
    <para>This example adds a stroke-dasharray attribute to the ellipses and lets the position of the center of the second ellipse and the width of the rectangle vary (in synchrony with one another). This demonstrates that desynchronizing and synchronizing can yield rather fascinating effects. While this example appears to make the object rotate, this is simply because the circumference of the ellipse is changing (as rx and ry change). Also, because dash arrays are allocated in terms of absolute units (pixel widths), the number of dash segments needed to cover the ellipse also varies.</para>
    </section> <!-- </sect3> -->
    
    <section sect='sect3'>
      <title>Rotating Objects</title>
      <para>there is a better way of rotating objects than by animating the stroke. You can use the &lt;animateTransform&gt; element to change the scale, position, or rotation of an object. Observe this nifty extension of the preceding example, which uses &lt;animateTransform&gt;.</para>
      <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <ellipse id="One" cx="200" cy="100" rx="30" ry="40" fill="#555">
    <animate attributeName="rx" type="rotate" dur="5s" values="50;20;50" repeatCount="indefinite"/>
    <animate attributeName="ry" type="rotate" dur="5s" values="10;60;10" repeatCount="indefinite"/>
  </ellipse>
  <use id="Two" xlink:href="#One" fill-opacity=".35" stroke="#d06" stroke-width="3">
    <animateTransform attributeName="transform" type="rotate" dur="5s" from="0 200 100" to="360 200 100" repeatCount="indefinite"/>
  </use>
  <use xlink:href="#One" transform="translate(100,0)" />
  <use xlink:href="#Two" transform="translate(-100,0)" />
</svg>]]></programlisting>
      <para>This example starts with a basic ellipse ("One") colored dark gray (#555) and animates both its x and y radii. It then reuses the ellipse three times: once in the same location ("Two"), once to the left, and once to the right. This example lets you see that the two gray ellipses oscillate only vertically and horizontally. However, both the reddish ellipses have an animation applied through an &lt;animateTransform&gt;, a child of the &lt;use&gt; element, so that they may be rotated as well. This should serve to demonstrate that rotation adds a new property to the ellipses. Note that because of the frequencies of oscillation, the reddish oval coincides precisely with the gray one four times in every five-second cycle—which you can see by pausing the animation.</para>
      
      <para>Here&apos;s a more adventurous example using similar ellipses that both oscillate and rotate as a part of a clip path applied to an image that is then tiled through a pattern. SVG also has an &lt;animateColor&gt; element, intended for gradually changing colors over time; however, it has been deprecated. Instead, SVG provides the ability to animate nonnumeric values using a simple &lt;animate&gt; element with color names. So, you can use code such as the following to vary the fill of the gray ellipse above concurrently with some of its other attributes.</para>
      <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <ellipse id="One" cx="200" cy="100" rx="30" ry="40" fill="#555">
    <animate attributeName="rx" type="rotate" dur="20s" values="50;20;50" repeatCount="indefinite"/>
    <animate attributeName="ry" type="rotate" dur="20s" values="10;60;10" repeatCount="indefinite"/>
    <animate attributeName="fill" type="rotate" dur="20s" repeatCount="indefinite" values="red;plum;yellowgreen;red" />
  </ellipse>
</svg>]]></programlisting>
    </section> <!-- </sect3> -->
    
    <section sect='sect3'>
      <title>Motion Along a Path</title>
      <para>Now let&apos; play a bit more with the positioning of these ellipses by using &lt;animateMotion&gt; to make them follow a curve.</para>
      <programlisting><![CDATA[<path id="curve" stroke="black" stroke-width="3" opacity=".75"
  d="M 0,200
  C 100,200 0,   100, 100,100 C 200,100 100,200 200,200
  C 300,200 200, 100, 300,100 C 400,100 300,200 400,200
  C 500,200 400, 100, 500,100 C 600,100 500,200 600,200 z" >
  </path>
  <ellipse id="One" cx="0" cy="0" rx="20" ry="10" fill="inherit" opacity=".75" stroke="black" stroke-width="2">
    <animateMotion dur="10s" rotate="auto" repeatCount="indefinite">
      <mpath xlink:href="#curve"/>
    </animateMotion>
  </ellipse>]]></programlisting>
  <para>This example draws three identical mounds (each 200 pixels to the right of the previous one). The path is closed by the z subcommand.</para>
  <para>First, it is important to point out that the locus of the ellipse is specified to be on the curve by setting its center, (cx,cy), to (0,0). Also notice that the ellipse takes its orientation from the curve itself, due to the rotate="auto" attribute. Also, because the distance traversed by the moving ellipse is greater along the mounds than it is along the straight line, and because its apparent speed remains constant, it takes less time to traverse the line than it does to traverse the mounds.</para>
  </section> <!-- </sect3> -->
  
    <section sect='sect3'> <title>Multivalued Interpolation</title>
    <para>In multivalued interpolation attribute values are not single scalar values, but collections of values. To use it, you set up an interpolation between two paths. The only restriction is that the paths must have the same number of coordinates and the same types of subcommands (such as L, Q, C, or A) for the animation to work.</para>
    <para>Consider the following example (visible at http://granite.sru.edu/~ddailey/svg/animoval8.svg), which animates two vertices of a path:</para>
    <programlisting><![CDATA[<path id="curve" stroke="black" fill="yellowgreen" stroke-width="3" fill-opacity=".5" >
  <animate attributeName="d" dur="3s"
    values=" M 100,0 0,100 70,50 130,150 200,100 z;
             M 100,0 0,100 70,150 130, 50 200,100 z;
             M 100,0 0,100 70,50 130,150 200,100 z" repeatCount="indefinite"/>
</path>]]></programlisting>
    <para>The key to understanding this example is to observe that the path&apos;s shape, d, is governed by three values (separated from one another by semicolons and typeset on separate lines for ease of reading). The first and last of those strings of coordinates are the same, and each string has exactly five points. The pentagon is animated by repeatedly morphing between the two shapes shown at the right of the illustration. Furthermore, by examining the first, second, and last points of the pentagon, you can see that we keep three of the vertices unchanged. Only the points where x equals 70 and 130 will be changed. As one of these vertices moves down the page from (70,50) to (70,150), the other will move up the same distance. The starting and middle values of the path are shown at the right of the animation.</para>
  </section> <!-- </sect3> -->
  <section sect='sect3'>
    <title>Interacting with Animations</title>
    <para>SVG animations can be started or stopped based on user-generated events, such as mouse clicks and rollovers. Let&apos;s start with a simple example and work up from there.</para>
    <para>In this example (visible at http://granite.sru.edu/~ddailey/svg/animstart0.svg), an ellipse is instructed to move along a curved path, as in previous examples. The difference, though, is that the animation does not begin until an object (G) is clicked.</para>
    <programlisting><![CDATA[<path id="curve" stroke="black" fill="none" stroke-width="3" fill-opacity=".5"
  d="M 0,100 C 100,150 100,50 200,50 C 300,50 300,150 400,100" />
  <ellipse cx="0" cy="0" rx="16" ry="8" fill="orange" opacity=".85" stroke="black"
    stroke-width="2">
    <animateMotion dur="3s" rotate="auto" repeatCount="2" begin="G.click">
      <mpath xlink:href="#curve"/>
    </animateMotion>
  </ellipse>
  <g id="G">
    <ellipse cx="200" cy="90" rx="33" ry="15" fill="yellow" stroke="black" stroke-width="2" />
    <text x="175" y="101" font-size="31" fill="black" font-family="arial">GO</text>
  </g>]]></programlisting>
    <para>Here is how it works. First, the &lt;animate&gt; element contains the attribute begin="G.click". This means that the action specified by the animation will begin exactly when an object having the id of G is clicked. Second, the object G is actually a group containing both an ellipse and some text. The reason for grouping them together is that ultimately, the developer cannot be sure whether the user will actually click the oval or the text object. By grouping them, the developer ensures that whichever one is clicked results in the animation activation. Third, the animation is instructed to run exactly twice, using the attribute repeatCount="2".</para>
    <para>A minor annoyance (which is actually two different minor annoyances that happen to look like one) is that when the animation is not running, part of the ellipse is visible at the corner of the page. This is because the ellipse has its centroid set to the coordinate (0,0), which is necessary to have the ellipse centered on the curve throughout the animation. Fortunately, there are ways to work around this, as you will see in the next example (visible at http://granite.sru.edu/~ddailey/svg/animstart0a.svg).</para>
    <para>Consider this example:</para>
    <programlisting><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <path id="curve" stroke="black" fill="none" stroke-width="3" fill-opacity=".5"
    d="M 0,100 C 100,150 100,50 200,50 C 300,50 300,150 400,100" />
  <ellipse id="One" cx="0" cy="0" rx="16" ry="8" fill="orange" opacity="0" stroke="black" stroke-width="2">
    <set attributeName="opacity" to=".75" begin="G.click" />
    <animateMotion id="A" dur="3s" rotate="auto" repeatCount="2" begin="G.click" fill="freeze">
      <mpath xlink:href="#curve"/>
    </animateMotion>
  </ellipse>
  <g id="G">
    <ellipse cx="200" cy="90" rx="33" ry="15" fill="yellow" stroke="black" stroke-width="2" />
    <text x="175" y="101" font-size="31" fill="black" font-family="arial">GO</text>
  </g>
</svg>]]></programlisting>
      <para>This example employs two new aspects of SVG animation: the &lt;set&gt; element and the "freeze" value of the fill attribute. These accomplish two rather different effects.</para>
      <para>The &lt;set&gt; element allows you to simply change the value of an attribute based on an event (either generated by the user or by the passage of time). Initially, the ellipse is invisible (opacity="0"); however, when G is clicked, in addition to the &lt;animateMotion&gt; starting as before, the &lt;set&gt; element makes the ellipse visible by changing the opacity value.</para>
      <para>At the end of this animation, the fill="freeze" attribute specifies that the ellipse will remain at the last values specified—namely, at the end of the curve.</para>
      <para>You could instead make the ellipse disappear at the end of the animation (as in the example at http://granite.sru.edu/~ddailey/svg/animstart0b.svg) by simply putting two &lt;set&gt; elements inside the &lt;ellipse&gt; element, like this:</para>
      <programlisting><![CDATA[<ellipse id="One" cx="0" cy="0" rx="16" ry="8" fill="orange" opacity="0"
  stroke="black" stroke-width="2">
  <set attributeName="opacity" to=".75" begin="G.click" />
  <set attributeName="opacity" to="0" begin="A.end" />
  <animateMotion id="A" dur="3s" rotate="auto" repeatCount="2" begin="G.click">
    <mpath xlink:href="#curve"/>
  </animateMotion>
</ellipse>]]></programlisting>
      <para>Some more events are exemplified in the following:</para>
      <programlisting><![CDATA[<set attributeName="fill" to="green" begin="G.mouseover" />
<set attributeName="opacity" to=".75" begin="G.click+3" />
<set attributeName="fill" to="yellow" begin="G.mouseout" />]]></programlisting>

 <para>You can simulate a countdown by toggling display between "block" and "none", like this:</para>
 <programlisting><![CDATA[<text x="180" y="40" font-size="35" fill="black" font-family="arial" display="none">
  <set attributeName="display" to="block" begin="G.click" />
  <set attributeName="display" to="none" begin="G.click+1" />
  // 3
</text>
<text x="180" y="40" font-size="35" fill="black" font-family="arial" display="none">
  <set attributeName="display" to="block" begin="G.click+1" />
  <set attributeName="display" to="none" begin="G.click+2" />
  // 2
</text>
<text x="180" y="40" font-size="35" fill="black" font-family="arial" display="none">
  <set attributeName="display" to="block" begin="G.click+2" />
  <set attributeName="display" to="none" begin="G.click+3" />
  // 1
</text>]]></programlisting>

</section> <!-- </sect3> -->


</section> <!-- </sect2> -->


      
    <section sect='sect2'>
      <title>Clipping and Masking*</title>
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>Gradients</title>
      <para>(From http://www.w3.org/TR/SVG/pservers.html#Gradients)</para>
      <para>Gradients consist of continuously smooth color transitions along a vector from one color to another, possibly followed by additional transitions along the same vector to other colors. SVG provides for two types of gradients: linear gradients and radial gradients.</para>
      <para>Once defined, gradients are then referenced using <userinput>fill</userinput> or <userinput>stroke</userinput> properties on a given graphics element to indicate that the given element shall be filled or stroked with the referenced gradient.</para>
      <section sect='sect3'>
	<title>Linear Gradients in SVG*</title>
      </section> <!-- </sect3> -->
      <section sect='sect3'>
	<title>Radial Gradients in SVG</title>
	<para>The <tag>radialGradient</tag> element is used to define a radial gradient. The <tag>radialGradient</tag> element must be nested within a <tag>defs</tag> element, which holds definition of special elements (gradients, patterns, paths etc).</para>
	<para>The following code paints an ellipse with a radial gradient from white to blue:</para>
	<programlisting><![CDATA[<svg height="150" width="500">
  <defs>
    <radialGradient id="grad1" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
      <stop offset="0%" style="stop-color:rgb(255,255,255);
      stop-opacity:0" />
      <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />
    </radialGradient>
  </defs>
  <ellipse cx="200" cy="70" rx="85" ry="55" fill="url(#grad1)" />
</svg>]]></programlisting>
        <para>The color range for a gradient can be composed of two or more colors. Each color is specified with a <tag>stop</tag> tag. The <varname>offset</varname> attribute is used to define where the gradient color begin and end. The <varname>fill</varname> attribute links the ellipse element to the gradient.</para>
	<para>Two-dimensional gradients, as painted by PostScript <function linkend='ps_gradient_2d'>gradientupright</function>, can be effected by composing linear gradients through a for loop, that is programmatically.</para>
      </section> <!-- </sect3> -->
    </section> <!-- </sect2> -->
    
    <section sect='sect2'><title>Filters*</title></section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>Compressed SVG</title>
      <para>While SVG does not have a compression scheme of its own, it can be compressed quite well with <command>gzip</command>. Due to the repetitive textual nature of the XML language that makes up the SVG file format, the file can often be compressed to only 20% of its original file size. When gzip is used to compress an SVG file, its file extension is sometimes changed to SVGZ to reflect the compression.</para>
    </section> <!-- </sect2> -->
    
  </section> <!-- </sect1> -->
  
  <section>
    <title>MusicXML</title>
    <blockquote>
      <para>MusicXML was developed by Recordare LLC, deriving several key concepts from existing academic formats (such as Walter Hewlett&apos;s MuseData and David Huron's Humdrum). It is designed for the interchange of scores, particularly between different scorewriters. [...]</para>
      <para>[...]Version 3.0 was released in August 2011 with improved virtual instrument support, in both DTD and XSD versions.[...]</para>
      <para>[...] MusicXML 2.0 added a compressed zip format with a .mxl suffix that can make files roughly 20 times smaller than their uncompressed version. [...]</para>
      <attribution>wikipedia</attribution>
    </blockquote>
      
    <section sect='sect2'>
      <title>Support</title>
      <blockquote>
	<para>As of August 2013, MusicXML is supported to varying degrees by over 170 notation programs.[11][12] These programs include:</para>
	<itemizedlist>
          <listitem>Most scorewriting programs, including Finale, Sibelius, Overture and MuseScore.</listitem>
          <listitem>Most Music OCR programs, including SmartScore and PhotoScore.</listitem>
          <listitem>Many music sequencer programs, including Cubase, Logic Pro, SONAR, and Rosegarden.</listitem>
	</itemizedlist>
	<para>Additionally, web support is possible through the use of the HTML5 canvas element and JavaScript resulting in the rendering of legible music within a web browser.</para>
	<attribution>wikipedia</attribution>
    </blockquote>
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>A MusicXML Example</title>
      <para>Here is a one-measure piece of music that contains a whole note on middle C, based in 4/4 time:</para>
      <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE score-partwise PUBLIC
    "-//Recordare//DTD MusicXML 3.0 Partwise//EN"
    "http://www.musicxml.org/dtds/partwise.dtd">
<score-partwise version="3.0">
  <part-list>
    <score-part id="P1">
      <part-name>Music</part-name>
    </score-part>
  </part-list>
  <part id="P1">
    <measure number="1">
      <attributes>
        <divisions>1</divisions>
        <key>
          <fifths>0</fifths>
        </key>
        <time>
          <beats>4</beats>
          <beat-type>4</beat-type>
        </time>
        <clef>
          <sign>G</sign>
          <line>2</line>
        </clef>
      </attributes>
      <note>
        <pitch>
          <step>C</step>
          <octave>4</octave>
        </pitch>
        <duration>4</duration>
        <type>whole</type>
      </note>
    </measure>
  </part>
</score-partwise>]]></programlisting>

<section sect='sect3'>
  <title>The root element: <tag>score-partwise</tag></title>
  <programlisting><![CDATA[<score-partwise version="3.0">]]></programlisting>
  <para>This is the root document type. The <tag>score-partwise</tag> element is made up of parts, where each part is made up of measures. There is also a <tag>score-timewise</tag> option which is made up of measures, where each measure is made up of parts. The version attribute lets programs distinguish what version of MusicXML is being used more easily. Leave it out if you are writing MusicXML 1.0 files.</para>
</section> <!-- </sect3> -->

</section> <!-- </sect2> -->
    
  </section> <!-- </sect1> -->
  
  <section xml:id='rdf'>
    <title>Resource Description Framework (RDF)</title>
    
    <para>XML does not provide any means of talking about the semantics (meaning) of data. For example, there is no intended meaning associated with the nesting of tags; it is up to each application to interpret the nesting.</para>
    <para>Although often called a <quote>language</quote> (and we commit this sin ourselves in this book), RDF (Resource Description Framework) is essentially a <firstterm>data model</firstterm>. Its basic building block is an object-attribute-value triple, called a <firstterm>statement</firstterm>. The preceding sentence about Billington is such a statement. Of course, an abstract data model needs a concrete syntax in order to be represented and transmitted, and RDF has been given a syntax in XML. As a result, it inherits the benefits associated with XML. However, it is important to understand that other syntactic representations of RDF, not based on XML, are also possible; XML-based syntax is not a necessary component of the RDF model.</para>
    
    <para>RDF is domain-independent in that no assumptions about a particular domain of use are made. It is up to users to define their own terminology in a schema language called RDF Schema (RDFS). The name RDF Schema is now widely regarded as an unfortunate choice. It suggests that RDF Schema has a similar relation to RDF as XML Schema has to XML, but in fact this is not the case. XML Schema constrains the structure of XML documents, whereas RDF Schema defines the vocabulary used in RDF data models. In RDFS we can define the vocabulary, specify which properties apply to which kinds of objects and what values they can take, and describe the relationships between objects. For example, we can write</para>
    <blockquote>Lecturer is a subclass of academic staff member.</blockquote>
    <para>This sentence means that all lecturers are also academic staff members. It is important to understand that there is an intended meaning associated with <quote>is a subclass of</quote>. It is not up to the application to interpret this term; its intended meaning must be respected by all RDF processing software. Through fixing the semantics of certain ingredients, RDF/RDFS enables us to model particular domains.</para>
    
    <para>We illustrate the importance of RDF Schema with an example. Consider the following XML elements:</para>
    <programlisting><![CDATA[<academicStaffMember>Grigoris Antoniou</academicStaffMember>
<professor>Michael Maher</professor>
<course name="Discrete Mathematics">
<isTaughtBy>David Billington</isTaughtBy>
</course>]]></programlisting>
    <para>Suppose we want to collect all academic staff members. A path expression in Xpath might be</para>
    <programlisting>//academicStaffMember</programlisting>
    <para>The result is only Grigoris Antoniou. While correct from the XML viewpoint, this answer is semantically unsatisfactory. Human readers would have also included Michael Maher and David Billington in the answer because</para>
    <itemizedlist>
      <listitem>all professors are academic staff members (that is, professor is a subclass of academicStaffMember);</listitem>
      <listitem>courses are only taught by academic staff members.</listitem>
    </itemizedlist>
    <para>This kind of information makes use of the semantic model of the particular domain and cannot be represented in XML or in RDF but is typical of knowledge written in RDF Schema. Thus RDFS makes semantic information machine-accessible, in accordance with the Semantic Web vision.</para>
    
    <bridgehead>Data Interchange through Linking</bridgehead>
    <para>RDF is a standard model for data interchange on the Web. RDF has features that facilitate data merging even if the underlying schemas differ, and it specifically supports the evolution of schemas over time without requiring all the data consumers to be changed.</para>
    <para>RDF extends the linking structure of the Web to use URIs to name the relationship between things as well as the two ends of the link (this is usually referred to as a <firstterm>triple</firstterm>). Using this simple model, it allows structured and semi-structured data to be mixed, exposed, and shared across different applications.</para>
    <para>This linking structure forms a labeled, <link linkend='directed_graphs'>directed graph</link>, where the edges represent the named link between two resources, represented by the graph nodes. This graph view is the easiest possible mental model for RDF and is often used in easy-to-understand visual explanations.</para>
    <para>Other technologies, like <link linkend='owl'>OWL</link> or SKOS, build on RDF and provide language for defining structured, Web-based <link linkend='ontologies'>ontologies</link> which enable richer integration and interoperability of data among descriptive communities.</para>
    
    <section sect='sect2'>
      <title>Basic Ideas</title>
      <para>The fundamental concepts of RDF are resources, properties, and statements.</para>
      <variablelist>
        <varlistentry>
          <term>Resources</term>
          <listitem>We can think of a resource as an object, a <quote>thing</quote> we want to talk about. Resources may be authors, books, publishers, places, people, hotels, rooms, search queries, and so on. Every resource has a URI, a Uniform Resource Identifier. A URI can be a URL (Uniform Resource Locator, or Web address) or some other kind of unique identifier; note that an identifier does not necessarily enable access to a resource. URI schemes have been defined not only for Web locations but also for such diverse objects as telephone numbers, ISBN numbers, and geographic locations. There has been a long discussion about the nature of URIs, even touching philosophical questions (for example, what is an appropriate unique identifier for a person?), but we will not go into detail here. In general, we assume that a URI is the identifier of a Web resource.</listitem>
        </varlistentry>
        <varlistentry>
          <term>Properties</term>
          <listitem>Properties are a special kind of resources; they describe relations between resources, for example <quote>written by</quote>, <quote>age</quote>, <quote>title</quote>, and so on. Properties in RDF are also identified by URIs (and in practice by URLs). This idea of using URIs to identify <quote>things</quote> and the relations between them is quite important. This choice gives us in one stroke a global, worldwide, unique naming scheme. The use of such a scheme greatly reduces the homonym problem that has plagued distributed data representation until now.</listitem>
        </varlistentry>
        <varlistentry>
          <term>Statements</term>
          <listitem>Statements assert the properties of resources. A statement is an object-attribute-value triple, consisting of a resource, a property, and a value. Values can either be resources or literals. Literals are atomic values (strings), the structure of which we do not discuss further.</listitem>
        </varlistentry>
      </variablelist>
      <section sect='sect3'>
        <title>Three Views of a Statement</title>
        <para>An example of a statement is</para>
        <blockquote>David Billington is the owner of the Web page http://www.cit.gu.edu.au/∼db.</blockquote>
        <para>The simplest way of interpreting this statement is to use the definition and consider the triple</para>
        <programlisting>(http://www.cit.gu.edu.au/~db, http://www.mydomain.org/site-owner, #DavidBillington).</programlisting>
        <para>We can think of this triple <inlineequation>(x, <function>P</function>, y)</inlineequation> as a logical formula <inlineequation><function>P</function>(x, y)</inlineequation>, where the binary predicate <function>P</function> relates the object <varname>x</varname> to the object <varname>y</varname>. In fact, RDF offers only <firstterm>binary predicates</firstterm> (<firstterm>properties</firstterm>). Note that the property <varname>site-owner</varname> and both of the two objects are identified by URLs.</para>
        <para>A second view is graph-based. It is a <link linkend='directed_graphs'>directed graph</link> with labeled nodes and arcs; the arcs are directed from the resource (the subject of the statement) to the value (the object of the statement). This kind of graph is known in the Artificial Intelligence community as a <firstterm linkend='semantic_networks'>semantic net</firstterm>.</para>
        <para>Graphs are a powerful tool for human understanding. But the Semantic Web vision requires machine-accessible and machine-processable representations.</para>
        <para>Therefore, there is a third representation possibility based on XML. According to this possibility, an RDF document is represented by an XML element with the tag <tag>rdf:RDF</tag>. The content of this element is a number of descriptions, which use <tag>rdf:Description</tag> tags. Every description makes a statement about a resource, which is identified in one of three different ways:</para>
        <itemizedlist>
          <listitem>An <varname>about</varname> attribute, referencing an existing resource</listitem>
          <listitem>An <classname>ID</classname> attribute, creating a new resource</listitem>
          <listitem>Without a name, creating an anonymous resource</listitem>
        </itemizedlist>
        <para>Here we just show the representation of our first statement:</para>
        <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-16"?>
<rdf:RDF
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:mydomain="http://www.mydomain.org/my-rdf-ns">

  <rdf:Description rdf:about="http://www.cit.gu.edu.au/~db">
    <mydomain:site-owner rdf:resource="#DavidBillington"/>
  </rdf:Description>
</rdf:RDF>]]></programlisting>
        <para>The <tag>rdf:Description</tag> element makes a statement about the resource http://www.cit.gu.edu.au/∼db. Within the description the property is used as a tag, and the content is the value of the property.</para>
        <para>The descriptions are given in a certain order; in other words, the XML syntax imposes a serialization. The order of descriptions (or resources) is not significant according to the abstract model of RDF. This again shows that the graph model is the real data model of RDF and that XML is just a possible serial representation of the graph.</para>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Reification</title>
        <para>In RDF it is possible to make statements about statements, such as <quote>Grigoris believes that David Billington is the creator of the Web page http://www.cit.gu.edu.au/∼db.</quote></para>
        <para>This kind of statement can be used to describe belief or trust in other statements, which is important in some kinds of applications. The solution is to assign a unique identifier to each statement, which can be used to refer to the statement. RDF allows this using a <firstterm>reification mechanism</firstterm>.</para>
        <para>The key idea is to introduce an auxiliary object, say, <varname>belief1</varname>, and relate it to each of the three parts of the original statement through the properties subject, predicate, and object. In the preceding example the subject of <varname>belief1</varname> would be David Billington, the predicate would be creator, and the object http://www.cit.gu.edu.au/∼db. Note that this rather cumbersome approach is necessary because there are only triples in RDF; therefore we cannot add an identifier directly to a triple (then it would be a quadruple).</para>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>Data Types</title>
        <para>Consider the telephone number <literal>3875507</literal>. A program reading this RDF data model cannot know if the literal <literal>3875507</literal> is to be interpreted as an integer (an object which it would make sense to, say, divide by 17) or as a string, or indeed if it is a integer, whether it is in decimal or hexadecimal representation. A program can only know how to interpret this resource if the application is explicitly given the information that the literal is intended to represent a number, and which number the literal is supposed to represent. The common practice in programming languages or database systems is to provide this kind of information by associating a data type with the literal, in this case, a data type like decimal or integer. In RDF, typed literals are used to provide this kind of information.</para>
        <para>Using a typed literal, we could describe David Billington&apos;s age as being the integer number 27 using the triple</para>
        <programlisting>(#DavidBillington, http://www.mydomain.org/age, "27"^http://www.w3.org/2001/XMLSchema#integer)</programlisting>
        <para>This example shows two things: the use of the ^^ notation to indicate the type of a literal, and the use of data types that are predefined by XML Schema. Strictly speaking, the use of any externally defined data typing scheme is allowed in RDF documents, but in practice the most widely used data typing scheme will be the one by XML Schema. XML Schema predefines a large range of data types, including Booleans, integers, floating-point numbers, times, and dates.</para>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>A Critical View of RDF</title>
        <para>We have already pointed out that RDF uses only binary properties. This restriction seems quite serious because often we use predicates with more than two arguments. Luckily, such predicates can be simulated by a number of binary predicates. We illustrate this technique for a predicate referee with three arguments. The intuitive meaning of <inlineequation>referee(X, Y, Z)</inlineequation> is <varname>X</varname> is the referee in a chess game between players <varname>Y</varname> and <varname>Z</varname>. We now introduce a new auxiliary resource <varname>chessGame</varname> and the binary predicates <function>ref</function>, <function>player1</function>, and <function>player2</function>. Then we can represent <inlineequation>referee(X, Y, Z)</inlineequation> as follows:</para>
        <informalequation>ref(chessGame, X)</informalequation>
        <informalequation>player1(chessGame, Y)</informalequation>
        <informalequation>player2(chessGame, Z)</informalequation>
        <para>Although the solution is sound, the problem remains that the original predicate with three arguments was simpler and more natural.</para>
        <para>Another problem with RDF has to do with the handling of properties. As mentioned, properties are special kinds of resources. Therefore, properties themselves can be used as the object in an object-attribute-value triple (statement). While this possibility offers flexibility, it is rather unusual for modeling languages, and can be confusing for modelers.</para>
        <para>Also, the reification mechanism is quite powerful and appears misplaced in a simple language like RDF. Making statements about statements introduces a level of complexity that is not necessary for a basic layer of the Semantic Web. Instead, it would have appeared more natural to include it in more powerful layers, which provide richer representational capabilities.</para>
        <para>Finally, the XML-based syntax of RDF is well suited for machine processing but is not particularly human-friendly.</para>
        <para>In summary, RDF has its idiosyncrasies and is not an optimal modeling language. However, we have to live with the fact that it is already a de facto standard. In the history of technology, often the better technology was not adopted. For example, the video system VHS was probably the technically weakest of the three systems that were available on the market at one time (the others were Beta and Video 2000), not to mention hardware and software standards in personal computing, which were arguably not adopted because of their technical merit.</para>
        <para>On the positive side, it is true that RDF has sufficient expressive power (at least as a basis on which more layers can be built). And ultimately the Semantic Web will not be programmed in RDF, but rather with user-friendly tools that will automatically translate higher representations into RDF. Using RDF offers the benefit that information maps unambiguously to a model. And since it is likely that RDF will become a standard, the benefits of drafting data in RDF can be seen as similar to drafting information in HTML in the early days of the Web.</para>
      </section> <!-- </sect3> -->
      
      <section sect='sect3'>
        <title>RDF&apos;XML-Based Syntax</title>
        <para>An RDF document consists of an <tag>rdf:RDF</tag> element, the content of which is a number of descriptions. For example, consider the domain of university courses and lecturers at Griffith University in the year 2001.</para>
        <programlisting><![CDATA[<!DOCTYPE rdf:RDF [
<!ENTITY xsd "http://www.w3.org/2001/XMLSchema#">
]>
<rdf:RDF
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
xmlns:uni="http://www.mydomain.org/uni-ns#">
<rdf:Description rdf:about="949352">
<uni:name>Grigoris Antoniou</uni:name>
<uni:title>Professor</uni:title>
</rdf:Description>
<rdf:Description rdf:about="949318">
<uni:name>David Billington</uni:name>
<uni:title>Associate Professor</uni:title>
<uni:age rdf:datatype="&xsd;integer">27</uni:age>
</rdf:Description>
<rdf:Description rdf:about="949111">
<uni:name>Michael Maher</uni:name>
<uni:title>Professor</uni:title>
</rdf:Description>
<rdf:Description rdf:about="CIT1111">
<uni:courseName>Discrete Mathematics</uni:courseName>
<uni:isTaughtBy>David Billington</uni:isTaughtBy>
</rdf:Description>
<rdf:Description rdf:about="CIT1112">
<uni:courseName>Concrete Mathematics</uni:courseName>
<uni:isTaughtBy>Grigoris Antoniou</uni:isTaughtBy>
</rdf:Description>
<rdf:Description rdf:about="CIT2112">
<uni:courseName>Programming III</uni:courseName>
<uni:isTaughtBy>Michael Maher</uni:isTaughtBy>
</rdf:Description>
<rdf:Description rdf:about="CIT3112">
<uni:courseName>Theory of Computation</uni:courseName>
<uni:isTaughtBy>David Billington</uni:isTaughtBy>
</rdf:Description>
<rdf:Description rdf:about="CIT3116">3.3
RDF: XML-Based Syntax
75
<uni:courseName>Knowledge Representation</uni:courseName>
<uni:isTaughtBy>Grigoris Antoniou</uni:isTaughtBy>
</rdf:Description>
</rdf:RDF>]]></programlisting>

        <para>Let us make a few comments. First, the namespace mechanism of XML is used, but in an expanded way. In XML namespaces are only used for disambiguation purposes. In RDF external namespaces are expected to be RDF documents defining resources, which are then used in the importing RDF document. This mechanism allows the reuse of resources by other people who may decide to insert additional features into these resources. The result is the emergence of large, distributed collections of knowledge.</para>
        <para>Second, the <tag>rdf:about</tag> attribute of the element <tag>rdf:Description</tag> is, strictly speaking, equivalent in meaning to that of an ID attribute, but it is often used to suggest that the object about which a statement is made has already been <emphasis>defined</emphasis> elsewhere. Formally speaking, a set of RDF statements together simply forms a large graph, relating things to other things through properties, and there is no such thing as <emphasis>defining</emphasis> an object in one place and referring to it elsewhere. Nevertheless, in the serialized XML syntax, it is sometimes useful (if only for human readability) to suggest that one location in the XML serialization is the <emphasis>defining</emphasis> location, while other locations state <emphasis>additional</emphasis> properties about an object that has been <emphasis>defined</emphasis> elsewhere.</para>
        <para>In fact the preceding example is slightly misleading. If we wanted to be absolutely correct, we should replace all occurrences of course and staff IDs, such as 949352 and CIT3112, by references to the external namespace, for example</para>
        <programlisting><![CDATA[<rdf:Description
rdf:about="http://www.mydomain.org/uni-ns/#CIT3112">]]></programlisting>
        <para>We have refrained from doing so to improve readability of our initial example because we are primarily interested here in the ideas of RDF. However, readers should be aware that this would be the precise way of writing a correct RDF document.</para>
        <para>The content of <tag>rdf:Description</tag> elements are called <firstterm>property elements</firstterm>. For example, in the description</para>
        <programlisting><![CDATA[<rdf:Description rdf:about="CIT3116">
<uni:courseName>Knowledge Representation</uni:courseName>
<uni:isTaughtBy>Grigoris Antoniou</uni:isTaughtBy>76
</rdf:Description>]]></programlisting>
        <para>the two elements uni:courseName and uni:isTaughtBy both define property-value pairs for CIT3116. The preceding description corresponds to two RDF statements.</para>
        <para>Third, the attribute <userinput><![CDATA[rdf:datatype="&xsd;integer"]]></userinput> is used to indicate the data type of the value of the age property. Even though the age property has been defined to have "&amp;xsd;integer" as its range, it is still required to indicate the type of the value of this property each time it is used. This is to ensure that an RDF processor can assign the correct type of the property value even if it has not seen the corresponding RDF Schema definition before (a scenario that is quite likely to occur in the unrestricted World Wide Web).</para>
        <para>Finally, the property elements of a description must be read conjunctively. In the preceding example, the subject is called <literal>Knowledge Representation</literal> and is taught by Grigoris Antoniou.</para>
      </section> <!-- </sect3> -->
      
      
      <section sect='sect3'>
        <title>The <userinput>rdf:resource</userinput> Attribute*</title>
      </section> <!-- </sect3> -->

    </section> <!-- </sect2> -->
    
    <section sect='sect2' xml:id='owl'>
      <title>OWL</title>
      <para>The W3C Web Ontology Language (OWL) is a Semantic Web language designed to represent rich and complex knowledge about things, groups of things, and relations between things. OWL is a computational logic-based language such that knowledge expressed in OWL can be exploited by computer programs, e.g., to verify the consistency of that knowledge or to make implicit knowledge explicit. OWL documents, known as <firstterm linkend='ontologies'>ontologies</firstterm>, can be published in the World Wide Web and may refer to or be referred from other OWL ontologies. OWL is part of the W3C&apos;s Semantic Web technology stack, which includes <link linkend='rdf'>RDF</link>, RDFS, SPARQL, etc.</para>
    </section> <!-- </sect2> -->

  </section> <!-- </sect1> -->
  
  <section xml:id='xml-tools'>
    <info>
      <title>Tools for Dealing with XML</title>
    </info>

    <section xml:id='xmllint'>
      <info>
        <title><command>xmllint</command>: the Ultimate XML Command Line Tool</title>
        <abstract>
          <para>The <command>xmllint</command> program parses one or more XML files, specified on the command line as XML-FILE (or the standard input if the filename provided is - ). It prints various types of output, depending upon the options selected. It is useful for detecting errors both in XML code and in the XML parser itself.</para>
          <para><command>xmllint</command> is included in libxml(3).</para>
        </abstract>
      </info>

      <bridgehead><command>xmllint</command> accepts the following options (in alphabetical order):</bridgehead>
      <variablelist>
        <varlistentry>
          <term><parameter>--dtdvalid URL</parameter></term>
          <listitem>Use the DTD specified by an URL for validation.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--dropdtd</parameter></term>
          <listitem>Remove DTD from output.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--dtdattr</parameter></term>
          <listitem>Fetch external DTD and populate the tree with inherited attributes.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--format</parameter></term>
          <listitem>Reformat and reindent the output. The XMLLINT_INDENT environment variable controls the indentation. The default value is
           two spaces &quot; &quot;).</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--html</parameter></term>
          <listitem>Use the HTML parser.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--htmlout</parameter></term>
          <listitem>Output results as an HTML file. This causes xmllint to output the necessary HTML tags surrounding the result tree output so the results can be displayed/viewed in a browser.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--loaddtd</parameter></term>
          <listitem>Fetch an external DTD.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--load-trace</parameter></term>
          <listitem>Display all the documents loaded during the processing to stderr.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--noblanks</parameter></term>
          <listitem>Drop ignorable blank spaces.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--nocdata</parameter></term>
          <listitem>Substitute CDATA section by equivalent text nodes.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--noent</parameter></term>
          <listitem>Substitute entity values for entity references. By default, xmllint leaves entity references in place.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--nonet</parameter></term>
          <listitem>Do not use the Internet to fetch DTDs or entities.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--nsclean</parameter></term>
          <listitem>Remove redundant namespace declarations.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--output FILE</parameter></term>
          <listitem>Define a file path where xmllint will save the result of parsing. Usually the programs build a tree and save it on stdout, with this option the result XML instance will be saved onto a file.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--recover</parameter></term>
          <listitem>Output any parsable portions of an invalid document.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--valid</parameter></term>
          <listitem>Determine if the document is a valid instance of the included Document Type Definition (DTD). A DTD to be validated against also can be specified at the command line using the --dtdvalid option. By default, xmllint also checks to determine if the document is well-formed.</listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter>--xinclude</parameter></term>
          <listitem>Do XInclude processing.</listitem>
        </varlistentry>
      </variablelist>

    </section>

    <section xml:id='tidy'>
      <info>
        <title><command>tidy</command> for Tidying Up and Fixing XML</title>
        <abstract>
          <para>Tidy reads HTML, XHTML, and XML files and writes cleaned-up markup.  For HTML variants, it detects, reports, and corrects many common coding errors and strives to produce visually equivalent markup that is both conformant to the HTML specifications and that works in most browsers.</para>
          <para>A common use of Tidy is to convert plain HTML to XHTML.  For generic XML files, Tidy is limited to correcting basic well-formedness errors and pretty printing.</para>
          <para>If no input file is specified, Tidy reads the standard input.  If no output file is specified, Tidy writes the tidied markup to the standard output.  If no error file is specified, Tidy writes messages to the standard error.</para>
        </abstract>
      </info>

      <section>
        <title>Files to Write to or to Read from</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[-output <file>, -o <file> (output-file: <file>)]]></cmdsynopsis></term>
            <listitem>write output to the specified &lt;file&gt;</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[-config <file>]]></cmdsynopsis></term>
            <listitem>set configuration options from the specified &lt;file&gt;</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[-file <file>, -f <file> (error-file: <file>)]]></cmdsynopsis></term>
            <listitem>write errors and warnings to the specified &lt;file&gt;</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-modify, -m (write-back: yes)</cmdsynopsis></term>
            <listitem>modify the original input files</listitem>
          </varlistentry>
        </variablelist>
        <cmdsynopsis><![CDATA[]]></cmdsynopsis>
      </section>

      <section>
        <title>Processing Directives</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis>-indent, -i (indent: auto)</cmdsynopsis></term>
            <listitem>indent element content</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[-wrap <column>, -w <column> (wrap: <column>)]]></cmdsynopsis></term>
            <listitem>wrap text at the specified &lt;column&gt;. 0 is assumed if &lt;column&gt; is missing. When this option is omitted, the default of the configuration option 'wrap' applies.</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-upper, -u (uppercase-tags: yes)</cmdsynopsis></term>
            <listitem>force tags to upper case</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-clean, -c (clean: yes)</cmdsynopsis></term>
            <listitem>replace FONT, NOBR and CENTER tags with CSS</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-bare, -b (bare: yes)</cmdsynopsis></term>
            <listitem>strip out smart quotes and em dashes, etc.</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-gdoc, -g (gdoc: yes)</cmdsynopsis></term>
            <listitem>produce clean version of html exported by Google Docs</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-numeric, -n (numeric-entities: yes)</cmdsynopsis></term>
            <listitem>output numeric rather than named entities</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-errors, -e (markup: no)</cmdsynopsis></term>
            <listitem>show only errors and warnings</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-quiet, -q (quiet: yes)</cmdsynopsis></term>
            <listitem>suppress nonessential output</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-omit (omit-optional-tags: yes)</cmdsynopsis></term>
            <listitem>omit optional start tags and end tags</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-xml (input-xml: yes)</cmdsynopsis></term>
            <listitem>specify the input is well formed XML</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-asxml, -asxhtml (output-xhtml: yes)</cmdsynopsis></term>
            <listitem>convert HTML to well formed XHTML</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis>-ashtml (output-html: yes)</cmdsynopsis></term>
            <listitem>force XHTML to well formed HTML</listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[-access <level> (accessibility-check: <level>)]]></cmdsynopsis></term>
            <listitem><![CDATA[do additional accessibility checks (<level> = 0, 1, 2, 3). 0 is assumed if <level> is missing.]]></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>XML*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Document Display Options*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Document In and Out Options*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Diagnostic Options*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Encoding Options*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Cleanup Options*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Entities Options*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Repair Options*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Transformation Options*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Teaching Tidy Options*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>Pretty Print Options*</title>
        <variablelist>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
          <varlistentry>
            <term><cmdsynopsis><![CDATA[]]></cmdsynopsis></term>
            <listitem></listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>See Also*</title>
      </section>

    </section>

    <section xml:id='pdftohtml'>
      <title><command>pdftohtml</command></title>
      <para><command>pdftohtml</command> is a program that converts PDF documents into HTML. It generates its output in the current working directory.</para>
      <cmdsynopsis><![CDATA[pdftohtml [options] <PDF-file> [<HTML-file> <XML-file>]]]></cmdsynopsis>
      <para>A summary of options are included below.</para>
      <literallayout><![CDATA[ -h, -help
              Show summary of options.

-f <int>
first page to print

-l <int>
last page to print

-q     do not print any messages or errors

-v     print copyright and version info

-p     exchange .pdf links with .html

-c     generate complex output

-s     generate single HTML that includes all pages

-dataurls
       use data URLs instead of external images in HTML. No available in all platforms

-i     ignore images

-noframes
       generate no frames. Not supported in complex output mode.

-stdout
       use standard output

-zoom <fp>
       zoom the PDF document (default 1.5) (1 means 72 DPI)

-xml   output for XML post-processing

-noroundcoord
       do not round coordinates (with XML output only)

-enc <string>
       output text encoding name

-opw <string>
       owner password (for encrypted files)

-upw <string>
              user password (for encrypted files)

-hidden
       force hidden text extraction

-fmt   image file format for Splash output (png or jpg).
       If complex is selected, but -fmt is not specified, -fmt png will be assumed

-nomerge
       do not merge paragraphs

-nodrm override document DRM settings

-wbt <fp>
       adjust  the  word  break  threshold  percent.  Default  is 10.  Word break occurs
       when distance between two adjacent characters is greater than this percent of character height.

-fontfullname
       outputs the font name without any substitutions.]]></literallayout>
    </section> <!-- end of "<command>pdftohtml</command>" -->


  </section> <!-- end of "Tools for Dealing with XML" -->


  <section xml:id='xsl'>
    <title>XSL</title>
    <para>XSL stands for EXtensible Stylesheet Language. It is an XML (family of) language(s)...</para>
    
    <para>There are actually two complete languages and a specification under the XSL umbrella:</para>
    <itemizedlist>
      <listitem>a transformation language, which is named XSL Transformations, or <link linkend='xslt'>XSLT</link></listitem>
      <listitem>a language used to format XML documents for display, XSL Formatting Objects, or <link linkend='xsl_fo'>XSL-FO</link>.</listitem>
      <listitem>the <link linkend='xpath'>XPath</link> specification, used to navigate XML document.</listitem>
    </itemizedlist>
    <para>Of course, the two languages can be used together, so that XSLT transforms the data, and XSL Formatting Objects then further modifies the data for display, much like Cascading Style Sheets.</para>
    
    <section sect='sect2'>
      <title>How XSLT Works</title>
      <para>An XSLT <firstterm>stylesheet</firstterm> is used to define the transformation rules to be applied on the target XML document. XSLT stylesheet is written in XML format. XSLT Processor takes the XSLT stylesheet and applies the transformation rules on the target XML document and then it generates a formatted document in the form of XML, HTML, or text format. Possibly, this formatted document is then utilized by XSLT formatter to generate the actual output which is to be displayed to the end-user.</para>
      xlst_working
      <mediaobject>
       <imageobject>
         <imagedata format='JPEG' fileref='Electric_files/pictures/Communicating/xlst_working.jpg'/>
       </imageobject>
     </mediaobject>
    </section> <!-- </sect2> -->
    
    <section sect='sect2' xml:id='xsl_fo'>
      <title>XSL Formatting Objects (XSL-FO)*</title>
    </section> <!-- </sect2> -->
    
  </section> <!-- </sect1> -->
  
  
    <section xml:id='xml_programming'>
      <title>XML Programming</title>
      <para>That is, besides <link linkend='xslt'>XSLT</link>, which is considered too limited compared to DOM and SAX.</para>
      <para>The two major approaches to manipulate an XML document programmatically are:</para>
      <variablelist>
        <varlistentry>
          <term>(In-Memory) Tree-Representation (mainly <link linkend='dom'>DOM</link>)</term>
          <listitem>These APIs provide a generic, object tree data structure mirroring the parse tree. They have been called <quote>passive</quote> APIs.</listitem>
        </varlistentry>
        <varlistentry>
          <term>Event-Driven Processing (mainly <link linkend='sax'>SAX</link>)</term>
          <listitem>
            <para>Documents are modeled in terms of a stream of event call-backs, which has been called an <quote>active</quote> approach. Events are sent to application handlers for basic XML content (such as elements and characters) in exactly the order that they&apos;re found in the document. That&apos;s the same order in which you&apos;d traverse a tree model of that markup: you&apos;d start an element, look at its children, and then end the element. The application is responsible for building its own tree or whatever data structures, possibly smaller than the whole tree representation of the document.</para>
            <para>Event-based applications are generally more complex than tree-based applications. Processing events typically means the creation of a state machine, code that understands the current context and can route the information in the events to the...</para>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <bridgehead>Parsing with Xerces</bridgehead>
      <para>Xerces-C++ is strongly recommended for DOM and <link linkend='xerces_cpp_sax2'>SAX</link>. It is a validating XML parser written in a portable subset of C++ which makes it easy to give your application the ability to read and write XML data. A shared library is provided for parsing, generating, manipulating, and validating XML documents.</para>
      <para>Xerces-C++ is faithful to the XML 1.0 recommendation and associated standards (DOM 1.0, DOM 2.0, SAX 1.0, SAX 2.0, Namespaces, XML Schema Part 1 and Part 2).  It also provides experimental implementations of XML 1.1 and DOM Level 3.0.  The parser provides high performance, modularity, and scalability.</para>


      <section sect='sect2' xml:id='low_level_xml_parsers'>
        <title>Low-Level XML Parsers</title>
        <note>Although <link linkend='sax'>SAX</link> qualifies as a Low-Level XML Parsers, this API is discussed elsewhere.</note>
        
        <section sect='sect3'>
          <info>
            <title>expat</title>
            <abstract>
              <para>A C library for parsing XML.  Expat is a stream oriented XML parser.  This means that you register handlers with the parser prior to starting the parse.  These handlers are called when the parser discovers the associated structures in the document being parsed.  A start tag is an example of the kind of structures for which you may register handlers.</para>
              <para>On Ubuntu Linux, documentation is found in directory <filename>/usr/share/doc/libexpat1-dev/expat.html/</filename>.</para>
            </abstract>
          </info>
        </section>

        <section sect='sect3'>
          <title>libxml2</title>
          <para>libxml2 is a software library for parsing XML documents. It is also the basis for the libxslt library which processes XSLT-1.0 stylesheets.</para>
          <para>Written in the C programming language, libxml2 provides bindings to C++, Ch,[2] XSH, C#, Python, Kylix/Delphi and other Pascals, Ruby, Common Lisp,[3] and PHP. It can be accessed from the Perl programming language using the XML::LibXML module. It was originally developed for the GNOME project, but can be used outside it. The libXML code is highly portable,since it depends on standard ANSI C libraries only, and it is released under the MIT license. This library was written by Daniel Veillard and enjoys active feedback from its users.</para>
          <para>It includes the command-line utility xmllint and an HTML parser.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3' xml:id='boost_propertytree'>
          <title>Boost property_tree</title>
          <para>Although its main focus is not parsing xml, xml and many other data formats share the same general tree structure, that can conceptually, quoting the description of the library author, be described as follows:</para>
          <programlisting><![CDATA[struct ptree
{
   string data;                          // data associated with the node
   list< pair<string, ptree> > children; // ordered list of named children
};]]></programlisting>

          <para>Boost.PropertyTree allows building data structure <classname>ptree</classname> from an xml file. Then you can manually inspect the structure and collect the information you need. The library also allows building and modifying your <classname>ptree</classname> and storing it into an xml file. Technically, the library is not 100% compatible with W3C specifications, but it is sufficient to correctly process data stored in form of xml file. Still, while the library itself is very good, it doesn&apos;t fully document its capabilities, so we will try to see by an example how such xml processing can be performed.</para>
          <note>Boost&apos;s property_tree uses <link linkend='rapidxml'>rapidxml</link> as its default parser...</note>
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->  <!-- end of "Low-Level XML Parsers" -->
      
      <section sect='sect2' xml:id='dom'>
        <title>The Document Object Model (DOM)</title>
        <para>The Document Object Model (DOM) is a cross-platform and language-independent application programming interface that treats an HTML, XHTML, or XML document as a tree structure wherein each node is an object representing a part of the document. The objects can be manipulated programmatically and any visible changes occurring as a result may then be reflected in the display of the document.</para>
        
        <section sect='sect3' xml:id='pugixml'>
          <title><application>pugixml</application>, a Fast DOM-like Parser</title>
          <para><application>pugixml</application> is a C++ XML processing library, which consists of a DOM-like interface with rich traversal/modification capabilities, an extremely fast XML parser which constructs the DOM tree from an XML file/buffer, and an XPath 1.0 implementation for complex data-driven tree queries. Full Unicode support is also available, with Unicode interface variants and conversions between different Unicode encodings (which happen automatically during parsing/saving).</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3' xml:id='rapidxml'>
          <title><application>rapidxml</application>, a Fast DOM Parser</title>
          <acknowledgements>(By its maker, Marcin Kalicinski, 2009, at http://rapidxml.sourceforge.net/, who acknowledges <application linkend='pugixml'>pugixml</application> themself.)</acknowledgements>
          <para>rapidXml, by Marcin Kalicinski, is an attempt to create the fastest XML parser possible, while retaining useability, portability and reasonable W3C compatibility. It is an <foreignphrase>in-situ</foreignphrase> parser written in modern C++, with parsing speed approaching that of <function>strlen()</function> function executed on the same data.</para>
          <para><foreignphrase>In-situ</foreignphrase> means that the parser does not make copies of strings. Instead, it places pointers to the source text in the DOM hierarchy. Also, the parser modifies source text during the parsing process by default.</para>
          <para>If you are looking for a stable and fast parser, look no further. Integration with your project will be trivial, because the entire library is contained in a single header file, and requires no building or configuration.</para>
          <para>You may also like to check <link linkend='boost_propertytree'>boost::property_tree library</link>, which presents a higher level interface, and uses RapidXml as its default XML parser.</para>
        </section> <!-- </sect3> -->  <!-- end of "<application>rapidxml</application>, a Fast DOM Parser" -->
        
      </section> <!-- </sect2> -->  <!-- end of "The Document Object Model" -->
      
      <section sect='sect2' xml:id='sax'>
        <title>The Simple API for XML (SAX)</title>
        <para>SAX is an event-driven XML parser written for <link linkend='java'>Java</link>. The C++ interface is not fixed, but I shall try to SAX in <link linkend='cpp'>C++</link> as I don&apos;t use Java.</para>
        <para>The SAX2 API presents a callback based API to the parser. An application that uses SAX2 provides an instance of a handler class to the parser. When the parser detects XML constructs, it calls the methods of the handler class, passing them information about the construct that was detected. The most commonly used handler classes are <classname>ContentHandler</classname> which is called when XML constructs are recognized, and <classname>ErrorHandler</classname> which is called when an error occurs.</para>
        <section sect='sect3' xml:id='sax_in_cpp'>
          <title>SAX in C++</title>
          <warning>The SAX2 API for XML parsers was originally developed for Java. Please be aware that there is no standard SAX2 API for C++</warning>
          
          <section sect='sect4' xml:id='xerces_cpp_sax2'>
            <title>Xerces C++ SAX2 API</title>
            <acknowledgements>(From <link xlink:href='https://xerces.apache.org/xerces-c/program-sax2-3.html'>Xerces-C++ Documentation</link>)</acknowledgements>
            
            <para>You may use the <link linkend='xerces'>Xerces</link>-C++ SAX2 API, but then client code compatibility with other C++ XML parsers is not guaranteed.</para>
            <para>The header files for the various SAX2 handler classes are in the <filename>xercesc/sax2/</filename> directory.</para>
            <para>As a convenience, Xerces-C++ provides <classname>DefaultHandler</classname>, a single class which is publicly derived from all the Handler classes. <classname>DefaultHandler</classname>&apos;s default implementation of the handler callback methods is to do nothing. A convenient way to get started with Xerces-C++ is to derive your own handler class from <classname>DefaultHandler</classname> and override just those methods in <classname>HandlerBase</classname> which you are interested in customizing.</para>
            <section sect='sect5'>
              <title>Introduction to Xerces</title>
              <para>Xerces-C++ is a validating XML parser written in a portable subset of C++. Xerces-C++ makes it easy to give your application the ability to read and write XML data. A shared library is provided for parsing, generating, manipulating, and validating XML documents using the DOM, SAX, and SAX2 APIs. For an introduction to programming with Xerces-C++ refer to the <citetitle>Programming Guide</citetitle>.</para>
              <para>Xerces-C++ is faithful to the XML 1.0 recommendation and many associated standards (see Features below).</para>
              <para>The parser provides high performance, modularity, and scalability. Source code, samples and API documentation are provided with the parser. For portability, care has been taken to make minimal use of templates, no RTTI, and minimal use of <userinput>#ifdefs</userinput>.</para>
              <para>Xerces has rich generating and validating capabilities. The parser is used for:</para>
              <itemizedlist>
                <listitem>Building XML-savvy Web servers</listitem>
                <listitem>Building next generation of vertical applications that use XML as their data format</listitem>
                <listitem>On-the-fly validation for creating XML editors</listitem>
                <listitem>Ensuring the integrity of e-business data expressed in XML</listitem>
                <listitem>Building truly internationalized XML applications</listitem>
              </itemizedlist>
            </section> <!-- </sect5> -->
            <section sect='sect5' xml:id='xerces_cpp_sax_simple_example'>
              <title>A Simple Example of Xerces C++ SAX2</title>
              <para>This simple example shows how to create a handler which will print element names, and print fatal error messages. The source code for the sample applications show additional examples of how to write handler classes.</para>
            </section> <!-- </sect5> -->  <!-- end of "A Simple Example of Xerces C++ SAX2" -->
            <section sect='sect5' xml:id='xerces_cpp_sax_reader'>
              <title>Constructing an XML Reader</title>
              <para>In order to use Xerces-C++ SAX2 to parse XML files, you will need to create an instance of the <classname>SAX2XMLReader</classname> class. The example below shows the code you need in order to create an instance of <classname>SAX2XMLReader</classname>. The <classname>ContentHandler</classname> and <classname>ErrorHandler</classname> instances required by the SAX2 API are provided using the <classname>DefaultHandler</classname> class supplied with Xerces-C++.</para>
              <programlisting><![CDATA[#include <xercesc/sax2/SAX2XMLReader.hpp>
#include <xercesc/sax2/XMLReaderFactory.hpp>
#include <xercesc/sax2/DefaultHandler.hpp>
#include <xercesc/util/XMLString.hpp>

#include <iostream>

using namespace std;
using namespace xercesc;

int main (int argc, char* args[]) {

    try {
        XMLPlatformUtils::Initialize();
    }
    catch (const XMLException& toCatch) {
        char* message = XMLString::transcode(toCatch.getMessage());
        cout << "Error during initialization! :\n";
        cout << "Exception message is: \n"
             << message << "\n";
        XMLString::release(&message);
        return 1;
    }

    char* xmlFile = "x1.xml";
    SAX2XMLReader* parser = XMLReaderFactory::createXMLReader();
    parser->setFeature(XMLUni::fgSAX2CoreValidation, true);
    parser->setFeature(XMLUni::fgSAX2CoreNameSpaces, true);   // optional

    DefaultHandler* defaultHandler = new DefaultHandler();
    parser->setContentHandler(defaultHandler);
    parser->setErrorHandler(defaultHandler);

    try {
        parser->parse(xmlFile);
    }
    catch (const XMLException& toCatch) {
        char* message = XMLString::transcode(toCatch.getMessage());
        cout << "Exception message is: \n"
             << message << "\n";
        XMLString::release(&message);
        return -1;
    }
    catch (const SAXParseException& toCatch) {
        char* message = XMLString::transcode(toCatch.getMessage());
        cout << "Exception message is: \n"
             << message << "\n";
        XMLString::release(&message);
        return -1;
    }
    catch (...) {
        cout << "Unexpected Exception \n" ;
        return -1;
    }

    delete parser;
    delete defaultHandler;
    return 0;
}]]></programlisting>
              <para>...</para>
            </section> <!-- </sect5> -->  <!-- end of "Constructing an XML Reader" -->
            
            <section sect='sect5' xml:id='xerces_cpp_sax_reader_features_and_properties'>
              <title>Supported Features and Properties in <classname>SAX2XMLReader</classname></title>
              <para>The behavior of the <classname>SAX2XMLReader</classname> is dependant on the values of its features (boolean-valued) and properties (non-boolean-valued).</para>
              <para>All of the features can be set using the function <function>SAX2XMLReader::setFeature(cons XMLCh* const, const bool)</function> and can be queried using the function bool <function>SAX2XMLReader::getFeature(const XMLCh* const)</function>.</para>
              <para>All of the properties can likewise be set using the function <function>SAX2XMLReader::setProperty(cons XMLCh* const, const bool)</function> and can be queried using the function bool <function>SAX2XMLReader::getProperty(const XMLCh* const)</function>. The application is required to initialize this void pointer to a value of the correct type. If the same property is set more than once, the last one takes effect.</para>
              <para>Many of the features concern whether to perform namespace processing (<varname>namespaces</varname>), validation through supplied DTDs or Schemas (<varname>validation</varname>, <varname>dynamic</varname>, <varname>schema</varname>, <varname>schema-full-checking</varname>, <varname>load-schema</varname>, <varname>load-external-dtd</varname>, <varname>validation-error-as-fatal</varname>), resolving entities (<varname>disable-default-entity-resolution</varname>) and whether to continue parsing after a fatal error (<varname>continue-after-fatal-error</varname>).</para>
              <para>None of the features or properties can be modified in the middle of a parse, or an exception will be thrown.</para>
              
              <para>About the property <varname>low-water-mark</varname>, if the number of available bytes in the raw buffer is less than the low water mark the parser will attempt to read more data before continuing parsing. By default the value for this parameter is 100 bytes. You may want to set this parameter to 0 if you would like the parser to parse the available data immediately without potentially blocking while waiting for more date.</para>
              <para>Function <function>setInputBufferSize(const size_t bufferSize)</function> sets the maximum input buffer size. This allows users to limit the size of buffers used in parsing XML character data. The effect of setting this size is to limit the size of a ContentHandler::characters() call. The parser&apos;s default input buffer size is 1 megabyte.</para>
            </section> <!-- </sect5> -->
            
          </section> <!-- </sect4> -->  <!-- end of "Xerces C++ SAX2 API" -->
        </section> <!-- </sect3> -->  <!-- end of "SAX in C++" -->
      </section> <!-- </sect2> -->  <!-- end of "The Simple API for XML (SAX)" -->
      
      <section sect='sect2' >
        <title>Xerces</title>
        <para xml:id='xerces'>Xerces is Apache&apos;s collection of software libraries for parsing, validating, serializing and manipulating XML. The library implements a number of standard APIs for XML parsing, including <link linend='dom'>DOM</link>, SAX and <link linkend='xerces_cpp_sax2'>SAX2</link>. The implementation is available in the Java, C++ and Perl programming languages.</para>
        <para>The Apache Xerces™ Project is responsible for software licensed to the Apache Software Foundation intended for the creation and maintenance of:</para>
        <itemizedlist>
          <listitem>XML parsers</listitem>
          <listitem>related software components</listitem>
        </itemizedlist>


        <section sect='sect3'>
          <title>Xerces Features</title>
          <itemizedlist>
            <listitem>
              <para>Xerces conforms to:</para>
              <itemizedlist>
                <listitem>XML 1.0 (Third Edition), W3C Recommendation</listitem>
                <listitem>XML 1.1 (First Edition), W3C Recommendation (Note: section 2.13 Normalization Checking has not been implemented)</listitem>
                <listitem>DOM Level 1 Specification, W3C Recommendation of October 1, 1998</listitem>
                <listitem>DOM Level 2 Core Specification, W3C Recommendation of November 13, 2000</listitem>
                <listitem>DOM Level 2 Traversal and Range Specification, W3C Recommendation of November 13, 2000</listitem>
                <listitem>SAX 1.0 and SAX 2.0</listitem>
                <listitem>Namespaces in XML, W3C Recommendation of January 14, 1999</listitem>
                <listitem>Namespaces in XML 1.1, W3C Recommendation</listitem>
                <listitem>XML Schema Part 1: Structure, W3C Recommendation 2 May 2001</listitem>
                <listitem>XML Schema Part 2: Datatypes, W3C Recommendation 2 May 2001</listitem>
                <listitem>DOM Level 3.0 Core Specification, W3C Recommendation 7 April 2004</listitem>
                <listitem>DOM Level 3.0 Load and Save Specification, W3C Recommendation 7 April 2004</listitem>
                <listitem>See DOM Level 3 Support for detail.</listitem>
                <listitem>XML Inclusions (XInclude) 1.0 (Second Edition), W3C Recommendation 15 November 2006</listitem>
                <listitem>Element Traversal Specification, W3C Recommendation 22 December 2008</listitem>
              </itemizedlist>
            </listitem>
            <listitem>Source code, samples, and documentation are provided</listitem>
            <listitem>Programmatic generation and validation of XML</listitem>
            <listitem>Pluggable catalogs, validators and encodings</listitem>
            <listitem>High performance</listitem>
            <listitem>Customizable error handling</listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->

      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->  <!-- end of "XML Programming" -->
    
    <section>
      <title>Other XML languages</title>
      <para>The following sections deal each with a major XML language, save for <link linkend='docbook'>DocBook</link>, which I have discussed elsewhere.</para>
      
      <section sect='sect2' xml:id='fb2'>
        <title>The fb2 Book Format*</title>
      </section> <!-- </sect2> -->  <!-- end of "The fb2 Book Format" -->
      
      <section xml:id='tei'>
        <title>TEI</title>
        <?source https://tei-c.org/ ?>
        <para>The Text Encoding Initiative (TEI) is a consortium which collectively develops and maintains a standard for the representation of texts in digital form. Its chief deliverable is a set of Guidelines which specify encoding methods for machine-readable texts, chiefly in the humanities, social sciences and linguistics. Since 1994, the TEI Guidelines have been widely used by libraries, museums, publishers, and individual scholars to present texts for online research, teaching, and preservation. In addition to the Guidelines themselves, the Consortium provides a variety of resources and training events for learning TEI, information on projects using the TEI, a bibliography of TEI-related publications, and software developed for or adapted to the TEI.</para>
        <para>The TEI Consortium is a nonprofit membership organization composed of academic institutions, research projects, and individual scholars from around the world. Members contribute financially to the Consortium and elect representatives to its Council and Board of Directors. In commemoration of the TEI community&apos;s 30th anniversary, it was awarded the 2017 Antonio Zampolli Prize from the Alliance of Digital Humanities Organizations.</para>
      </section> <!-- end of "TEI" -->
      
      <section sect='sect2' xml:id='GraphMLPrimer'>
  <title>GraphML Primer</title>
  <para>From <citetitle>http://graphml.graphdrawing.org/primer/graphml-primer.html</citetitle>, with editors:</para>
  <itemizedlist>
    <listitem>Ulrik Brandes <link xlink:href='mailto:ulrik.brandes@uni-konstanz.de'>ulrik.brandes@uni-konstanz.de</link>,</listitem>
    <listitem>Markus Eiglsperger <link xlink:href='mailto:eiglsper@web.de'>eiglsper@web.de</link>, and</listitem>
    <listitem>Jürgen Lerner <link xlink:href='mailto:lerner@inf.uni-konstanz.de'>lerner@inf.uni-konstanz.de</link></listitem>
  </itemizedlist>
  <para class='abstract'>This document, entitled <citetitle>GraphML Primer</citetitle>, is a non-normative document intended to provide an easily readable description of the GraphML facilities, and is oriented towards quickly understanding how to create GraphML documents. This primer describes the language features through examples which are complemented by references to normative texts.</para>
  <!--
  <small>The GraphML Primer has been translated into
    <link linkend='http://www.webhostinghub.com/support/es/misc/introduccion-a-graphml'>Spanish</link> (thanks to Maria Ramos),
    <link linkend='http://www.piecesdiscount24.fr/edu/?p=5171'>French</link> (thanks to Vicky Rotarova), and
    <link linkend='http://www.reservedeler-online.co.no/education/graphml-primer/'>Polish</link> (thanks to Silvia Moraru).
    We have not checked these translations for accuracy, though.
  </small>
  -->
    
    <bridgehead>Table of contents</bridgehead>
    <para>1 <link linkend='GraphMLPrimer_Intro'>Introduction</link></para>
    <para>2 <link linkend='GraphMLPrimer_BC'>Basic Concepts</link></para>
    <para>2.1 <link linkend='GraphMLPrimer_SimpleGraph'>A Simple Graph</link></para>
    <para>2.2 <link linkend='GraphMLPrimer_Header'>Header</link></para>
    <para>2.3 <link linkend='GraphMLPrimer_Graph'>Graph Tolology</link></para>
    <para>2.3.1 <link linkend='GraphMLPrimer_GraphGraph'>Declaring a Graph</link></para>
    <para>2.3.2 <link linkend='GraphMLPrimer_GraphNode'>Declaring a Node</link></para>
    <para>2.3.3 <link linkend='GraphMLPrimer_GraphEdge'>Declaring an Edge</link></para>
    <para>2.4 <link linkend='GraphMLPrimer_Attributes'>Attributes</link></para>
    <para>2.4.1 <link linkend='GraphMLPrimer_AttributesExample'>GraphML-Attributes Example</link></para>
    <para>2.4.2 <link linkend='GraphMLPrimer_AttributesDefinition'>Declaring GraphML-Attributes</link></para>
    <para>2.4.4 <link linkend='GraphMLPrimer_AttributesValues'>Defining GraphML-Attribute Values</link></para>
    <para>2.5 <link linkend='GraphMLPrimer_ParseInfo'>Parse Info</link></para>
    <para>3 <link linkend='GraphMLPrimer_NHP'>Advanced Concepts I: Nested Graphs, Hyperedges &amp; Ports</link></para>
    <para>3.1 <link linkend='GraphMLPrimer_Nested'>Nested Graphs</link></para>
    <para>3.2 <link linkend='GraphMLPrimer_Hyperedges'>Hyperedges</link></para>
    <para>3.3 <link linkend='GraphMLPrimer_Ports'>Ports</link></para>
    <para>4 <link linkend='GraphMLPrimer_EXT'>Advanced Concepts II: Extending GraphML</link></para>
    <para>4.1 <link linkend='GraphMLPrimer_AttributesExt'>Adding XML Attributes to GraphML Elements</link></para>
    <para>4.2 <link linkend='GraphMLPrimer_Complex'>Adding Complex Types</link></para>
    
    <section sect='sect3'  xml:id='GraphMLPrimer_Intro'>
       <title>1 Introduction</title>
       <para>This document, GraphML Primer, provides an description of GraphML, and should be used alongside the formal descriptions of the language contained in the  GraphML specification. The intended audience of this document includes application developers whose programs read and write GraphML files, and users who want to communicate with programs using GraphML import/export. The text assumes that you have a basic understanding of <link xlink:href='https://www.w3.org/TR/2000/REC-xml-20001006'>XML 1.0</link> and <link xlink:href='https://www.w3.org/TR/1999/REC-xml-names-19990114/'> XML-Namespaces</link>. Basic knowledge of <link xlink:href='https://www.w3.org/TR/2001/REC-xmlschema-0-20010502'>XML Schema</link> is also assumed for some parts of this document. Each major section of the primer introduces new features of the language, and describes those features in the context of concrete examples.</para>
       <para><link linkend='GraphMLPrimer_BC'>Section 2</link> covers the basic mechanisms of GraphML. It describes how to declare a simple graph by defining its nodes and edges and how to add simple user data to the graph.</para>
       <para><link linkend='GraphMLPrimer_NHP'>Section 3</link> describes advanced graph models which include nested graphs, hyperedges, and ports.</para>
       <para><link linkend='GraphMLPrimer_EXT'>Section 4</link> describes mechanisms for extending GraphML to store complex application specific data.</para>
       <para>The primer is a non-normative document, which means that it does not provide a definitive specification of the GraphML language. The examples and other explanatory material in this document are provided to help you understand GraphML, but they may not always provide definitive answers. In such cases, you will need to refer to the GraphML specification, and to help you do this, we provide many links pointing to the relevant parts of the specification. </para>
     </section> <!-- </sect3> -->
     
     <section sect='sect3' xml:id='GraphMLPrimer_BC'>
       <title>2 Basic Concepts</title>
       <para>The purpose of a GraphML document is to define a graph. Let us start by considering the graph shown in the figure below. It contains 11 nodes and 12 edges.</para>
       <mediaobject>
         <imageobject>
           <imagedata format='PNG' fileref='Electric_files/pictures/Communicating/graph/simple.png' alt='a simple graph'/>
          </imageobject>
          <caption>A simple graph.</caption>
        </mediaobject>
       
       <section sect='sect4' xml:id='GraphMLPrimer_SimpleGraph'>
         <title>2.1 A simple graph</title>
         <para>Our simple graph is described by the following code:</para>
         <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt;
  &lt;graph id="G" edgedefault="undirected"&gt;
    &lt;node id="n0"/&gt;
    &lt;node id="n1"/&gt;
    &lt;node id="n2"/&gt;
    &lt;node id="n3"/&gt;
    &lt;node id="n4"/&gt;
    &lt;node id="n5"/&gt;
    &lt;node id="n6"/&gt;
    &lt;node id="n7"/&gt;
    &lt;node id="n8"/&gt;
    &lt;node id="n9"/&gt;
    &lt;node id="n10"/&gt;
    &lt;edge source="n0" target="n2"/&gt;
    &lt;edge source="n1" target="n2"/&gt;
    &lt;edge source="n2" target="n3"/&gt;
    &lt;edge source="n3" target="n5"/&gt;
    &lt;edge source="n3" target="n4"/&gt;
    &lt;edge source="n4" target="n6"/&gt;
    &lt;edge source="n6" target="n5"/&gt;
    &lt;edge source="n5" target="n7"/&gt;
    &lt;edge source="n6" target="n8"/&gt;
    &lt;edge source="n8" target="n7"/&gt;
    &lt;edge source="n8" target="n9"/&gt;
    &lt;edge source="n8" target="n10"/&gt;
  &lt;/graph&gt;
&lt;/graphml&gt;</programlisting>
      
      <para>The GraphML document consists of a <userinput>graphml</userinput> element and a variety of subelements: <userinput>graph</userinput>, <userinput>node</userinput>, <userinput>edge</userinput>. In the remainder of this section we will discuss these elements in detail and show how they define a graph.</para>
    </section> <!-- </sect4> -->
    
      <section sect='sect4' class="div2" xml:id='GraphMLPrimer_Header'>
        <title>2.2 The Header</title>
        <para>In this section we discuss the parts of the document which are common to all GraphML documents, basically the <userinput>graphml</userinput> element.</para>
        
<programlisting><bridgehead>A Header with XML Schema reference</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns 
     http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt;

  ...

&lt;/graphml&gt;</programlisting>
        <para>The first line of the document is an XML process instruction which defines that the document adheres to the XML 1.0 standard and that the encoding of the document is UTF-8, the standard encoding for XML documents. Of course other encodings can be chosen for GraphML documents.</para>
        <para>The second line contains the <emphasis>root-element</emphasis> element of a GraphML document: the <userinput>graphml</userinput> element. The <userinput>graphml</userinput> element, like all other GraphML elements, belongs to the namespace <userinput>http://graphml.graphdrawing.org/xmlns</userinput>. For this reason we define this namespace as the default namespace in the document by adding the XML Attribute <userinput>xmlns="http://graphml.graphdrawing.org/xmlns"</userinput> to it. The two other XML Attributes are needed to specify the XML Schema for this document. In our example we use the standard schema for GraphML documents located on the <userinput>graphdrawing.org</userinput> server. The first attribute, <userinput>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</userinput>, defines <userinput>xsi</userinput> as the XML Schema namespace. The second attribute, <userinput>xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd" </userinput>, defines the XML Schema location for all elements in the GraphML namespace.</para>
        <para>The XML Schema reference is not required but it provides means to validate the document and is therefore strongly recommended.</para>
        <programlisting> <bridgehead>A Header without XML Schema reference</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns"&gt;

  ...

&lt;/graphml&gt; </programlisting>
</section> <!-- </sect4> -->

        <section sect='sect4' class="div2" xml:id='GraphMLPrimer_Graph'>
          <title>2.3 The Graph</title>
          <para>A graph is, not surprisingly, denoted by a <userinput>graph</userinput> element. Nested inside a <userinput>graph</userinput> element are the declarations of nodes and edges. A node is declared with a <userinput>node</userinput> element, and an egde with an <userinput>edge</userinput> element.</para>
          <programlisting><bridgehead>The definition of the graph</bridgehead>
  &lt;graph id="G" edgedefault="directed"&gt;
    &lt;node id="n0"/&gt;
    &lt;node id="n1"/&gt;
    ...
    &lt;node id="n10"/&gt;
    &lt;edge source="n0" target="n2"/&gt;
    &lt;edge source="n1" target="n2"/&gt;
    ...
    &lt;edge source="n8" target="n10"/&gt;
  &lt;/graph&gt;</programlisting>
          <para>In GraphML there is no order defined for the appearance of <userinput>node</userinput> and <userinput>edge</userinput> elements. Therefore the following example is a perfectly valid GraphML fragment:</para>
          <programlisting><bridgehead>Another definition of the graph</bridgehead>
  &lt;graph id="G" edgedefault="directed"&gt;
    &lt;node id="n0"/&gt;
    &lt;edge source="n0" target="n2"/&gt;
    &lt;node id="n1"/&gt;
    &lt;node id="n2"/&gt;
    ...
  &lt;/graph&gt;</programlisting>
        
        <section sect='sect5' class="div3" xml:id='GraphMLPrimer_GraphGraph'>
	  <title>2.3.1 Declaring a Graph</title>
          <para>Graphs in GraphML are <emphasis>mixed</emphasis>, in other words, they can contain directed and undirected edges at the same time. If no direction is specified when an edge is declared, the <emphasis>default direction</emphasis> is applied to the edge. The default direction is declared as the XML Attribute <userinput>edgedefault</userinput> of the <userinput>graph</userinput> element. The two possible value for this XML Attribute are <userinput>directed</userinput> and <userinput>undirected</userinput>. Note that the default direction <emphasis>must</emphasis> be specified.</para>
          <para>Optionally an identifier for the graph can be specified with the XML Attribute <userinput>id</userinput>. The identifier is used, when it is necessary to reference the graph.</para>
        </section> <!-- </sect5> -->
 
	<section sect='sect5' xml:id='GraphMLPrimer_GraphNode'>
          <title>2.3.2 Declaring a Node</title>
          <para>Nodes in the graph are declared by the <userinput>node</userinput> element. Each node has an identifier, which must be unique within the entire document, i.e., in a document there must be no two nodes with the same identifier.
	  The identifier of a node is defined by the XML-Attribute <userinput>id</userinput>.</para>
        </section> <!-- </sect5> -->
	  
	<section sect='sect5' xml:id='GraphMLPrimer_GraphEdge'>
          <title>2.3.3 Declaring an Edge</title>
	  <para>Edges in the graph are declared by the <userinput>edge</userinput> element. Each edge must define its two endpoints with the XML-Attributes <userinput>source</userinput> and <userinput>target</userinput>. The value of the <userinput>source</userinput>, resp. <userinput>target</userinput>, must be the identifier of a node in the same document.</para>
	  <para>Edges with only one endpoint, also called loops, selfloops, or reflexive edges, are defined by having the same value for <userinput>source</userinput> and <userinput>target</userinput>.</para>
          <para>The optional XML-Attribute <userinput>directed</userinput> declares if the edge is directed or undirected. The value <userinput>true</userinput> declares a directed edge, the value <userinput>false</userinput> an undirected edge. If the direction is not explicitely defined, the default direction is applied to this edge as defined in the enclosing graph. 
	  </para>
          <para>Optionally an identifier for the edge can be specified with the XML Attribute <userinput>id</userinput>. When it is necessary to reference the edge, the <userinput>id</userinput> XML-Attribute is used.</para>
          <programlisting><bridgehead>An edge with all XML-Attributes defined</bridgehead>
    ...
    &lt;edge id="e1" directed="true" source="n0" target="n2"/&gt;
    .. </programlisting>
      </section> <!-- </sect5> -->
    </section> <!-- </sect4> -->
    
    <section sect='sect4' xml:id='GraphMLPrimer_Attributes'>
      <title>2.4 GraphML-Attributes</title>
      <para>In the previous section we discussed how to describe the topology of a graph in GraphML. While pure topological information may be sufficient for some appications of GraphML, for the most time additional information is needed. With the help of the extension <emphasis>GraphML-Attributes</emphasis> one can specify additional information of simple type for the elements of the graph. Simple type means that the information is restricted to scalar values, e.g. numerical values and strings.</para>
      <para>GraphML-Attributes must not be confounded with XML-Attributes which are a different concept.</para>
      <section sect='sect5' xml:id='GraphMLPrimer_AttributesExample'>
        <title>2.4.1 GraphML-Attributes Example</title>
        <para>In this section a graph with colored nodes and edge weights will be our running example.</para>
        
        <mediaobject>
          <imageobject>
            <imagedata format='PNG' fileref='Electric_files/pictures/Communicating/graph/attributes.png' alt='Image of colored example graph'/>
          </imageobject>
          <caption>A graph with colored nodes and edge weights.</caption>
        </mediaobject>
        
        <para>We will use GraphML-Attributes to store the extra data on the nodes and edges.</para>
        <programlisting  xml:id='GraphMLPrimer_attrExpl'><bridgehead>Example of a GraphML Document with GraphML-Attributes</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns"  
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns 
        http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt;
  &lt;key id="d0" for="node" attr.name="color" attr.type="string"&gt;
    &lt;default&gt;yellow&lt;/default&gt;
  &lt;/key&gt;
  &lt;key id="d1" for="edge" attr.name="weight" attr.type="double"/&gt;
  &lt;graph id="G" edgedefault="undirected"&gt;
    &lt;node id="n0"&gt;
      &lt;data key="d0"&gt;green&lt;/data&gt;
    &lt;/node&gt;
    &lt;node id="n1"/&gt;
    &lt;node id="n2"&gt;
      &lt;data key="d0"&gt;blue&lt;/data&gt;
    &lt;/node&gt;
    &lt;node id="n3"&gt;
      &lt;data key="d0"&gt;red&lt;/data&gt;
    &lt;/node&gt;
    &lt;node id="n4"/&gt;
    &lt;node id="n5"&gt;
      &lt;data key="d0"&gt;turquoise&lt;/data&gt;
    &lt;/node&gt;
    &lt;edge id="e0" source="n0" target="n2"&gt;
      &lt;data key="d1"&gt;1.0&lt;/data&gt;
    &lt;/edge&gt;
    &lt;edge id="e1" source="n0" target="n1"&gt;
      &lt;data key="d1"&gt;1.0&lt;/data&gt;
    &lt;/edge&gt;
    &lt;edge id="e2" source="n1" target="n3"&gt;
      &lt;data key="d1"&gt;2.0&lt;/data&gt;
    &lt;/edge&gt;
    &lt;edge id="e3" source="n3" target="n2"/&gt;
    &lt;edge id="e4" source="n2" target="n4"/&gt;
    &lt;edge id="e5" source="n3" target="n5"/&gt;
    &lt;edge id="e6" source="n5" target="n4"&gt;
      &lt;data key="d1"&gt;1.1&lt;/data&gt;
    &lt;/edge&gt;
  &lt;/graph&gt;
&lt;/graphml&gt;</programlisting>
          </section> <!-- </sect5> -->
          
          <section sect='sect5' xml:id='GraphMLPrimer_AttributesDefinition'>
            <title>2.4.2 Declaring GraphML-Attributes</title>
            <para>A GraphML-Attribute is defined by a <userinput>key</userinput> element which specifies the <varname>identifier</varname>, <varname>name</varname>, <varname>type</varname> and <varname>domain</varname> of the attribute.</para>
            <para>The identifier is specified by the XML-Attribute <userinput>id</userinput> and is used to refer to the GraphML-Attribute inside the document.</para>
            <para>The name of the GraphML-Attribute is defined by the XML-Attribute <userinput>attr.name</userinput> and must be unique among all GraphML-Attributes declared in the document. The purpose of the name is that applications can identify the meaning of the attribute. Note that the name of the GraphML-Attribute is not used inside the document, the identifier is used for this purpose.</para>
            <para>The type of the GraphML-Attribute can be either <userinput>boolean</userinput>, <userinput>int</userinput>, <userinput>long</userinput>, <userinput>float</userinput>, <userinput>double</userinput>, or <userinput>string</userinput>. These types are defined like the corresponding types in the Java(TM)-Programming language.</para>
            <para>The domain of the GraphML-Attribute specifies for which graph elements the GraphML-Attribute is declared. Possible values include <userinput>graph</userinput>, <userinput>node</userinput>, <userinput>edge</userinput>, and <userinput>all</userinput>.</para>
            <programlisting><bridgehead>Declaration of a GraphML Attribute</bridgehead>
    ...
    &lt;key id="d1" for="edge" attr.name="weight" attr.type="double"/&gt;
    ... </programlisting>
            <para>It is possible to define a default value for a GraphML-Attribute. The text content of the <userinput>default</userinput> element defines this default value.</para>
            <programlisting linkend='GraphMLPrimer_attrDefWithDefault'><bridgehead>Declaration of a GraphML Attribute with Default Value</bridgehead>
    ...
  &lt;key id="d0" for="node" attr.name="color" attr.type="string"&gt;
    &lt;default&gt;yellow&lt;/default&gt;
  &lt;/key&gt;
    ...</programlisting>
          </section> <!-- </sect5> -->
          
          <section sect='sect5' xml:id='GraphMLPrimer_AttributesValues'>
            <title>2.4.3 Defining GraphML-Attribute Values</title>
            <para>The value of a GraphML-Attribute for a graph element is defined by a <userinput>data</userinput> element nested inside the element for the graph element. The <userinput>data</userinput> element has an XML-Attribute <userinput>key</userinput>, which refers to the identifier of the GraphML-Attribute. The value of the GraphML-Attribute is the text content of the <userinput>data</userinput> element. This value <emphasis>must</emphasis> be of the type declared in the corresponding <userinput>key</userinput> definition.</para>
            <programlisting linkend='GraphMLPrimer_attrValue'><bridgehead>GraphML-Attribute Values</bridgehead>
  ...
  &lt;key id="d0" for="node" attr.name="color" attr.type="string"&gt;
    &lt;default&gt;yellow&lt;/default&gt;
  &lt;/key&gt;
  &lt;key id="d1" for="edge" attr.name="weight" attr.type="double"/&gt;
  &lt;graph id="G" edgedefault="undirected"&gt;
    &lt;node id="n0"&gt;
      &lt;data key="d0"&gt;green&lt;/data&gt;
    &lt;/node&gt;
    &lt;node id="n1"/&gt;
    ...
    &lt;edge id="e0" source="n0" target="n2"&gt;
      &lt;data key="d1"&gt;1.0&lt;/data&gt;
    &lt;/edge&gt;
    &lt;edge id="e1" source="n0" target="n1"&gt;
      &lt;data key="d1"&gt;1.0&lt;/data&gt;
    &lt;/edge&gt;
    &lt;edge id="e2" source="n1" target="n3"&gt;
      &lt;data key="d1"&gt;2.0&lt;/data&gt;
    &lt;/edge&gt;
    &lt;edge id="e3" source="n3" target="n2"/&gt;
    ...
  &lt;/graph&gt;
  ...</programlisting>
        <para>There can be graph elements for which a GraphML-Attribute is defined but no value is declared by a  corresponding <userinput>data</userinput> element. If a default value is defined for this GraphML-Attribute, then this default value is applied to the graph element. In the above example no value is defined for the node with identifier <userinput>n1</userinput> and the GraphML-Attribute with name <userinput>color</userinput>. Therefore this GraphML-Attribute has the default value, <userinput>yellow</userinput> for this node. If no default value is specified, as for the GraphML-Attribute <userinput>weight</userinput> in the above example, the value of the GraphML-Attribute is undefined for the graph element. In the above example the value is undefined of the GraphML-Attribute weight for the edge with identifier <userinput>e3</userinput>.</para>
      </section> <!-- </sect5> -->
    </section> <!-- </sect4> -->
      
      <section sect='sect4' xml:id='GraphMLPrimer_ParseInfo'>
        <title>2.5 Parse Info</title>
        <para>To make it possible to implement optimized parsers for GraphML documents meta-data can be attached as XML-Attributes to some GraphML elements. All XML-Attributes denoting meta-data are prefixed with <userinput>parse</userinput>. There are two kinds of meta-data: information about the number of elements and information how specific data is encoded in the document.</para>
        <para>For the first kind, information about the number of elements, the following XML-Attributes for the <userinput>graph</userinput> element are defined: The XML-Attribute <userinput>parse.nodes</userinput>  denotes the number of nodes in the graph, the XML-Attribute <userinput>parse.edges</userinput>the number of edges. The XML-Attribute <userinput>parse.maxindegree</userinput> denotes the maximum indegree of the nodes in the graph and the XML-Attribute <userinput>parse.maxoutdegree</userinput> the maximum outdegree. For the <userinput>node</userinput> element the XML-Attribute <userinput>parse.indegree</userinput> denotes the indegree of the node and the XML-Attribute <userinput>parse.outdegree</userinput> the outdegree.</para>
        <para>For the second kind, information about element encoding, the following XML-Attributes for the <userinput>graph</userinput> element are defined: If the XML-Attribute <userinput>parse.nodeids</userinput> has the value <userinput>canonical</userinput>, all nodes have identifiers following the pattern <userinput>nX</userinput>, where <userinput>X</userinput> denotes the number of occurences of the <userinput>node</userinput> element before the current element. Otherwise the value of the XML-Attribute is <userinput>free</userinput>. The same holds for edges for which the corresponding XML-Attribute <userinput>parse.edgeids</userinput> is defined, with the only difference that the identifiers of the edges follow the pattern <userinput>eX</userinput>. The XML-Attribute <userinput>parse.order</userinput> denotes the order in which <userinput>node</userinput> and <userinput>edge</userinput> elements occur in the document. For the value <userinput>nodesfirst</userinput> no <userinput>node</userinput> element is allowed to occur after the first occurence of an <userinput>edge</userinput> element. For the value <userinput>adjacencylist</userinput>, the declaration of a node is followed by the declaration of its adjacent edges. For the value <userinput>free</userinput> no order is imposed.</para>
        <para>The following example demonstrates the parse info meta-data on our running example:</para>
        <programlisting linkend='GraphMLPrimer_parseinfo.graphml'><bridgehead>A graph with additional parse info attributes.</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- This file was written by the JAVA GraphML Library.--&gt;
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns"  
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns 
                                http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt;
  &lt;graph id="G" edgedefault="directed" 
            parse.nodes="11" parse.edges="12" 
            parse.maxindegree="2" parse.maxoutdegree="3"
            parse.nodeids="canonical" parse.edgeids="free" 
            parse.order="nodesfirst"&gt;
    &lt;node id="n0" parse.indegree="0" parse.outdegree="1"/&gt;
    &lt;node id="n1" parse.indegree="0" parse.outdegree="1"/&gt;
    &lt;node id="n2" parse.indegree="2" parse.outdegree="1"/&gt;
    &lt;node id="n3" parse.indegree="1" parse.outdegree="2"/&gt;
    &lt;node id="n4" parse.indegree="1" parse.outdegree="1"/&gt;
    &lt;node id="n5" parse.indegree="2" parse.outdegree="1"/&gt;
    &lt;node id="n6" parse.indegree="1" parse.outdegree="2"/&gt;
    &lt;node id="n7" parse.indegree="2" parse.outdegree="0"/&gt;
    &lt;node id="n8" parse.indegree="1" parse.outdegree="3"/&gt;
    &lt;node id="n9" parse.indegree="1" parse.outdegree="0"/&gt;
    &lt;node id="n10" parse.indegree="1" parse.outdegree="0"/&gt;
    &lt;edge id="edge0001" source="n0" target="n2"/&gt;
    &lt;edge id="edge0002" source="n1" target="n2"/&gt;
    &lt;edge id="edge0003" source="n2" target="n3"/&gt;
    &lt;edge id="edge0004" source="n3" target="n5"/&gt;
    &lt;edge id="edge0005" source="n3" target="n4"/&gt;
    &lt;edge id="edge0006" source="n4" target="n6"/&gt;
    &lt;edge id="edge0007" source="n6" target="n5"/&gt;
    &lt;edge id="edge0008" source="n5" target="n7"/&gt;
    &lt;edge id="edge0009" source="n6" target="n8"/&gt;
    &lt;edge id="edge0010" source="n8" target="n7"/&gt;
    &lt;edge id="edge0011" source="n8" target="n9"/&gt;
    &lt;edge id="edge0012" source="n8" target="n10"/&gt;
  &lt;/graph&gt;
&lt;/graphml&gt;</programlisting>
            </section> <!-- </sect4> -->
            
          </section> <!-- </sect3> -->
          
          <section sect='sect3' xml:id='GraphMLPrimer_NHP'>
            <title>3. Advanced Concepts I: Nested Graphs, Hyperedges &amp; Ports</title>
            <para>In some applications the graph model described in the previous section is too restrictive and does not model adequatly the application data.</para>
            <para>In this section we discuss advanced graph models which can model a nesting hierarchy, hyperedges and ports.</para>
            <section sect='sect4' xml:id='GraphMLPrimer_Nested'>
              <title>3.1 Nested Graphs</title>
              <para>GraphML supports <firstterm>nested graphs</firstterm>, i.e., graphs in which the nodes are hierarchically ordered. The hierarchy is expressed by the structure of the GraphML document. A node in a GraphML document may have a <userinput>graph</userinput> element which itself contains the nodes which are in the hierarchy below this node. Here is an example for a nested graph and the corresponding GraphML document. Note that in the drawing of the graph the hierarchy is expressed by containment, i.e., the a node a is below a node b in the hierarchy if and only if the graphical representation of a is entirely inside the graphical representation of b.</para>
              <mediaobject>
                <imageobject>
                  <imagedata format='PNG' fileref='Electric_files/pictures/Communicating/graph/nested.png' alt="Image of a nested graph."/>
                </imageobject>
                <caption>Image of a nested graph.</caption>
              </mediaobject>
              <para>The following listing shows the corresponding GraphML document:</para>
              <programlisting linkend='GraphMLPrimer_attrValue'><bridgehead>GraphML Document with Nested Graphs</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt;
  &lt;graph id="G" edgedefault="undirected"&gt;
    &lt;node id="n0"/&gt;
    &lt;node id="n1"/&gt;
    &lt;node id="n2"/&gt;
    &lt;node id="n3"/&gt;
    &lt;node id="n4"/&gt;
    &lt;node id="n5"&gt;
        &lt;graph id="n5:" edgedefault="undirected"&gt;
          &lt;node id="n5::n0"/&gt;
          &lt;node id="n5::n1"/&gt;
          &lt;node id="n5::n2"/&gt;
          &lt;edge id="e0" source="n5::n0" target="n5::n2"/&gt;
          &lt;edge id="e1" source="n5::n1" target="n5::n2"/&gt;
        &lt;/graph&gt;
    &lt;/node&gt;
    &lt;node id="n6"&gt;
        &lt;graph id="n6:" edgedefault="undirected"&gt;
          &lt;node id="n6::n0"&gt;
              &lt;graph id="n6::n0:" edgedefault="undirected"&gt;
                &lt;node id="n6::n0::n0"/&gt;
               &lt;/graph&gt;
          &lt;/node&gt;
          &lt;node id="n6::n1"/&gt;
          &lt;node id="n6::n2"/&gt;
          &lt;edge id="e10" source="n6::n1" target="n6::n0::n0"/&gt;
          &lt;edge id="e11" source="n6::n1" target="n6::n2"/&gt;
        &lt;/graph&gt;
    &lt;/node&gt;
    &lt;edge id="e2" source="n5::n2" target="n0"/&gt;
    &lt;edge id="e3" source="n0" target="n2"/&gt;
    &lt;edge id="e4" source="n0" target="n1"/&gt;
    &lt;edge id="e5" source="n1" target="n3"/&gt;
    &lt;edge id="e6" source="n3" target="n2"/&gt;
    &lt;edge id="e7" source="n2" target="n4"/&gt;
    &lt;edge id="e8" source="n3" target="n6::n1"/&gt;
    &lt;edge id="e9" source="n6::n1" target="n4"/&gt;
  &lt;/graph&gt;
&lt;/graphml&gt;</programlisting>
	<para>The edges between two nodes in a nested graph have to be declared in a graph, which is an ancestor of both nodes in the hierarchy. Note that this is true for our example. Declaring the edge between node <userinput>n6::n1</userinput> and node <userinput>n4::n0::n0</userinput> inside graph <userinput>n6::n0</userinput> would be wrong while declaring it in graph <userinput>G</userinput> would be correct. A good policy is to place the edges at the least common ancestor of the nodes in the hierarchy, or at the top level.</para>
        <para>For applications which can not handle nested graphs the fall-back behaviour is to ignore nodes which are not contained in the top-level graph and to ignore edges which have do not have both endpoints in the top-level graph.</para>
        </section> <!-- </sect4> -->
      
        <section sect='sect4' xml:id='GraphMLPrimer_Hyperedges'>
          <title >3.2 Hyperedges</title>
          <para>Hyperedges are a generalization of edges in the sense that they do not only relate two endpoints to each other, they express a relation between an arbitrary number of enpoints. Hyperedges are declared by a <userinput>hyperedge</userinput> element in GraphML. For each enpoint of the hyperedge, this hyperedge element contains an <userinput>endpoint</userinput> element. The <userinput>endpoint</userinput> element must have an XML-Attribute <userinput>node</userinput>, which contains the identifier of a node in the document. The following example contains two hyperedges and two edges. The hyperedges are illustrated by joining arcs, the edges by straight lines. Note that edges can be either specified by an <userinput>edge</userinput> element or by a <userinput>hyperedge</userinput> element containing two <userinput>endpoint</userinput> elements.</para>
          <mediaobject>
             <imageobject>
               <imagedata format='PNG' fileref='Electric_files/pictures/Communicating/graph/hyper.png' alt='A graph with hyperedges.'/>
             </imageobject>
             <caption>A graph with hyperedges.</caption>
           </mediaobject>
           <para>This graph is specified with the following code:</para>
           <programlisting linkend='GraphMLPrimer_attrValue'><bridgehead>GraphML Document with Hyperedges</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt;
  &lt;graph id="G" edgedefault="undirected"&gt;
    &lt;node id="n0"/&gt;
    &lt;node id="n1"/&gt;
    &lt;node id="n2"/&gt;
    &lt;node id="n3"/&gt;
    &lt;node id="n4"/&gt;
    &lt;node id="n5"/&gt;
    &lt;node id="n6"/&gt;
    &lt;hyperedge&gt;
       &lt;endpoint node="n0"/&gt;
       &lt;endpoint node="n1"/&gt;
       &lt;endpoint node="n2"/&gt;
     &lt;/hyperedge&gt;
    &lt;hyperedge&gt;
       &lt;endpoint node="n3"/&gt;
       &lt;endpoint node="n4"/&gt;
       &lt;endpoint node="n5"/&gt;
       &lt;endpoint node="n6"/&gt;
     &lt;/hyperedge&gt;
    &lt;hyperedge&gt;
       &lt;endpoint node="n1"/&gt;
       &lt;endpoint node="n3"/&gt;
     &lt;/hyperedge&gt;
    &lt;edge source="n0" target="n4"/&gt;
  &lt;/graph&gt;
&lt;/graphml&gt;</programlisting>

<para>Like edges, hyperedges and enpoints may have an XML-Attribute <userinput>id</userinput>, which defines a unique identifier for the corresponding element.</para>
</section> <!-- </sect4> -->
    
            <section sect='sect4' class="div2" xml:id='GraphMLPrimer_Ports'>
              <title>3.3 Ports</title>
              <para>A node may specify different logical locations for edges and hyperedges to connect. The logical locations are called "ports". As an analogy, think of the graph as a motherboard, the nodes as integrated circuits and the edges as connecting wires. Then the pins on the integrated circuits correspond to ports of a node.</para>
              <para>The ports of a node are declared by <userinput>port</userinput> elements as children of the corresponding <userinput>node</userinput> elements. Note that port elements may be nested, i.e., they may contain <userinput>port</userinput> elements themselves. Each <userinput>port</userinput> element must have an XML-Attribute <userinput>name</userinput>, which is an identifier for this port. The <userinput>edge</userinput> element has optional XML-Attributes <userinput>sourceport</userinput> and <userinput>targetport</userinput> with which an edge may specify the port on the source, resp. target, node. Correspondingly, the <userinput>endpoint</userinput> element has an optional XML-Attribute <userinput>port</userinput>.</para>
              <para>The following code is an example for a document with ports:</para>
              <programlisting linkend='GraphMLPrimer_attrValue'><bridgehead> GraphML Document with Ports</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt;
  &lt;graph id="G" edgedefault="directed"&gt;
    &lt;node id="n0"&gt;
      &lt;port name="North"/&gt;
      &lt;port name="South"/&gt;
      &lt;port name="East"/&gt;
      &lt;port name="West"/&gt;
    &lt;/node&gt;
    &lt;node id="n1"&gt;
      &lt;port name="North"/&gt;
      &lt;port name="South"/&gt;
      &lt;port name="East"/&gt;
      &lt;port name="West"/&gt;
    &lt;/node&gt;
    &lt;node id="n2"&gt;
      &lt;port name="NorthWest"/&gt;
      &lt;port name="SouthEast"/&gt;
    &lt;/node&gt;
    &lt;node id="n3"&gt;
      &lt;port name="NorthEast"/&gt;
      &lt;port name="SouthWest"/&gt;
    &lt;/node&gt;
    &lt;edge source="n0" target="n3" sourceport="North" targetport="NorthEast"/&gt;
    &lt;hyperedge&gt;
       &lt;endpoint node="n0" port="North"/&gt;
       &lt;endpoint node="n1" port="East"/&gt;
       &lt;endpoint node="n2" port="SouthEast"/&gt;
     &lt;/hyperedge&gt;
  &lt;/graph&gt;
&lt;/graphml&gt;</programlisting>
</section> <!-- </sect4> -->
</section> <!-- </sect3> -->

 
          <section sect='sect3' xml:id='GraphMLPrimer_EXT'>
            <title>4. Advanced Concepts II: Extending GraphML</title>
            <para>GraphML is designed to be easily extensible. With GraphML the topology of a graph and simple attributes of graph elements can be serialized. To store more complex application data one has to extend GraphML. In this section we will discuss the different possibilities to extend GraphML.</para>
            <para>Extensions of GraphML should be defined by an XML Schema. The Schema which defines the extension can be derived from the GraphML Schema documents by using a standard mechanism similar to the one used by XHTML.</para>
            
            <section sect='sect4' xml:id='GraphMLPrimer_AttributesExt'>
                <title>4.1 Adding XML Attributes to GraphML Elements</title>
                <para>In most cases, additional information can (and should) be attached to GraphML elements by usage of <link linkend='GraphMLPrimer_Attributes'>GraphML-Attributes</link>. This assures readability for other GraphML parsers. However, sometimes it might be more convenient to use XML attributes. Suppose you have a parser which knows the <link xlink:href='https://www.w3.org/XML/Linking'>XLink</link> <userinput>href</userinput> attribute and interprets it correctly as a URL. Suppose further you want to store a graph, whose nodes model WWW pages, in GraphML. To associate a node to the page it models you write the page's URL in an <userinput>xlink:href</userinput> attribute within the <userinput>node</userinput>-tag:</para>
                <programlisting linkend='GraphMLPrimer_attrValue'><bridgehead>A <userinput>node</userinput> element pointing to a URL</bridgehead>
    ...
 &lt;node id="n0" xlink:href="http://graphml.graphdrawing.org"/&gt;
    ...</programlisting>
           <para>To add XML attributes to GraphML elements one has to extend GraphML. This extension can be defined by an XML Schema. The document <link linkend='graphml_xlink.xsd'>graphml+xlink.xsd</link> shows how the <userinput>href</userinput> attribute is added to <userinput>node</userinput>. (Note that, until now, there is no official Schema definition for XLink; to validate the following file, make sure that the attribute <userinput>schemaLocation</userinput> points to some preliminary version, e.g. <userinput>http://graphml.graphdrawing.org/xmlns/1.0/xlink.xsd</userinput>.)</para>
           <programlisting linkend='GraphMLPrimer_attrValue'><bridgehead>Extending GraphML: Attributes</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema 
   targetNamespace="http://graphml.graphdrawing.org/xmlns"
   xmlns="http://graphml.graphdrawing.org/xmlns"  
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:xs="http://www.w3.org/2001/XMLSchema"
   elementFormDefault="qualified"
   attributeFormDefault="unqualified"
&gt;

&lt;xs:import namespace="http://www.w3.org/1999/xlink"
           schemaLocation="xlink.xsd"/&gt;

&lt;xs:redefine 
    schemaLocation="http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt;
  &lt;xs:attributeGroup name="node.extra.attrib"&gt;
    &lt;xs:attributeGroup ref="node.extra.attrib"/&gt;
    &lt;xs:attribute ref="xlink:href" use="optional"/&gt;
  &lt;/xs:attributeGroup&gt;
&lt;/xs:redefine&gt;

&lt;/xs:schema&gt;</programlisting>
            <para>The parts in the above document have the following function: The document <link linkend='graphml_xlink.xsd'>graphml+xlink.xsd</link> has a <userinput>schema</userinput> element as its root element. <userinput>targetNamespace="http://graphml.graphdrawing.org/xmlns"</userinput> says that the language defined by this document is GraphML. The next three lines specify the default namespace and the namespace prefixes for XLink and XMLSchema. The attributes <userinput>elementFormDefault</userinput> and <userinput>attributeFormDefault</userinput> are of no importance for this example.</para>
            <para><userinput>&lt;xs:import namespace="http://www.w3.org/1999/xlink" schemaLocation="xlink.xsd"/&gt;</userinput> gives access to the XLink namespace, located at the file <userinput>xlink.xsd</userinput>.</para>
            <para><userinput>&lt;xs:redefine schemaLocation="http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt; </userinput> specifies the file, (part of) which is being redefined. The attribute group <userinput>node.extra.attrib</userinput> is included in the attribute-list of <userinput>node</userinput>. After redefinition, this attribute group has its old content plus one more attribute, namely <userinput>xlink:href</userinput>, which is <emphasis>optional</emphasis>.</para>
            <para>Besides <userinput>node.extra.attrib</userinput>, there are corresponding attribute groups for all major GraphML elements.</para>
            <para>The following code is an example for a document which is valid with respect to the schema <link linkend='graphml_xlink.xsd'>graphml+xlink.xsd</link>.</para>
            <programlisting linkend='GraphMLPrimer_attrValue'><bridgehead>GraphML Document with additional XML attributes</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns"  
            xmlns:xlink="http://www.w3.org/1999/xlink"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns 
                                graphml+xlink.xsd"&gt;
  &lt;graph edgedefault="directed"&gt;
    &lt;node id="n0" xlink:href="http://graphml.graphdrawing.org"/&gt;
    &lt;node id="n1" /&gt;
    &lt;edge source="n0" target="n1"/&gt;
  &lt;/graph&gt;
&lt;/graphml&gt;</programlisting>
            </section> <!-- </sect4> -->
            
            <section sect='sect4' xml:id='GraphMLPrimer_Complex'>
              <title>4.2 Adding Complex Types</title>
              <para>Structured content can be added within the <userinput>data</userinput> element. For example a user wants to store images for nodes, written in <link xlink:href='https://www.w3.org/Graphics/SVG'>SVG</link>.</para>
              <programlisting linkend='GraphMLPrimer_attrValue'><bridgehead>A <userinput>node</userinput> element and its graphical representation</bridgehead>
    ...
 xmlns:svg="http://www.w3.org/2000/svg"
    ...
 &lt;node id="n0" &gt;
   &lt;data key="k0"&gt;
     &lt;svg:svg width="4cm" height="8cm" version="1.1"&gt;
       &lt;svg:ellipse cx="2cm" cy="4cm" rx="2cm" ry="1cm" /&gt;
     &lt;/svg:svg&gt;  
   &lt;/data&gt;
 &lt;/node>
    ...</programlisting>
              <para>To add structured data to GraphML elements one has to extend GraphML. This extension can be defined by an XML Schema. The document <link linkend='graphml_svg.xsd'>graphml+svg.xsd</link> shows how <link xlink:href='https://www.w3.org/Graphics/SVG'>SVG</link> elements are added to the content of <userinput>data</userinput>. (Note that, until now, there is no official Schema definition for SVG; to validate the following file, make sure that the attribute <userinput>schemaLocation</userinput> points to some preliminary version, e.g. <userinput>http://www.w3.org/TR/2002/WD-SVG11-20020108/SVG.xsd</userinput>.)</para>
              <programlisting linkend='GraphMLPrimer_attrValue'><bridgehead>Extending GraphML: Structured Data</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema 
   targetNamespace="http://graphml.graphdrawing.org/xmlns"
   xmlns="http://graphml.graphdrawing.org/xmlns"  
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:xs="http://www.w3.org/2001/XMLSchema"
   elementFormDefault="qualified"
   attributeFormDefault="unqualified"
&gt;

&lt;xs:import namespace="http://www.w3.org/2000/svg"
           schemaLocation="svg.xsd"/&gt;

&lt;xs:redefine 
    schemaLocation="http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"&gt;
  &lt;xs:complexType name="data-extension.type"&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="data-extension.type"&gt;
        &lt;xs:sequence&gt;
          &lt;xs:element ref="svg:svg"/&gt;
        &lt;/xs:sequence&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:redefine&gt;

&lt;/xs:schema&gt;
</programlisting>

              <para>The above Schema is similar to the example in <link linkend='GraphMLPrimer_AttributesExt'>Adding Attributes</link>: First the necessary namespace declarations are made. Then the SVG namespace is imported. Finally the complex type <userinput>data-extension.type</userinput>, which is the base-type for the content of the <userinput>data</userinput> element, is extended by the SVG element <userinput>svg</userinput>.</para>
              <para>With the Schema in <link linkend='graphml_svg.xsd'>graphml+svg.xsd</link>, the GraphML + SVG document can be validated:</para>
              <programlisting linkend='GraphMLPrimer_attrValue'><bridgehead>GraphML Document including SVG data</bridgehead>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;graphml xmlns="http://graphml.graphdrawing.org/xmlns"  
            xmlns:svg="http://www.w3.org/2000/svg"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns 
                                graphml+svg.xsd"&gt;
  &lt;key id="k0" for="node"&gt;
    &lt;default&gt;
      &lt;svg:svg width="5cm" height="4cm" version="1.1"&gt;
        &lt;svg:desc&gt;Default graphical representation for nodes
        &lt;/svg:desc&gt;
        &lt;svg:rect x="0.5cm" y="0.5cm" width="2cm" height="1cm"/&gt;
      &lt;/svg:svg&gt;
    &lt;/default&gt;
  &lt;/key&gt;  
  &lt;key id="k1" for="edge"&gt;
    &lt;desc&gt;Graphical representation for edges
    &lt;/desc&gt;
  &lt;/key&gt;  
  &lt;graph edgedefault="directed"&gt;
    &lt;node id="n0"&gt;
      &lt;data key="k0"&gt;
        &lt;svg:svg width="4cm" height="8cm" version="1.1"&gt;
          &lt;svg:ellipse cx="2cm" cy="4cm" rx="2cm" ry="1cm" /&gt;
        &lt;/svg:svg&gt;  
      &lt;/data&gt;
    &lt;/node&gt;
    &lt;node id="n1" /&gt;
    &lt;edge source="n0" target="n1"&gt;
      &lt;data key="k1"&gt;
        &lt;svg:svg width="12cm" height="4cm" viewBox="0 0 1200 400"&gt;
          &lt;svg:line x1="100" y1="300" x2="300" y2="100"
           stroke-width="5"  /&gt;
        &lt;/svg:svg&gt;
      &lt;/data&gt;
    &lt;/edge&gt;
  &lt;/graph&gt;
&lt;/graphml&gt;
</programlisting>

              <para>Note that the node with id <userinput>n1</userinput> admits the default graphical representation given in <userinput>key k0</userinput>. The above example shows also the usefulness of XML Namespaces: there are two different <userinput>desc</userinput> elements - one in the GraphML namespace and one in the SVG namespace. Possible conflicts, due to elements from different XML languages that happen to have identical names, are resolved by different namespaces.</para>
            </section> <!-- </sect4> -->
            
          </section> <!-- </sect3> -->

        </section> <!-- </sect2> -->  <!-- end of "GraphML Primer" -->
      
       <section sect='sect2'>
        <title>Circuit XML?</title>
        <para>Surely a vocabulary could easily be devised as a circuit is <quote>nothing more than nodes and connectors of different types[:] write a schema that represents them!</quote>, as a contributor to stackoverflow.com suggested. Here is their sample code:</para>
        <programlisting><![CDATA[<circuit>
    <node id="1"/>
    <node id="2"/>
    <node id="3"/>
    <connector id="1" type="resistor" value="10" units="ohm">
        <start-node>1</start-node>
        <end-node>2</start-node>
    </connector>
    <connector id="2" type="capacitor" value="10" units="farad">
        <start-node>2</start-node>
        <end-node>3</start-node>
    </connector>
    <connector id="3" type="battery" value="10" units="volts">
        <start-node>3</start-node>
        <end-node>1</start-node>
    </connector>
</circuit>]]></programlisting>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
   
  </chapter>
  
  
      
    <chapter xml:id='docbook'>
      <title>Docbook</title>
      <para>DocBook is a vocabulary of XML comprising tags with defined semantics and syntax (DTD) for writing documentation, manuals and technical books. You can serve a DocBook XML file with a stylesheet, or you can transform it with XSLT stylesheets into one or several HTML files, into an EPUB file with <application>dbtoepub</application>, or even into a PDF file for printing.</para>
      <para>The stylesheets are documented in <citetitle>DocBook XSL: The Complete Guide</citetitle>, by Bob Stayton, freely available at http://www.sagehill.net.</para>
      <para>O&apos;Reilly &amp; Associates publishes a book called <ulink linkend='http://www.docbook.org/tdg/en/html/docbook.html'><citetitle>DocBook: The Definitive Guide</citetitle></ulink>, by Norman Walsh and Leonard Muellner. You can buy it or read it online. </para>
    
      <section>
        <title>Block Elements</title>
        <para>Sections usually have a title, and maybe a titleabbrev and/or a subtitle, too. Possibly an info element. They typically hold some subsections and/or paragraphs.</para>
        <para>There are three types of sectioning elements in DocBook:</para>
        <itemizedlist>
          <listitem>Explicitly numbered sections, sect1 ... sect5 , which must be properly nested and can only be five levels deep.</listitem>
          <listitem>Recursive section&apos;s, which are alternatives to the numbered sections and have unbounded depth.</listitem>
          <listitem>simplesect&apos;s, which are terminal. The simplesect s can occur as the <quote>leaf</quote> sections in either recursive sections or any of the numbered sections, or directly in components. The important semantic distinction of simplesect elements is that they never appear in the table of contents.</listitem>
        </itemizedlist>
        <note>None of the sectioning elements is allowed to <quote>float</quote> in a component. You can place paragraphs and other block elements before a section, but you cannot place anything after it.</note>
        
        <section sect='sect2'>
          <title>Sectioning: a Hierarchy of Containment</title>
          <itemizedlist>
            <listitem>set: optional</listitem>
            <listitem>book or article</listitem>
            <listitem>part: optional, only in book&apos;s</listitem>
            <listitem>chapter</listitem>
          </itemizedlist>
          <para>Within a chapter, you may find either a hierarchy of nested:</para>
          <itemizedlist>
            <listitem>sect1</listitem>
            <listitem>sect2</listitem>
            <listitem>sect3</listitem>
            <listitem>sect4, and</listitem>
            <listitem>sect5</listitem>
          </itemizedlist>
          <para>Or a hierarchy of nested <tag>section</tag>&apos;s.</para>

          <section>
            <title><tag>article*</tag></title>
          </section>

        </section> <!-- </sect2> -->

        <section sect='sect2'>
          <title>Out of Flow Block Elements</title>
          <para>These may lie at the front, back or to a side.</para>

          <section>
            <title>Front Matter Elements*</title>
            <subtitle><tag>preface</tag>, <tag>toc</tag>, <tag>partintro</tag>, ...</subtitle>
            <synopsis><![CDATA[]]></synopsis>
          </section>

          <section>
            <title>Back Matter Elements*</title>
            <subtitle><tag>appendix</tag>, <tag>glossary</tag>, <tag>index</tag>,</subtitle>
            <synopsis><![CDATA[]]></synopsis>
          </section>

          <section>
            <title>Out of Flow Elements</title>

            <section>
              <title><tag>sidebar</tag></title>
              <synopsis><![CDATA[sidebar ::= ((((title? & titleabbrev?), info? db.titleforbidden.info) |
info db.titleonly.info), (annotation | bridgehead | remark | revhistory |
Indexing inlines | Admonition elements | Formal elements |
Graphic elements | Informal elements | List elements |
Paragraph elements | Publishing elements | Synopsis elements |
Technical elements | Verbatim elements)+)]]></synopsis>
              <para>Additional constraints: <tag>sidebar</tag> must not occur among the children or descendants of <tag>sidebar</tag>.</para>
              <section>
                <title>Description</title>
                <para>A <tag>sidebar</tag> is a short piece of text, rarely longer than a single column or page, that is presented outside the narrative flow of the main text.</para>
                <para>Sidebars are often used for digressions or interesting observations that are related, but not directly relevant, to the main text.</para>
              </section>
              <section>
                <title>Example</title>
                <programlisting><![CDATA[<article xmlns='http://docbook.org/ns/docbook'>
<title>Example sidebar</title>
<section>
  <title>An Example Section</title>
  <para>Some narrative text.</para>
  <sidebar>
    <title>A Sidebar</title>
    <para>Sidebar content.</para>
  </sidebar>
  <para>The continuing flow of the narrative text, as if the
  sidebar was not present.</para>
</section>
</article>]]></programlisting>
              </section>
            </section>

            <section>
              <title><tag>annotation</tag></title>
              <synopsis><![CDATA[annotation ::= ((((title? & titleabbrev?), info? db.titleforbidden.info) |
info db.titleonly.info), (annotation | bridgehead | remark |
revhistory | Indexing inlines | Admonition elements | Formal elements |
Graphic elements | Informal elements | List elements | Paragraph elements |
Publishing elements | Synopsis elements | Technical elements |
Verbatim elements)+)]]></synopsis>
              <para>Additional attributes: <parameter>annotates</parameter>...</para>
              <para>Additional constraints: <tag>annotation</tag> must not occur among the children or descendants of <tag>annotation</tag>.</para>
              <section>
                <title>Description</title>
                <para>The <tag>annotation</tag> element is a <emphasis>block</emphasis> annotation. Block annotations can be used for pop ups and other <quote>out of line</quote> effects.</para>
                <para>An <tag>annotation</tag> element is associated with another element by using a reference to an xml:id value. The association can go in either direction. An <tag>annotation</tag> element can use an <parameter>annotates</parameter> attribute on itself to point to an xml:id on another element. Or the other element can use an <parameter>annotations</parameter> attribute (one of the common attributes) on itself to point to an xml:id on an annotation element. There is no assumption that an annotation element is associated with its parent or any other ancestor element.</para>
                <para>The attribute type of <parameter>annotations</parameter> and <parameter>annotates</parameter> is plain text, not IDREF or IDREFS. That enables modular content files to form associations with elements in other files without generating validation errors.</para>
              </section>
              <section>
                <title>Example</title>
                <programlisting><![CDATA[<article xmlns='http://docbook.org/ns/docbook'>
<title>Example of an annotation</title>
 <annotation xml:id="note-parts-list">
  <para>This list is not comprehensive.</para>
</annotation>
  <para annotations="note-parts-list">An automobile
  contains an engine, wheels, doors, and windows.</para>

</article>]]></programlisting>

              </section>
            </section>  <!-- end of "annotation" -->

            <section>
              <title><tag>epigraph</tag></title>
              <synopsis><![CDATA[epigraph ::= (info? db.titleforbidden.info, attribution?,
(literallayout | Paragraph elements)+)]]></synopsis>
              <section>
                <title>Description</title>
                <para>An epigraph is a short inscription, often a quotation or poem, set at the beginning of a document or component. Epigraphs are usually related somehow to the content that follows them and may help set the tone for the component.</para>
              </section>
            </section>

          </section>  <!-- end of "Out of Flow Elements" -->

        </section>
      
        <section sect='sect2'> <title>Lists</title>
        <para>Lists are made up of items. The simplest list is the <computeroutput>simplelist</computeroutput>.
        In a <computeroutput>variablelist</computeroutput> terms are enclosed between <computeroutput>term</computeroutput> tags.</para>
        <variablelist>
          <varlistentry><term>TTF</term> <listitem><para>TrueType fonts.</para></listitem></varlistentry>
        </variablelist>
      
          <section sect='sect3'> <title>Numbered and unnumbered lists</title>
          <para>They are either an <computeroutput>orderedlist</computeroutput> or an <computeroutput>itemizedlist</computeroutput>. Both are made up of <computeroutput>listitem</computeroutput>&apos;s.</para>
          </section> <!-- </sect3> -->
      
          <section sect='sect3'> <title>Lists of Definitions</title>
          <para>A <computeroutput>variablelist</computeroutput> is a list of terms and definitions or descriptions.</para>
          <para>While glossarys are usually limited to component or section boundaries, appearing at the end of a book or chapter, for instance, glosslists can appear anywhere that the other list types are allowed.</para>
          <para>Using a glosslist in running text, instead of a variablelist, for example, maintains the semantic distinction of a glossary. This distinction may be necessary if you want to automatically point to the members of the list with glossterms in the body of the text.</para>
      
          <programlisting><![CDATA[<glosslist>
<glossentry><glossterm>C</glossterm>
<glossdef>
<para>A programming language invented by K & R. </para>
</glossdef>
</glossentry>
<glossentry><glossterm>Pascal</glossterm>
<glossdef>
<para>A programming language invented by Niklaus Wirth.
</para>
</glossdef>
</glossentry>
</glosslist>]]></programlisting>
          <para>Would be presented as:</para>
        <glosslist>
          <glossentry>
            <glossterm>C</glossterm>
            <glossdef> <para>A programming language invented by K&amp;R.</para> </glossdef>
          </glossentry>
          <glossentry>
            <glossterm>Pascal</glossterm>
            <glossdef> <para>A programming language invented by Niklaus Wirth.</para> </glossdef>
          </glossentry>
        </glosslist>
        </section> <!-- </sect3> -->
      
        </section> <!-- </sect2> -->
        
        
        <section sect='sect2'> <title>Admonitions</title>
        <para>There are five types of admonitions in DocBook: <computeroutput>caution</computeroutput>, <computeroutput>important</computeroutput>, <computeroutput>note</computeroutput>, <computeroutput>tip</computeroutput>, and <computeroutput>warning</computeroutput>.</para>
        <para>All of the admonitions have the same structure: an optional title followed by paragraph-level elements. DocBook does not impose any specific semantics on the individual admonitions.</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Examples, Figures, and Tables</title>
          <para>Examples, figures, and tables are supported with the block-level elements: <tag>example</tag>, <tag>informalexample</tag>, <tag>figure</tag>, <tag>informalfigure</tag>, <tag>table</tag>, and <tag>informaltable</tag>.</para>
          <para>The distinction between formal and informal elements is that formal elements have titles while informal ones do not.</para>
          
          <section sect='sect3'>
            <title>&apos;example&apos;s in DocBook</title>
        
            <para>This is an &apos;example&apos;:</para>
            <example xml:id="ex.dssslfunction">
              <title>A <function>newline</function> procedure in PostScript</title>
              <programlisting>/newline {
  currentpoint lead sub
  dup bm lt {pop pop turnpage}{
  exch pop lm exch moveto
  } ifelse
  setfirstwordinline
} def</programlisting>
              </example>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>&apos;figure&apos;s in DocBook</title>
            
            <para>This is an example SVG image:</para>
            <mediaobject>
              <imageobject>
                <imagedata>
                  <svg xmlns="http://www.w3.org/2000/svg"
                       width="100" height="100" version="1.1">
                    <rect x="20" y="20" width="80" height="80" style="fill:blue; stroke:green; stroke-width: 2; fill-opacity: 0.5; stroke-opacity: 0.9"/>
                  </svg>
                </imagedata>
              </imageobject>
            </mediaobject>
            
            <para>This is the code:</para>
            <programlisting><![CDATA[<mediaobject>
              <imageobject>
                <imagedata>
                  <svg xmlns="http://www.w3.org/2000/svg"
                       width="100" height="100" version="1.1">
                    <rect x="20" y="20" width="80" height="80" style="fill:blue; stroke:green; stroke-width: 2; fill-opacity: 0.5; stroke-opacity: 0.9"/>
                  </svg>
                </imagedata>
              </imageobject>
            </mediaobject>]]></programlisting>
            
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>&apos;table&apos;s in DocBook</title>
            <para>DocBook supports CALS tables (defined with <tag>tgroup</tag>, <tag>colspec</tag>, <tag>spanspec</tag>, <tag>thead</tag>, <tag>tfoot</tag>, <tag>tbody</tag>, <tag>row</tag>, <tag>entry</tag>, <tag>entrytbl</tag>, and <tag>caption</tag>) and HTML tables (defined with <tag>col</tag>, <tag>colgroup</tag>, <tag>thead</tag>, <tag>tfoot</tag>, <tag>tbody</tag>, <tag>tr</tag>, <tag>td</tag>, and <tag>caption</tag>). Both describe tables geometrically using rows, columns, and cells.</para>
            
            <bridgehead>CALS tables</bridgehead>
            <title>Example table</title>
            
            <!-- xml:id="ex.calstable" --> <table frame='all'>
              <title>Sample CALS Table</title>
              <tgroup cols='5' align='left' colsep='1' rowsep='1'>
                <colspec colname='c1'/>
                <colspec colname='c2'/>
                <colspec colname='c3'/>
                <colspec colnum='5' colname='c5'/>
                <thead>
                  <row>
                    <entry namest="c1" nameend="c2" align="center">Horizontal Span</entry>
                    <entry>a3</entry>
                    <entry>a4</entry>
                    <entry>a5</entry>
                  </row>
                </thead>
                <tfoot>
                  <row>
                    <entry>f1</entry>
                    <entry>f2</entry>
                    <entry>f3</entry>
                    <entry>f4</entry>
                    <entry>f5</entry>
                  </row>
                </tfoot>
                <tbody>
                  <row>
                    <entry>b1</entry>
                    <entry>b2</entry>
                    <entry>b3</entry>
                    <entry>b4</entry>
                    <entry morerows='1' valign='middle'><para>Vertical Span</para></entry>
                  </row>
                  <row>
                    <entry>c1</entry>
                    <entry namest="c2" nameend="c3" align='center' morerows='1' valign='bottom'> Span Both</entry>
                    <entry>c4</entry>
                  </row>
                  <row>
                    <entry>d1</entry>
                    <entry>d4</entry>
                    <entry>d5</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            
            <bridgehead>HTML tables</bridgehead>
            <table xml:id="ex.htmltable">
<caption>Sample HTML Table</caption>
<thead>
<tr>
<td>Head 1</td>
<td>Head 2</td>
</tr>
</thead>
<tbody>
<tr>
<td>Body 1</td>
<td>Body 2</td>
</tr>
</tbody>
</table>
          </section> <!-- </sect3> -->
          
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Paragraphs</title>
          <para>There are three paragraph elements: <computeroutput>para</computeroutput>, <computeroutput>simpara</computeroutput> (simple paragraphs may not contain other block-level elements), and <computeroutput>formalpara</computeroutput> (formal paragraphs have titles).</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'> <title>Equations</title>
        <para>There are two block-equation elements, <computeroutput>equation</computeroutput> and <computeroutput>informalequation</computeroutput> (for inline equations, use <computeroutput>inlineequation</computeroutput>).</para>
        <para>Informal equations don&apos;t have titles. For reasons of backward compatibility, <computeroutput>equations</computeroutput> are not required to have titles. However, it may be more difficult for some style-sheet languages to properly enumerate equations if they lack titles.</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'> <title>Procedures and Tasks</title>
        <para>A <computeroutput>procedure</computeroutput> contains <computeroutput>step</computeroutput>&apos;s, which may contain <computeroutput>substep</computeroutput>&apos; or <computeroutput>stepalternative</computeroutput>&apos;s.</para>
        <para>The <computeroutput>task</computeroutput> element is a wrapper around the procedure element that provides additional, optional elements, including <computeroutput>tasksummary</computeroutput>, <computeroutput>taskprerequisite</computeroutput>&apos;s, <computeroutput>example</computeroutput>, and <computeroutput>taskrelated</computeroutput>.</para>
        </section> <!-- </sect2> -->
      
      </section> <!-- </sect1> -->
      
      <section>
        <title>Docbook tables*</title>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Inline Elements</title>
        <para>Users of DocBook are provided with a surfeit of inline elements. Inline elements are used to mark up running text. In published documents, inline elements often cause a font change or other small change, but they do not cause line or paragraph breaks. In practice, writers generally settle on the tagging of inline elements that suits their time and subject matter. This may be a large number of elements or only a handful. What is important is that you choose to mark up not every possible item, but only those for which distinctive tagging will be useful in the production of the finished document for the readers who will search through it.</para>
        <para>The following comprehensive list may be a useful tool for the process of narrowing down the elements that you will choose to mark up; it is not intended to overwhelm you by its sheer length. For convenience, we&apos;ve divided the inlines into several subcategories.</para>
        <para>The classification used here is not meant to be authoritative, only helpful in providing a feel for the nature of the inlines. Several elements appear in more than one category, and arguments could be made to support the placement of additional elements in other categories or entirely new categories.</para>
        
        <section sect='sect2'>
          <title>Cross-references</title>
          <para>The cross-reference inlines identify both explicit cross-references, such as <tag>link</tag>, and implicit cross-references, such as <tag>glossterm</tag>. You can make most of the implicit references explicit with a <varname>linkend</varname> attribute.</para>
          <itemizedlist>
            <listitem>anchor: A spot in the document</listitem>
            <listitem>citation: An inline bibliographic reference to another published work</listitem>
            <listitem>citerefentry: A citation to a reference page</listitem>
            <listitem>citetitle: The title of a cited work</listitem>
            <listitem>firstterm: The first occurrence of a term</listitem>
            <listitem>glossterm: A glossary term</listitem>
            <listitem>link: A hypertext link</listitem>
            <listitem>olink: A link that addresses its target indirectly</listitem>
            <listitem><tag>xref</tag>: A cross-reference to another part of the document</listitem>
          </itemizedlist>
          <para>DocBook supports a rich set of elements and features for creating cross references. Here are the basic kinds of cross references you can create:</para>
          <itemizedlist>
            <listitem>Within a document.</listitem>
            <listitem>Between documents.</listitem>
            <listitem>To websites.</listitem>
            <listitem>Specialized cross references.</listitem>
          </itemizedlist>
          
          <note>DocBook 5 introduces to DocBook the idea of universal linking between elements. In DocBook 5, you can form links between any two elements. See the section <link linkend='db5_universal_linking'>Universal linking in DocBook 5</link> for more information.</note>
          
          <section sect='sect3'>
            <title>Cross references within a document</title>
            <para>DocBook 4 employs the built-in feature of XML for cross referencing within a document, in which attributes are used to identify starting and ending points for cross references. In an XML DTD, an attribute can be assigned an attribute type of ID. That type of attribute is used to label an element as a potential target (end point) of a cross reference. The attribute name does not have be ID, it just needs to be declared as that type. In DocBook 4, the name of the attribute assigned this purpose just happens to be named id as well. In the DocBook DTD, almost every element can have an id attribute, with attribute type ID. That means any element in your document could be the target of a cross reference.</para>
            <para>In DocBook 5, you use xml:id instead of id. The xml:id attribute is predefined to have attribute type ID, whether or not a schema is available to confirm it.</para>
            <para>According to the XML standard, every value of an attribute with type ID must be unique. In DocBook, this means every instance of an id (DocBook 4) or xml:id (DocBook 5) attribute in a document must be unique within that document. When you validate your document, the validator will tell you if you have any duplicate id attributes.</para>
            <para>Other attributes can have a type of IDREF, which is used to point to an ID on another element to form a cross reference. There are a handful of elements in the DocBook DTD that have attributes of type IDREF, of various names. There are two main elements that are used to create cross references to targets within the same document:</para>
            <variablelist>
              <varlistentry>
                <term><tag>xref</tag></term>
                <listitem>An automatic cross reference that generates the text of the reference. For that purpose, it is an empty element that takes no content of its own. The stylesheets control what output is generated. The generated text can be the target element&apos;s titleabbrev (if it has one) or title, number label (if it has one), or both.</listitem>
              </varlistentry>
              <varlistentry>
                <term>link</term>
                <listitem>A cross reference where you supply the text of the reference as the content of the link element. Therefore it must not be an empty element.</listitem>
              </varlistentry>
            </variablelist>
            <para>Both of these elements require a linkend attribute whose value must match some id or xml:id value in the document. Here are two examples in DocBook 4:</para>
            <bridgehead>Internal Cross References Example</bridgehead>
            <programlisting><![CDATA[<chapter  id="intro">
  <title>Introduction</title>
  <para>Welcome to our new product. One of its
  new features is a <link  linkend="WidgetIntro">widget</link>.
  Other new features include ... </para>
</chapter>

<chapter  id="WidgetIntro">
  <title>Introducing the Widget</title>
  <para>Widgets are just one of our new features.
  For a complete list of new features, see <xref  linkend="intro"/>.
  </para>
</chapter>]]></programlisting>
            <para>...</para>
            <para>Here is some guidance for using these cross reference elements:</para>
            <para>Use <tag>xref</tag> when you want to reference another element&apos;s title or number. It will automatically get the current information so you do not have to maintain such references.</para>
            <para>Use <tag>link</tag> when you want to create a less formal reference that does not include the title or number. You can use whatever words you want.</para>
            <para>When adding an <varname>id</varname> or <varname>xml:id</varname> attribute, put it on the element itself, not the title. The stylesheets know how to find the title for each element being referenced.</para>
            <para>Not all elements are appropriate as targets of an <tag>xref</tag>, because they do not have a title or number. For example, you may want to cross reference to a <tag>para</tag>, but you wouldn&apos;t want the whole paragraph to be copied as the reference text. See the next section for options you can add to use <tag>xref</tag> anyway.</para>
          </section> <!-- </sect3> -->
          
          <section sect='sect3' xml:id='db5_universal_linking'>
            <title>Universal linking in DocBook 5</title>
            <para>In DocBook 4, only specialized elements are used for creating links within and between documents. In DocBook 4, you can use xref or link with linkend attributes to form links within a DocBook document, you can use olink to form links between DocBook documents, and you can use ulink to form an arbitrary URL link.</para>
            <para>In DocBook 5, almost all elements can be used as the basis for a link. That&apos;s because almost all elements have a set of attributes that are defined in the XLink namespace, such as xlink:href. For example, you can turn a command element into a link that targets the reference page for the command.</para>
            <programlisting><![CDATA[<para>Use the
<command xlink:href="#ref-preview">Preview</command>
command to generate a preview.</para>]]></programlisting>

             <para>The XML Linking Language (XLink) has been a W3C standard since 2001. That standard says that any XML element can become the source or target of a link if it has the universal XLink attributes on it. These attributes are in their own namespace named http://www.w3.org/1999/xlink. Because these attributes are in their own namespace, they do not interfere with any native attributes declared for an element.</para>
             <para>An xlink:href attribute value can have several different forms:</para>
             <itemizedlist>
               <listitem>An attribute such as xlink:href=&quot;#intro&quot; refers to an xml:id attribute that exists in the current document. This is similar to the DocBook 4 link and xref elements. The link and xref elements were retained in DocBook 5.</listitem>
               <listitem>An attribute such as xlink:href=&quot;http://docbook.org&quot; refers to an arbitrary URL. This is similar to the DocBook 4 ulink element, which was removed in DocBook 5. Instead of ulink, use a link element with a URL in its xlink:href attribute.</listitem>
               <listitem>An olink-style link from any element can be formed using two attributes. If there is a xlink:role=&quot;http://docbook.org/xlink/role/olink&quot; attribute present, then a link attribute of the form xlink:href=&quot;targetdoc#targetptr&quot; is interpreted as the two parts of an olink. The olink element itself is retained in DocBook 5. See Chapter 24, Olinking between documents to learn more about DocBook olinks.</listitem>
             </itemizedlist>
             <para>At the same time, the familiar DocBook linking attribute linkend has also been added anywhere an XLink can be used. The linkend attribute is limited to linking to an xml:id target within the same document.</para>
             <para>The universal linking mechanism enables you to create logical links between any two DocBook elements. However, such logical links may or may not be expressible in formatted output. For example, if you put an xlink:href on an inline element, then the text of the inline element can become clickable link text in the output. However, if you put an xlink:href attribute on a block element such as section, then it is doubtful that making all the text in the section into a clickable link will be useful. The DocBook stylesheets currently only handle xlink:href on inline elements for this reason. If you want to express linking from a block element, you will have to customize the stylesheet to do so, perhaps by putting a clickable icon in the margin.</para>
           </section> <!-- </sect3> -->

        </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Markup</title>
        <para> The following inlines are used to mark up text for special presentation:</para>
        <itemizedlist>
          <listitem>foreignphrase: A word or phrase in a language other than the primary language of the document</listitem>
          <listitem>wordasword: A word meant specifically as a word and not representing anything else</listitem>
          <listitem>computeroutput: Data, generally text, displayed or presented by a computer</listitem>
          <listitem>literal: Inline text that is some literal value</listitem>
          <listitem>markup: A string of formatting markup in text that is to be represented literally</listitem>
          <listitem>prompt: A character or string indicating the start of an input field in a computer display</listitem>
          <listitem>replaceable: Content that may or must be replaced by the user</listitem>
          <listitem>tag: A component of XML (or SGML) markup</listitem>
          <listitem>userinput: Data entered by the user</listitem>
        </itemizedlist>
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>Mathematics</title>
      <para>DocBook does not define a complete set of elements for representing equations. The Mathematical Markup Language (MathML) [MathML] is a standard that defines a comprehensive grammar for representing equations. MathML markup may be used in any of the equation elements (equation,informalequation, and inlineequation). For simple mathematics equations that do not require extensive markup, the mathphrase element is an alternative.</para>
      <!--
      inlineequation A mathematical equation or expression occurring inline
      mathphrase A mathematical phrase that can be represented with ordinary text and a small amount of markup
      subscript A subscript (as in H2O, the molecular formula for water)
      superscript A superscript (as in x2, the mathematical notation for x multiplied by itself)
      -->
      </section> <!-- </sect2> -->
        
      <section sect='sect2'> <title>User interfaces</title>
      <para>These elements describe aspects of a user interface:</para>
      <!--
      accel A graphical user interface (GUI) keyboard shortcut
      guibutton The text on a button in a GUI
      guiicon A graphic and/or text appearing as an icon in a GUI
      guilabel The text of a label in a GUI
      guimenu The name of a menu in a GUI
      guimenuitem The name of a terminal menu item in a GUI
      guisubmenu The name of a submenu in a GUI
      keycap The text printed on a key on a keyboard
      keycode The internal, frequently numeric, identifier for a key on a keyboard
      keycombo A combination of input actions
      keysym The symbolic name of a key on a keyboard
      menuchoice A selection or series of selections from a menu
      mousebutton The conventional name of a mouse button
      shortcut A key combination for an action that is also accessible through a menu
      -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>Programming languages and constructs</title>
      <para>Many of the technical inlines in DocBook are related to programming:</para>
      <!--
      classname The name of a class, in the object-oriented programming sense
      constant A programming or system constant
      errorcode An error code
      errorname An error name
      errortype The classification of an error message
      function The name of a function or subroutine, as in a programming language
      literal Inline text that is some literal value
      msgtext The actual text of a message component in a message set
      parameter A value or a symbolic reference to a value
      property A unit of data associated with some part of a computer system
      replaceable Content that may or must be replaced by the user
      returnvalue The value returned by a function
      symbol A name that is replaced by a value before processing
      token A unit of information
      type The classification of a value
      varname The name of a variable
        -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>Operating systems</title>
      <para>These inlines identify parts of an operating system, or an operating environment:</para>
      <!--
      application The name of a software program
      command The name of an executable program or other software command
      envar A software environment variable
      filename The name of a file
      msgtext The actual text of a message component in a message set
      option An option for a software command
      parameter A value or a symbolic reference to a value
      prompt A character or string indicating the start of an input field in a computer display
      systemitem A system-related item or term
        -->
      
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>General purpose</title>
      <para>There are also a number of general-purpose technical inlines:</para>
      <!--
      application The name of a software program
      database The name of a database, or part of a database
      email An email address
      filename The name of a file
      hardware A physical part of a computer system
      literal Inline text that is some literal value
      option An option for a software command
      optional Optional information
      replaceable Content that may or must be replaced by the user
      symbol A name that is replaced by a value before processing
      token A unit of information
      type The classification of a value
        -->
        </section> <!-- </sect2> -->

      </section> <!-- </sect1> --> <!-- end of inline elements -->
      
      <section>
        <title>Attributes in DocBook</title>
        
        <section sect='sect2'>
          <title>Common Attributes in DocBook</title>
          <para>There are many <firstterm>common attributes</firstterm> that occur on every DocBook element. They are summarized here for brevity and to make the additional attributes that occur on many elements stand out.</para>
          <variablelist>
            <varlistentry>
              <term>annotations</term>
              <listitem>It holds text and identifies one or more annotations that apply to this element.</listitem>
            </varlistentry>
            <varlistentry>
              <term>dir</term>
              <listitem>Identifies the direction of text in an element. Its allowed values are: ltr (Left-to-right text), rtl (Right-to-left text), lro (Left-to-right override), and rlo (Right-to-left override).</listitem>
            </varlistentry>
            <varlistentry>
              <term>remap</term>
              <listitem>Provides the name or similar semantic identifier assigned to the content in some previous markup scheme</listitem>
            </varlistentry>
            <varlistentry>
              <term>revisionflag</term>
              <listitem>Identifies the revision status of the element. Its values are: changed (The element has been changed), added (the element is new, i.e. it has been added to the document), deleted (the element has been deleted), and off (revision markup has been explicitly turned off for this element).</listitem>
            </varlistentry>
            <varlistentry>
              <term>role</term>
              <listitem>Provides additional, user-specified classification for an element.</listitem>
            </varlistentry>
            <varlistentry>
              <term>version</term>
              <listitem>Specifies the DocBook version of the element and its descendants.</listitem>
            </varlistentry>
            <varlistentry>
              <term>xml:base</term>
              <listitem>Specifies the base URI of the element and its descendants.</listitem>
            </varlistentry>
            <varlistentry>
              <term>xml:id</term>
              <listitem>Identifies the unique ID value of the element.</listitem>
            </varlistentry>
            <varlistentry>
              <term>xml:lang</term>
              <listitem>Specifies the natural language of the element and its descendants</listitem>
            </varlistentry>
            <varlistentry>
              <term>xreflabel</term>
              <listitem>
                <para>Provides the text that is to be generated for a cross-reference to the element.</para>
                <para>For elements like <tag>para</tag> or <tag>note</tag> that do not have a title or number, you can add an <tag>xreflabel</tag> attribute to the element. That attribute should contain the text you want to appear when an <tag>xref</tag> points to that element. The following is an example:</para>
                <programlisting><![CDATA[<para  id="ChooseSCSIid"  xreflabel="choosing a SCSI id">The methods
for choosing a <acronym>SCSI</acronym> id are ...
</para>
...
<para>
See the paragraph on <xref  linkend="ChooseSCSIid"/>.
</para>]]></programlisting>
                <para>The <tag>xref</tag> in the second paragraph points to the first paragraph. When processed, the second paragraph will read <quote>See the paragraph on choosing a SCSI id.</quote> and an HTML hot link will take the reader to the beginning of the paragraph.</para>
                <para>The advantage of <tag>xreflabel</tag> over using a link element is to provide consistent reference text to that element. If you decide to change the wording, you only have to change the <tag>xreflabel</tag>, and all <tag>xref</tag> references to it will change. If you had used link instead, then you would have to find and edit each instance to change the text.</para>
                <note>If you put an xreflabel on an element that normally does have generated text, the attribute will override the default generated text.</note>
              </listitem>
            </varlistentry>
          </variablelist>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Common Effectivity Attributes</title>
          <para>The common attributes include a collection of <firstterm>effectivity attributes</firstterm>. These attributes are available for authors to identify to whom a particular element applies. Effectivity attributes are often used for profiling: building documents that contain information only relevant to a particular audience.</para>
          <para>For example, a section might be identified as available only to readers with a <quote>top- secret</quote> security clearance or a paragraph might be identified as affecting only users running the implementation provided by a particular vendor.</para>
          <variablelist>
            <varlistentry>
              <term>arch</term>
              <listitem>Designates the computer or chip architecture to which the element applies</listitem>
            </varlistentry>
            <varlistentry>
              <term>audience</term>
              <listitem>Designates the intended audience to which the element applies; for example, system administrators, programmers, or new users</listitem>
            </varlistentry>
            <varlistentry xml:id='db_condition_attr'>
              <term>condition</term>
              <listitem>Provides a standard place for application-specific effectivity</listitem>
            </varlistentry>
            <varlistentry>
              <term>conformance</term>
              <listitem>Indicates standards conformance characteristics of the element</listitem>
            </varlistentry>
            <varlistentry>
              <term>os</term>
              <listitem>Indicates the operating system to which the element is applicable</listitem>
            </varlistentry>
            <varlistentry>
              <term>revision</term>
              <listitem>Indicates the editorial revision to which the element belongs</listitem>
            </varlistentry>
            <varlistentry>
              <term>security</term>
              <listitem>Indicates something about the security level associated with the element to which it applies</listitem>
            </varlistentry>
            <varlistentry>
              <term>userlevel</term>
              <listitem>Indicates the level of user experience for which the element applies</listitem>
            </varlistentry>
            <varlistentry>
              <term>vendor</term>
              <listitem>Indicates the computer vendor to which the element applies</listitem>
            </varlistentry>
            <varlistentry>
              <term>wordsize</term>
              <listitem>Indicates the word size (width in bits) of the computer architecture to which the element applies</listitem>
            </varlistentry>
          </variablelist>
          <para>The names of the effectivity attributes are suggestive of several classes of common effectivity information. The semantically neutral <tag linkend='db_condition_attr'>condition</tag> attribute was added to give authors a place to put values that don&apos;t fit neatly into one of the other alternatives.</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Common Linking Attributes</title>
          <para>The following attributes occur on all elements that can be the start of a link. They are summarized here once for brevity and to make the additional attributes that occur on many elements stand out.</para>
          <variablelist>
            <varlistentry>
              <term>linkend (IDREF) or linkends (IDREFS)</term>
              <listitem>Points to an internal link target by identifying the value of its <tag>xml:id</tag> attribute.</listitem>
            </varlistentry>
            <varlistentry>
              <term>xlink:actuate</term>
              <listitem>
                <para>Identifies the XLink actuate behavior of the link:</para>
                <itemizedlist>
                  <listitem>onLoad: An application should traverse to the ending resource immediately on loading the starting resource.</listitem>
                  <listitem>onRequest: An application should traverse from the starting resource to the ending resource only on a post-loading event triggered for the purpose of traversal.</listitem>
                  <listitem>other: The behavior of an application traversing to the ending resource is unconstrained by this specification. The application should look for other markup present in the link to determine the appropriate behavior.</listitem>
                  <listitem>none: The behavior of an application traversing to the ending resource is unconstrained by this specification. No other markup is present to help the application determine the appropriate behavior.</listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>xlink:arcrole</term>
              <listitem>Identifies the XLink arcrole of the link</listitem>
            </varlistentry>
            <varlistentry>
              <term>xlink:href</term>
              <listitem>Identifies a link target with a URI</listitem>
            </varlistentry>
            <varlistentry>
              <term>xlink:role</term>
              <listitem>Identifies the XLink role of the link</listitem>
            </varlistentry>
            <varlistentry>
              <term>xlink:show</term>
              <listitem>
                <para>Identifies the XLink show behavior of the link:</para>
                <itemizedlist>
                  <listitem>new: An application traversing to the ending resource should load the resource in a new window, frame, pane, or other relevant presentation context.</listitem>
                  <listitem>replace: An application traversing to the ending resource should load the resource in the same window, frame, pane, or other relevant presentation context in which the starting resource was loaded.</listitem>
                  <listitem>embed: An application traversing to the ending resource should load its presentation in place of the presentation of the starting resource.</listitem>
                  <listitem>other: The behavior of an application traversing to the ending resource is uncon- strained by XLink. The application should look for other markup present in the link to determine the appropriate behavior.</listitem>
                  <listitem>none: The behavior of an application traversing to the ending resource is unconstrained by this specification. No other markup is present to help the application determine the appropriate behavior.</listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>xlink:title</term>
              <listitem>Identifies the XLink title of the link</listitem>
            </varlistentry>
            <varlistentry>
              <term>xlink:type</term>
              <listitem>Identifies the XLink link type</listitem>
            </varlistentry>
          </variablelist>
        </section> <!-- </sect2> -->
        
      </section> <!-- </sect1> -->  <!-- end of "Attributes in DocBook" -->
      
      <section xml:id='code_in_docbook'>
        <title>Code in DocBook</title>
        <para>You may use block <sgmltag>programlisting</sgmltag> or inline <sgmltag>userinput</sgmltag> and <sgmltag>computeroutput</sgmltag>.</para>
        
        <section sect='sect2' xml:id='db_annotating_program_listings'>
          <title>Annotating Program Listings</title>
          <para>It is often the case that you need to comment on lines of code to explain it. There are three mechanisms you can use for that purpose.</para>
          <itemizedlist>
            <listitem>line annotations,</listitem>
            <listitem>line numbering, or</listitem>
            <listitem>callouts.</listitem>
          </itemizedlist>
          <section sect='sect3'>
            <title>Line annotations</title>
            <para>You can mix lineannotation elements in with your code to explain something directly in the text. For example:</para>
            <programlisting><![CDATA[<programlisting># constructor
sub new {
    my ($file, $output) = @_; <lineannotation>Store args</lineannotation>
    my $dir = basename $file; <lineannotation>Get dir name</lineannotation>
}
</programlisting>]]></programlisting>
            <para>Line annotations in the stock stylesheet print as italic, but they inherit the monospace font family of the programlisting.</para>
            <warning>Line annotations cannot be added in files inserted using textobject or <userinput><![CDATA[<xi:include parse="text">]]></userinput> because the <quote>&lt;</quote> character that starts the element will be escaped as <quote>&amp;lt;</quote> when it is brought in. You can use lineannotations in files brought in with <userinput><![CDATA[<xi:include parse="xml">]]></userinput>, but then you have to be careful to escape other XML characters in your program file. Line annotations also cannot be used with examples marked as CDATA, because any lineannotation element will not be recognized as an XML element.</warning>
          </section> <!-- </sect3> -->
          <section sect='sect3'>
            <title>Line numbering</title>
            <para>You can add line numbers to the listing, and then your paragraphs can refer to the line numbers. Currently line numbering is only available with the Java processors <application>Saxon</application> and <application>Xalan</application>, not <application>xsltproc</application>, because it is done with an extension function.</para>
            <para>Line numbers are turned on by a <varname>linenumbering</varname> attribute on each <sgmltag>programlisting</sgmltag> element that needs line numbering. By default, the numbering starts at 1, but you can assign your own starting number with the optional <varname>startinglinenumber</varname> attribute. You can also continue the numbering from the most recent <sgmltag>programlisting</sgmltag> that had line numbering by adding a <userinput><![CDATA[continuation="continues"]]></userinput> attribute to the current element. The following is an example with <varname>startinglinenumber</varname>:</para>
            <programlisting><![CDATA[<programlisting linenumbering="numbered" startinglinenumber="12">]]></programlisting>
            <para>Once your lines are numbered, you can refer to the line numbers in the paragraphs. The problem with line numbers, though, is you cannot see them until the text is formatted at least once. Also, if you edit the code, the line numbers may change and you will need to adjust your number references. It is useful for stable code examples, though.</para>
          </section> <!-- </sect3> -->
          <section sect='sect3'>
            <title>Callouts</title>
            <para>You can use callouts to mark specific locations in a program listing and link explanatory text to the marks. In DocBook, the <sgmltag>callout</sgmltag> element contains the explanatory text. The mark, which is called a <firstterm>callout bug</firstterm>, is most easily placed using the <sgmltag>co</sgmltag> element. Those two elements can be linked to each other to allow the reader to conveniently move back and forth between them.</para>
            <para>The callout bug is usually rendered as a white number in a black circle.</para>
            <programlisting><![CDATA[<programlisting>
#ifndef _My_Parser_h_  <co  id="condition-co"  linkends="condition" /> 
#define _My_Parser_h_
#include "MyFetch.h"   <co id="headerfile-co" linkends="headerfile" />
class My_Parser  <co id="classdef-co" linkends="classdef" />
{
public:
        //
        // Construction/Destruction
        //
        My_Parser();  <coref  linkend="classdef-co"/>
        virtual      ~My_Parser() = 0;
        virtual int  parse(MyFetch &amp;fetcher) = 0;
};
#endif
</programlisting>

<calloutlist>
  <callout arearefs="condition-co"  id="condition" >
    <para>Make this conditional.</para>
  </callout>
  <callout arearefs="headerfile-co" id="headerfile">
    <para>Load necessary constants.</para>
  </callout>
  <callout arearefs="classdef-co" id="classdef">
    <para>Define new class</para>
  </callout>
</calloutlist>]]></programlisting>
            <itemizedlist>
              <listitem>Use a <sgmltag>co</sgmltag> element to place a callout bug in your code sample. The element is empty, with all the information in attributes.</listitem>
              <listitem>Give the <sgmltag>co</sgmltag> an <varname>id</varname> or <varname>xml:id</varname> value so the callout text can be linked directly to the callout bug location.</listitem>
              <listitem>Its <varname>linkend</varname> attribute value (condition) should match the <varname>id</varname> or <varname>xml:id</varname> value of its <sgmltag>callout</sgmltag> element. That forms a link from the callout bug to the text.</listitem>
              <listitem>Use a <sgmltag>coref</sgmltag> instead of a <sgmltag>co</sgmltag> when you want to create a duplicate bug number. That is, when you have more than one location in your code that needs to refer to the same callout paragraph, use a <sgmltag>coref</sgmltag> for any but the first location. The <varname>linkend</varname> of the <sgmltag>coref</sgmltag> must point to the <varname>id</varname> of the master <sgmltag>co</sgmltag> element. The duplicate callout icons will all hotlink to the same callout paragraph. But the icon next to the callout paragraph will link back only to the master <sgmltag>co</sgmltag> element.</listitem>
              <listitem>A <sgmltag>calloutlist</sgmltag> contains a set of <sgmltag>callout</sgmltag> elements, and formats them as a list.</listitem>
              <listitem>Each <sgmltag>callout</sgmltag> element is paired up with a <sgmltag>co</sgmltag> element. The numbering order is based on the <sgmltag>co</sgmltag> order, so you should keep the <sgmltag>callout</sgmltag> elements in the same order.</listitem>
              <listitem>The <varname>arearefs</varname> attribute value matches the <varname>id</varname> value of its <sgmltag>co</sgmltag> callout bug . That forms a link from the callout text to the callout bug.</listitem>
              <listitem>Give the <sgmltag>callout</sgmltag> an <varname>id</varname> value so the callout bug can link directly to its callout text.</listitem>
            </itemizedlist>
            <note>It helps to establish a naming scheme for the ids to track the two-ended links</note>
          </section> <!-- </sect3> -->

          
        </section> <!-- </sect2> -->  <!-- end of "Annotating Program Listings" -->

      </section> <!-- </sect1> -->  <!-- end of "Code in DocBook" -->
      
      
      <section xml:id='db_links'>
	    <title>Links Inside and Outside</title>
        <para>Many elements admit linking attributes, which effectively turn its contents into a hot link. The most common attributes are <varname>linkend</varname>, which builds an <emphasis>internal</emphasis> link from an id within the document, and <varname>xlink:href</varname>, which builds an external link from a URI.</para>
        <para>Note that you need to declare the XLink namespace in your document instance to use href and other XLink attributes, like so:</para>
        <programlisting><![CDATA[<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">]]></programlisting>
          
        <para>Other useful XLink attributes are <varname>xlink:show</varname>, which establishes how the link is shown and may be either <constant>new</constant>, <constant>replace</constant>, <constant>other</constant>, and <constant>none</constant>; <varname>xlink:title</varname>, and <varname>xlink:type</varname> (possibly adopting values <constant>xmlnamespace</constant>, <constant>homepage</constant>, <constant>webpage</constant>, <constant>weblog</constant>, <constant>website</constant>...).</para>
        
        <para>Here are some examples using (internal) linking attributes:</para>
        <itemizedlist>
          <listitem>
            <para>Link to another element in the document bearing an id attribute such as <userinput><![CDATA[xml:id='some_destination']]></userinput>:</para>
            <programlisting><![CDATA[<link linkend='some_destination'>jump</link>]]></programlisting>
            <para>Alternatively, the href attribute may contain a hash-preceded fragment identifier to create a link within a document. For example:</para>
            <programlisting><![CDATA[<command xl:href="#dir">DIR</command>]]></programlisting>
          </listitem>
          <listitem>
            <para>Link to a website, or a webpage, etc.</para>
            <programlisting><![CDATA[<link type='website' xlink:href='https://www.domain.xyz/'>hot text of the hyperlink</link>]]></programlisting>
          </listitem>
        </itemizedlist>
        
        <section sect='sect2'>
          <title>The <tag>uri</tag> Tag</title>
          <para>The <tag>uri</tag> element identifies a Uniform Resource Identifier (URI) in content. Although DocBook does not mandate any values for the <tag>type</tag> attribute, several useful values have been suggested:</para>
          <itemizedlist>
            <listitem><literal>xmlnamespace</literal> for an XML namespace name; for example, http://docbook.org/ns/docbook</listitem>
            <listitem><literal>saxfeaturename</literal> for a SAX feature name; for example, http://xml.org/sax/features/namespaces</listitem>
            <listitem><literal>saxpropertyname</literal> for a SAX property name; for example, http://xml.org/sax/properties/declaration-handler</listitem>
            <listitem><literal>soapaction</literal> for a SOAP action; see SOAP Version 1.2 Part 2: Adjuncts</listitem>
            <listitem><literal>rddlpurpose</literal> for an RDDL purpose; see Resource Directory Description Language (<link linkend='rddl'>RDDL</link>)</listitem>
            <listitem><literal>rddlnature</literal> for an RDDL nature; see Resource Directory Description Language (<link linkend='rddl'>RDDL</link>)</listitem>
            <listitem><literal>homepage</literal> for a home page; for example, http://nwalsh.com/</listitem>
            <listitem><literal>weblog</literal> for a web log; for example, http://norman.walsh.name/</listitem>
            <listitem><literal>webpage</literal> for a web page; for example, http://docbook.org/schemas/</listitem>
            <listitem><literal>website</literal> for a website; for example, http://docbook.org</listitem>
          </itemizedlist>
        </section> <!-- </sect2> -->
        
      </section> <!-- </sect1> -->
      
      <section xml:id='docbook.info'>
        <title>Uniform <tag>info</tag> Elements</title>
        <para>DocBook versions earlier than DocBook V5.0 use unique elements for block information. For example, a <tag>book</tag> element would contain a <tag>bookinfo</tag> element. This was done to support different content models for different block elements. DTDs only allow one content model for each element, so a different element name was required for each block&apos;s information element. Since RELAX NG does not have this limitation, an element can have a different content model in different contexts. Therefore, the array of <tag>info</tag> elements (<tag>articleinfo</tag>, <tag>bookinfo</tag>, etc.) has been replaced with a single <tag>info</tag> element.</para>
        <para>Thus, an <tag>info</tag> element contains two series:</para>
        <itemizedlist>
          <listitem>
            <para>Interleave of:</para>
            <programlisting>title? titleabbrev? subtitle?</programlisting>
          </listitem>
          <listitem>
            <para>Zero or more of &quot;Info&quot; elements:</para>
            <itemizedlist>
              <listitem><tag>abstract</tag>: A summary</listitem>
              <listitem><tag>address</tag>: A real-world address, generally a postal address</listitem>
              <listitem><tag>artpagenums</tag>: The page numbers of an article as published</listitem>
              <listitem><tag>author</tag>: The name of an individual author</listitem>
              <listitem><tag>authorgroup</tag>: Wrapper for author information when a document has multiple authors or collabarators</listitem>
              <listitem><tag>authorinitials</tag>: The initials or other short identifier for an author</listitem>
              <listitem><tag>bibliocoverage</tag>: The spatial or temporal coverage of a document</listitem>
              <listitem><tag>biblioid</tag>: An identifier for a document</listitem>
              <listitem><tag>bibliosource</tag>: The source of a document</listitem>
              <listitem><tag>collab</tag>: Identifies a collaborator</listitem>
              <listitem><tag>confgroup</tag>: A wrapper for document meta-information about a conference</listitem>
              <listitem><tag>contractsponsor</tag>: The sponsor of a contract</listitem>
              <listitem><tag>contractnum</tag>: The contract number of a document</listitem>
              <listitem><tag>copyright</tag>: Copyright information about a document</listitem>
              <listitem><tag>cover</tag>: Additional content for the cover of a publication</listitem>
              <listitem><tag>date</tag>: The date of publication or revision of a document</listitem>
              <listitem><tag>edition</tag>: The name or number of an edition of a document</listitem>
              <listitem><tag>editor</tag>: The name of the editor of a document</listitem>
              <listitem><tag>issuenum</tag>: The number of an issue of a journal</listitem>
              <listitem><tag>keywordset</tag>: A set of keywords describing the content of a document</listitem>
              <listitem><tag>legalnotice</tag>: A statement of legal obligations or requirements</listitem>
              <listitem><tag>mediaobject</tag>: A displayed media object (video, audio, image, etc.)</listitem>
              <listitem><tag>org</tag>: An organization and associated metadata</listitem>
              <listitem><tag>orgname</tag>: The name of an organization</listitem>
              <listitem><tag>othercredit</tag>: A person or entity, other than an author or editor, credited in a document</listitem>
              <listitem><tag>pagenums</tag>: The numbers of the pages in a book, for use in a bibliographic entry</listitem>
              <listitem><tag>printhistory</tag>: The printing history of a document</listitem>
              <listitem><tag>pubdate</tag>: The date of publication of a document</listitem>
              <listitem><tag>publisher</tag>: The publisher of a document</listitem>
              <listitem><tag>publishername</tag>: The name of the publisher of a document</listitem>
              <listitem><tag>releaseinfo</tag>: Information about a particular release of a document</listitem>
              <listitem><tag>revhistory</tag>: A history of the revisions to a document</listitem>
              <listitem><tag>seriesvolnums</tag>: Numbers of the volumes in a series of books</listitem>
              <listitem><tag>subjectset</tag>: A set of terms describing the subject matter of a document</listitem>
              <listitem><tag>volumenum</tag>: The volume number of a document in a set (as of books in a set or articles in a journal) from group db._any</listitem>
            </itemizedlist>
            <!--<para>Any element Namespace: ##any, Process Contents: skip</para>-->
            <itemizedlist>
              <listitem><tag>annotation</tag>: An annotation</listitem>
              <listitem><tag>extendedlink</tag>: An XLink extended link</listitem>
              <listitem><tag>bibliomisc</tag>: Untyped bibliographic information</listitem>
              <listitem><tag>bibliomset</tag>: A cooked container for related bibliographic information</listitem>
              <listitem><tag>bibliorelation</tag>: The relationship of a document to another</listitem>
              <listitem><tag>biblioset</tag>: A raw container for related bibliographic information</listitem>
              <listitem><tag>itermset</tag>: A set of index terms in the meta-information of a document</listitem>
              <listitem><tag>productname</tag>: The formal name of a product</listitem>
              <listitem><tag>productnumber</tag>: A number assigned to a product</listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>

    
        
      </section> <!-- </sect1> -->
      <section>
        <title>Required <userinput>title</userinput> and <userinput>version</userinput> attributes</title>
        <para>DocBook V5.0 requires the title attribute on large block elements such as article.</para>
        <para>DocBook V5.0 no longer requires a Document Type Declaration. However, because processors may need to know the version of an instance, DocBook V5.0 has added the <userinput>version</userinput> attribute, which must appear on the root element of a DocBook document. The version attribute may also appear on other elements, and mixing of versions is allowed.</para>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Including Images in DocBook Doc&apos;s</title>
        <para>To include a picture in the text, use the <tag>graphic</tag> tag.</para>
        <para>(from http://bochs.sourceforge.net/doc/docbook/documentation/basics.html)</para>
        <para>Or something like:</para>
        <programlisting><![CDATA[<mediaobject>
  <imageobject>
    <imagedata format='PNG' fileref='image_folder/Figure1.png'/>
  </imageobject>
</mediaobject>]]></programlisting>
      </section> <!-- </sect1> -->
      
      <section>
        <title>A Callout to an Image or a Listing</title>
        <blockquote xml:id='wikipedia_callout'>
          <para>In publishing, a call-out or callout is a short string of text connected by a line, arrow, or similar graphic to a feature of an illustration or technical drawing, and giving information about that feature. The term is also used to describe a short piece of text set in larger type than the rest of the page and intended to attract attention.</para>
          <para>A similar device in word processing is a special text box with or without a small "tail" that can be pointed to different locations on a document.</para>
          <attribution>Wikipedia</attribution>
        </blockquote>
        <para><firstterm>Callouts</firstterm> are marks, frequently numbered and typically on a graphic (<sgmltag>imageobjectco</sgmltag>) or verbatim environment (<sgmltag>programlistingco</sgmltag> or <sgmltag>screenco</sgmltag>), that are described in a <sgmltag>calloutlist</sgmltag>.</para>
        <para>Callouts, such as numbered bullets, are an annotation mechanism. In an online system, these bullets are frequently <quote>hot,</quote> and clicking on them sends you to the corresponding annotation. Annotation mechanisms for quoted text is explained <link linkend='db_annotating_program_listings'>elsewhere</link>.</para>
      </section> <!-- </sect1> -->
      
      <section>
        <title>The <tag>alt</tag> Element Used as a Backdoor</title>
        <para>Much like a processing instruction in XML, an <tag>alt</tag> element may be used... Below is an example of a <application>TeX</application> mathematical formula inclusion meant to be processed by the <application>dblatex</application> engine:</para>
        <programlisting><![CDATA[<equation id="eq-with-no-title">
    <alt>C = \alpha + \beta Y^{\gamma} + \epsilon</alt>
</equation>]]></programlisting>
      </section> <!-- </sect1> -->
      
      <section> <title>Making a Glossary in DocBook</title>
      <para>A glossary, like a bibliography, is often constructed by hand. However, some applications are capable of building a skeletal index from glossary term markup in the document. If all of your terms are defined in some glossary database, it may even be possible to construct the complete glossary automatically.</para>
      <para>To enable automatic glossary generation, or simply automatic linking from glossary terms in the text to glossary entries, you must add markup to your documents. In the text, you mark up a term for compilation later with the inline glossterm tag. This tag can have a linkend attribute whose value is the ID of the actual entry in the glossary.</para>
      <para>For instance, if you have this markup in your document:</para>
      <programlisting><![CDATA[<glossterm linkend="xml">Extensible Markup Language</glossterm> is a new standard...]]></programlisting>
      <para>your glossary might look like this:</para>
      <programlisting><![CDATA[<glossary><title>Example Glossary</title>
⋮
<glossdiv><title>E</title>
<glossentry xml:id="xml"><glossterm>Extensible Markup Language</glossterm>
<acronym>XML</acronym>
<glossdef>
<para>Some reasonable definition here.</para>
<glossseealso otherterm="sgml">
</glossdef>
</glossentry>
</glossdiv>
⋮
</glossary>]]></programlisting>
<para>Note that the <computeroutput>glossterm</computeroutput> tag reappears in the glossary to mark up the term and distinguish it from its definition within the <computeroutput>glossentry</computeroutput>. The <computeroutput>xml:id</computeroutput> that the <computeroutput>glossentry</computeroutput> referenced in the text is the ID of the <computeroutput>glossentry</computeroutput> in the <computeroutput>glossary</computeroutput> itself. You can use the link between source and glossary to create a link in electronic formats, as we have done with the HTML and PDF forms of the glossary in this book.</para>
      <para>You can use the <computeroutput>baseform</computeroutput> attribute on <computeroutput>glossterm</computeroutput> and <computeroutput>firstterm</computeroutput> when the term marked up in context is in a different form, for example, plural. Here is an example:</para>
      <programlisting><![CDATA[<para>
  Using <glossterm baseform="DTD">DTDs</glossterm> can
  be hazardous to your sanity.
</para>]]></programlisting>
      </section> <!-- </sect1> -->
      
      <section xml:id='db_address_book'>
        <title>Making an Address/Phone/Agenda Book</title>
        <section sect='sect2' xml:id='db_info_tag'>
          <title>The <tag>info</tag> tag</title>
          <para>The <tag>info</tag> element contains meta-information about the element that contains it. An <tag>info</tag> element may contain a <tag>title</tag> and/or a <tag>subtitle</tag> element. You may find an example of how it is used <link linkend='db_person_info_listing'>here</link>.</para>
        </section> <!-- </sect2> -->
        <section sect='sect2'>
          <title>Describing a Person in DocBook</title>
          <para>A person can be <quote>described</quote> in DocBook as in the following example:</para>
          <programlisting xml:id='db_person_info_listing'><![CDATA[<info>
  <title>Example author</title>
  <author>
    <personname>
      <honorific>Mr</honorific>
      <firstname>Norman</firstname>
      <surname>Walsh</surname>
      <othername role='mi'>D</othername>
    </personname>
    <affiliation>
      <shortaffil>ATI</shortaffil>
      <jobtitle>Senior Application Analyst</jobtitle>
      <orgname>ArborText, Inc.</orgname>
      <orgdiv>Application Development</orgdiv>
    </affiliation>
  </author>
</info>]]></programlisting>
          <note>You may use tag <tag>person</tag> instead of tag <tag>author</tag>.</note>
          <para>Additionally, tab <tag>personblurb</tag> is used to hold a short description of a person.</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Places and Addresses</title>
          <para>The following tags are used:</para>
          <itemizedlist>
            <listitem><tag>email</tag></listitem>
            <listitem><tag>address</tag> <tag>otheraddr</tag> <tag>city</tag> <tag>country</tag> <tag>state</tag> <tag>street</tag> <tag>postcode</tag> <tag>pob</tag></listitem>
            <listitem><tag>phone</tag></listitem>
          </itemizedlist>
        </section> <!-- </sect2> -->
        
        </section> <!-- </sect1> -->
        
        <section>
          <title>Summarizing and Commenting in DocBook</title>
          <para>The <tag>abstract</tag> may be used for summarizing. An abstract can occur in most components of DocBook. It is expected to contain some sort of summary of the content with which it is associated (by containment). An <tag>abstract</tag> is a block element and may contain <tag>info</tag> and paragraph elements.</para>
          <para>Other tags for summarizing are <tag linkend='db_epigraph'>epigraph</tag> and <tag linkend='db_sidebar'>sidebar</tag>.</para>
          <para xml:id='db_epigraph'>An epigraph is a short inscription, often a quotation or poem, set at the beginning of a document or component. Epigraphs are usually related somehow to the content that follows them and may help set the tone for the component. It may contain <tag>info</tag>, <tag>attribution</tag>, <tag>literallayout</tag>, and paragraph elements.</para>
          <para xml:id='db_sidebar'>A <tag>sidebar</tag> element is a short piece of text, rarely longer than a single column or page, that is presented outside the narrative flow of the main text. Sidebars are often used for digressions or interesting observations that are related, but not directly relevant, to the main text.</para>
        </section> <!-- </sect1> -->
        
        <section>
          <title>Backus-Naur Notation in DocBook*</title>
        </section> <!-- </sect1> -->
        
        
        <section>
          <title>Dates in DocBook</title>
          <para>Tag <tag>date</tag> for an inline date, although DocBook does not specify the format of the date.</para>
        </section> <!-- </sect1> -->
        
        <section>
          <title>Namespaces Declared in DocBook</title>
          <para>Generally, operator color (:) is used to select any element from any namespace except:</para>
          <itemizedlist>
            <listitem>http://docbook.org/ns/docbook</listitem>
            <listitem>http://www.w3.org/1999/xhtml</listitem>
          </itemizedlist>
          <para>Two common public namespaces are assumed: those for <link linkend='mathml'>MathML</link> (<tag>mml</tag>) and <link linkend='svg'>SVG</link> (<tag>svg</tag>).</para>
          <para>Here is an example of inclusion of a mathematical formula (<tag>mml</tag>). It just prints <varname>x<superscript>3</superscript></varname>:</para>
          <programlisting><![CDATA[<article xmlns='http://docbook.org/ns/docbook'
xmlns:mml="http://www.w3.org/1998/Math/MathML">
  <title>Example mml-math</title>
  <informalequation>
    <mml:math>
      <mml:msup>
        <mml:mi>x</mml:mi>
        <mml:mn>3</mml:mn>
      </mml:msup>
    </mml:math>
  </informalequation>
</article>]]></programlisting>
          <para>And here is an example of inclusion of an SVG image:</para>
          <programlisting><![CDATA[<article xmlns='http://docbook.org/ns/docbook'
version="5.0">
  <title>Example svg-svg</title>
  <mediaobject>
    <imageobject>
      <imagedata>
        <svg xmlns="http://www.w3.org/2000/svg"
          width="100" height="100" version="1.1">
          <rect x="20" y="20" width="80" height="80"
            style="fill:blue; stroke:green; stroke-width: 2;
            fill-opacity: 0.5; stroke-opacity: 0.9"/>
          </svg>
        </imagedata>
      </imageobject>
    </mediaobject>
</article>]]></programlisting>
        </section> <!-- </sect1> -->
        
      
      <section>
        <title>Simplified Docbook*</title>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Transforming to PostScript, PDF ...</title>
        
        <section sect='sect2'>
          <title>Transforming to PDF, PostScript, LaTeX through <application>dblatex</application></title>
          <para><application>dblatex</application> supports links, tables, bookmarks... Nevertheless, it has failed on my large files, but you can do:</para>
          <programlisting>dblatex --type=tex <filename>my_file</filename>.xml</programlisting>
          <para>And then:</para>
          <programlisting>latex <filename>my_file</filename>.tex</programlisting>
          <para>to get a dvi file, later to be converted to PostScript or PDF format:</para>
          <programlisting>dvipdf <filename>my_file</filename>.dvi</programlisting>
          <para>Yet if you want EPS support, do:</para>
          <programlisting>dvips my_file.dvi &amp;&amp; ps2pdf my_file.ps</programlisting>
          <warning><application>dvipdfm</application> and <application>dvipdfmx</application> don&apos;t generate links.</warning>
          <para>Unicode is supported through switch: <userinput>-b xetex</userinput> or <userinput>--backend=xetex</userinput>.</para>
          <para>XSL parameteres can be set like this: <userinput>-P param = value</userinput> or <userinput>--param= param = value</userinput>.</para>
          
          
        </section> <!-- </sect2> -->
                
        <section sect='sect2'>
          <title>Transforming to PostScript through <application>sdop</application></title>
          <blockquote>
            <para><application>sdop</application> reads  DocBook  XML  input, processes it into page images, and writes the result as PostScript. This can be turned into PDF using an application  such  as  <application>ps2pdf</application>.  <application>SDoP</application> is &quot;simple&quot; because  (a)  it  does not check that the input conforms to the DTD, and (b) it supports only a simple subset of DocBook features.</para>
            <attribution>the man page</attribution>
          </blockquote>
          <para><application>sdop</application> was written by Philip Hazel, Cambridge, England, who last revised it on November 23rd, 2013.</para>
          
          <para>EPS images are supported out of the box.</para>
          
          <section sect='sect3'>
            <title>Supported Docbook Elements</title>
            <para>A proper subset of Docbook, namely Simple Docbook, is supported. The Simplified DocBook elements that are not supported are <tag>authorgroup</tag>, <tag>biblio<varname>xxx</varname></tag>, <tag>entrytbl</tag>, and <tag>spanspec</tag>.</para>
            <para>In the following table, elements that are defined for Simplified DocBook are marked with a dagger.</para>
            <table>
              <tr> <td>† abbrev</td> <td>Ignored</td> </tr>
              <tr> <td>† abstract</td> <td>Ignored</td> </tr>
              <tr> <td>† acronym</td> <td>Ignored</td> </tr>
              <tr> <td>address</td> <td></td> </tr>
              <tr> <td>† affiliation</td> <td></td> </tr>
              <tr> <td>† appendix</td> <td>Supports <parameter>id</parameter></td> </tr>
              <tr> <td>† article</td> <td></td> </tr>
              <tr> <td>† articleinfo</td> <td></td> </tr>
              <tr> <td>† attribution</td> <td></td> </tr>
              <tr> <td>† audiodata</td> <td>Ignored</td> </tr>
              <tr> <td>† audioobject</td> <td>Ignored</td> </tr>
              <tr> <td>† author</td> <td></td> </tr>
              <tr> <td>† authorblurb</td> <td>Ignored</td> </tr>
              <tr> <td>† authorinitials</td> <td></td> </tr>
              <tr> <td>† blockquote</td> <td></td> </tr>
              <tr> <td>book</td> <td></td> </tr>
              <tr> <td>bookinfo</td> <td></td> </tr>
              <tr> <td>† caption</td> <td></td> </tr>
              <tr> <td>chapter</td> <td>Supports <parameter>id</parameter></td> </tr>
              <tr> <td>† citetitle</td> <td>Treated as <tag>emphasis</tag></td> </tr>
              <tr> <td>colophon</td> <td></td> </tr>
              <tr> <td>† colspec</td> <td>Supports <parameter>align</parameter>, <parameter>char</parameter>, <parameter>charoff</parameter>, <parameter>colwidth</parameter>, <parameter>colsep</parameter></td> </tr>
              <tr> <td>† command</td> <td></td> </tr>
              <tr> <td>† computeroutput</td> <td>Treated as <tag>literal</tag></td> </tr>
              <tr> <td>† copyright</td> <td>Supported in <tag>articleinfo</tag> and <tag>bookinfo</tag></td> </tr>
              <tr> <td>† corpauthor</td> <td></td> </tr>
              <tr> <td>† date</td> <td></td> </tr>
              <tr> <td>† edition</td> <td></td> </tr>
              <tr> <td>† editor</td> <td></td> </tr>
              <tr> <td>† email</td> <td>Italic by default</td> </tr>
              <tr> <td>† emphasis</td> <td>Supports <parameter>role</parameter></td> </tr>
              <tr> <td>† entry</td> <td>Supports <parameter>align</parameter>, <parameter>char</parameter>, <parameter>charoff</parameter></td> </tr>
              <tr> <td>† epigraph</td> <td>Works like <tag>blockquote</tag></td> </tr>
              <tr> <td>† example</td> <td>Supports <parameter>id</parameter></td> </tr>
              <tr> <td>† figure</td> <td>Supports <parameter>id</parameter></td> </tr>
              <tr> <td>† filename</td> <td></td> </tr>
              <tr> <td>† firstname</td> <td></td> </tr>
              <tr> <td>† footnote</td> <td></td> </tr>
              <tr> <td>† footnoteref</td> <td>Only on same page as the footnote</td> </tr>
              <tr> <td>formalpara</td> <td></td> </tr>
              <tr> <td>function</td> <td></td> </tr>
              <tr> <td>† holder</td> <td></td> </tr>
              <tr> <td>† honorific</td> <td></td> </tr>
              <tr> <td>† imagedata</td> <td>Supports <parameter>align</parameter>, <parameter>depth</parameter>, <parameter>fileref</parameter>, <parameter>format</parameter>, <parameter>scale</parameter>,
<parameter>scalefit</parameter>, <parameter>width</parameter></td> </tr>
              <tr> <td>† imageobject</td> <td></td> </tr>
              <tr> <td>index</td> <td>Supports <parameter>role</parameter></td> </tr>
              <tr> <td>indexterm</td> <td>Supports <parameter>class</parameter>, <parameter>id</parameter>, <parameter>role</parameter></td> </tr>
              <tr> <td>informalfigure</td> <td></td> </tr>
              <tr> <td>† informaltable</td> <td>Supports <parameter>frame</parameter>, <parameter>colsep</parameter>, <parameter>rowsep</parameter></td> </tr>
              <tr> <td>† inlinemediaobject</td> <td>Treated as <tag>mediaobject</tag></td> </tr>
              <tr> <td>† issuenum</td> <td></td> </tr>
              <tr> <td>† itemizedlist</td> <td>Supports <parameter>mark</parameter></td> </tr>
              <tr> <td>† jobtitle</td> <td></td> </tr>
              <tr> <td>† keyword</td> <td>Ignored</td> </tr>
              <tr> <td>† keywordset</td> <td>Ignored</td> </tr>
              <tr> <td>† legalnotice</td> <td></td> </tr>
              <tr> <td>† lineage</td> <td></td> </tr>
              <tr> <td>† lineannotation</td> <td>Uses a small italic font</td> </tr>
              <tr> <td>† link</td> <td></td> </tr>
              <tr> <td>† listitem</td> <td></td> </tr>
              <tr> <td>† literal</td> <td></td> </tr>
              <tr> <td>† literallayout</td> <td>Supports <parameter>class</parameter></td> </tr>
              <tr> <td>† mediaobject</td> <td></td> </tr>
              <tr> <td>† note</td> <td>Works like <tag>blockquote</tag></td> </tr>
              <tr> <td>† objectinfo</td> <td>Ignored</td> </tr>
              <tr> <td>† option</td> <td></td> </tr>
              <tr> <td>† orderedlist</td> <td>Supports <parameter>numeration</parameter></td> </tr>
              <tr> <td>† orgname</td> <td></td> </tr>
              <tr> <td>† othercredit</td> <td></td> </tr>
              <tr> <td>† othername</td> <td></td> </tr>
              <tr> <td>† para</td> <td></td> </tr>
              <tr> <td>† phrase</td> <td></td> </tr>
              <tr> <td>preface</td> <td></td> </tr>
              <tr> <td>primary</td> <td></td> </tr>
              <tr> <td>† programlisting</td> <td>Treated as <tag>screen</tag></td> </tr>
              <tr> <td>† pubdate</td> <td></td> </tr>
              <tr> <td>† publishername</td> <td></td> </tr>
              <tr> <td>† quote</td> <td></td> </tr>
              <tr> <td>† releaseinfo</td> <td></td> </tr>
              <tr> <td>† replaceable</td> <td>Italic by default</td> </tr>
              <tr> <td>† revdescription</td> <td></td> </tr>
              <tr> <td>† revhistory</td> <td></td> </tr>
              <tr> <td>† revision</td> <td></td> </tr>
              <tr> <td>† revnumber</td> <td></td> </tr>
              <tr> <td>† revremark</td> <td>Ignored</td> </tr>
              <tr> <td>† row</td> <td>Supports <parameter>rowsep</parameter></td> </tr>
              <tr> <td>screen</td> <td></td> </tr>
              <tr> <td>secondary</td> <td></td> </tr>
              <tr> <td>† section</td> <td>Supports <parameter>id</parameter></td> </tr>
              <tr> <td>† sectioninfo</td> <td>Ignored</td> </tr>
              <tr> <td>sect<replaceable>n</replaceable></td> <td>Treated as <tag>section</tag></td> </tr>
              <tr> <td>see</td> <td></td> </tr>
              <tr> <td>seealso</td> <td></td> </tr>
              <tr> <td>† sidebar</td> <td>Works like <tag>blockquote</tag></td> </tr>
              <tr> <td>simpara</td> <td></td> </tr>
              <tr> <td>† subject</td> <td>Ignored</td> </tr>
              <tr> <td>† subjectset</td> <td>Ignored</td> </tr>
              <tr> <td>† subjectterm</td> <td>Ignored</td> </tr>
              <tr> <td>subscript</td> <td>No small font in titles; ignored in table of contents</td> </tr>
              <tr> <td>† subtitle</td> <td>For articles, chapters, appendixes, and indexes</td> </tr>
              <tr> <td>superscript</td> <td>No small font in titles; ignored in table of contents</td> </tr>
              <tr> <td>† surname</td> <td></td> </tr>
              <tr> <td>† systemitem</td> <td>Ignored</td> </tr>
              <tr> <td>† table</td> <td>Supports <parameter>frame</parameter>, <parameter>colsep</parameter>, <parameter>rowsep</parameter></td> </tr>
              <tr> <td>† tbody</td> <td></td> </tr>
              <tr> <td>† term</td> <td></td> </tr>
              <tr> <td>tertiary</td> <td></td> </tr>
              <tr> <td>† textobject</td> <td></td> </tr>
              <tr> <td>† tfoot</td> <td></td> </tr>
              <tr> <td>† tgroup</td> <td>Supports <parameter>align</parameter>, <parameter>char</parameter>, <parameter>charoff</parameter>, <parameter>cols</parameter>, <parameter>colsep</parameter>, <parameter>rowsep</parameter></td> </tr>
              <tr> <td>† thead</td> <td></td> </tr>
              <tr> <td>† title</td> <td></td> </tr>
              <tr> <td>† titleabbrev</td> <td></td> </tr>
              <tr> <td>† trademark</td> <td>Ignored</td> </tr>
              <tr> <td>† ulink</td> <td>Supports <parameter>url</parameter></td> </tr>
              <tr> <td>† userinput</td> <td>Monospaced by default</td> </tr>
              <tr> <td>† variablelist</td> <td></td> </tr>
              <tr> <td>† varlistentry</td> <td></td> </tr>
              <tr> <td>varname</td> <td></td> </tr>
              <tr> <td>† videodata</td> <td>Ignored</td> </tr>
              <tr> <td>† videoobject</td> <td>Ignored</td> </tr>
              <tr> <td>† volumenum</td> <td></td> </tr>
              <tr> <td>† xref</td> <td>Supports <parameter>linkend</parameter></td> </tr>
              <tr> <td>† year</td> <td></td> </tr>
            </table>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>Links in Sdop</title>
          
          <para>Attribute <parameter>id</parameter> is only supported for chapter and section elements and is used for making links[, but then the documentation for links is inadequate].</para>
          <para>If an index is generated, the page numbers it contains are made into clickable links. This and the generation of clickable links from <tag>xref</tag> elements are turned off by setting <parameter>xref_links</parameter> parameter to <userinput>no</userinput>. The colour of these links is by default the same colour as the surrounding text, but it can be explicitly specified by <parameter>xref_rgb</parameter>, as in <userinput><![CDATA[<?sdop xref_rgb="0,0,1"?>]]></userinput>.</para>
          
          <para>Here is a full example:</para>
          <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="docbook.css"?>

<book>
  <title>A sdop test file</title>
  <para>...</para>
  <chapter id='ch01'>
    <title>First Chapter</title>
    <para>...</para>
  </chapter>
  <chapter>
    <title>Second Chapter</title>
    <para>An xref: <xref linkend='ch01'/>...</para>
    <para>A ulink: <ulink url='circularia.t15.org'/>...</para>
  </chapter>
</book>]]></programlisting>
          </section> <!-- </sect3> --> <!-- end of "Links in Sdop -->
          
        </section> <!-- </sect2> -->
        

      </section> <!-- </sect1> -->
      
      <section>
        <title>Transforming to EPUB, HTML, XHTML, </title>
        <para>There is a huge (16MB) package of stylesheets which on my Ubuntu machine live at <userinput>/usr/share/xml/docbook/stylesheet/docbook-xsl</userinput>. These are documented in <citetitle>DocBook XSL: The Complete Guide</citetitle>, Fourth (Web) Edition, by Bob Stayton, to whom I am indebted. This free guide, currently to be found at http://www.sagehill.net/docbookxsl/, explains everything you need to do all sorts of transformations to your docbook source.</para>
        <para>The examples use <application>xsltproc</application>, easily available on linux. On windows you may use Saxon, at http://saxon.sourceforge.net/ or Xalan, which runs on Java [Virtual Machine].</para>
        
        <section sect='sect2'>
          <title>Transforming to EPUB</title>
          <para>I use <application>dbtoepub</application> like this:</para>
          <programlisting>dbtoepub --css <filename>style.css</filename> <filename>book.xml</filename></programlisting>
          <para>It takes about one minute per megabyte and produces a file <filename>book.epub</filename>. I don&apos;t think that the stylesheet supplied is followed, though. For instance, an element like <userinput><![CDATA[<emphasis>modularity</emphasis> ]]></userinput> may have been transformed to <userinput><![CDATA[<span class="emphasis"><em>modularity</em></span>]]></userinput>, but my docbook stylesheet styles for <classname>emphasis</classname>, not for element <classname>em</classname> inside element <classname>span</classname> with attribute <constant>emphasis</constant>.</para>
            
          <section sect='sect3'>
            <title>Links Within the (XML) Document</title>
            <para>The link source is identified through a Docbook 5 <userinput>xml:id=&quot;<varname>your_identifier</varname>&quot;</userinput> attribute in a visible element. Then you can use a plain <tag>link</tag> element with a <varname>linkend</varname> attribute:</para>
            <programlisting><![CDATA[<link linkend="you_identifier">link_text</link>]]></programlisting>
          </section> <!-- </sect3> -->
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Transforming to HTML through XSLT</title>
          <section sect='sect3'>
            <title>Transforming to a single HTML file</title>
            <para>Just use the <filename>html/docbook.xsl</filename>. As this stylesheet does not name the output, use a switch as in</para>
            <programlisting>xsltproc  --output  myfile.html  docbook.xsl  myfile.xml</programlisting>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>Processing part of a document</title>
            <para>You may want to generate output for only part of large DocBook document. For example, you might need just one book from a set document, or one chapter from a book document, etc. The DocBook XSL stylesheets have a parameter that lets you output part of a document.</para>
            <para>There are two conditions that must be met:</para>
            <itemizedlist>
              <listitem>The content you want to output is contained in a single element. You cannot use this feature to output an arbitrary selection of elements.</listitem>
              <listitem>The selected element must have an <parameter>id</parameter> attribute on it.</listitem>
            </itemizedlist>
            <para>You process the document as you normally would, but you set the stylesheet parameter <parameter>rootid</parameter> to the <parameter>id</parameter> attribute value of the element you want to process. For example, if you have a book with three chapters:</para>
            <programlisting><![CDATA[<book>
  <chapter id="introduction">
    ...
  </chapter>
  <chapter id="installing">
    ..
  </chapter>
  <chapter id="administering">
    ...
  </chapter>
</book>]]></programlisting>

<para>You can generate an HTML file for the second chapter with a command like the following:</para>
<programlisting> xsltproc --stringparam  rootid  "using" --output  chap2.html html/docbook.xsl  myfile.xml</programlisting>

<para>The <filename>chap2.html</filename> output file will contain just the second chapter. The entire document is still parsed, so there will not be signficant savings of processing time and the
selected content is still processed within the context of the entire document. Any cross references to other chapters will be properly formed, but the links will not actually go anywhere because the targets are not included in the output.</para>
          </section> <!-- </sect3> -->
        
          <section sect='sect3'>
            <title>Transforming to multiple HTML files (chunking)</title>
            <para>Include the line: <userinput><![CDATA[<?xml-stylesheet type="text/xsl" href="/usr/share/xml/docbook/stylesheet/docbook-xsl/html/chunk.xsl" ?>]]></userinput> at the top of your document and process with an XSLT processor like xsltproc. Or better still, passed the stylesheet as a parameter to the XSLT processor (<application>xsltproc</application> or whatever). The default behaviour chunks up to <tag>sect1</tag> elements. If you want to chunk the first <tag>sect1</tag> sections too, include <userinput>--stringparam chunk.first.sections 1</userinput> in your command line.</para>
            <para>If you want the output to go into a chosen subdirectory, write a processing instruction just after the opening tag of the element like <programlisting><![CDATA[<?dbhtml dir="HowToMakeABook" ?>]]></programlisting>. (On the other hand, you don&apos;t want to specify an output file name.) You can also write processing instructions to determine how files are named by writing an analogous processing instruction following the opening tag of a chunkable element, like this:</para>
            <programlisting><![CDATA[<chapter><?dbhtml filename="intro.html" ?>
  <title>Introduction</title>]]></programlisting>
            <para>This way your xml file will get transformed into its component *.html files corresponding to chapters, sections etc plus an index.html file.</para>
          </section> <!-- </sect3> -->
        </section> <!-- </sect2> -->
        
      </section> <!-- </sect1> -->
    
    </chapter> <!-- end of "Docbook" -->
    
    <chapter xml:id='DITA'>
      <title>Darwin Information Typing Architecture (DITA)</title>
      <para>The Darwin Information Typing Architecture defines a set of relationships between the document parts, processors, and communities of users of the information. DITA has the following layers that relate to specific design points expressed in its core DTD, topic.</para>
      
      <section>
        <title>Overview</title>
        <para>The Darwin Information Typing Architecture (DITA) is an XML-based architecture for authoring, producing, and delivering topic-oriented, information-typed content that can be reused and single-sourced in a variety of ways. While DITA historically has been driven by the requirements of large-scale technical documentation authoring, management, and delivery, it is a standard that is applicable to any kind of publication or information that might be presented to readers, including interactive training and educational materials, standards, reports, business documents, trade books, travel and nature guides, and more.</para>
        <para>DITA is designed for creating new document types and describing new information domains based on existing types and domains. The process for creating new types and domains is called specialization. Specialization enables the creation of specific, targeted XML grammars that can still use tools and design rules that were developed for more general types and domains; this is similar to how classes in an object-oriented system can inherit the methods of ancestor classes.</para>
        <para>Because DITA topics are conforming XML documents, they can be readily viewed, edited, and validated using standard XML tools, although realizing the full potential of DITA requires using DITA-aware tools.</para>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Layers in the Darwin Information Typing Architecture</title>
        <variablelist>
          <varlistentry>
            <term>Delivery contexts:</term>
            <listitem>
              <itemizedlist>
                <listitem>helpset</listitem>
                <listitem>aggregate printing</listitem>
                <listitem>Web site; information portal</listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Typed topic structures:</term>
            <listitem>
              <itemizedlist>
                <listitem>topic</listitem>
                <listitem>concept</listitem>
                <listitem>task</listitem>
                <listitem>reference</listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Common structures</term>
            <listitem>
              <itemizedlist>
                <listitem>metadata</listitem>
                <listitem>OASIS (CALS) table</listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
        </variablelist>
      </section> <!-- </sect1> -->
      
      <section>
        <title>DITA typed topic specializations (infotyped topics)</title>
        <para>The typed topics represent the fundamental structuring layer for DITA topic-oriented content. The basis of the architecture is the topic structure, from which the concept, task, and reference structures are specialized. Extensibility to other typed topics is possible through further specialization.</para>
        <para>The four information types (topic, concept, task, and reference) represent the primary content categories used in the technical documentation community. Moreover, specialized information types, based on the original four, can be defined as required.</para>
        <para>As a notable feature of this architecture, communities can define or extend additional information types that represent their own data. Examples of such content include product support information, programming message descriptions, and GUI definitions. In addition to the ability to type topics and define specific content models therein, DITA also provides the ability to extend tag vocabularies that pertain to a domain. Domain specialization takes the place of what had been called &quot;shared structures&quot; in DITA&apos;s original design.</para>
      </section> <!-- </sect1> -->
      
    </chapter>  <!-- end of "DITA" -->
  
  
  <chapter>
    <title>Cascading Style Sheets (CSS)</title>
    <section>
      <title>Introduction to CSS*</title>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Referenced and In-lined CSS</title>
      <para>Often enouh you just import a CSS file through a line like:</para>
      <programlisting><![CDATA[<?xml-stylesheet href="my_style_sheet.css" type="text/css"?>]]></programlisting>
      
      <para>alternatively, you may embed your style in an HTML page inside a <tag>style</tag> element:</para>
      <programlisting><![CDATA[<style type="text/css">
  ...
</style>]]></programlisting>
    </section> <!-- </sect1> -->    
    
    <section>
      <title>CSS Grammar</title>
      
      <section sect='sect2'>
        <title>The Rules of CSS</title>
        <para>CSS rules begin with a <firstterm>selector</firstterm>, which is what is being defined, followed by a declaration or list of declarations between curly brackets to define the selector&apos;s style.</para>
        <para>In <computeroutput>h1 {color: red;}</computeroutput>, <emphasis>h1</emphasis> is the selector and <emphasis>{color: red;}</emphasis> is the declarations. Inside the declaration, a <firstterm>property</firstterm> (here <emphasis>color</emphasis>) gets assigned a <firstterm>value</firstterm> (here <emphasis>red</emphasis>).</para>
      
        <!--
        <section sect='sect3'> <title>Selectors*</title> </section> 
        <section sect='sect3'> <title>Parts of a Style Rule*</title> </section> 
        <section sect='sect3'> <title>A Basic Style Rule*</title> </section> 
        <section sect='sect3'> <title>Declaring More Styles*</title> </section> 
        <section sect='sect3'> <title>Combining Rules*</title> </section> 
        -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Types of Selectors</title>
        <para>A simple selector refers to one object. You can make a rule apply to several elements by concatenating them with commas.</para>
        <programlisting>h1, h2, h3 {font-weight: bold;}</programlisting>
        
        <section sect='sect3'>
          <title>The Universal Selector</title>
          <para>The asterisk is called the universal selectors. It heads a rule for all elements, but it will be overridden by any other rule as the universal selector has the least specifity.</para>
          <programlisting>* {font-family: serif;}</programlisting>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>Class Selector</title>
        <para>If you don&apos;t want all of your tags to appear exactly the same, you need a "free agent" selector that can be applied to any HTML tag. This is the class selector. When defining a class rule, you place a period immediately before the class name to let the browser know, "Hey, this is a class selector, not an HTML or ID selector":</para>
        <programlisting>.highlight { background-color: yellow;}</programlisting>
        <para>This says that the highlight class text background color is yellow.</para>
        <para>To apply this class (and thus its styles) to an HTML tag, add the class attribute to a tag with the class name in quotes. You can apply the same class to any HTML tag you choose, as many times as you want:</para>
        <programlisting><![CDATA[<h2 class="highlight">Chapter I...</h2>]]></programlisting>
        <para>Notice though that you do not add the period with the class name when it&apos;s in a tag. The period is only included when you are setting up the class rule.</para>
        <para>You can further specify a class by prepending the name of an element in its selector like this:</para>
        <programlisting>h2.highlight { background-color: orange;}</programlisting>
        <para>You can also add multiple classes to a single tag, mixing and matching styles as needed. Simply list all the classes you want applied to a particular tag in the class attribute, separated by spaces, as in:</para>
        <programlisting><![CDATA[<p class="highlight smallprint">'I should...</p>]]></programlisting>
        <para>When applied to a tag, that tag picks up the styles of all of the classes applied to it.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>ID Selector</title>
          <para>The ID selector apparently behaves exactly like the class selector. The only obvious difference is that you use a hash mark at the beginning, to declare it, rather than a period:</para>
          <programlisting>#title01 { color: green;}</programlisting>
          <para>Importantly, each element&apos;s ID must be unique.</para>
          <para>To apply the ID (and thus its styles) to an HTML tag, add the ID attribute to the tag with the name of the ID you want to apply:</para>
          <programlisting><![CDATA[<part id="title01">Chapter I...</part>]]></programlisting>
          <para>Similar to the class selector, you do not add the hash mark with the ID name when it&apos;s in the HTML tag. The hash mark is only included when you are setting up the ID rule.</para>
          <para>So what&apos;s the difference between a class and an ID? It isn&apos;t so much in how these selectors work, but in what you use them for:</para>
          <itemizedlist mark='bullet'>
            <listitem>Identifying major page sections (for example, header, content, footer)</listitem>
            <listitem>Identifying unique content or modules (for example, search, navigation, ad)</listitem>
            <listitem>Identifying an element to be used with Javascript</listitem>
            <listitem>Specificity within the Cascade</listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Special Selectors: </title>
          <section sect='sect4'>
            <title>CSS [attribute~="value"] Selector</title>
            <para>The [attribute~="value"] selector is used to select elements with an attribute value <emphasis>containing</emphasis> a specified word.</para>
            <para>The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is "flower":</para>
            <programlisting><![CDATA[[title~="flower"] {
  border: 5px solid yellow;
}]]></programlisting>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>CSS [attribute|="value"] Selector</title>
            <para>The [attribute|="value"] selector is used to select elements with the specified attribute starting with the specified value.</para>
            <para>The following example selects all elements with a class attribute value that begins with "top":</para>
            <note>The value has to be a <emphasis>whole</emphasis> word, either alone, like class="top", or followed by a hyphen( - ), like class="top-text"!</note>
            <programlisting><![CDATA[[class|="top"] {
  background: yellow;
}]]></programlisting>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>CSS [attribute^="value"] Selector</title>
            <para>The [attribute^="value"] selector is used to select elements whose attribute value begins with a specified value.</para>
            <para>The following example selects all elements with a class attribute value that begins with "top":</para>
            <note>The value does <emphasis>not</emphasis> have to be a whole word!</note>
            <programlisting><![CDATA[[class^="top"] {
  background: yellow;
}]]></programlisting>
          </section> <!-- </sect4> -->
        <section sect='sect4'>
            <title>CSS [attribute$="value"] Selector</title>
            <para>The [attribute$="value"] selector is used to select elements whose attribute value <emphasis>ends</emphasis> with a specified value.</para>
            <para>The following example selects all elements with a class attribute value that ends with "test":</para>
            <note>The value does <emphasis>not</emphasis> have to be a whole word!</note>
            <programlisting><![CDATA[[class$="test"] {
  background: yellow;
}]]></programlisting>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>CSS [attribute*="value"] Selector</title>
            <para>The [attribute*="value"] selector is used to select elements whose attribute value <emphasis>contains</emphasis> a specified value.</para>
            <para>The following example selects all elements with a class attribute value that contains "te":</para>
            <note>The value does <emphasis>not</emphasis> have to be a whole word!</note>
            <programlisting><![CDATA[[class*="te"] {
  background: yellow;
}]]></programlisting>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Context and Relationship Selectors</title>
        <para>In CSS, the context of a particular element can determine its style. For example, if you want headers in a sidebar to look different from headers in the main body, you can easily give each a different look by defining how the level 1 header tag should look in the body and a different rule for how it should look in a sidebar.</para>
        
        <note>CSS rules appliy to the last element of the selector. Thus, <userinput>A > B</userinput> applies to B (when it is a child of A).</note>
      
        <section sect='sect3'>
          <title>Styles Based on Where Something Is</title>
          <para>When you nest one element inside of another, the surrounding tags are called <firstterm>parent elements</firstterm>. We can then write our CSS to style a tag based on the tags, classes, or IDs that the element is within to style the <firstterm>descendent</firstterm> selectors.</para>
          <para>To show all <tag>cite</tag> elements in red when they are inside an <tag>h1</tag> (ancestor) element, write:</para>
          <programlisting>h1 cite { color: red; }</programlisting>
        
          <section sect='sect3'>
            <title>Styles for Children</title>
            <para>An immediate descendant is called a <firstterm>child</firstterm>. You annotate immediate kinship by means of a greater-than sign (<computeroutput>&gt;</computeroutput>), as in <userinput>h1 &gt; b</userinput>.</para>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'> <title>Styles for Siblings</title>
          <para>If elements are next to each other (not nested inside of each other), they are called <firstterm>adjacent</firstterm> or <firstterm>sibling</firstterm> selectors. You can set a style based on an element&apos;s sibling. For example, let&apos;s say you want any citation that&apos;s next to emphasized text to be red:</para>
          <programlisting>em+cite { color: red; }</programlisting>
          </section> <!-- </sect3> -->
          
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Attribute Selectors</title>
          <para>You can select an element on the value of its attribute. To prevent all elements in Spanish from being printed use:</para>
          <programlisting>*[lang=&quot;es&quot;] {display: none;}</programlisting>
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
      <section sect='sect2'> <title>Styles for Special Cases</title>
      <para>There are several cases where we can use CSS to style content on the page that is not specifically set off by HTML tags or to create a dynamic style in reaction to something that your Web site visitor is doing on the screen. These are known as pseudo-elements and pseudo-classes:</para>
      <itemizedlist>
        <listitem>Link pseudo-classes: Used to style hypertext links. Although primarily associated with color, you can actually use any CSS property to set off links and provide user feedback during interaction.</listitem>
        <listitem>Dynamic pseudo-classes: Used to style any element on the screen depending on how the user is interacting with it.</listitem>
        <listitem>Pseudo-elements: Used to style the first letter or first line in a block of text.</listitem>
      </itemizedlist>
      
        <section sect='sect3'> <title>Link States</title>
        <para>All hypertext links have four "states" that can be styled in reac- tion to a user action:</para>
        <itemizedlist>  
          <listitem>a <firstterm>link</firstterm> state when there has been no action</listitem>
          <listitem>a <firstterm>hover</firstterm> state when the mouse cursor is over it</listitem>
          <listitem>an <firstterm>active</firstterm> state when the user clicks it</listitem>
          <listitem>a <firstterm>visited</firstterm> state when the user returns after having visited the linked-to page</listitem>
        </itemizedlist>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>Styles for Link Actions</title>
        <para>CSS includes four different pseudo-classes for each of the four interaction states: link, visited, hover, and active. Keywords are appended to the selector after a colon. Collectively, these are known as the link pseudo-classes. They need to be in the above order -link, visited, hover, active- to function properly, due to the cascade order. For example:</para>
        <programlisting>a:link { color: red; }
a:visited { color: darkred; }
a:hover { color: hotpink; }
a:active { color: fuchsia; }</programlisting>
</section> <!-- </sect3> -->
        <section sect='sect3'> <title>Styles for Dynamic Actions</title>
        <para>The hover and active states are not just for links. You can actually place your cursor over and click on any element on the screen and style elements for those actions. The third action state is when the user selects an element on the screen (usually a form field) and that element is in focus and it is ready for user input.</para>
        <programlisting>input.formField { color: gray; }
input.formField:hover { color: green; }
input.formField:active { color: red; }
input.formField:focus { color: black; }</programlisting>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>Styles for Parts of a Paragraph</title>
        <para>To draw attention to an introduction or opening statement, one common practice is to make the first letter or first line of text in a paragraph stand out from the rest of the text on the page. A paragraph is a block of text, so it has a first letter and a first line of characters, but they do not have specific tags around them. To style these you can use pseudo-elements for the first letter and first line. To make the first letter of each paragraph red:</para>
        <programlisting>p:first-letter { color: red; }</programlisting>
        <para>To make the first line of each paragraph blue:</para>
        <programlisting>p:first-line { color: blue }</programlisting>
        <para>Lastly, you can prepend or append stuff using selectors <varname>:before</varname> and <varname>:after</varname>, as in</para>
        <programlisting>cite:before {content: "«";}
cite:after {content: "»";}</programlisting>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>The CSS <parameter>pointer-events</parameter> Property</title>
          <para>The <parameter>pointer-events</parameter> sets whether or not an element should react to pointer events. Its default value is <literal>auto</literal>, which means that the element reacts to pointer events, like hover and click. It can be set to <literal>none</literal>.</para>
          <para>Its JavaScript syntax is: <userinput><varname>object</varname>.style.pointerEvents=&quot;none&quot;</userinput></para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Parameters with <function>var()</function></title>
          <para>Variables in CSS should be declared within a CSS selector that defines its scope. For a global scope you can use either the <userinput>:root</userinput> or the <userinput>body</userinput> selector.</para>
          <para>The variable name must begin with two dashes (<userinput>--</userinput>) and is case sensitive!</para>
          <para>The syntax of the <function>var()</function> function is as follows:</para>
          <programlisting>var(<varname>custom-name</varname>, <varname>value</varname>)</programlisting>
          <bridgehead>An Example</bridgehead>
          <para>The following example first defines a global custom property named <varname>--main-bg-color</varname>, then it uses the var() function to insert the value of the custom property later in the style sheet:</para>
          <programlisting>:root {
  --main-bg-color: coral;
}

#div1 {
  background-color: var(--main-bg-color);
}

#div2 {
  background-color: var(--main-bg-color);
}</programlisting>

          <section sect='sect4'>
            <title>More on the <function>var()</function> Function</title>
            <para>We&apos;ve already seen how to use the <function>var()</function> function to retrieve the value of a custom property. What I haven&apos;t mentioned is that the <function>val()</function> function accepts a variable number of parameters: fallback values to be used when the referenced custom property is invalid. Fallback values can be a comma separated list, which will be combined into a single value by the function. For example <userinput>var(--font-stack, &quot;Helvetica Neue&quot;, &quot;Helvetica&quot;, &quot;Arial&quot;, &quot;sans-serif&quot;);</userinput> defines a fallback of &quot;Helvetica Neue, Helvetica, Arial, sans-serif&quot; once combined.</para>
            <para>Shorthand values may also be stored in a variable. Just like regular CSS, properties such as margin and padding are not comma separated, so an appropriate fallback for padding would define them the same way:</para>
            <programlisting>/* definition */
div {
  --color: green;
  --pad: 10px 10px 20px 15px;
}
 
/* usage */
p { padding: var(--pad, 10px 10px 10px) };</programlisting>
            
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Combining var() with the call() Function</title>
            <para>The CSS3 calc() function, like other CSS3 functions, may include variables in its expression. So, let&apos;s say that you wanted to apply a size factor to the font. You can&apos;t just append the measurement unit to the variable. However, if we multiply the --font-size-factor by one unit of measurement, we get a valid and usable result:</para>
            <programlisting>/* definition */
:root { --font-size-factor: 2.5; }
 
/* valid application! */
div > p {
  font-size: calc(var(--font-size-factor) * 1em);
}</programlisting>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
          
      </section> <!-- </sect2> -->
      
      
    </section> <!-- </sect1> -->
    
    <section> <title>Inheritance</title>
    <para>Almost all HTML tags have styles indirectly applied to them. An inherited style can come from styles that are predefined by the browser itself (browser-default styles) or from an element&apos;s parent tags (parent-inherited styles). For example, given the following style:</para>
    <programlisting>.highlight { color: purple; }</programlisting>
    <para>And this block of HTML:</para>
    <programlisting><![CDATA[<h1 class="highlight">The Characters of <cite>Through the Looking-Glass</cite></h1>]]></programlisting>
    <para>The book title, Through the Looking-Glass, will be purple because the citation tag inherits the style from the highlight class in its parent tag. However, it goes without saying that it will also be black, bold, and italicized because it is in the level 1 header, and italicized because of the citation tag.</para>
      <section sect='sect2'> <title>Overriding Inheritance</title>
        <section sect='sect3'> <title>Order</title>
        <para>The most obvious way to override a style is to simply restate it later in your CSS. You can override a style for any selector simply by declaring the rule again with the same attribute but a different value. The basic rule of thumb is that the last instance of the style declared is the one applied to the page.</para>
        <para>The order you place your CSS rules in will have a direct effect on which style ends up being applied, with the last one listed being the one that gets used, if there are no other overriding factors such as specificity, importance, and media type.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>Specificity</title>
        <para><firstterm>Specificity</firstterm> refers to how much context you provide in a given CSS rule. The more specific the context the rule is to be applied, the more weight it is given when determining whether or not it is applied, even allowing you to override the order in which styles are set.</para>
        <para>The basic rule of thumb is that the more specific you are about the context of a CSS rule, the more likely it is that the style will be applied to the element.</para>
        <para>The more selectors included in your contextual rule, the more specific it is. If there are no other overriding factors -such as importance and media type- then a more specific rule gets applied regardless of order. So, for example:</para>
        <programlisting>h1 .hilight { color: orange; }</programlisting>
        <para>is a more specific context than just:</para>
        <programlisting>.hilight { color: purple; }</programlisting>
        <section sect='sect4'> <title>Determining a CSS Rule&apos;s Weight</title>
        <para>So what happens when you have the same number of selectors in a contextual rule that applies to the same element? For example:</para>
        <programlisting>#content h1 .hilight { color: purple; }
.column01 h1 .hilight { color: orange; }</programlisting>
        <para>Both of these CSS rules have three selectors, so which style is applied? In this case, you have to look at how many of each kind of selector appears in the rule. Each selector type -HTML, CSS, and ID- has its own specific weight when it comes to determin- ing specificity. An HTML tag has a weight of 1, classes have a weight of 10, IDs have a weight of 100, and inline style (styles placed directly into an HTML tag with the style attribute) trump them all with a weight of &infinity;- that is, they cannot be overridden no matter how specific the CSS rule. In the example of above, the first CSS rule would have a weight of 111: 100 (#content) + 1 (h1) + 10 (.hilight) = 111. The second one has a weight of only 21: 10 (.column01) + 1 (h1) + 10 (.hilight) = 21. In this case, the first rule will be applied.</para>
        <para>So, what happens in cases where the weights add up to be exactly the same? We fall back on order: The last CSS rule declared is the style used.</para>
        <para>The basic rule of thumb is any rule with ID selectors in the context is going to override most other rules; a rule with a class in the context will override a rule with just HTML selectors.</para>
        </section> <!-- </sect4> -->
        
        </section> <!-- </sect3> -->
        
        
        <section sect='sect3'> <title>Importance</title>
        <para>Inheritance, order, and specificity combine to determine which styles are applied to which elements, but you still have an ace in the hole if you need to force particular styles to be applied: !important will override all other concerns, forcing a style to be applied. By placing this immediately after a value—but before the semicolon—you are telling the browser that this is the most important style declaration being applied, overriding all other declarations, with the exception of inline styles.</para>
        <para>For example, if you have rules for the same selector, but add !important to the first:</para>
        <programlisting>.hilight { color: orange !important; }
.hilight { color: purple; }</programlisting>
        <para>Despite the fact that the purple declaration is second, any text within the hilight class will be orange.</para>
        <para>!important will also override specificity.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>Media</title>
        <para>We generally think of the Web as a screen-based medium, but Web pages can be output on a variety of different devices. You need to be able to create style sheets that tailor your pages to a variety of media. Earlier in this chapter, when you learned how to add styles to a Web page or a Web site, I mentioned that you can also specify a media type to which the style sheet should be applied. The default is all—that is, apply these styles regardless of the device. Although CSS allows for several media types, really there are only four types you need to worry about:</para>
        <itemizedlist>
          <listitem>Screen: Whether it&apos;s a laptop or desktop computer; CRT, LCD, or plasma; screen is what you will use most of the time.</listitem>
          <listitem>Print: A lot of Web pages get printed. Some sites will create special "printer friendly" versions of the pages, but all you really need to do is add a printer style sheet. Whenever the user prints a page in a Web browser, this style sheet tailors the design for the printed page.</listitem>
          <listitem>Handheld: Handheld devices are a popular way to surf the Web, and you should provide a scaled-down version of your pages for that audience. Handheld devices present one of the greatest challenges, because of the variety of screen sizes.</listitem>
          <listitem>All: Styles will be used regardless of the device type.</listitem>
        </itemizedlist>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'> <title>The Cascade</title>
        <para>While the browser is rendering your Web page, each style declaration cascades through the Web page with a particular priority based on its media type, importance, specificity, order, and inheritance until its rule matches a particular element. The cascade is predictable, and usually obvious as long as you don&apos;t try to overthink it.</para>
        <para>Styles are applied in order of priority:</para>
        <itemizedlist>
          <listitem>Inline styles: Inline styles trump all other priorities and are applied first.</listitem>
          <listitem>Media: If the media type does not match the output media, then obviously the styles are ignored.</listitem>
          <listitem>Importance: Any declaration with !important will be applied if there is not an overriding inline style.</listitem>
          <listitem>Specificity: The more specific the context—weighted for the number of IDs, classes, and HTML selectors—the higher the priority for the style to be applied.</listitem>
          <listitem>Order: The last style declared is the one that gets applied.</listitem>
          <listitem>Parent-inherited: Any styles inherited from parent elements are applied.</listitem>
          <listitem>Browser-default: Any styles inherited from the browser defaults are applied last.</listitem>
        </itemizedlist>
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
    
    </section> <!-- </sect1> -->
    
    <section>
      <title>Setting how elements are displayed</title>
      
      <section sect='sect2'>
        <title>The CSS1 <tag>display</tag> tag</title>
        <para>All HTML elements have a default <tag>display</tag> type, whereas in a new XML vocabulary your have to set each element to its intended value. The most common values are <constant>block</constant> and <constant>inline</constant>. For instance, paragraphs and headers are block elements, so you must set their <varname>display</varname> to <constant>block</constant> through code like this:</para>
        <programlisting>p, title {display: block;}</programlisting>
        <para>These are the possible values for <tag>display</tag> outside tables:</para>
        <variablelist>
          <varlistentry> <term>inline</term> <listitem> <para>Element boxes flow horizontally next to each other from left to right.</para> </listitem> </varlistentry>
          <varlistentry> <term>block</term> <listitem> <para>Element boxes flow vertically, stacking on top of each other from top to bottom.</para> </listitem> </varlistentry>
          <varlistentry> <term>list-item</term> <listitem> <para>Element boxes flow vertically, stacking on top of each other from top to bottom, like block, but with a list-marker and indented lines of text.</para> </listitem> </varlistentry>
          <varlistentry> <term>none</term> <listitem> <para>The element is completely removed from the document.</para> </listitem> </varlistentry>
          <varlistentry> <term>inherit</term> <listitem> <para>Uses the display style of the parent element.</para> </listitem> </varlistentry>
        </variablelist>
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Further values added in CSS2</title>
        <attribution>(From <citetitle>Core CSS</citetitle>, by Keith Shengili-Roberts, Prentice Hall, 2000.)</attribution>
        <para>The CSS2 specification adds 14 new values for <tag>display</tag>: <constant>compact</constant>,<constant>run-in</constant>, <constant>marker</constant>,<constant> table</constant>, <constant>table-caption</constant>, <constant>table-cell</constant>, <constant>table-column</constant>, <constant>table-column-group</constant>, <constant>table-footer-group</constant>,<constant>table-header-group</constant>,<constant>table-row</constant>,<constant>table-row-group</constant>, <constant>inline-table</constant> and <constant>inherit</constant>.</para>
        
        <section sect='sect3'>
          <title>The <constant>compact</constant>, <constant>run-in</constant>, and <constant>marker</constant> values of <tag>display</tag></title>
          <para>The <constant>compact</constant> and <constant>run-in</constant> values are designed to either set a block or inline box, depending on the context of the selected Web element. A block-level element set to <constant>compact</constant> will, in effect, <emphasis>compress</emphasis> the size of the box under certain circumstances in an effort to conserve space. This is particularly handy with such things as lists, where you may not want the description of a list item to take up an extra line of space if it can <emphasis>fit</emphasis> in the same line as that of any content that might precede it. Similarly, <constant>run-in</constant> will enable a block element to behave like an inline element, so that space can be saved. If the element so chosen doesn&apos;t take the full width of the browser display, it is rendered as an inline element.</para>
          
          <para>The desired effect of the <constant>marker</constant> value is in specifying how a generated marker should appear on screen, and setting the characteristics that distinguish it from the other content with which is associated. The <constant>marker</constant> value is meant to be used only with the <varname>before</varname> and <varname>after</varname> pseudo-classes, and is designed to declare the selected content to be a marker in automatically generated content. <constant>marker</constant> content is formatted only on a single line, and is only created if the <varname>content</varname> property associated with the <varname>before</varname> or <varname>after</varname> pseudo-classes actually generates content. Marker boxes can have padding and even borders, but cannot take margin values. The following example and illustration provide an idea as to how it should work:</para>
          <programlisting><![CDATA[<html>
  <head>
    <title>Using tag &quot;marker&quot;</title>
    <style>
      li:before {
        display: marker;
        content: "[" counter(counter) "]";
        counter-increment: counter;
        width: 2cm; text-align: left;
      }
      body {font-size: xx-large;}
    </style>
  </head>
  <body>
    <ol>
      <li>Here is an item
      <li>Here is another item
      <li>Here is a third item
      <li>Here is the final, fourth item.
    </ol>
  </body>
</html>]]></programlisting>
          <para>As you can see from this example, the parameters set determine how the generated <constant>marker</constant> content should appear onscreen. Each of the list items is preceded by a number contained within square brackets, and each of these <quote>markers</quote> is left-aligned (most list markers are indented slightly); the text that follows them is spaced 2 centimeters from the marker.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>The <constant>inherit</constant> value for <tag>display</tag></title>
          <para>The <constant>inherit</constant> named value for <varname>display</varname> simply takes on whatever parent value has already been set for <varname>display</varname>.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>CSS2 <tag>display</tag> values for tables</title>
          <para>These are: <constant> table</constant>, <constant>table-caption</constant>, <constant>table-cell</constant>, <constant>table-column</constant>, <constant>table-column-group</constant>, <constant>table-footer-group</constant>,<constant>table-header-group</constant>,<constant>table-row</constant>,<constant>table-row-group</constant>, <constant>inline-table</constant>.</para>
          <para>Some of these values correspond to rarely used but valid table tag values (such as <tag>col</tag> , <tag>colgroup</tag> , <tag>tfoot</tag> and <tag>thead</tag>) under the official HTML 4.0 specification.</para> <para>There are one-to-one relationships between each of the HTML 4.0 table-tags and their <tag>display</tag> property equivalents:</para>
          <table>
            <caption>HTML 4.0 Table Tags and Their CSS2 <tag>display</tag> Property Equivalents</caption>
            <thead>
              <tr> <th>tag</th> <th><tag>display</tag> value</th> </tr>
            </thead>
            <tbody>
              <tr> <td>caption</td> <td>table-caption</td> </tr>
              <tr> <td>col</td> <td>table-column</td> </tr>
              <tr> <td>colgroup</td> <td>table-column-group</td> </tr>
              <tr> <td>table</td> <td>table</td> </tr>
              <tr> <td>tbody</td> <td>table-row-group</td> </tr>
              <tr> <td>td</td> <td>table-cell</td> </tr>
              <tr> <td>tfoot</td> <td>table-footer-group</td> </tr>
              <tr> <td>th</td> <td>table-cell</td> </tr>
              <tr> <td>thead</td> <td>table-header-group</td> </tr>
              <tr> <td>tr</td> <td>table-row</td> </tr>
            </tbody>
          </table>
          <para>These values are not meant to supercede the existing HTML tags, but rather to be used by other document languages such as XML that do not have predefined table elements.</para>
          
        <!--
          <varlistentry>
            <term>table</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>table-caption</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>table-cell</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>table-column</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>table-column-group</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>table-footer-group</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>table-header-group</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>table-row</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>table-row-group</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>inline-table</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
          <varlistentry>
            <term>inherit</term>
            <listitem>
              <para>
              </para>
            </listitem>
          </varlistentry>
          
        </variablelist>
        -->
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
           
      <section sect='sect2'>
        <title>The <tag>visibility</tag> and <tag>opacity</tag> tags</title>
        <para>One way to hide an element is to set the display property to none and completely remove it from the document. If you want the element to remain in the document but be invisible, you have other options:</para>
        <variablelist>
          <varlistentry>
            <term>visibility</term>
            <listitem>Sets whether the box is visible or invisible. A hidden element will still take up space but will appear to be empty, like the invisible man in a rain storm. Values: {visible | hidden | inherit}</listitem>
          </varlistentry>
          <varlistentry>
            <term>opacity</term>
            <listitem>Sets the opacity of a box on a scale from 0.0 (clear) to 1.0 (opaque). This value affects the opacity of the element and all of its content and cannot be overridden by child elements. Opacity does not currently work in IE. Values: {0.0 to 1.0 | inherit}</listitem>
          </varlistentry>
        </variablelist>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Setting Right-To-Left Text</title>
        <para>The <varname>dir</varname> attribute is used to set the base direction of text for display. It is essential for enabling HTML in right-to-left scripts such as Arabic, Hebrew, Syriac, and Thaana. If the direction is right-to-left in a given element, add <userinput><![CDATA[dir='rtl']]></userinput> to its tag.</para>
        <bridgehead>Base Direction</bridgehead>
        <para>In order for text to look right when an HTML page is displayed, we need to establish the directional context of that text. We will refer to that context as the <firstterm>base direction</firstterm> for the text.</para>
        <para>It is fundamentally important to establish the appropriate base direction for the Unicode bidirectional algorithm to produce the expected ordering of the displayed text. Correct specification of the base direction also establishes a proper default alignment for the text.</para>
        <para>In HTML the base direction is either set explicitly by the nearest parent element that uses the <varname>dir</varname> attribute, or, in the absence of such an attribute, the base direction is inherited from the default direction of the document, which is left-to-right (ltr).</para>
        <section sect='sect3' xml:id='unicode_bidirectional_algorithm'>
          <title>The Unicode Bidirectional Algorithm</title>
          <para>When text with different directionality is mixed inline, the bidi algorithm produces a separate <firstterm>directional run</firstterm> out of each sequence of contiguous characters with the same directionality. Each run contains contiguous characters with the same directionality as established by their being <firstterm>strongly typed</firstterm> as either left-to-right or right-to-left, as most letters are. The order in which directional runs themselves are displayed across the page depends on the prevailing base direction.</para>
          <para>If you change the directional context by specifying that the direction of the <tag>html</tag> element or a parent element, such as a <tag>div</tag>, <tag>p</tag> or <tag>span</tag> element, is <quote>rtl</quote>, you will change the order of the directional runs.</para>
          <bridgehead>Neutral characters</bridgehead>
          <para>Spaces and punctuation are not strongly typed as either LTR or RTL in Unicode, because they may be used in either type of script. They are therefore classed as neutral or weak characters.</para>
          <para>Characters are usually classified as <quote>weak</quote> when they are associated with numbers. A small number of punctuation characters are initially classed as weak, but in a non-numeric context are treated like neutrals. In consequence, in this article we will refer to all punctuation as neutral characters.</para>
          <para>When the bidi algorithm encounters characters with neutral directional properties (such as spaces and punctuation) it works out how to handle them by looking at the surrounding characters. A neutral character between two strongly typed characters that have the same directional type will also assume that directionality. So a neutral character between two RTL characters will be treated as a RTL character itself, and will have the effect of <emphasis>extending</emphasis> the directional run.</para>
          <para>Further, when a space or punctuation falls between two strongly typed characters that have different directionality, ie. at the boundary between directional runs, then the neutral character (or characters) will be treated as if they have the same directionality as the prevailing base direction.</para>
        </section> <!-- </sect3> -->  <!-- end of "The Unicode Bidirectional Algorithm" -->
      </section> <!-- </sect2> -->  <!-- end of "The Unicode Bidirectional Algorithm" -->

    </section> <!-- </sect1> -->
    
    <section>
      <title>Text in CSS</title>
      <section sect='sect2'>
        <title>Hyphenation (<parameter>hyphens</parameter></title>
        <para>The <parameter>hyphens</parameter> property controls hyphenation of text in block level elements. You can prevent hyphenation from happening at all, allow it, or only allow it when certain characters are present.</para>
        <para>Note that <parameter>hyphens</parameter> is language-sensitive. Its ability to find break opportunities depends on the language, defined in the lang attribute of a parent element. Not all languages are supported yet, and support depends on the specific browser.</para>
        <bridgehead>Syntax</bridgehead>
        <programlisting>hyphens: none | manual | auto</programlisting>
        <variablelist>
          <varlistentry>
            <term><userinput>hyphens: none;</userinput></term>
            <listitem>
              <para>Words are never hyphenated at line breaks, even if characters inside the word suggest where hyphenation could or should go.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><userinput>hyphens: manual;</userinput></term>
            <listitem>
              <para>Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities. There are two characters that suggest line break opportunity:</para>
              <itemizedlist>
                <listitem>U+2010 (HYPHEN): the “hard” hyphen character indicates a visible line break opportunity. Even if the line is not actually broken at that point, the hyphen is still rendered. Literally a “-“.</listitem>
                <listitem>U+00AD (SHY): an invisible, “soft” hyphen. This character is not rendered visibly; instead, it suggests a place where the browser might choose to break the word if necessary. In HTML, you can use <userinput><![CDATA[&shy;]]></userinput> to insert a soft hyphen.</listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><userinput>hyphens: auto;</userinput></term>
            <listitem>
              <para>Words can be broken at appropriate hyphenation points either as determined by hyphenation characters (see above) inside the word or as determined automatically by a language-appropriate hyphenation resource (if supported by the browser or provided via @hyphenation-resource).</para>
              <para>Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->  <!-- end of "Text in CSS" -->
    
    <section>
      <title>Fonts in CSS</title>
    
      <section sect='sect2'>
        <title>Choice of Font Family</title>
        <para>The process of defining the typeface for a particular block of text is relatively straightforward—specify a list of font-family names, separated by commas, with the last name in the list being a generic font family (serif, sans-serif, monospace, handwritten|cursive, or fantasy). If a particular font in the list is not available, the browser moves to the next one, until there is a match.</para>
        <programlisting>font-family: georgia, times, "times new roman", sans-serif;</programlisting>
        <para>However, the simplicity of setting a typeface belies the complexity of picking the right font to communicate your message.</para>
        <section sect='sect3'>
          <title>Core Web Fonts</title>
          <para>It is estimated that there are more than 100,000 fonts available electronically. Yet, if you look around the Web, you would be forgiven if you thought there were only three—Arial (Helvetica on the Mac), Times New Roman (Times on the Mac), and Georgia. These are the three most popular fonts because—along with Verdana, Trebuchet MS, Andale Mono, Arial Black, Courier New, Comic Sans MS, Impact, and Webdings—they are the core Web fonts that are widely distributed on Mac and Windows computers. So, you are almost guaranteed that these 11 fonts will be on the end user&apos;s machine. Eleven fonts out of tens of thousands. Not very inspiring, is it?</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Web-Safe Fonts</title>
          <para>The 11 core Web fonts are installed almost universally on all computers. However, there are many other fonts commonly installed on the end user&apos;s computer that are commonly overlooked. These fonts can be safely employed in your designs, using CSS:</para>
          <itemizedlist>
            <listitem><firstterm>Operating system fonts</firstterm>: All operating systems come with pre-installed fonts. In addition to the core Web fonts, Windows XP adds 9 typefaces, Windows Vista adds another 7 (16 total), and Mac OS X supplies a whopping 30 fonts.</listitem>
            <listitem><firstterm>Microsoft Office fonts</firstterm>: The one application almost universally installed on all computers is Microsoft Office. Love it or hate it, Microsoft Office 2007 has another 121 fonts, while its Mac equivalent (Office 2008) includes 68 fonts. Even better, the Windows and Mac lists have 62 fonts in common.</listitem>
            <listitem><firstterm>iLife fonts</firstterm>: All Macs (consumer and Pro) have Apple iLife pre-installed, which has 13 fonts pre-installed.</listitem>
          </itemizedlist>
          <para>That makes a total of 148 fonts likely to be on a given Windows box and 120 fonts on Macs, with an overlap of 73 fonts.</para>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Font size</title>
        <para>Besides absolute or relative specification, you may set <userinput>font-size</userinput> to &apos;xx-large&apos;, &apos;x-large&apos;, &apos;large&apos;, &apos;medius&apos;, &apos;small&apos;, &apos;x-small&apos;, and &apos;xx-small&apos;.</para>
        <section sect='sect3'>
          <title>CSS <parameter>font-size-adjust</parameter> Property</title>
          <para>The <parameter>font-size-adjust</parameter> property gives you better control of the font size when the first selected font is not available.</para>
          <para>When a font is not available, the browser uses the second specified font. This could result in a big change for the font size. To prevent this, use the <parameter>font-size-adjust</parameter> property.</para>
          <para>All fonts have an <firstterm>aspect value</firstterm> which is the size-difference between the lowercase letter &apos;x&apos; and the uppercase letter &apos;X&apos;.</para>
          <para>When the browser knows the <firstterm>aspect value</firstterm> for the first selected font, the browser can figure out what font-size to use when displaying text with the second choice font.</para>
          <bridgehead>Syntax:</bridgehead>
          <programlisting>font-size-adjust: number|none|initial|inherit;</programlisting>
          <para><emphasis>Example:</emphasis></para>
          <para>By specifying the font-size-adjust property, the browser will adjust the font size to be the same regardless of the font family (&quot;verdana&quot; has the aspect value 0.58)</para>
          <programlisting><![CDATA[div {
  font-size-adjust: 0.58;
}]]></programlisting>
          <para>...</para>
          
          <para>...</para>
 
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title><parameter>font-weight</parameter> Property</title>
        <para>The <parameter>font-weight</parameter> property sets how thick or thin characters in text should be displayed. Its default value is normal and is inherited.</para>
        <para>It is accessed from JavaScript like this:</para>
        <programlisting><![CDATA[object.style.fontWeight="bold"]]></programlisting>
        <bridgehead>CSS Syntax</bridgehead>
        <programlisting>font-weight: normal|bold|bolder|lighter|<varname>number</varname>|initial|inherit;</programlisting>
        <note><varname>number</varname> defines from thin to thick characters. 400 is the same as normal, and 700 is the same as bold.</note>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title><parameter>font-style</parameter> Property</title>
        <para>Its default value is <literal>normal</literal>. Other values besides <literal>normal</literal> are <literal>italic</literal>, <literal>oblique</literal>, <literal>initial</literal> (sets this property to its default value), and <literal>inherit</literal></para>
        <para>Its JavaScript syntax is <userinput>object.style.fontStyle=&quot;italic</userinput></para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> 
        <title><parameter>text-decoration</parameter></title>
        <para>The text-decoration property specifies the decoration added to text, and is a shorthand property for:</para>
        <itemizedlist>
          <listitem>text-decoration-line (required)</listitem>
          <listitem>text-decoration-color</listitem>
          <listitem>text-decoration-style</listitem>
        </itemizedlist>
        <bridgehead>CSS Syntax</bridgehead>
        <programlisting>text-decoration: text-decoration-line text-decoration-color text-decoration-style|initial|inherit;</programlisting>
        <section sect='sect3'>
          <title>Property Values</title>
          <itemizedlist>
            <listitem><literal>text-decoration-line</literal>:	Sets the kind of text decoration to use (like underline, overline, line-through)</listitem>
            <listitem><literal>text-decoration-color</literal>: Sets the color of the text decoration</listitem>
            <listitem><literal>text-decoration-style</literal>: Sets the style of the text decoration (like solid, wavy, dotted, dashed, double)</listitem>
            <listitem><literal>initial</literal>: Sets this property to its default value. Read about initial</listitem>
            <listitem><literal>inherit</literal>: Inherits this property from its parent element. Read about inherit</listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>An Example</title>
          <para>Add more text decoration:</para>
          <programlisting>h1 {
  text-decoration: underline overline dotted red;
}

h2 {
  text-decoration: underline overline wavy blue;
}</programlisting>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      
    </section> <!-- </sect1> -->
    
    <section>
      <title>The Box Model in CSS</title>
      <para>All elements are rectangular in shape -a box. Every time you add an HTML tag to create an element, you are creating an element box. All element boxes have a top, right, bottom, and left side that you can style, setting the margin, padding, border, width, and height, as well as the visibility and float.</para>
      <para>Boxes can be set to automatically position themselves in context to surrounding boxes in one of two ways:</para>
      <para><firstterm>Inline</firstterm> boxes flow side-by-side horizontally, from left to right, with their left and right sides butting against each other, unless separated by a margin. Inline boxes will flow until they reach the right edge of the element and then will have a soft-return to the next line. Boxes that cannot break, such as images, will go off the right side and either be hidden or require a horizontal scroll.</para>
      <para><firstterm>Block</firstterm> boxes stack on top of each other vertically, with a hard return above and below the box, with bottom and top sides butting against each other, unless separated by a margin. Block boxes will continue down the page, requiring a vertical scroll if the height of the box does not allow all content to be shown.</para>
      
      <section sect='sect2'>
        <title>Box Parts</title>
        <para>The parts or components of a box are, from the inside out: contents, padding, borders, and margins. The border is the width of a visible or invisible rectangular line enclosing the context and separated therefrom by the padding.</para>
      </section> <!-- </sect2> -->
      <section sect='sect2'> <title>Display</title>
      <para>All elements will have a default display type, which you can override using the display property that tells the element how to behave in relation to the elements around it.</para>
      <para>Attribute display sets whether the element&apos;s box will be inline, block, a list item, or whether it appears at all. A value of none removes the element from the page completely so that a dynamic action can show it at the right time. Values: {inline | block | list-item | none | inherit}j. More recently, display = {block|inline|inline-block|none|inherit}.</para>
      </section> <!-- </sect2> -->

      <section sect='sect2'> <title>Visibility</title>
      <para>One way to hide an element is to set the display property to none and completely remove it from the document. If you want the element to remain in the document but be invisible, you have other options:</para>
      <itemizedlist>
        <listitem><firstterm>visibility</firstterm>: Sets whether the box is visible or invisible. A hidden element will still take up space but will appear to be empty, like the invisible man in a rain storm. Values: visible | hidden | inherit</listitem>
        <listitem><firstterm>opacity</firstterm>: Sets the opacity of a box on a scale from 0.0 (clear) to 1.0 (opaque). This value affects the opacity of the element and all of its content and cannot be overridden by child elements. Opacity does not currently work in IE. Values: &lt;0.0-1.0&gt; | inherit</listitem>
        <listitem><firstterm>filter</firstterm>: alpha(&lt;0-100&gt;) Sets the opacity of a box in IE on a scale from 0 (clear) to 100 (opaque). This is not a true CSS property, but it can be added to any CSS rule. If you set both the filter: alpha and the opacity, you can be sure you have the same value set for all browsers, including IE.</listitem>
      </itemizedlist>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Floats</title>
        <para>A floating element is one whose box aligns itself to the left or right. Surrounding content then wraps around it. This is often used to float images with or without captions, but can also be used for sidebars, pull quotes, or any other elements with a close association with the main text.</para>
        <para>Originally for floating images inside blocks of text, the float property became one of the most commonly used tools for creating multiple column layouts on webpages. With the advent of <link linkend='css_flexbox'>flexbox</link> and grid it&apos;s now returned to its original purpose...</para>
        <itemizedlist>
          <listitem><firstterm>float</firstterm> Positions the box to the left or right within its parent element. Any content below the element will wrap around it in moving up into the available space. If multiple elements are floated next to each other, then they will line up horizontally as space allows. Values: left | right | none | inherit</listitem>
          <listitem><firstterm>clear</firstterm> When applied to an element that has been placed below a floating element, floating stops, with the cleared element again appearing beneath the floating element. Floating can be specifically cleared on the left, right, or completely cleared on both sides. Values: none | left | right | both | inherit</listitem>
        </itemizedlist>
        
      </section> <!-- end of "Floats" -->
      
      <section sect='sect2'> <title>Width and Height</title>
      <para>Width and height properties allow you to specify the dimensions of the content area of the box. Padding and border are then added to this to create the apparent width and height of the box, which is how much space it will take up in the design.</para>
      <itemizedlist>
        <listitem><firstterm>width</firstterm> Sets the horizontal length of the content area of the box. Values: &lt;length&gt; | &lt;percentage-parent-width&gt;% | auto | inherit</listitem>
        <listitem><firstterm>height</firstterm> Sets the vertical length of the content area of the box. Values: &lt;length&gt; | &lt;percentage-parent-height&gt; | auto | inherit</listitem>
        <listitem><firstterm linkend='css_overflow'>overflow</firstterm> Specifies how to treat excess content if the specified area for the box is not large enough to accommodate it. You can choose to hide the excess content, show the content, thus overriding the height value, force a scroll, or allow the browser to determine whether a scroll is needed or not (auto). Values: hidden | visible | scroll | auto | inherit</listitem>
      </itemizedlist>
        <section sect='sect3'> <title>Maximum and Minimum Width and Height</title>
        <para>One of the key differences between designing for the Web and designing for other media, such as print or TV, is that the user controls the size of the browser viewport -the area in which your designs are viewed in- and can change the width and height at will. Instead of setting an absolute width and height, you also have the option of setting a width and height range to allow the content to stretch to fit the viewport area, while still not allowing it to shrink or grow to uncomfortable dimensions.</para>
        <para>It is important to note that these properties do not work in IE6, so an absolute width and height should be set first to accommodate that browser.</para>
        <itemizedlist>
          <listitem><firstterm>max-width, max-height</firstterm> Sets the maximum width or height of an element. The element will grow to that size if the area is available, but no further. Values: &lt;length&gt; | &lt;percentage-parent-width/height&gt; | auto | inherit</listitem>
          <listitem><firstterm>min-width, min-height</firstterm> Sets the minimum width or height of an element. The element will shrink to that size when the area is limited, but no further. Values: &lt;length&gt; | &lt;percentage-parent-width/height&gt; | auto | inherit</listitem>
        </itemizedlist>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>Border</title>
      <para>An element&apos;s border is the rule around its box on the top, right, bottom, and left. A border can have any thickness and color, and you can select from a limited number of styles. Set the border on all four sides to be the same, or set each side individually.</para>
      <itemizedlist>
        <listitem><firstterm>border</firstterm> The shorthand property for setting all of the border properties for the box in one line, with values separated by a space. All three values must be declared in order for the border to appear. Values: &lt;border-width&gt; &lt;border-color&gt; &lt;border-style&gt;</listitem>
        <listitem><firstterm>border-width</firstterm> Sets the thickness of the border. Values: &lt;length&gt; | thin | medium | thick | inherit Multiple Values: One value for all four sides, two values separated by a space for top/bottom and left/right, or four values separated by spaces for top, right, bottom, and left, in that order. border-color Sets the hue of the border. Values: &lt;color&gt; | transparent | inherit Multiple Values: Same as border-width.</listitem>
        <listitem><firstterm>border-style</firstterm> Sets one of the predefined border patterns. Values: none | dotted | dashed | solid | double | groove | ridge | inset | outset | inherit Multiple Values: Same as border-width.</listitem>
        <listitem><firstterm>border-top, border-right, border-bottom, border-left</firstterm> The shorthand properties for setting the border properties on the indicated side of the box. Values: &lt;border-width&gt; &lt;border-color&gt; &lt;border-style&gt;</listitem>
        <listitem><firstterm>border-width-top, border-width-right, border-width-bottom, border-width-left, border-style-top, border-style-right, border-style- bottom, border-style-left, border-color-top, border-color-right, border-color-bottom, border-color-left</firstterm> Sets the indicated property for the indicated side of the box. Values: Varies depending on property.</listitem>
      </itemizedlist>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>Padding</title>
      <para>Padding is the space between the content of the element&apos;s box and the border. Padding is easily confused with the margin, especially if there is no visible border. Padding, however, is intended to separate the content of the box from its edges, whereas the margin is meant to separate the element from other elements on the screen.</para>
      <itemizedlist>
        <listitem><firstterm>padding</firstterm> The shorthand property for setting the padding on all four sides of the box simultaneously. Values: &lt;length&gt; | &lt;percentage-box-width&gt;% | inherit Multiple Values: One value for all four sides, two values separated by a space for top/bottom and left/right, or four values separated by spaces for top, right, bottom, and left, in that order.</listitem>
        <listitem><firstterm>padding-top</firstterm> Sets the space between the content and the top of the box. Values: &lt;length&gt; | &lt;percentage-box-width&gt;% | inherit</listitem>
        <listitem><firstterm>padding-right</firstterm> Sets the space between the content and the right side of the box. Values: &lt;length&gt; | &lt;percentage-box-width&gt;% | inherit</listitem>
        <listitem><firstterm>padding-bottom</firstterm> Sets the space between the content and the bottom of the box. Values: &lt;length&gt; | &lt;percentage-box-width&gt;% | inherit</listitem>
        <listitem><firstterm>padding-left</firstterm> Sets the space between the content and the left side of the box. Values: &lt;length&gt; | &lt;percentage-box-width&gt;% | inherit</listitem>
      </itemizedlist>
      </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='css_margin'> <title>Margin</title>
      <para>The margin is the space between the border of an element and all other elements on the page. As mentioned, in the absence of a border or background, margin and padding will appear to be identical, but it is important to remember that they are different values. Margin should be used to adjust an element&apos;s position in relationship to other elements on the page, while padding should be used to keep content from bumping up against the edge of the box.</para>
      <itemizedlist>
        <listitem><firstterm>margin</firstterm> The shorthand property setting the margin on all four sides of the box simultaneously. Values: &lt;length&gt; | &lt;percentage-box-width&gt;% | inherit Multiple Values: One value for all four sides, two values separated by a space for top/bottom and left/right, or four values separated by spaces for top, right, bottom, and left in that order.</listitem>
        <listitem><firstterm>margin-top</firstterm> Sets the space between the top of the box and the bottom of other elements. Values: &lt;length&gt; | &lt;percentage-box-width&gt;% | inherit</listitem>
        <listitem><firstterm>margin-right</firstterm> Sets the space between the right edge of the box and the left edge of other elements. Values: &lt;length&gt; | &lt;percentage-box-width&gt;% | inherit</listitem>
        <listitem><firstterm>margin-bottom</firstterm> Sets the space between the bottom of the box and the top of other elements. Values: &lt;length&gt; | &lt;percentage-box-width&gt;% | inherit</listitem>
        <listitem><firstterm>margin-left</firstterm> Sets the space between the left edge of the box and the right edge of other elements. Values: &lt;length&gt; | &lt;percentage-box-width&gt;% | inherit</listitem>
      </itemizedlist>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'> <title>Fixing IE</title>
      <para>The CSS box model describes how an element should behave in your designs: The width and height are applied to the content area of the box, while padding and border lengths are added to get the apparent width and height, sometimes called the rendered width and height. At least, this is how the W3C CSS Work Group specified that the standard for the box model should work. Unfortunately, the folks who made IE6 didn&apos;t get the memo in time. They decided that width and height applied to the entire box, including the margin and padding.</para>
      <para>You are OK as long as you do not set the width/height with padding and a border. But, as soon as you add padding and borders, in IE6 your designs will look different from standards-compliant browsers, even IE7.</para>
      <para>Fortunately for us, the makers of IE6 missed another memo. When a declaration in a CSS rule has an underscore (_) in front of it, ignore the declaration. The upshot is that we can set a different width and/or height that only IE6 will see as long as we put an underscore at the beginning.</para>
      <para>Known as the "underscore hack," this technique can be used anytime you need to provide a different value for IE6.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Scroll Behaviour through the <parameter>scroll-behavior</parameter> Property</title>
        <para>The <parameter>scroll-behavior</parameter> property specifies whether to smoothly animate the scroll position, instead of a straight jump, when the user clicks on a link within a scrollable box. Its default value is <literal>auto</literal>.</para>
        <bridgehead>CSS Syntax</bridgehead>
        <programlisting>scroll-behavior: auto|smooth|initial|inherit;</programlisting>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Position in CSS</title>
        
        <para>This is determined by attributes <varname>display</varname>, <varname>width</varname>, <varname>height</varname>, <varname>float</varname>, <varname>clear</varname>, <varname>top</varname>, <varname>right</varname>, <varname>bottom</varname>, <varname>left</varname>, and <varname>position</varname>.</para>
        
        <section sect='sect3'>
          <title>The <parameter>position</parameter> Attribute</title>
          <para><parameter>position</parameter> can be {<varname linkend='css_absolute'>absolute</varname> | <varname linkend='css_fixed'>fixed</varname> | <varname linkend='css_relative'>relative</varname> | <varname linkend='css_static'>static</varname> | <varname linkend='css_sticky'>sticky</varname> }.</para>
        
          <para xml:id='css_relative'><firstterm>Relative</firstterm> positioning is the default type of positioning HTML uses. You can think of relative positioning as being akin to laying out checkers on a checkerboard: The checkers are arranged from left to right, and when you get to the edge of the board, you move on to the next row. Elements that are styled with the block value for the display style property are automatically placed on a new row, whereas inline elements are placed on the same row immediately next to the element preceding them. As an example, &lt;p&gt; and &lt;div&gt; tags are considered block elements, whereas the &lt;span&gt; tag is considered an inline element.</para>
          <para xml:id='css_absolute'>The other type of positioning CSS supports is known as <firstterm>absolute</firstterm> positioning because it enables you to set the exact position of HTML content on a page. Although absolute positioning gives you the freedom to spell out exactly where an element is to appear, the position is still <emphasis>relative</emphasis> to any parent elements that appear on the page. In other words, absolute positioning enables you to specify the exact location of an element  &apos;s rectangular area with respect to its parent  &apos;s area, which is very different from relative positioning.</para>
          <para>With the freedom of placing elements anywhere you want on a page, you can run into the problem of overlap, when an element takes up space another element is using. Nothing is stopping you from specifying the absolute locations of elements so that they overlap. In this case, CSS relies on the <varname linkend='css_z-index'>z-index</varname> of each element to determine which element is on the top and which is on the bottom. You  &apos;ll learn more about the <varname>z-index</varname> of elements later on. For now, let  &apos;s look at exactly how you control whether a style rule uses relative or absolute positioning.</para>
          <para>The type of positioning (relative or absolute) a particular style rule uses is determined by the position property, which is capable of having one of the following values:</para>
          <variablelist>
            <varlistentry xml:id='css_static'>
              <term>static</term>
              <listitem>The default positioning according to the normal flow of the content</listitem>
            </varlistentry>
            <varlistentry>
              <term>relative</term>
              <listitem>The element is positioned relative to its normal position, using offset properties discussed below</listitem>
            </varlistentry>
            <varlistentry>
              <term>absolute</term>
              <listitem>The element is positioned relative to its nearest ancestor element, or according to the normal flow of the page if no ancestor is present</listitem>
            </varlistentry>
            <varlistentry xml:id='css_fixed'>
              <term>fixed</term>
              <listitem>The element is fixed relative to the viewport—this type of positioning is used for images that scroll along with the page (as an example)</listitem>
            </varlistentry>
            <varlistentry>
              <term linkend='css_sticky'>fixed</term>
              <listitem>An element with <userinput>position: sticky;</userinput> is positioned based on the user&apos;s scroll position. A sticky element toggles between <link linkend='css_relative'>relative</link> and <link linkend='css_fixed'>fixed</link>, depending on the scroll position.</listitem>
            </varlistentry>
          </variablelist>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Attributes <parameter>left</parameter>, <parameter>right</parameter>, <parameter>top</parameter>, <parameter>bottom</parameter></title>
          <para>After specifying the type of positioning, you provide the specific position using the following properties:</para>
          <variablelist>
            <varlistentry>
              <term>left</term>
              <listitem>The left position offset</listitem>
            </varlistentry>
            <varlistentry>
              <term>right</term>
              <listitem>The right position offset</listitem>
            </varlistentry>
            <varlistentry>
              <term>top</term>
              <listitem>The top position offset</listitem>
            </varlistentry>
            <varlistentry>
              <term>bottom</term>
              <listitem>The bottom position offset</listitem>
            </varlistentry>
          </variablelist>
          <para>You might think that these position properties make sense only for absolute positioning, but they actually apply to relative and fixed positioning as well. For example, under relative positioning, the position of an element is specified as an offset relative to the original position of the element. So if you set the left property of an element to 25px, the left side of the element shifts over 25 pixels from its original (relative) position. An absolute position, on the other hand, is specified relative to the ancestor element to which the style is applied. So if you set the left property of an element to 25px under absolute positioning, the left side of the element appears 25 pixels to the right of the ancestor element  &apos;s left edge. On the other hand, using the right property with the same value positions the element so that its right side is 25 pixels to the right of the ancestor  &apos;s right edge.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3' xml:id='css_sticky'>
          <title>Sticky Elements with <userinput>position: sticky;</userinput></title>
          <para>An element with <userinput>position: sticky;</userinput> is positioned based on the user&apos;s scroll position.</para>
          <para>A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it <quote>sticks</quote> in place (like position:fixed).</para>
          <note>Internet Explorer, Edge 15 and earlier versions do not support sticky positioning. Safari requires a -webkit- prefix (see example below).</note>
          <note>You must also specify at least one of top, right, bottom or left for sticky positioning to work.</note>
          <bridgehead>Example</bridgehead>
          <programlisting>div.sticky {
  position: -webkit-sticky; /* Safari */
  position: sticky;
  top: 0;
}</programlisting>

          <section sect='sect4'>
            <title>How It Really Works</title>
            <para>The main difference between static or relative and absolute or fixed was the space they take up in the flow of the DOM. Positions static &amp; relative keep their natural space in the flow of the document, while the absolute &amp; fixed don&apos;t — their space is removed and they have a floating behavior.</para>
            <para>The new Position Sticky has similarities with all types, as I will soon explain.</para>
            <para>Everyone quickly understands that the element sticks when the viewport gets to the defined position.</para>
            <para>Example:</para>
            <programlisting>.some-component{
    position: sticky;
    top: 0;
}</programlisting>
            <para>The problem is that sometimes it works while other times it doesn&apos;t. When it does work, the element sticks, but in other parts of the scrolling it stops sticking.</para>
            
            <para>While playing with it, I quickly noticed that when an element with a position: sticky style is wrapped, and it is the only element inside the wrapper element, this element, which was defined position: sticky will not stick.</para>
            <bridgehead>Why is that?</bridgehead>
            <para>The reason for that is that when an element is given the position: sticky style, the sticky item&apos;s container is the only area in which the sticky item can stick. The item doesn&apos;t have any elements to float over since it can only float over sibling elements, which, being an only child, it doesn&apos;t have.</para>
            <section sect='sect5'>
              <title>How CSS Position Sticky Really Works</title>

CSS position sticky has two main parts, sticky item &amp; sticky container.

Sticky Item — is the element that we defined with the position: sticky styles. The element will float when the viewport position matches the position definition, for example: top: 0px .

Example

.some-component{
    position: sticky;
    top: 0px;
}

Sticky Container —is the HTML element which wraps the sticky item. This is the maximum area that the sticky item can float in.

When you define an element with position: sticky you&apos;re automatically defining the parent element as a sticky container!
This is very important to remember! The container is the scope of the sticky item, and the item can&apos;t get out of its sticky container.

This is the reason why in the previous example, the sticky item didn't stick in the first place: The sticky item was the only child element in a sticky container.
            </section> <!-- </sect5> -->
            
            <section sect='sect5'>
              <title>Understanding the CSS Sticky Behavior</title>

Like I said before, CSS Position Sticky behaves differently than all the other CSS Positions, but on the other hand it does have some similarities with them. Let me explain:

Relative (or Static)— the stickily positioned element is similar to the relative and static positions because it keeps the natural gap in the DOM (stays in the flow).
Fixed— when the item sticks, it behaves exactly like position: fixed, floating in the same position of the view-port, removed from the flow.
Absolute — at the end of the sticking area, the element stops and stacks on top of the other element, much like an absolutely positioned element behaves inside a position: relative container.
            </section> <!-- </sect5> -->
            
            <section sect='sect5'>
              <title>Stick to the bottom</title>

In most cases, you will use position sticky in order to stick an element to the top, something like this:

.component{
    position: sticky;
    top: 0;
}

This is exactly the situation it was created for, while before this, it could only be done using JavaScript.

But you can also use it to stick elements to the bottom. That means that the footer can be defined to have a sticky position, and it will always appear to stick to the bottom when scrolling down. When we reach the end of the sticky container, the element will stop in its natural position. It&apos;s better to use it on elements whose natural position is the bottom of the sticky container.
            </section> <!-- </sect5> -->
            
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        
        <section sect='sect3' xml:id='css_resize'>
          <title>Allowing the User to Resize an Element[&apos;s Box] through <parameter>resize</parameter></title>
          <para>The <parameter>resize</parameter> property defines if (and how) an element is resizable by the user.</para>
          <note>The <parameter>resize</parameter> property does not apply to inline elements or to block elements where <userinput><![CDATA[overflow="visible"]]></userinput>. So, make sure that <parameter>overflow</parameter> is set to <literal>scroll</literal>, <literal>auto</literal>, or <literal>hidden</literal>.</note>
          <bridgehead>CSS Syntax</bridgehead>
          <programlisting>resize: none|both|horizontal|vertical|initial|inherit;</programlisting>
        </section> <!-- </sect3> -->
          
        <section sect='sect3' xml:id='css_z-index'>
          <title>Controlling the Way Things Stack Up</title>
          <para>In certain situations, you want to carefully control the manner in which elements overlap each other on a web page. The <varname>z-index</varname> style property enables you to set the order of elements with respect to how they stack on top of each other. The name <varname>z-index</varname> might sound a little strange, but it refers to the notion of a third dimension (Z) that points into the computer screen, in addition to the two dimensions that go across (X) and down (Y) the screen. Another way to think of the <varname>z-index</varname> is to consider the relative position of a single magazine within a stack of magazines. A magazine nearer the top of the stack has a higher <varname>z-index</varname> than a magazine lower in the stack. Similarly, an overlapped element with a higher value for its <varname>z-index</varname> is displayed on top of an element with a lower value for its <varname>z-index</varname>.</para>
          <para>The <varname>z-index</varname> property is used to set a numeric value that indicates the relative <varname>z-index</varname> of a style rule. The number assigned to <varname>z-index</varname> has meaning only with respect to other style rules in a style sheet, which means that setting the <varname>z-index</varname> property for a single rule doesn&apos;t mean much. On the other hand, if you set <varname>z-index</varname> for several style rules that apply to overlapped elements, the elements with higher <varname>z-index</varname> values appear on top of elements with lower <varname>z-index</varname> values.</para>
          <note>Regardless of the <varname>z-index</varname> value you set for a style rule, an element displayed with the rule will always appear on top of its parent.</note>
          <para>An example where <tag>div</tag> element with <varname>id</varname> = d1 is assigned a low <varname>z-index</varname> and is therefore overlapped:</para>
          <programlisting><![CDATA[div#d1 {
 background-color: #ff0000;
 left: 0px;
 top: 0px;
 z-index: 0;
 }]]></programlisting>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Managing the Flow of Text</title>
          <para>Now that you  &apos;ve seen some examples of placing elements relative to other elements or placing them absolutely, it  &apos;s time to revisit the flow of content around elements. The conceptual current line is an invisible line used to place elements on a page. This line has to do with the flow of elements on a page; it comes into play as elements are arranged next to each other across and down the page. Part of the flow of elements is the flow of text on a page. When you mix text with other elements (such as images), it  &apos;s important to control how the text flows around those other elements.</para>
          <para>Following are some style properties that give you control over text flow:</para>
          <variablelist>
            <varlistentry>
              <term>float</term>
              <listitem>Determines how text flows around an element</listitem>
            </varlistentry>
            <varlistentry>
              <term>clear</term>
              <listitem>Stops the flow of text around an element</listitem>
            </varlistentry>
            <varlistentry>
              <term linkend='css_overflow'>overflow</term>
              <listitem>Controls the overflow of text when an element is too small to contain all the text</listitem>
            </varlistentry>
          </variablelist>
          <para>The <varname>float</varname> property controls how text flows around an element. It can be set to either <constant>left</constant> or <constant>right</constant>. These values determine where to position an element with respect to flowing text. So setting an image  &apos;s float property to left positions the image to the left of flowing text.</para>
          <para>As you learned, you can prevent text from flowing next to an element by using the <varname>clear</varname> property, which you can set to <constant>none</constant>, <constant>left</constant>, <constant>right</constant>, or <constant>both</constant>. The default value for the clear property is none, indicating that text is to flow with no special considerations for the element. The left value causes text to stop flowing around an element until the left side of the page is free of the element. Likewise, the right value means that text is not to flow around the right side of the element. The both value indicates that text isn  &apos;t to flow around either side of the element.</para>
          <section sect='sect4' xml:id='css_overflow'>
            <title>CSS <parameter>overflow</parameter> Property</title>
            <para>The <varname>overflow</varname> property handles overflow text, which is text that doesn&apos;t fit within its rectangular area; this can happen if you set the width and height of an element too small. The overflow property can be set to <constant>visible</constant>, <constant>hidden</constant>, or <constant>scroll</constant>. The <constant>visible</constant> setting automatically enlarges the element so that the overflow text fits within it; this is the default setting for the property. The <constant>hidden</constant> value leaves the element the same size, allowing the overflow text to remain hidden from view. Perhaps the most interesting value is <constant>scroll</constant>, which adds scrollbars to the element so that you can move around and see the text. Last, if <parameter>overflow</parameter> is set to <constant>auto</constant>, then if overflow is clipped, a scroll-bar will be added to see the rest of the content.</para>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Fixed and Fluid Layouts</title>
          <section sect='sect4'>
            <title>Fixed Layouts</title>
            <para>A <firstterm>fixed layout</firstterm>, or <firstterm>fixed-width layout</firstterm>, is just that: a layout in which the body of the page is set to a specific width. That width is typically controlled by a master “wrapper” element that contains all the content. The width property of a wrapper element, such as a <tag>div</tag>, is set in the style sheet entry if the <tag>div</tag> was given an ID value such as main or wrapper (although the name is up to you).</para>
            <para>When you  &apos;re creating a fixed-width layout, the most important decision is determining the minimum screen resolution you want to accommodate. For many years, 800×600 was the <quote>lowest common denominator</quote> for web designers, resulting in a typical fixed width of approximately 760 pixels. However, the number of people using 800×600 screen resolution for non-mobile browsers is now less than 4%. Given that, many web designers consider 1,024×768 the current minimum screen resolution, so if they create fixed-width layouts, the fixed width typically is somewhere between 800 and 1,000 pixels wide.</para>
            <caution>Remember, the web browser window contains nonviewable areas, including the scrollbar. So if you are targeting a 1,024-pixel-wide screen resolution, you really can&apos;t use all 1,024 of those pixels.</caution>
            <para>A main reason for creating a fixed-width layout is so that you can have precise control over the appearance of the content area. However, if users visit your fixed-width site with smaller or much larger screen sizes or resolutions than the size or resolution you had in mind while you designed it, they will encounter scrollbars (if their size or resolution is smaller) or a large amount of empty space (if their size or resolution is greater). Finding fixed-width layouts is difficult among the most popular websites these days because site designers know they need to cater to the largest possible audience (and therefore make no assumptions about browser size). However, fixed-width layouts still have wide adoption, especially by site administrators using a content management system with a strict template.</para>
            <para>The following figures show one such site, for San Jose State University (university websites commonly use a strict template and content management system, so this was an easy example to find); it has a wrapper element fixed at 960 pixels wide. In Figure 3.7, the browser window is a shade under 900 pixels wide. On the right side of the image, important content is cut off (and at the bottom of the figure, a horizontal scrollbar displays in the browser).</para>
            <para>Besides the decision to create a fixed-width layout in the first place is the task of determining whether to place the fixed-width content flush left or center it. Placing the content flush left produces extra space on the right side only; centering the content area creates extra space on both sides. However, centering at least provides balance, whereas a flush-left design could end up looking like a small rectangle shoved in the corner of the browser, depending on the size and resolution of a user&apos;s monitor.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Fluid Layouts</title>
            <para>A <firstterm>fluid layout</firstterm>—also called a <firstterm>liquid layout</firstterm>—is one in which the body of the page does not use a specified width in pixels, although it might be enclosed in a master “wrapper” element that uses a percentage width. The idea behind the fluid layout is that it can be perfectly usable and still retain the overall design aesthetic even if the user has a very small or very wide screen.</para>
            <para>The fluid layout approach might seem like the best approach at first glance—after all, who wouldn  &apos;t want to take advantage of all the screen real estate available? But there  &apos;s a fine line between taking advantage of space and not allowing the content to breathe. Too much content is overwhelming; not enough content in an open space is underwhelming.</para>
            <para>The pure fluid layout can be impressive, but it requires a significant amount of testing to ensure that it is usable in a wide range of browsers at varying screen resolutions. You might not have the time and effort to produce such a design; in that case, a reasonable compromise is the fixed/fluid hybrid layout, or a fully responsive design, as you&apos;ll learn about further down.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Creating a Fixed/Fluid Hybrid Layout</title>
            <para>A fixed/fluid hybrid layout is one that contains elements of both types of layouts. For example, you could have a fluid layout that includes fixed-width content areas either within the body area or as anchor elements (such as a left-side column or as a top navigation strip). You can even create a fixed content area that acts like a frame, in which a content area remains fixed even as users scroll through the content.</para>
            <bridgehead>Starting with a Basic Layout Structure</bridgehead>
            <para>In this example, you&apos;ll learn to create a template that is fluid but with two fixed-width columns on either side of the main body area (which is a third column, if you think about it, only much wider than the others). The template also has a delineated header and footer area. The listing shows the basic HTML structure for this layout.</para>
            <programlisting><![CDATA[<!DOCTYPE html>
 
 <html lang="en">
   <head>
     <title>Sample Layout</title>
     <link href="layout.css" rel="stylesheet" type="text/css">
   </head>
   
   <body>
     <header>HEADER</header>
     <div id="wrapper">
       <div id="content_area">CONTENT</div>
       <div id="left_side">LEFT SIDE</div>
       <div id="right_side">RIGHT SIDE</div>
     </div>
     <footer>FOOTER</footer>
   </body>
 </html>]]></programlisting>
            <para>First, note that the style sheet for this layout is linked to with the <tag>link</tag> tag instead of included in the template. Because a template is used for more than one page, you want to be able to control the display elements of the template in the most organized way possible. This means you need to change the definitions of those elements in only one place—the style sheet.</para>
            <para>Next, notice that the basic HTML is just that: extremely basic. Truth be told, this basic HTML structure can be used for a fixed layout, a fluid layout, or the fixed/fluid hybrid you see here because all the actual styling that makes a layout fixed, fluid, or hybrid happens in the style sheet.</para>
            <para>With the HTML structure in the previous listing, you actually have an identification of the content areas you want to include in your site. This planning is crucial to any development; you have to know what you want to include before you even think about the type of layout you are going to use, let alone the specific styles that will be applied to that layout.</para>
            <para>I am using elements with named identifiers in this example instead of the semantic elements such as <tag>section</tag> or <tag>nav</tag> because I&apos;m illustrating the point in the simplest way possible without being prescriptive to the content itself. However, if you know that the <tag>div</tag> on the left side is going to hold navigation, you should use the <tag>nav</tag> tag instead of a <tag>div</tag> element with an id something like left_side—but this type of naming can become problematic as depending on repositioning that content might not end up displaying on the left side of anything, so best to name based on purpose rather than appearance.</para>
            <para>At this stage, the <filename>layout.css</filename> file includes only this entry:</para>
            <programlisting><![CDATA[body {
 margin: 0;
 padding: 0;
 }]]></programlisting>
            <para>Using a 0 value for margin and padding allows the entire page to be usable for element placement.</para>
            <para>If you look at the HTML in the listing and say to yourself, <quote>But those <tag>div</tag> elements will just stack on top of each other without any styles,</quote> you are correct. There is no layout to speak of.</para>
            <section sect='sect5'>
              <title>Defining Two Columns in a Fixed/Fluid Hybrid Layout</title>
              <para>We can start with the easy things to get some styles and actual layout in there. Because this layout is supposed to be fluid, we know that whatever we put in the header and footer areas will extend the width of the browser window, regardless of how narrow or wide the window might be.</para>
              <para>Adding the following code to the style sheet gives the header and footer area each a width of 100% as well as the same background color and text color:</para>
              <programlisting><![CDATA[header, footer {
 float: left;
 width: 100%;
 background-color: #7152f4;
 color: #ffffff;
 }]]></programlisting>
              <para>Now things get a little trickier. We have to define the two fixed columns on either side of the page, plus the column in the middle. In the HTML we  &apos;re using here, note that a <tag>div</tag> element, called wrapper, surrounds both. This element is defined in the style sheet as follows:</para>


              <programlisting><![CDATA[#wrapper {
 float: left;
 padding-left: 200px;
 padding-right: 125px;
 }]]></programlisting>  
              <para>The two padding definitions essentially reserve space for the two fixed-width columns on the left and right of the page. The column on the left will be 200 pixels wide, the column on the right will be 125 pixels wide, and each will have a different background color. But we also have to position the items relative to where they would be placed if the HTML remained unstyled (see Figure 3.12). This means adding position: relative to the style sheet entries for each of these columns. Additionally, we indicate that the <tag>div</tag> elements should float to the left.</para>
              <para>But in the case of the <tag>div</tag> element left_side, we also indicate that we want the rightmost margin edge to be 200 pixels in from the edge (this is in addition to the column being defined as 200 pixels wide). We also want the margin on the left side to be a full negative margin; this will pull it into place (as you will soon see). The <tag>div</tag> element right_side does not include a value for right, but it does include a negative margin on the right side:</para>
              <programlisting><![CDATA[#left_side {
 position: relative;
 float: left;
 width: 200px;
 background-color: #52f471;
 right: 200px;
 margin-left: -100%;
 }
 
 #right_side {
 position: relative;
 float: left;
 width: 125px;
 background-color: #f452d5;
 margin-right: -125px;
 }]]></programlisting>
              <para>At this point, let  &apos;s also define the content area so that it has a white background, takes up 100% of the available area, and floats to the left relative to its position:</para>
              <programlisting><![CDATA[#content_area {
 position: relative;
 float: left;
 background-color: #ffffff;
 width: 100%;
 }]]></programlisting>
              <para>However, there&apos;s a problem with this template if the window is resized below a certain width. Because the left column is 200 pixels wide and the right column is 125 pixels wide, and we want at least some text in the content area, you can imagine that this page will break if the window is only 350 to 400 pixels wide. We address this issue in the next section.</para>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Setting the Minimum Width of a Layout</title>
              <para>Although users won&apos;t likely visit your site with a desktop browser that displays less than 400 pixels wide, the example serves its purpose within the confines of this lesson. You can extrapolate and apply this information broadly: Even in fixed/fluid hybrid sites, at some point, your layout will break down unless you do something about it.</para>
              <para>One of those <quote>somethings</quote> is to use the min-width CSS property. The min-width property sets the minimum width of an element, not including padding, borders, and margins.</para>
              <programlisting><![CDATA[body {
 margin: 0;
 padding: 0;
 min-width: 525px;
 }]]></programlisting>
              <para>Because you cannot count on a user&apos;s browser being a specific height, or the content always being the same length, you might think this poses a problem with the fixed/fluid hybrid layout. Not so. If you think a little outside the box, you can apply a few more styles to bring all the pieces together.</para>
              <para>First, add the following declarations in the style sheet entries for the <varname>left_side</varname>, <varname>right_side</varname>, and <varname>content_area</varname> IDs:</para>
              <programlisting><![CDATA[margin-bottom: -2000px;
padding-bottom: 2000px;]]></programlisting>
              <para>These declarations add a ridiculous amount of padding and assign a too-large margin to the bottom of all three elements. You must also add position:relative to the footer element definitions in the style sheet so that the footer is visible despite this padding.</para>
              <bridgehead>Basic Fixed/Fluid Hybrid Layout Structure (with Content)</bridgehead>
              <programlisting><![CDATA[<!DOCTYPE html>
 
 <html lang="en">
 <head>
 <title>Sample Layout</title>
 <link href="layout.css" rel="stylesheet" type="text/css">
 </head>
 
 <body>
   <header>
     <img src="acmewidgets.jpg" alt="ACME Widgets LLC"/>
   </header>
   <div id="wrapper">
     <div id="content_area">
       <h1>Welcome to ACME Widgets!</h1>
       <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.
  Nam tincidunt posuere malesuada. Suspendisse ac felis ac ante
 tincidunt ullamcorper. Nulla vitae ligula vitae mi rhoncus
 adipiscing. Etiam congue felis id ante semper at imperdiet
 massa tempor. Nullam hendrerit fermentum ligula, sit amet
 pellentesque purus faucibus in. Sed molestie lacus mauris,
 ultrices accumsan sem. Phasellus facilisis malesuada sem, nec
 ornare ipsum dictum consectetur.</p>
       <p>Nulla libero nisl, consectetur eget accumsan vel, interdum
 vitae enim vitae nulla feugiat dignissim ut sit amet odio.
 Nunc non enim id sem faucibus congue. Integer ac mi in justo
 euismod sodales. Aenean imperdiet vestibulum auctor. Sed
 ullamcorper congue ipsum, eget vulputate sem scelerisque in.
 Donec ornare vestibulum congue. Etiam sapien nulla, rutrum
 mattis mattis ut, pellentesque eget augue. Proin nisl mauris,
 suscipit quis elementum ac, vestibulum quis lacus. Ut eget
 justo vitae urna varius sodales. </p>
     </div>
     <div id="left_side">
       <ul>
         <li><a href="#">Mission</a></li>
         <li><a href="#">History</a></li>
         <li><a href="#">Executive Team</a></li>
         <li><a href="#">Contact Us</a></li>
       </ul>
     </div>
     <div id="right_side">
       <p><strong>SPECIAL WIDGET DEAL!</strong></p>
       <p>Buy three widgets and get a fourth for free. Act now!</p>
     </div>
   </div>
   <footer>Copyright information usually goes here in the footer.</footer>
 </body>
 </html>]]></programlisting>
              <bridgehead>Full Style Sheet for Fixed/Fluid Hybrid Layout</bridgehead>
              <programlisting><![CDATA[body {
 margin: 0;
 padding: 0;
 min-width: 525px;
 }
 
 header {
 float: left;
 width: 100%;
 }
 
  footer {
 position: relative;
 float: left;
 width: 100%;
 background-color: #cccccc;
 text-align: center;
 font-style: italic;
 }
 
 #wrapper {
 float: left;
 padding-left: 200px;
 padding-right: 125px;
 overflow: hidden;
 }
 
 #left_side {
 position: relative;
 float: left;
 width: 200px;
 background-color: #52f471;
 right: 200px;
 margin-left: -100%;
 margin-bottom: -2000px;
 padding-bottom: 2000px;
 }
 
 #right_side {
 position: relative;
 float: left;
 width: 125px;
 background-color: #f452d5;
 margin-right: -125px;
 margin-bottom: -2000px;
 padding-bottom: 2000px;
 }
 
 #content_area {
 position: relative;
 float: left;
 background-color: #ffffff;
 width: 100%;
 margin-bottom: -2000px;
 padding-bottom: 2000px;
 }
 
 h1 {
 margin: 0;
 }
 
  #left_side ul {
 list-style: none;
 margin: 12px 0px 0px 12px;
 padding: 0px;
 }
 
 #left_side li a:link, #nav li a:visited {
 font-size: 12pt;
 font-weight: bold;
 padding: 3px 0px 3px 3px;
 color: #000000;
 text-decoration: none;
 display: block;
 }
 
 #left_side li a:hover, #nav li a:active {
 font-size: 12pt;
 font-weight: bold;
 padding: 3px 0px 3px 3px;
 color: #ffffff;
 text-decoration: none;
 display: block;
 }]]></programlisting>
              <para></para>
            </section> <!-- </sect5> -->

          </section> <!-- </sect4> -->  <!-- end of "Creating a Fixed/Fluid Hybrid Layout" -->
          
          <section sect='sect4'>
          </section> <!-- </sect4> -->
          
        </section> <!-- </sect3> -->  <!-- end of "Fixed and Fluid Layouts" -->
        
        <section sect='sect3'>
          <title>The <varname>text-align</varname> CSS Property</title>
          <para>The <varname>text-align</varname> property is used for aligning the inner content of a block element.</para>
          <para>You can use the <varname linkend='css_margin'>margin</varname> property to center the element.</para>
          <note>Alignment specified with text-align is not with respect to the containing block or viewport.</note>
          <bridgehead>Syntax</bridgehead>
          <programlisting>text-align: left | right | center | justify | initial | inherit;</programlisting>
          <bridgehead>A simple example</bridgehead>
          <programlisting><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <title>Title of the document</title>
    <style>
      div{           
      text-align: right;
      }    
      p{   	
      text-align: center;
      }
    </style>
  </head>
  <body>
    <h2>Text-align property example</h2>
    <div>Example for the text-align property.</div>
    <p>Some paragraph for example.</p>
  </body>
</html>]]></programlisting>
          <bridgehead>Other values besides <literal>left</literal>, <literal>right</literal>, or <literal>center</literal></bridgehead>
          <itemizedlist>
            <listitem><literal>justify</literal>: Extends the lines so that each line has equal width.</listitem>
            <listitem><literal>initial</literal>: It makes the property use its default value.</listitem>
            <listitem><literal>inherit</literal>: It inherits the property from its parents element.</listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Considering a Responsive Web Design</title>
          <para>In 2010, web designer Ethan Marcotte coined the term <firstterm>responsive web design</firstterm> to refer to a web design approach that builds on the basics of fluid design you just learned a bit about. The goal of a responsive web design is that content is easy to view, read, and navigate, regardless of the device type and size on which you are viewing it. In other words, a designer who sets out to create a responsive website is doing to so to ensure that the site is similarly enjoyable to and usable by audience members viewing on a large desktop display, a small smartphone, or a medium-size tablet.</para>
          <para>The underlying structure of a responsive design is based on fluid (liquid) grid layouts, much as you learned about earlier in this section, but with a few modifications and additions. First, those grid layouts should always be in relative units rather than absolute ones. In other words, designers should use percentages rather than pixels to define container elements.</para>
          <para>Second—and this is something we have not discussed previously—all images should be flexible. By this, I mean that instead of using a specific height and width for each image, we use relative percentages so that the images always display within the (relatively sized) element that contains them.</para>
          <para>Finally, until you get a handle on intricate creations of style sheets for multiple uses, spend some time developing specific style sheets for each media type, and use media queries to employ these different rules based on the type. As you advance in your work and understanding of responsive design—well beyond the scope of this book—you will learn to progressively enhance your layouts in more meaningful ways.</para>
          <para>Remember, you can specify a link to a style sheet like the following:</para>
          <programlisting><![CDATA[<link rel="stylesheet" type="text/css"
 media="screen and (max-device-width: 480px)"
 href="wee.css">]]></programlisting>
          <para>In this example, the <varname>media</varname> attribute contains a type and a query: The type is <constant>screen</constant> and the query portion is (max-device-width: 480px). This means that if the device attempting to render the display is one with a screen and the horizontal resolution (device width) is less than 480 pixels wide—as with a smartphone—then load the style sheet called wee.css and render the display using the rules found within it.</para>
          <para>Of course, a few short paragraphs in this section cannot do justice to the entirety of responsive web design. I highly recommend reading Marcotte&apos;s book <citetitle class='book'>Responsive Web Design</citetitle> (http://www.abookapart.com/products/responsive-web-design) after you have firmly grounded yourself in the basics of HTML5 and CSS3 that are discussed and used throughout here.</para>
        </section> <!-- </sect3> -->  <!-- end of "Considering a Responsive Web Design" -->
        
        <section sect='sect3'>
          <title>Special Layouts with CSS</title>
          
          <section sect='sect4'>
            <title>Two Column Layouts</title>
            <section sect='sect5'>
              <title>How To Create a Two Column Layout</title>
              <para>First, add HTML:</para>
              <programlisting><![CDATA[<div class="row">
  <div class="column"></div>
  <div class="column"></div>
</div>]]></programlisting>
              <para>Then, add CSS</para>
              <programlisting><![CDATA[.column {
  float: left;
  width: 50%;
}

/* Clear floats after the columns */
.row:after {
  content: "";
  display: table;
  clear: both;
}]]></programlisting>
              <para>A modern way of creating two columns, is to use CSS Flexbox. However, it is not supported in Internet Explorer 10 and earlier versions.</para>
              <programlisting><![CDATA[.row {
  display: flex;
}

.column {
  flex: 50%;
}]]></programlisting>

            </section> <!-- </sect5> -->
          </section> <!-- </sect4> -->
          
        </section> <!-- </sect3> -->  <!-- end of "Special Layouts with CSS" -->
        
      </section> <!-- </sect2> -->  <!-- end of "Position in CSS" -->
    
    </section> <!-- </sect1> -->
    
    
    
    <section>
      <title>Tables in CSS for XML</title>
      <para>Any of the font, text, background, and box properties already mentioned can be applied to them. Tables have a few special styles, however, that can only be applied to the various table tags:</para>
      <itemizedlist>
        <listitem><firstterm>border-spacing</firstterm>: Sets the space between table data cells. Values: &lt;length&gt; | inherit Multiple Values: One value for all four sides, or two values separated by a space to set the top/bottom and left/right spacing separately.</listitem>
        <listitem><firstterm>border-collapse</firstterm>: Sets how borders between separate table data cells are treated. Use collapse to have borders between table data cells shared. Use separate to treat each table data cell as having inde- pendent borders. Values: collapse | separate | inherit</listitem>
        <listitem><firstterm>caption-side</firstterm>: Sets where a table caption appears, either above or below the table. Caption side does not work in IE6 or IE7, but will work in IE8, so you should consider this a design enhancement. Values: top | bottom | inherit</listitem>
      </itemizedlist>
      <para>But first and foremost, XML table elements must be assigned the right <tag>display</tag> value in your CSS file, while HTML table elements, belonging to a fixed vocabulary, have suitable default values for this important attribute.</para>
      
      <section sect='sect2'>
        <title>Setting the value of <tag>display</tag> for table elements</title>
        <!-- <para>(<para>Here I have borrowed heavily from <citetitle>Beginning CSS Cascading StyleSheets for Web Design</citetitle>, by Richard York, Wrox, 2005.)</para> -->
      </section> <!-- </sect2> -->
    
      <section sect='sect2'>
        <title>Tables in DocBook</title>
        <para>Sample from a DocBook stylesheet for HTML-style tables:</para>
      <programlisting>tgroup { display: table; }
row { display: table-row; }
thead { display: table-header-group; }
tbody { display: table-row-group; }</programlisting>

<para>CSS exclusive of CALS tables:</para>
<programlisting>entry, entrytbl { display: table-cell; }
entry[valign=top] { vertical-align: top; }
entry[valign=bottom] { vertical-align: bottom; }</programlisting>
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    <section> <title>Lists in CSS</title>
    <para>Lists are used for a variety of purposes in Web design, not the least of which is to actually create an ordered (&lt;ol&gt;) or unordered (&lt;ul&gt;) list of items. In addition, lists are often used to help organize links and menus, even if the actual list markers (bullets, letters, or numbers) are removed.</para>
    <para>Although associated with particular HTML tags, any HTML tag can be used to create a list using these styles.</para>
    <itemizedlist>
      <listitem><firstterm>list-style</firstterm> The shorthand property that lets you set all of the list properties listed below at the same time. Values: inherit | &lt;list-style-type&gt; &lt;list-style-image&gt; &lt;list-style-position&gt;</listitem>
      <listitem><firstterm>list-style-type</firstterm> Sets the marker style for the list. Values: disc | circle | square | decimal | decimal-leading-zero | upper-roman | lower-roman | upper-alpha | lower-alpha | lower-greek | none | inherit</listitem>
      <listitem><firstterm>list-style-image</firstterm> Sets an image file to be used as a marker. You can use PNG (8, 24, or 32), JPEG, or GIF image formats. This property is used much less than you might think. Most design- ers add graphic bullets to a list using the background-image property instead, using a technique called CSS sprites, which provides greater versatility. Values: url( &lt;url&gt;) | none | inherit</listitem>
      <listitem><firstterm>list-style-position</firstterm> Sets whether a list item&apos;s subsequent lines of text are indented (outside) or justified (inside). Values: inside | outside | inherit</listitem>
    </itemizedlist>
    </section> <!-- </sect1> -->
    
    <section>
      <title>CSS Color</title>
      <para>Color is specified as names (&apos;brown&apos;) or as Red Green Blue additive components, for instance <userinput>rgb(255,0,0)</userinput>, in hexadecimal 0-FF <userinput>#ff0000</userinput> or in hexadecimal 0-F.</para>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Sundry CSS Topics</title>
      <section sect='sect2'>
        <title>Device-Responsive CSS</title>
        <para>Two of the most popular methods of building websites today are adaptive or responsive, both of which I explain later in this section. For now you just need to know that, at their core, they&apos;re similar, with only one mechanism separating the two.</para>
        <section sect='sect3'>
          <title>Media Queries</title>
          <para>In my opinion, media queries are the biggest agent of change in website design for many years—probably since CSS itself became mainstream.</para>
          <para>A <firstterm>media query</firstterm> is a logical statement: If the logic is true, the style rules within the statement are applied; if the logic is false, the rules are skipped. The parameters of the statements are known as <firstterm>media features</firstterm>, and the most commonly used today concern the dimensions of the device or the viewport. But before discussing media features in detail, let&apos;s see how they&apos;re used.</para>
          <para>Media queries extend the media types syntax used in CSS 2.1 and HTML 4.01—remember, that&apos;s the syntax that lets you call media-dependent styles, such as when linking to an external stylesheet:</para>
          <programlisting><![CDATA[<link rel="stylesheet" href="foo.css" media="screen">]]></programlisting>
          <para>This code calls the external stylesheet <filename>foo.css</filename> only when the viewing device is a screen—in other words, not a different media type such as print. You extend this syntax by simply adding the word &quot;and&quot; and including the query itself in parentheses:</para>
          <programlisting><![CDATA[<link rel="stylesheet" href="foo.css" media="screen and (query)">]]></programlisting>
          <para>This modified code has two conditions: The media type should be a screen, and the logic of the media query should be true. If both of these conditions are met, <filename>foo.css</filename> is applied.</para>
          <para>You can also use media queries to include external stylesheets from within other stylesheets, using the @import at-rule. The following code has the same logic as the previous code block, but it can be used within style tags or an external stylesheet:</para>
          <programlisting><![CDATA[@import url('foo.css') screen and (query);]]></programlisting>
          <warning>Performance issues can occur when using @import in this way, so proceed with caution.</warning>
          <para>Finally, you can use media queries inline, which is handy when you want to apply blocks of rules for specific cases rather than calling external stylesheets:</para>
          <programlisting><![CDATA[@media screen and (query) { … }]]></programlisting>
          <para>So now that you know how media queries work and how to include them in your pages, let&apos;s move on to explore the media features themselves—starting with the most common, those that use the dimensions of your device or browser viewport.</para>
          <section sect='sect4'>
            <title>Media Features Based on Dimensions</title>
            <para>Media queries are most commonly used today for detecting the dimensions of the agent being used to view your content and then serving up the appropriate rules for display on that agent: large text and images for big monitors, small text and a single-column layout for smartphones, that kind of thing. Of course, there&apos;s more to media queries than those simple contexts, but you get the general idea.</para>
            <para>You need to consider two sets of dimensions: first, those of the device itself, and second, those of the agent&apos;s viewport (for most people that is a web browser, but the viewport could also be an app window) on that device. A person may visit your site using an enormous wide-screen television, but that&apos;s of little concern to you if the app the person is using to view your site only occupies a quarter of the screen. On certain devices, the two sets of dimensions are the same—on most smartphones and tablets, for example, the browser&apos;s width is the same as the device&apos;s width.</para>
            <note>The viewport itself is subject to change on some devices; see <citetitle class='section' linkend='device_adaptation'>Device Adaptation</citetitle> for more details.</note>
            <para>The viewport&apos;s dimensions are probably the most important and the ones that you&apos;ll use the most, and the media features that are relevant to these are height and width. The viewport dimension features take as an argument a single length value that the logic is tested against; if the dimension in question is equal to the supplied length value, the logic is true and the rules are applied. In the following query, the rule inside the curly brackets is applied to the body element of the viewport when it is exactly 480px wide:</para>
            <programlisting><![CDATA[@media screen and (width: 480px) {
body { background-color: #00f; }
}]]></programlisting>
            <note>Working with width is much more common so I&apos;m using width in the examples in this section, but the same techniques apply to height also.</note>
            <para>I&apos;ve used a px value in this example, but any length unit is permitted. Regardless of which unit you use, an exact value is likely too specific for most purposes. A pair of extensions to the feature makes it more flexible, however.</para>
            <para>Many media features, including width, allow the prefixes max- and min- before the feature name. These stand for maximum and minimum respectively, which you probably don&apos;t need me to explain, and in practice mean <quote>no more than</quote> and <quote>no less than.</quote> For example, using max-width you can apply style rules to any browser that is no more than 480px wide, and using min-width, to any that is no less than 480px wide:</para>
            <programlisting><![CDATA[@media screen and (max-width: 480px) { … }
@media screen and (min-width: 480px) { … }]]></programlisting>
            <para>If you&apos;re sure you want to work with the dimensions of the device, not those of the viewport, you can use the device-width and device-height features—although, as before, I think width is a more commonly used dimension than height, so I&apos;ll concentrate on the former. The way you use the device-width feature is, for all practical purposes, the same as for the width feature—only the metric it responds to is different. As with width, device-width can be extended with max- and min- prefixes:</para>
            <programlisting><![CDATA[@media screen and (max-device-width: 799px) { … }
@media screen and (device-width: 800px) { … }
@media screen and (min-device-width: 801px) { … }]]></programlisting>
            <para>Another way to serve rules depends on the device&apos;s or viewport&apos;s aspect ratio. The aspect ratio is the ratio of width to height (or device-width to device-height); a 1024×768 monitor, for example, has an aspect ratio of 4/3—that is, four horizontal pixels to every three vertical pixels—which is common for older screens. Newer widescreen devices (such as the iPhone 5) tend to use a 16/9 ratio.</para>
            <para>To target a screen with a 4/3 aspect ratio, you&apos;d use the device-aspect-ratio feature:</para>
            <programlisting><![CDATA[@media screen and (device-aspect-ratio: 4/3) { … }]]></programlisting>
            <para>The max- and min- prefixes apply to these features as well, so to create a query where you wanted to target only viewports—not devices—which are currently in at least an 8/5 ratio, you&apos;d use the min-aspect-ratio feature:</para>
            <programlisting><![CDATA[@media screen and (min-aspect-ratio: 8/5) { … }]]></programlisting>
            <para>A quick way to work out which aspect ratios are greater than others is to divide the first figure by the second; a 4/3 ratio works out to 1.333, whereas 8/5 works out to 1.6. The larger the result, the wider the ratio. The example shown here applies only to screens for which that number is 1.6 or more.</para>
            <para>Probably more useful than the very precise figure of an aspect ratio is the orientation of the viewport—whether it&apos;s in portrait mode (height is greater than width) or landscape mode (width is greater than height). You query this with the orientation feature. This feature is especially useful for handheld devices like phones and tablets that can change orientation often:</para>
            <programlisting><![CDATA[@media screen and (orientation: portrait) { … }]]></programlisting>
            <para>The max- and min- prefixes don&apos;t apply to this feature for (hopefully) obvious reasons.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Combining and Negating Media Queries</title>
            <para>You can add a series of logical statements by repeated use of the &quot;and&quot; keyword with extra media queries. When and is used, the rules are applied only if all of the media query logic is true; for example, to test if a viewport is both in landscape mode and at least 800em wide, you could use this code:</para>
            <programlisting><![CDATA[@media all and (orientation: landscape) and (min-width: 800em) { … }]]></programlisting>
            <para>You can actually simplify this more; the &quot;all&quot; media type is the default state, so you can leave it out of queries, also making the first instance of &quot;and&quot; unnecessary:</para>
            <programlisting><![CDATA[@media (orientation: landscape) and (min-width: 800em) { … }]]></programlisting>
            <para>You can create a series of media queries and apply the rules if any one of them is true, using the comma separator to act like an &quot;or&quot; operator. In this example, the rules are applied if either the device is in landscape mode or the width of the viewport is at least 800em:</para>
            <programlisting><![CDATA[@media (orientation: landscape), (min-width: 800em) {}]]></programlisting>
            <para>Finally, you can reverse the logic of a media query by using the &quot;not&quot; operator; added to the start of the query, this operator means the rules are applied if the logic of the query is false. In this code the rules are applied to any device that has an aspect ratio other than 8/5:</para>
            <programlisting><![CDATA[@media not all and (device-aspect-ratio: 8/5) {}]]></programlisting>
            <para>Finding the right balance of media queries for your site can be a quite complex act involving many different variables, but the end result can be extremely satisfying. I highly recommend spending time really coming to grips with how they work. Zoe Mickley Gillenwater wrote an excellent post on the topic, <citetitle class='article'>Essential Considerations for Crafting Quality Media Queries</citetitle>, in which she says:</para>
            <blockquote>Designing web layouts with media queries is a process. You need to keep them in mind from the very beginning and make decisions at several points about how to integrate them in ways that will make the most sense for your site. There are very few always-right or always-wrong answers.</blockquote>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>A Quick Digression: All About Pixels</title>
            <para>As we&apos;ve moved into the multi-device era, a point to consider beyond the dimensions of the screen is its resolution. Many new devices, especially smartphones, now ship with high-resolution screens, so if you want to provide an optimal experience for everyone, you need to consider how images and other objects will display on those screens. Before I get into that, however, I need to talk briefly about pixels.</para>
            <para>To talk about resolution-dependent media queries, first I need to define some terms, starting with those related to pixels (I presume that readers know what a pixel is). The physical pixel count of a screen is the number of pixels contained in the width of the screen. For example, a 1280×800 screen has a physical pixel count of 1280 along its broad edge. The iPhone 3GS, in its default (portrait) position, has a physical pixel count of 320, whereas the iPhone 4 and above, using the &quot;retina&quot; display, has a count of 640.</para>
            <para>The <firstterm>pixel density</firstterm> of a screen is traditionally measured in pixels per inch (PPI)—actually if you prefer the metric system, you can use pixels per centimeter (PPC) instead, but I&apos;ll stick to imperial measure for this description. Imperial measure is sometimes known as dots per inch (DPI), even by popular desktop image-editing software, and the two terms—PPI and DPI—can be considered interchangeable. Regardless, pixel density is a measure of the number of pixels that can be placed in a line that spans one inch of the device&apos;s screen.</para>
            <para>For the vast majority of screens in use until recently, the PPI is 96. With the rise of smartphones, however, the PPI count has been steadily increasing; the original iPhone (and all versions up to the 3GS) has a 163 ppi resolution, whereas the iPhone 4 and above has double that, an incredible 326 ppi (despite the screen staying the same size—you&apos;ll see why in a second).</para>
            <para>So far, so straightforward—but that&apos;s not the whole story. The majority of high-density screens now have an extra, virtual pixel unit: the <firstterm>density-independent pixel</firstterm> (DIP), sometimes referred to as a CSS pixel. This is a relative unit; one physical pixel is equal to any number of DIPs. This allows you to scale websites up (and down), generally to provide better usability on smaller screens.</para>
            <para>The ratio of virtual pixels to physical pixels is known as the <firstterm>device pixel ratio</firstterm>. I&apos;ll use the abbreviation DPR for this, although it is also known as DPPX (dots per pixel). Devices that don&apos;t have DIPs have a DPR of 1—that is, one virtual pixel to one physical pixel. The most common high-resolution devices as I write this (such as the Samsung Galaxy S III or the iPhone 5) have a DPR of 2—two virtual pixels to one physical</para>
            <para>You can find out the DPR of any device by using JavaScript, as most browsers now support a DOM property called devicePixelRatio on the window object. To find out the DPR of the device you&apos;re using, just type this into your browser&apos;s developer console:</para>
            <programlisting>window.devicePixelRatio;</programlisting>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Screen Resolution Media Queries</title>
            <para>As you&apos;ve just seen, many devices now ship with very high-resolution screens. Although certainly a positive thing, these screens do have one or two drawbacks, mainly around the display of graphics. As you&apos;re probably aware, two types of graphic exist: vector, such as SVG, is a series of coordinates used to display shapes on screen regardless of resolution; and bitmap or raster, such as JPG and PNG, is a series of different colored dots that are more explicitly tied to pixels.</para>
            <para>The practical difference between the two types is that bitmaps are saved with a PPI setting, and a bitmap graphic that looks fine on a screen with a low DPR will look pretty poor on a device with a high one. That means you will most likely want to use higher PPI bitmaps for higher-resolution screens, which is why media features exist to do just that.</para>
            <para>In fact, two media features are available. The first, and most widely used owing to WebKit&apos;s popularity on mobile devices, is a proprietary feature called -webkit-device-pixel-ratio. This feature—along with the related max- and min- prefixes—lets you target a device&apos;s DPR. For example, here&apos;s how to add a high-resolution image to devices with a DPR of at least 2:</para>
            <programlisting><![CDATA[E { background-image: url('foo.png'); }
@media screen and (-webkit-min-device-resolution: 2) {
E{ background-image: url('foo-hi-res.png'); }
}]]></programlisting>
            <warning>Remember that a high-resolution device doesn&apos;t automatically mean a good Internet connection. The user might not thank you for making him or her download a 600kB image over a low 3G connection.</warning>
            <para>All pretty straightforward, right? Wrong. -webkit-device-pixel-ratio is, as mentioned, a WebKit-proprietary CSS extension and not part of the Media Queries specification. The spec actually contains a similar query, resolution. This query immediately improves upon -webkit-device-pixel-ratio by being more flexible in the values it accepts; you can, for example, use the dpi unit. Remember, a standard monitor resolution has a DPI (or PPI) of 96; that being the case, you can target those monitors with this code:</para>
            <programlisting><![CDATA[@media screen and (resolution: 96dpi) {
  E { background-image: url('foo.png'); }
}]]></programlisting>
            <para>But you can also target higher-resolution screens by multiplying the standard count, 96, by the DPR. For example, the following query applies to devices with a DPR of 2 or above, just like in the -webkit-device-pixel-ratio example a few paragraphs ago:</para>
            <programlisting><![CDATA[@media screen and (min-resolution: 192dpi) {
  E { background-image: url('foo-hires.png'); }
}]]></programlisting>
            <para>You can do this in an even better way, however, by using the dppx unit. This unit is equivalent to the DPR, so an updated version of the previous example employs this code:</para>
            <programlisting><![CDATA[@media screen and (min-resolution: 2dppx) {
  E  { background-image: url('foo-hires.png'); }
}]]></programlisting>
            <para>-webkit-device-pixel-ratio has been around since the iPhone was launched in 2006, and an awful lot of legacy devices are out there, so this extension is not going anywhere in a hurry. That being the case, you&apos;re probably going to have to test for both by extending the media query with a little extra logic. As previously mentioned, using a comma-separated list of media queries means the rules are applied if any one of them is true:</para>
            <programlisting><![CDATA[@media screen and (min-resolution: 2dppx), screen and (-webkit-min-device-resolution: 2) {
  E { background-image: url('foo-hires.png'); }
}]]></programlisting>
            <para>This logic tests that the device has a DPR of at least 2 but works in both legacy WebKit browsers and in ones that are compliant to the spec.</para>
            <note>To complicate matters further, some browsers—such as Opera Mobile—allow you to change the device pixel ratio.</note>
          </section> <!-- </sect4> -->
          <section sect='sect4' xml:id='device_adaptation'>
            <title>Device Adaptation*</title>
            <para>Mobile browsers are capable of scaling websites for better presentation on small screens but presume that most websites are aimed at desktop browsers. This presumption means that, by default, they show a site zoomed out/scaled down in order to accommodate the whole thing (or as much as possible) on screen. This is generally known as the layout viewport, and the drawback of the layout viewport is that the zoomed-out view can leave sites that are optimized for mobile looking very small indeed.</para>
            
            <para></para>
            
            <para></para>
            
            <para></para>
            
            <para></para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Media Queries in JavaScript*</title>
            
            <para></para>
            
            <para></para>
            
            <para></para>
            
            <para></para>
          </section> <!-- </sect4> -->



        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section>
      <title>Animating with CSS</title>
      <para>You may find that working with SVG code feels very familiar, mostly because an SVG has a DOM, just like standard HTML markup. This is hugely valuable when working with CSS animations, as manipulating markup with CSS is already a very comfortable process for most Front-End Developers.</para>
      <para>For a very brief review, let&apos;s first establish that a CSS animation is created by defining two parameters. The keyframes themselves:</para>
      <programlisting><![CDATA[@keyframes animation-name-you-pick {
   0%  {
         background: blue;
         transform: translateX(0);
       }
   50% {
         background: purple;
         transform: translateX(50px);
       }
  100% {
         background: red;
         transform: translateX(100px);
       }
}]]></programlisting>
      <note>
        <bridgehead>Keyframe Syntax Hint</bridgehead>
        <para>You can also define from and to instead of percentages. If you declare nothing in either the initial keyframe or the ending keyframe, the animation will use the default or declared properties on the element. It may be worth double checking your work in all browsers if you do remove them though, due to strange and inconsistent bugs.</para>
      </note>
      <para>After you define the keyframe values, you have two options for animation syntax declaration. Long form, with each declaration defined separately:</para>
      <programlisting>.ball {
  animation-name: animation-name-you-pick;
  animation-duration: 2s;
  animation-delay: 2s;
  animation-iteration-count: 3;
  animation-direction: alternate;
  animation-timing-function: ease-in-out;
  animation-fill-mode: forwards;
}</programlisting>
      <para>Or shorthand (my preferred method as it uses less code):</para>
      <programlisting>.ball {
  animation: animation-name-you-pick 2s 2s 3 alternate ease-in-out forwards;
}</programlisting>
      <para>All of the above declarations are interchangeable in order in a space-separated list, except for the number values, which must be defined in the above order: duration, delay, and iteration count.</para>
      <para>If we apply it to this very simple .ball:</para>
      <programlisting>.ball {
  border-radius: 50%;
  width: 50px;
  height: 50px;
  margin: 20px; //so that it&apos;s not hitting the edge of the page
  background: black;
}</programlisting>
      <para></para>
      <section sect='sect2'>
        <title>CSS Animation and Hand-Drawn SVG Sprites</title>
        <para>SVG performs extremely well as an icon format, but we&apos;ll move a step further and use SVG sprites in performant complex animations using three different techniques. The first two techniques are closely related to cel animation, while the third is a technique I recommend for more complex responsive, and even interactive development.</para>
        <section sect='sect3'>
          <title>Keyframe Animation With <function>Steps()</function> and SVG Sprites, Two Ways.</title>
          <para>If you&apos;ve ever seen a Looney Tunes or old Disney animation, you might have been impressed with the fluid movement, considering that every frame was hand-drawn. Such effects are possible on the web with SVG sprites, and we can stand on the shoulders of previous animators while employing new development techniques.</para>
          <para>Of all web-based animation techniques, step animation most closely resembles these old hand-drawn cel animations. Cel is short for <wordasword>celluloid</wordasword> which is a type of transparent sheet. This material was used by animators to draw on top of their previous drawings, thereby defining a sequence and creating the illusion of movement. It functioned a bit like a flip-book. Each drawing was captured on film frame by frame. There were usually several layers to these drawings to save time- you wouldn&apos;t want to redraw the background again and again just to show the same scene.</para>
          <para>In order to save steps in drawing, the background would be painted, and then the character, sometimes even pieces of the characters face, like the mouth or eyes, would be adjusted other layers to keep from having to repaint the character&apos;s body.</para>
          <section sect='sect4'>
            <title>Cel Animations as Scoping</title>
            <para>You can think of this technique like writing web page templates: you start from the base template and create smaller pieces so you can manage the individual thing that&apos;s happening in one piece separate from everything else.</para>
            <para>Here, we mimic this analog process by using a single motionless background, then quickly showing a series of images on top. This gives the illusion of movement without any real interpolation. Instead of a series of separate image files though, we will simultaneously reduce HTTP requests and simplify our keyframes by using a single SVG sprite sheet. This technique is great for more complex shapes and expressive movement than simple transforms can offer.</para>
            <para>Because this technique relies heavily on design, we&apos;ll go through the design workflow first and then go through the code.</para>
            <para>Typically when showing interpolated (i.e. rapidly changing) images on the web we should push the maximum frames per second possible to achieve the silkiest animation. This technique is one exception to that rule. Since we have to draw every single frame, we&apos;re going to try to get as much bang for our hand-drawn buck as possible. Years ago animators spent a lot of time trying to find a good balance between realistic movement and the fewest number of drawings. Old film was shot at 24fps, and animators largely regarded <quote>shooting on twos</quote> (meaning one drawing over two frames, or 12fps) the standard for an illusion of movement. Dropping to anything lower than this, and your eye will discern a slight choppiness (which some animators even used as a creative decision!) We use their work in finding these bounds of illusion to our benefit, stick to the 12fps rule, and create a 21 part drawing for a 1.8s animation. The 21 here comes from the the number of frames that we chose, but can be any number you like.</para>
            <para>There are two ways of creating the series of drawings for this type of animation; both work equally well, but use different automation processes for the images. The challenge we face in each workflow is keeping the drawing steadily placed in the center of the frame throughout a large sprite: even the best drawing will look flawed if the drawing jumps as we run through each frame.</para>
            
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      <programlisting></programlisting>
      <para></para>
    </section> <!-- </sect1> -->
    
  </chapter>  <!-- end of "Cascading Style Sheets (CSS)" -->
  
  
  <chapter xml:id='xslt'>
    <title>XSLT (eXtensible Stylesheet Language Transformations)</title>
    <para>XSLT is a declarative programming language for transforming XML or any other text. It searches for parts of an XML document that match a series of predefined templates, and then applies transformation and formatting rules to each matched part. Another language, <link linkend='xpath'>XPath</link>, is used to help in finding those matching parts.</para>
    
    <section>
      <title>Gentle Introduction to XML through an Example</title>
      <para>Here is the contents of an XML file named greeting.xml:</para>
      <programlisting><![CDATA[<?xml version="1.0"?>
<?xml-stylesheet href="greeting.xsl" type="text/xsl"?>
<greeting>
  Hello, World!
</greeting>]]></programlisting>
      <para>to be transformed into html format by stylesheet greeting.xsl. The second line asks the browser to process the contents. If you omit it, you can feed greeting.xml and greeting.xsl to an XSLT processor such as xsltproc, as found in linux. The contents of the stylesheet are:</para>
      <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="html"/>
<xsl:template match="/">
  <xsl:apply-templates select="greeting"/>
</xsl:template>
<xsl:template match="greeting">
  <html>
    <body>
      <h1>
        <xsl:value-of select="."/>
      </h1>
    </body>
  </html>
</xsl:template>
</xsl:stylesheet>]]></programlisting>
      <para>The root element is &lt;xsl:stylesheet&gt; , or the synonym &lt;xsl:transform&gt;. You must always specify the XSLT namespace, and it is important to set the version attribute correctly to match the type of processing required. After you&apos;ve declared the namespace, all the XSLT element names require the namespace prefix, which is xsl: by convention. The prefix also makes it clear which element is referenced if other namespaces are in use. The version attribute on the &lt;xsl:stylesheet&gt; element is rather confusing. It has absolutely nothing to do with the version of XSLT; rather, it refers to the version of XML to be output.</para>
      <para>In XSLT 1.0, the method attribute can take the values "xml", "html" , or "text". The XSLT 2.0 specification adds "xhtml" to the possible attribute values.</para>
      <para>You can add in the <sgmltag>output</sgmltag> tag two more attributes specifying the XHTML doctype-system and doctype-public attribute values. These will result in the processor generating correct declarations in the output, before the <sgmltag>html</sgmltag> element:</para>
      <programlisting><![CDATA[<xsl:output
  method="xml"
  encoding="UTF-8"
  doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
  doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"/>]]></programlisting>
      <para>You are not restricted to following the nested nodes as shown in this example. You might want to select all the paragraphs in the source document for processing, in which case you would use &lt;xsl:apply-templates select= "//p"/&gt;.</para>
    </section> <!-- </sect1> -->
    
    <section>
      <title>The XSLT Namespace</title>
      <para>All standard XSLT elements are in the <userinput>http://www.w3.org/1999/XSL/Transform</userinput> namespace. In this section, we assume that this URI is mapped to the <userinput>xsl</userinput> prefix using an appropriate <userinput>xmlns:xsl</userinput> declaration somewhere in the stylesheet. This mapping is normally declared on the root element like this:</para>
      <programlisting><![CDATA[<xsl:stylesheet version="1.0"
                    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
      <!-- XSLT top-level elements go here -->
    </xsl:stylesheet>]]></programlisting>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Embedding Stylesheets in XML Documents</title>
      <para>XSLT stylesheets are often used in a batch environment as separate files, but it is also possible to embed a stylesheet directly in an XML document, possibly to deliver the document directly to a browser for rendering. This means that the XML document must be aware of the stylesheet.</para>
      <para>There is a separate recommendation from the W3C that identifies the process for embedding stylesheets in XML documents, called <citetitle class='document' xml:href='http://www.w3.org/TR/xml-stylesheet'>Associating Style Sheets with XML Documents, Version 1.0</citetitle>. This recommendation describes a predefined XML processing instruction, or PI, that can be used at the top of any XML document to allow the XML to find the top of the XSLT stylesheet, wherever it is in the XML.</para>
      <para>The PI uses an <varname>href</varname> attribute with a URI to point to the ID of the <userinput>&lt;xsl:stylesheet&gt;</userinput> element. This URI must be a fragment identifier (signalled by the # prefix) because it is a reference to a part of the document containing the PI. It is not used to reference an external stylesheet. The following PI model definition shows the two required attributes and four optional attributes for the <userinput>&lt;?xml-stylesheet?&gt;</userinput> PI:</para>
      <programlisting><![CDATA[<?xml-stylesheet
  href= string
  type= string
  title = string
  media = string
  charset = string
  alternate = "yes" | "no"
?>]]></programlisting>
      <para>The following example, taken directly from the XSLT specification, shows an embedded stylesheet in an XML document. Notice that this example contains a few elements from the XSL formatting objects specification. The stylesheet is called into play with the <userinput>&lt;?xml-stylesheet?&gt;</userinput> PI. The template rule matching on id(&apos;foo&apos;) in the example finds an element in the XML with an ID of "foo" and uses the instructions in the template to format it, in this case with a bold font.</para>
      <programlisting><![CDATA[<?xml-stylesheet type="text/xml" href="#style1"?>
<!DOCTYPE doc SYSTEM "doc.dtd">
<doc>
  <head>
    <xsl:stylesheet id="style1"
               version="1.0"
             xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
              xmlns:fo="http://www.w3.org/1999/XSL/Format">
      <xsl:import href="doc.xsl"/>
      <xsl:template match="id('foo')">
        <fo:block font-weight="bold"><xsl:apply-templates/></fo:block>
      </xsl:template>
      <xsl:template match="xsl:stylesheet">
        <!-- ignore -->
      </xsl:template>
    </xsl:stylesheet>
    </head>
  <body>
    <para id="foo">
    ...
    </para>
  </body>
</doc>]]></programlisting>
      <para>The template rule matching on <userinput>xsl:stylesheet</userinput> is required in all embedded stylesheets so that <userinput>&lt;xsl:stylesheet&gt;</userinput> elements are processed as elements.</para>
    </section> <!-- </sect1> -->
    
      <section>
        <title>Linking to a Stylesheet</title>
        <subtitle>Client−side transformation</subtitle>
        <para>Client−side transformation is supported by XSLT processors embedded in browsers. Client−side transformation has the advantage that you can spread the processing overhead onto the client machines. However, it means you are dependent on the client browser dealing correctly with the XSLT.</para>
        <para>The following XML file sets its own stylesheet for the browser to process:</para>
        <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<class>
  <student>Jack</student>
  <student>Harry</student>
  <student>Rebecca</student>
  <teacher>Mr. Bean</teacher>
</class>
]]></programlisting>
        <para>The stylesheet (named <filename>class.xsl</filename>) in turn should produce XHTML code:</para>
        <programlisting><![CDATA[<?xml version="1.0" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

	<xsl:template match="teacher">
		<p><u><xsl:value-of select="."/></u></p>
	</xsl:template>
	
	<xsl:template match="student">
		<p><b><xsl:value-of select="."/></b></p>
	</xsl:template>
	<xsl:template match="/">
		<html>
		<body>
		<xsl:apply-templates/>
		</body>
		</html>
	</xsl:template>
	
</xsl:stylesheet>
]]></programlisting>
        <para>The XML file <filename>class.xml</filename> is linked to the XSLT code by adding the xml-stylesheet reference. The XSLT code then applies its rules to transform the XML document.</para>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Value Types</title>
        <para>There are four value types in XPath, and two that are introduced by XSLT. The four basic value types are as follows:</para>
        <itemizedlist>
          <listitem><emphasis>Boolean:</emphasis> True or false</listitem>
          <listitem><emphasis>Number:</emphasis> A floating point number, NaN (not a number), Infinity and –Infinity</listitem>
          <listitem><emphasis>String:</emphasis> A piece of text; none of the characters within a string have any particular significance in XPath</listitem>
          <listitem><emphasis>Node set:</emphasis> An unordered group of nodes</listitem>
        </itemizedlist>
        <para>XSLT introduces two further value types:</para>
        <itemizedlist>
          <listitem><emphasis>Result tree fragment:</emphasis> A portion of a result tree that is very similar to a mini node tree with a single root node; it cannot be indexed in the same way as a node tree</listitem>
          <listitem><emphasis>External objects:</emphasis> Objects created and used by extension functions; they do not fall into one of the other value types</listitem>
        </itemizedlist>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Nodes</title>
        <para>When an application wants to operate on an XML document (such as an XSLT processor running an XSLT stylesheet over an XML document), it builds an internal model of what the document looks like. In general, this model is known as a document object model or DOM. In XPath and XSLT, it&apos;s called a <firstterm>node tree</firstterm>. <firstterm>Nodes</firstterm> are the abstract components that make up a node tree. Many different kinds of nodes exist, and each type represents a different kind of component in an XML document. The following node types are significant in XSLT:</para>
        <itemizedlist>
          <listitem>Root nodes: The top of the node tree</listitem>
          <listitem>Element nodes: XML elements</listitem>
          <listitem>Attribute nodes: XML attributes</listitem>
          <listitem>Text nodes: Textual content in XML elements</listitem>
          <listitem>Comment nodes: XML comments</listitem>
          <listitem>Processing instruction nodes: XML processing instructions</listitem>
          <listitem>Namespace nodes: The in−scope namespaces on an element</listitem>
        </itemizedlist>
        <para>The node tree reflects the logical form of the document rather than its physical form, which means that node trees don&apos;t contain nodes representing things such as the XML declaration, the DOCTYPE declaration, CDATA sections, or entities within the document. The top node of any node tree is the <firstterm>root node</firstterm>. The top−most element in a document is called the document element. In a well−formed XML document, only one document element ever exists. The nodes that appear within a node in a node tree are known as its children. As you might expect, then, every node except for the very top node has a parent. In most instances, a node&apos; parent is an element node, with the only exception to this being nodes that are directly under the root node (the document element and any top−level processing instructions or comments).</para>
      </section> <!-- </sect1> -->
      
      <section xml:id='XSLT_elem_1.0'>
        <info>
          <title>XSLT Elements V 1.0 (w3schools)</title>
          <abstract>This section is drawn from the pages in www.w3schools.com. For coverage of latest features, aka XSLT 2.0, see Appendix.</abstract>
        </info>
        
        <para>These are:</para>
        <variablelist>
          <varlistentry><term linkend='xslt10_apply-imports'>XSLT apply-imports</term><listitem>Applies a template rule from an imported style sheet</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_apply-templates'>XSLT apply-templates</term><listitem>Applies a template rule to the current element or to the current element's child nodes</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_attribute'>XSLT attribute</term><listitem>Adds an attribute</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_attribute-set'>XSLT attribute-set</term><listitem>Defines a named set of attributes</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_call-template'>XSLT call-template</term><listitem>Calls a named template</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_choose'>XSLT choose</term><listitem>Used in conjunction with &lt;when&gt; and &lt;otherwise&gt; to express multiple conditional tests</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_comment'>XSLT comment</term><listitem>Creates a comment node in the result tree</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_copy'>XSLT copy</term><listitem>Creates a copy of the current node (without child nodes and attributes)</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_copy-of'>XSLT copy-of</term><listitem>Creates a copy of the current node (with child nodes and attributes)</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_decimal-format'>XSLT decimal-format</term><listitem>Defines the characters and symbols to be used when converting numbers into strings, with the format-number() function</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_element'>XSLT element</term><listitem>Creates an element node in the output document</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_fallback'>XSLT fallback</term><listitem>Specifies an alternate code to run if the processor does not support an XSLT element</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_for-each'>XSLT for-each</term><listitem>Loops through each node in a specified node set</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_if'>XSLT if</term><listitem>Contains a template that will be applied only if a specified condition is true</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_import'>XSLT import</term><listitem>Imports the contents of one style sheet into another. Note: An imported style sheet has lower precedence than the importing style sheet</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_include'>XSLT include</term><listitem>Includes the contents of one style sheet into another. Note: An included style sheet has the same precedence as the including style sheet</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_key'>XSLT key</term><listitem>Declares a named key that can be used in the style sheet with the key() function</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_message'>XSLT message</term><listitem>Writes a message to the output (used to report errors)</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_namespace-alias'>XSLT namespace-alias</term><listitem>Replaces a namespace in the style sheet to a different namespace in the output</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_number'>XSLT number</term><listitem>Determines the integer position of the current node and formats a number</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_otherwise'>XSLT otherwise</term><listitem>Specifies a default action for the &lt;choose&gt; element</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_output'>XSLT output</term><listitem>Defines the format of the output document</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_param'>XSLT param</term><listitem>Declares a local or global parameter</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_preserve-space'>XSLT preserve-space</term><listitem>Defines the elements for which white space should be preserved</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_processing-instruction'>XSLT processing-instruction</term><listitem>Writes a processing instruction to the output</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_sort'>XSLT sort</term><listitem>Sorts the output</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_strip-space'>XSLT strip-space</term><listitem>Defines the elements for which white space should be removed</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_stylesheet_and_transform_elements'>XSLT stylesheet and transform</term><listitem>Defines the root element of a style sheet</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_template'>XSLT template</term><listitem>Rules to apply when a specified node is matched</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_text'>XSLT text</term><listitem>Writes literal text to the output</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_value-of'>XSLT value-of</term><listitem>Extracts the value of a selected node</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_variable'>XSLT variable</term><listitem>Declares a local or global variable</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_when'>XSLT when</term><listitem>Specifies an action for the &lt;choose&gt; element</listitem></varlistentry>
          <varlistentry><term linkend='xslt10_with-param'>XSLT with-param</term><listitem>Defines the value of a parameter to be passed into a template</listitem></varlistentry>
        </variablelist>
        
        <section class='sect2' xml:id='xslt10_apply-imports'>
          <title>xsl:apply-imports</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:apply-imports</tag> element applies a template rule from an imported style sheet.</para>
            <para>Template rules in imported style sheets have lower precedence than template rules in main style sheets. The <tag>xsl:apply-imports</tag> is used when we want to use a template rule from the imported style sheet rather than an equivalent rule in the main style sheet.</para>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>Suppose we have a style sheet called <filename>standard.xsl</filename> that contains a template rule for message elements:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="message">
  <h2><xsl:apply-templates/></h2>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
            <para>Another style sheet could import <filename>standard.xsl</filename>, and modify the message elements, like this:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:import href="standard.xsl"/>

<xsl:template match="message">
  <div style="border:solid blue">
  <xsl:apply-imports/>
  </div>
</xsl:template>

</xsl:stylesheet> ]]></programlisting>
            <para>The result would be to transform a message into an element of the form:</para>
            <programlisting><![CDATA[<div style="border:solid blue"><h2>...</h2></div>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_apply-templates'>
          <title>xsl:apply-templates</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:apply-templates</tag> element applies a template to the current element or to the current element&apos;s child nodes.</para>
            <para>If we add a select attribute to the <tag>xsl:apply-templates</tag> element it will process only the child element that matches the value of the attribute. We can use the select attribute to specify in which order the child nodes are to be processed.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:apply-templates select="expression" mode="name">

  <!-- Content:(xsl:sort|xsl:with-param)* -->

</xsl:apply-templates>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>select 	&lt;expression&gt; 	(optional)</term>
                <listitem>Specifies the nodes to be processed. An asterisk selects the entire node-set. If this attribute is omitted, all child nodes of the current node will be selected</listitem>
              </varlistentry>
              <varlistentry>
                <term>mode 	&lt;name&gt; 	(optional)</term>
                <listitem>If there are multiple ways of processing defined for the same element, distinguishes among them</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <para>Wrap a single h1 element around each title element in the document:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="title">
  <h1><xsl:apply-templates/></h1>
</xsl:template>

</xsl:stylesheet> ]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <para>Wrap a single h1 element around all the title elements which are children of message:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="message">
  <h1><xsl:apply-templates select="title"/></h1>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 3</title>
            <para>Wrap a single h1 element around all the child nodes of message that have the mode attribute set to <literal>big</literal>:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="message">
  <h1><xsl:apply-templates select="*" mode="big"/></h1>
</xsl:template>

</xsl:stylesheet> ]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_attribute'>
          <title>xsl:attribute</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:attribute></tag> element is used to add attributes to elements.</para>
            <warning>The <tag>xsl:attribute></tag> element replaces existing attributes with equivalent names.</warning>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:attribute name="attributename" namespace="uri">

  <!-- Content:template -->

</xsl:attribute>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>name &lt;attributename&gt; (required)</term>
                <listitem>Specifies the name of the attribute</listitem>
              </varlistentry>
              <varlistentry>
                <term>namespace &lt;URI&gt; (Optional)</term>
                <listitem>Defines the namespace URI for the attribute</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <para>Add a source attribute to the picture element:</para>
            <programlisting><![CDATA[<picture>
  <xsl:attribute name="source"/>
</picture> ]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <para>Add a source attribute to the picture element and fill it with values from <userinput>images/name</userinput> :</para>
            <programlisting><![CDATA[<picture>
  <xsl:attribute name="source">
    <xsl:value-of select="images/name" />
  </xsl:attribute>
</picture> ]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 3</title>
            <para>Create an attribute-set that can be applied to any output element:</para>
            <programlisting><![CDATA[<xsl:attribute-set name="font">
  <xsl:attribute name="fname">Arial</xsl:attribute>
  <xsl:attribute name="size">14px</xsl:attribute>
  <xsl:attribute name="color">red</xsl:attribute>
</xsl:attribute-set> ]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_attribute-set'>
          <title>xsl:attribute-set</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:attribute-set</tag> element creates a named set of attributes. The attribute-set can be applied as whole to the output document.</para>
            <note>Must be child of <tag>xsl:stylesheet</tag> or <tag>xsl:transform</tag>.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:attribute-set
name="name" use-attribute-sets="name-list">

  <!-- Content:xsl:attribute* -->

</xsl:attribute-set>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>name &lt;name&gt; (required)</term>
                <listitem>Specifies the name of the attribute-set</listitem>
              </varlistentry>
              <varlistentry>
                <term>use-attribute-sets &lt;name-list&gt; (optional)</term>
                <listitem>A white space separated list of other attribute-sets to use in the attribute-set</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>Create an attribute-set that can be applied to any output element:</para>
            <programlisting><![CDATA[<xsl:attribute-set name="font">
  <xsl:attribute name="fname">Arial</xsl:attribute>
  <xsl:attribute name="size">14px</xsl:attribute>
  <xsl:attribute name="color">red</xsl:attribute>
</xsl:attribute-set> ]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_call-template'>
          <title>xsl:call-template</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:call-template</tag> element calls a named template.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <para></para>
            <programlisting><![CDATA[<xsl:call-template name="templatename">

  <!-- Content:xsl:with-param* -->

</xsl:call-template>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>name &lt;templatename&gt; (required)</term>
                <listitem>Specifies the name of the template to be called</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>Call a template named "description" when the processor finds a car element:</para>
            <programlisting><![CDATA[<xsl:template match="car">
  <xsl:call-template name="description"/>
</xsl:template> ]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_choose'>
          <title>xsl:choose</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:choose</tag> element is used in conjunction with <tag>xsl:when</tag> and <tag>xsl:otherwise</tag> to express multiple conditional tests.</para>
            <para>If no <tag>xsl:when</tag> is true, the content of <tag>xsl:otherwise</tag> is processed.</para>
            <para>If no <tag>xsl:when</tag> is true, and no <tag>xsl:otherwise</tag> element is present, nothing is created.</para>
            <tip>For simple conditional testing, use the <tag>xsl:if</tag> element instead.</tip>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:choose>

  <!-- Content:(xsl:when+,xsl:otherwise?) -->

</xsl:choose>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <para>The code below will add a pink background-color to the artist column WHEN the price of the CD is higher than 10.</para>
            <programlisting><![CDATA[<xsl:template match="/">
  <html>
  <body>
    <h2>My CD Collection</h2>
    <table border="1">
      <tr bgcolor="#9acd32">
        <th>Title</th>
        <th>Artist</th>
      </tr>
      <xsl:for-each select="catalog/cd">
      <tr>
        <td><xsl:value-of select="title"/></td>
        <xsl:choose>
          <xsl:when test="price &gt; 10">
            <td bgcolor="#ff00ff">
            <xsl:value-of select="artist"/></td>
          </xsl:when>
          <xsl:otherwise>
            <td><xsl:value-of select="artist"/></td>
          </xsl:otherwise>
        </xsl:choose>
      </tr>
      </xsl:for-each>
    </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <para>Declare a variable named <varname>color</varname>. Set its value to the color attribute of the current element. If the current element has no color attribute, the value of <varname>color</varname> will be <literal>green</literal>:</para>
            <programlisting><![CDATA[<xsl:variable name="color">
  <xsl:choose>
    <xsl:when test="@color">
      <xsl:value-of select="@color"/>
    </xsl:when>
    <xsl:otherwise>green</xsl:otherwise>
  </xsl:choose>
</xsl:variable>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_comment'>
          <title>xsl:comment</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:comment</tag> element is used to create a comment node in the result tree.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:comment>

  <!-- Content:template -->

</xsl:comment>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <programlisting><![CDATA[<xsl:comment>This is a comment!</xsl:comment>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_copy'>
          <title>xsl:copy</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:copy</tag> element creates a copy of the current node.</para>
            <warning>Namespace nodes of the current node are automatically copied as well, but child nodes and attributes of the current node are not automatically copied!</warning>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:copy use-attribute-sets="name-list">

  <!-- Content:template -->

</xsl:copy>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>use-attribute-sets &lt;name-list&gt; (optional)</term>
                <listitem>A white space separated list of attribute-sets to apply to the output node, if the node is an element</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>Copy the message node to the output document:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="message">
  <xsl:copy>
    <xsl:apply-templates/>
  </xsl:copy>
</xsl:template>

</xsl:stylesheet> ]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_copy-of'>
          <title>xsl:copy-of</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:copy-of</tag> element creates a copy of the current node.</para>
            <note>Namespace nodes, child nodes, and attributes of the current node are automatically copied as well!</note>
            <tip>This element can be used to insert multiple copies of the same node into different places in the output.</tip>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <para></para>
            <programlisting><![CDATA[<xsl:copy-of select="expression"/>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>select &lt;expression&gt; (required)</term>
                <listitem>Specifies what to be copied</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>The following code...</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:variable name="header">
  <tr>
  <th>Element</th>
  <th>Description</th>
  </tr>
</xsl:variable>

<xsl:template match="/">
  <html>
  <body>
  <table>
    <xsl:copy-of select="$header" />
    <xsl:for-each select="reference/record">
    <tr>
    <xsl:if test="category='XML'">
      <td><xsl:value-of select="element"/></td>
      <td><xsl:value-of select="description"/></td>
    </xsl:if>
    </tr>
    </xsl:for-each>
  </table>
  <br />
  <table>
    <xsl:copy-of select="$header" />
    <xsl:for-each select="table/record">
    <tr>
    <xsl:if test="category='XSL'">
      <td><xsl:value-of select="element"/></td>
      <td><xsl:value-of select="description"/></td>
    </xsl:if>
    </tr>
    </xsl:for-each>
  </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_decimal-format'>
          <title>xsl:decimal-format</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:decimal-format</tag> element defines the characters and symbols to be used when converting numbers into strings, with the <function>format-number()</function> function.</para>
            <para>Not all countries use the same characters for separating the decimal part from the integer part, and for grouping digits. With the <tag>xsl:decimal-format</tag> element you can change special characters to other symbols.</para>
            <para>This element is a top level element.</para>
            <para>The <function>format-number()</function> function can refer to the <tag>xsl:decimal-format</tag> element by name.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:decimal-format
  name="name"
  decimal-separator="char"
  grouping-separator="char"
  infinity="string"
  minus-sign="char"
  NaN="string"
  percent="char"
  per-mille="char"
  zero-digit="char"
  digit="char"
  pattern-separator="char"/>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry> <term>name &lt;name&gt; (optional)</term> <listitem>Specifies a name for this format</listitem> </varlistentry>
              <varlistentry> <term>decimal-separator &lt;char&gt; (optional)</term> <listitem>Specifies the decimal point character. Default is &quot;.&quot;</listitem> </varlistentry>
              <varlistentry> <term>grouping-separator &lt;char&gt; (optional)</term> <listitem>Specifies the thousands separator character. Default is &quot;,&quot;</listitem> </varlistentry>
              <varlistentry> <term>infinity &lt;string&gt; (optional)</term> <listitem>Specifies the string used to represent infinity. Default is &quot;Infinity&quot;</listitem> </varlistentry>
              <varlistentry> <term>minus-sign &lt;char&gt; (optional)</term> <listitem>Specifies the character to represent negative numbers. Default is &quot;-&quot;</listitem> </varlistentry>
              <varlistentry> <term>NaN &lt;string&gt; (optional)</term> <listitem>Specifies the string used when the value is not a number&quot;. Default is &quot;NaN&quot;</listitem> </varlistentry>
              <varlistentry> <term>percent &lt;char&gt; (optional)</term> <listitem>Specifies the percentage sign character. Default is &quot;%&quot;</listitem> </varlistentry>
              <varlistentry> <term>per-mille &lt;char&gt; (optional)</term> <listitem>Specifies the per thousand sign character. Default is &quot;‰&quot;</listitem> </varlistentry>
              <varlistentry> <term>zero-digit &lt;char&gt; (optional)</term> <listitem>Specifies the digit zero character. Default is &quot;0&quot;</listitem> </varlistentry>
              <varlistentry> <term>digit &lt;char&gt; (optional)</term> <listitem>Specifies the character used to indicate a place where a digit is required. Default is #</listitem> </varlistentry>
              <varlistentry> <term>pattern-separator &lt;char&gt; (optional)</term> <listitem>Specifies the character used to separate positive and negative subpatterns in a format pattern. Default is &quot;;&quot;</listitem> </varlistentry>
            </variablelist>
            <programlisting><![CDATA[]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>The example below shows how to format to European currency (note that the third argument in format-number() refers to the name of the <tag>xsl:decimal-format</tag> element:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:decimal-format name="euro" decimal-separator="," grouping-separator="."/>
  <xsl:template match="/">
    <xsl:value-of select="format-number(26825.8, '#.###,00', 'euro')"/>
  </xsl:template>
</xsl:stylesheet>]]></programlisting>
            <para>Output:</para>
            <programlisting><![CDATA[26.825,80]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_element'>
          <title>xsl:element</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:element</tag> element is used to create an element node in the output document.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:element
name="name"
namespace="URI"
use-attribute-sets="namelist">

  <!-- Content:template -->

</xsl:element>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>name 	&lt;name&gt; 	(required)</term>
                <listitem>Specifies the name of the element to be created (the value of the name attribute can be set to an expression that is computed at run-time, like this: <tag>xsl:element name=&quot;{$country}&quot;/</tag></listitem>
              </varlistentry>
              <varlistentry>
                <term>namespace 	&lt;URI&gt; 	(optional)</term>
                <listitem>Specifies the namespace URI of the element (the value of the namespace attribute can be set to an expression that is computed at run-time, like this: <tag>xsl:element name=&quot;{$country}&quot; namespace=&quot;{$someuri}&quot;/</tag></listitem>
              </varlistentry>
              <varlistentry>
                <term>use-attribute-sets 	&lt;namelist&gt; 	(optional)</term>
                <listitem>A white space separated list of attribute-sets containing attributes to be added to the element</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>Create a &quot;singer&quot; element that contains the value of each artist element:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <xsl:for-each select="catalog/cd">
    <xsl:element name="singer">
      <xsl:value-of select="artist" />
    </xsl:element>
    <br />
  </xsl:for-each>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_fallback'>
          <title>xsl:fallback</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:fallback</tag> element specifies an alternate code to run if  the XSL processor does not support an XSL element.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:fallback>

  <!-- Content: template -->

</xsl:fallback>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>This example is supposed to loop through each &quot;title&quot; element with a made up <tag>xsl:loop</tag> element. If the XSL processor does not support this element (which it does not), it will use the <tag>xsl:for-each</tag> element instead:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="catalog/cd">
  <xsl:loop select="title">
    <xsl:fallback>
      <xsl:for-each select="title">
        <xsl:value-of select="."/>
      </xsl:for-each>
    </xsl:fallback>
  </xsl:loop>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_for-each'>
          <title>xsl:for-each</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:for-each</tag> element loops through each node in a specified node set.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:for-each select="expression">
  <!-- Content -->
</xsl:for-each>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>select 	&lt;expression&gt; 	(required)</term>
                <listitem>An XPath expression that specifies which node set to be processed.</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <para>The example below loops trough each cd element outputs the title for each cd:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <div>
    <xsl:for-each select="catalog/cd">
      <p><xsl:value-of select="title" /></p>
    </xsl:for-each>
  </div>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <para>The example below loops trough each cd element and creates a table row with the values from title and artist for each cd:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
    <h1>Music Collection:</h1>
    <table border="1">
      <tr bgcolor="#9acd32">
        <th>Title</th>
        <th>Artist</th>
      </tr>
      <xsl:for-each select="catalog/cd">
      <tr>
        <td><xsl:value-of select="title" /></td>
        <td><xsl:value-of select="artist" /></td>
      </tr>
      </xsl:for-each>
    </table>
  </body>
  </html>
</xsl:template>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_if'>
          <title>xsl:if</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:if</tag> element contains a template that will be applied only if a specified condition is true.</para>
            <tip>Use <tag>xsl:choose</tag> in conjunction with <tag>xsl:when</tag> and <tag>xsl:otherwise</tag> to express multiple conditional tests!</tip>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:if
test="expression">

  <!-- Content: template -->

</xsl:if>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>test &lt;expression&gt; (required)</term>
                <listitem>Specifies the condition to be tested</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <para>Select the values of title and artist IF the price of the CD is higher than 10:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
    <h2>My CD Collection</h2>
    <table border="1">
      <tr bgcolor="#9acd32">
        <th>Title</th>
        <th>Artist</th>
      </tr>
      <xsl:for-each select="catalog/cd">
      <xsl:if test="price &gt; 10">
        <tr>
          <td><xsl:value-of select="title"/></td>
          <td><xsl:value-of select="artist"/></td>
        </tr>
      </xsl:if>
      </xsl:for-each>
    </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <para>Display the title of each CD. Insert &quot;, &quot; between each CD-title if it is not the last CD or the last but one. If it is the last CD, add &quot;!&quot; behind the title. If it is the last but one CD, add &quot;, and &quot; behind the title:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
    <h2>My CD Collection</h2>
    <p>Titles:
    <xsl:for-each select="catalog/cd">
      <xsl:value-of select="title"/>
      <xsl:if test="position()!=last()">
        <xsl:text>, </xsl:text>
      </xsl:if>
      <xsl:if test="position()=last()-1">
        <xsl:text> and </xsl:text>
      </xsl:if>
      <xsl:if test="position()=last()">
        <xsl:text>!</xsl:text>
      </xsl:if>
    </xsl:for-each>
    </p>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_import'>
          <title>xsl:import</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:import</tag> element is a top-level element that is used to import the contents of one style sheet into another.</para>
            <note>An imported style sheet has lower precedence than the importing style sheet.</note>
            <note>This element must appear as the first child node of <tag>xsl:stylesheet</tag> or <tag>xsl:transform</tag>.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <para></para>
            <programlisting><![CDATA[<xsl:import href="URI"/>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>href &lt;URI&gt; (required)</term>
                <listitem>Specifies the URI of the style sheet to import</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>Suppose you have a style sheet called <filename>cdcatalog_ex3.xsl</filename>:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
    <h2>My CD Collection</h2>
    <table border="1">
      <tr bgcolor="#9acd32">
        <th>Title</th>
        <th>Artist</th>
      </tr>
      <tr>
        <td><xsl:value-of select="catalog/cd/title"/></td>
        <td><xsl:value-of select="catalog/cd/artist"/></td>
      </tr>
    </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
            <para>A second style sheet called <filename>cdcatalog_import.xsl</filename> imports <filename>cdcatalog_ex3.xsl</filename>:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:import href="cdcatalog_ex3.xsl"/>

<xsl:template match="/">
  <xsl:apply-imports/>
</xsl:template>

</xsl:stylesheet> ]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_include'>
          <title>xsl:include</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:include</tag> element is a top-level element that includes the contents of one style sheet into another.</para>
            <note>An included style sheet has the same precedence as the including style sheet.</note>
            <note>This element must appear as a child node of <tag>xsl:stylesheet</tag> or <tag>xsl:transform</tag>.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:include href="URI"/>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>href &lt;URI&gt; (required)</term>
                <listitem>Specifies the URI of the style sheet to import</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_key'>
          <title>xsl:key</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:key</tag> element is a top-level element which declares a named key that can be used in the style sheet with the <function>key()</function> function.</para>
            <note>A key does not have to be unique!</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:key
name="name"
match="pattern"
use="expression"/>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>name 	&lt;name&gt; (required)</term>
                <listitem>Specifies the name of the key</listitem>
              </varlistentry>
              <varlistentry>
                <term>match &lt;pattern&gt; (required)</term>
                <listitem>Defines the nodes to which the key will be applied</listitem>
              </varlistentry>
              <varlistentry>
                <term>use &lt;expression&gt; (required)</term>
                <listitem>The value of the key for each of the nodes</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>Suppose you have an XML file called <filename>persons.xml</filename>:</para>
            <programlisting><![CDATA[<persons>
  <person name="Tarzan" id="050676"/>
  <person name="Donald" id="070754"/>
  <person name="Dolly" id="231256"/>
</persons>]]></programlisting>
            <para>You can define a key in an XSL file like this:</para>
            <programlisting><![CDATA[<xsl:key name="preg" match="person" use="@id"/>]]></programlisting>
            <para>To find the person with id=&quot;050676&quot;, write (in the XSL file):</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:key name="preg" match="person" use="@id"/>

<xsl:template match="/">
  <html>
  <body>
  <xsl:for-each select="key('preg','050676')">
    <p>
    Id: <xsl:value-of select="@id"/><br />
    Name: <xsl:value-of select="@name"/>
    </p>
  </xsl:for-each>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_message'>
          <title>xsl:message</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:message</tag> element writes a message to the output. This element is primarily used to report errors.</para>
            <para>This element can contain almost any other XSL element (<tag>xsl:text</tag>, <tag>xsl:value-of</tag>, etc.).</para>
            <para>The <varname>terminate</varname> attribute gives you the choice to either quit or continue the processing when an error occurs.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:message terminate="yes|no">

  <!-- Content:template -->

</xsl:message>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>terminate yes/no (optiona)</term>
                <listitem>&quot;yes&quot; terminates the processing after the message is written to the output. &quot;no&quot; continues the processing after the message is written to the output. Default is &quot;no&quot;.</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>Check if artist is an empty string. If yes, we quit the XSL processor and display a message:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
  <xsl:for-each select="catalog/cd">
    <p>Title: <xsl:value-of select="title"/><br />
    Artist:
    <xsl:if test="artist=''">
      <xsl:message terminate="yes">
        Error: Artist is an empty string!
      </xsl:message>
    </xsl:if>
    <xsl:value-of select="artist"/>
    </p>
  </xsl:for-each>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_namespace-alias'>
          <title>xsl:namespace-alias</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:namespace-alias</tag> element is used to replace a namespace in the style sheet to a different namespace in the output.</para>
            <note><tag>xsl:namespace-alias</tag> is a top-level element, and must be a child node of <tag>xsl:stylesheet</tag> or <tag>xsl:transform</tag>.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:namespace-alias
                stylesheet-prefix="prefix|#default"
                result-prefix="prefix|#default"/>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>stylesheet-prefix prefix/#default (required)</term>
                <listitem>Specifies the namespace you wish to change</listitem>
              </varlistentry>
              <varlistentry>
                <term>result-prefix prefix#default (required)</term>
                <listitem>Specifies the desired namespace for the output</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>The wxsl prefix is converted to the xsl prefix in the output:</para>
            <programlisting><![CDATA[<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:wxsl="https://www.w3schools.com/w3style.xsl">

<xsl:namespace-alias stylesheet-prefix="wxsl" result-prefix="xsl"/>

<xsl:template match="/">
  <wxsl:stylesheet>
    <xsl:apply-templates/>
  </wxsl:stylesheet>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_number'>
          <title>xsl:number</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:number</tag> element is used to determine the integer position of the current node in the source. It is also used to format a number.</para>
            <programlisting><![CDATA[<xsl:number
count="expression"
level="single|multiple|any"
from="expression"
value="expression"
format="formatstring"
lang="languagecode"
letter-value="alphabetic|traditional"
grouping-separator="character"
grouping-size="number"/>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>count &lt;expression&gt; 	(optional)</term>
                <listitem>An XPath expression that specifies what nodes are to be counted</listitem>
              </varlistentry>
              <varlistentry>
                <term>level single/multiple/any (optional)</term>
                <listitem>Controls how the sequence number is assigned. Can be one of the following: single (default) multiple, any (not supported by Netscape 6)</listitem>
              </varlistentry>
              <varlistentry>
                <term>from 	&lt;expression&gt;	(optional)</term>
                <listitem>An XPath expression that specifies where the counting will start</listitem>
              </varlistentry>
              <varlistentry>
                <term>value &lt;expression&gt; (optional)</term>
                <listitem>Specifies a user-provided number that is used in place of a sequence generated number</listitem>
              </varlistentry>
              <varlistentry>
                <term>format formatstring (optional)</term>
                <listitem>
                  <para>Defines the output format for the number. Can be one of the following:</para>
                  <itemizedlist>
                    <listitem>format=&quot;1&quot; results in 1 2 3 . .</listitem>
                    <listitem>format=&quot;01&quot; results in 01 02 03 (not supported by Netscape 6)</listitem>
                    <listitem>format=&quot;a&quot; results in a b c . . (not supported by Netscape 6)</listitem>
                    <listitem>format=&quot;A&quot; results in A B C. . (not supported by Netscape 6)</listitem>
                    <listitem>format=&quot;i&quot; results in i ii iii iv . . (not supported by Netscape 6)</listitem>
                    <listitem>format=&quot;I&quot; results in I II III IV . . (not supported by Netscape 6)</listitem>
                  </itemizedlist>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>lang	languagecode	(optional)</term>
                <listitem>Specifies the language alphabet to be used for the numbering (Not supported by Netscape 6)</listitem>
              </varlistentry>
              <varlistentry>
                <term>letter-value 	alphabetic/traditional 	(optional)</term>
                <listitem>Specifies whether the numbering in the selected language is alphabetic or traditional. The default is alphabetic</listitem>
              </varlistentry>
              <varlistentry>
                <term>grouping-separator character (optional)</term>
                <listitem>Specifies what character should be used to separate groups of digits. The default is the comma</listitem>
              </varlistentry>
              <varlistentry>
                <term>grouping-size	number (optional)</term>
                <listitem>Specifies how many digits are in the groups that are being separated by the character specified in the grouping-separator attribute. The default is 3</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <programlisting><![CDATA[<xsl:number value="250000" grouping-separator="."/>]]></programlisting>
            <para>Output:</para>
            <programlisting><![CDATA[250.000]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <programlisting><![CDATA[<xsl:number value="250000" grouping-size="2"/>]]></programlisting>
            <para>Output:</para>
            <programlisting><![CDATA[25,00,00]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 3</title>
            <para></para>
            <programlisting><![CDATA[<xsl:number value="12" grouping-size="1"
                grouping-separator="#" format="I"/>]]></programlisting>
            <para>Output:</para>
            <programlisting><![CDATA[X#I#I]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 4</title>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
  <p>
  <xsl:for-each select="catalog/cd">
    <xsl:number value="position()" format="1" />
    <xsl:value-of select="title" /><br />
  </xsl:for-each>
  </p>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_otherwise'>
          <title>xsl:otherwise</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:otherwise</tag> element specifies a default action for the <tag>xsl:choose</tag> element. This action will take place when none of the <tag>xsl:when</tag> conditions apply.</para>
            <programlisting><![CDATA[]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:otherwise>

  <!-- Content:template -->

</xsl:otherwise>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <para>The code below will add a pink background-color to the artist column WHEN the price of the cd is higher than 10, OTHERWISE it will just print the name of the artist:</para>
            <programlisting><![CDATA[ <?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
    <h2>My CD Collection</h2>
    <table border="1">
      <tr bgcolor="#9acd32">
        <th>Title</th>
        <th>Artist</th>
      </tr>
      <xsl:for-each select="catalog/cd">
      <tr>
        <td><xsl:value-of select="title"/></td>
        <xsl:choose>
          <xsl:when test="price&gt;'10'">
            <td bgcolor="#ff00ff">
            <xsl:value-of select="artist"/></td>
          </xsl:when>
          <xsl:otherwise>
            <td><xsl:value-of select="artist"/></td>
          </xsl:otherwise>
        </xsl:choose>
      </tr>
      </xsl:for-each>
    </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <para>Declare a variable named <varname>color</varname>. Set its value to the color attribute of the current element. If the current element has no color attribute, the value of <varname>color</varname> will be <literal>green</literal>:</para>
            <programlisting><![CDATA[<xsl:variable name="color">
  <xsl:choose>
    <xsl:when test="@color">
      <xsl:value-of select="@color"/>
    </xsl:when>
    <xsl:otherwise>green</xsl:otherwise>
  </xsl:choose>
</xsl:variable>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_output'>
          <title>xsl:output</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:output</tag> element defines the format of the output document.</para>
            <note><tag>xsl:output</tag> is a top-level element, and must appear as a child node of <tag>xsl:stylesheet</tag> or <tag>xsl:transform</tag>.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:output
method="xml|html|text|name"
version="string"
encoding="string"
omit-xml-declaration="yes|no"
standalone="yes|no"
doctype-public="string"
doctype-system="string"
cdata-section-elements="namelist"
indent="yes|no"
media-type="string"/>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>method 	xml/html/text/name 	(optional)</term>
                <listitem>Defines the output format. The default is XML (but if the first child of the root node is <tag>html</tag> and there are no preceding text nodes, then the default is HTML) Netscape 6 only supports &quot;html&quot; and &quot;xml&quot;</listitem>
              </varlistentry>
              <varlistentry>
                <term>version	string (optional)</term>
                <listitem>Sets the W3C version number for the output format (only used with method=&quot;html&quot; or method=&quot;xml&quot;)</listitem>
              </varlistentry>
              <varlistentry>
                <term>encoding 	&lt;string&gt; (optional)</term>
                <listitem>Sets the value of the encoding attribute in the output</listitem>
              </varlistentry>
              <varlistentry>
                <term>omit-xml-declaration yes/no (optional)</term>
                <listitem>&quot;yes&quot; specifies that the XML declaration (&lt;?xml...?&gt;) should be omitted in the output. &quot;no&quot; specifies that the XML declaration should be included in the output. The default is &quot;no&quot;</listitem>
              </varlistentry>
              <varlistentry>
                <term>standalone 	yes/no 	(optional)</term>
                <listitem>&quot;yes&quot; specifies that a standalone declaration should occur in the output. &quot;no&quot; specifies that a standalone declaration should not occur in the output. The default is &quot;no&quot; (This attribute is not supported by Netscape 6)</listitem>
              </varlistentry>
              <varlistentry>
                <term>doctype-public &lt;string&gt; (optional)</term>
                <listitem>Sets the value of the PUBLIC attribute of the DOCTYPE declaration in the output</listitem>
              </varlistentry>
              <varlistentry>
                <term>doctype-system &lt;string&gt; (optional)</term>
                <listitem>Sets the value of the SYSTEM attribute of the DOCTYPE declaration in the output</listitem>
              </varlistentry>
              <varlistentry>
                <term>cdata-section-elements &lt;namelist&gt; (optional)</term>
                <listitem>A white-space separated list of elements whose text contents should be written as CDATA sections</listitem>
              </varlistentry>
              <varlistentry>
                <term>indent yes/no (optional)</term>
                <listitem>&quot;yes&quot; indicates that the output should be indented according to its hierarchic structure. &quot;no&quot; indicates that the output should not be indented according to its hierarchic structure. This attribute is not supported by Netscape 6</listitem>
              </varlistentry>
              <varlistentry>
                <term>media-type &lt;string&gt; (optional)</term>
                <listitem>Defines the MIME type of the output. The default is &quot;text/xml&quot; This attribute is not supported by Netscape 6</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <para>The output in this example will be an XML document, version 1.0. The character encoding is set to "UTF-8" and the output will be indented for readability:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:output method="xml" version="1.0"
encoding="UTF-8" indent="yes"/>

...

...

</xsl:stylesheet>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <para>The output in this example will be an HTML document, version 4.0. The character encoding is set to &quot;UTF-8&quot; and the output will be indented for readability:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:output method="html" version="4.0"
encoding="UTF-8" indent="yes"/>

...

...

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_param'>
          <title>xsl:param</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:param</tag> element is used to declare a local or global parameter.</para>
            <note>The parameter is global if it&apos;s declared as a top-level element, and local if it&apos;s declared within a template.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:param
name="name"
select="expression">

  <!-- Content:template -->

</xsl:param>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>name &lt;name&gt; (required)</term>
                <listitem>Specifies the name of the parameter</listitem>
              </varlistentry>
              <varlistentry>
                <term>select &lt;expression&gt; (optional)</term>
                <listitem>Specifies an XPath expression that specifies a default value for the parameter</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
  <xsl:for-each select="catalog/cd">
    <xsl:call-template name="show_title">
      <xsl:with-param name="title" select = "title" />
    </xsl:call-template>
  </xsl:for-each>
  </body>
  </html>
</xsl:template>

<xsl:template name = "show_title" >
  <xsl:param name = "title" />
  <p>Title: <xsl:value-of select = "$title" /></p>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_processing-instruction'>
          <title>xsl:processing-instruction</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:processing-instruction</tag> element writes a processing instruction to the output.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:processing-instruction
name="process-name">

  <!-- Content:template -->

</xsl:processing-instruction>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>name &lt;process-name&gt; (required)</term>
                <listitem>Specifies the name of the processing instruction</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>This code:</para>
            <programlisting><![CDATA[<xsl:processing-instruction name="xml-stylesheet">
href="style.css" type="text/css"
</xsl:processing-instruction>]]></programlisting>
            <para>Creates this tag:</para>
            <programlisting><![CDATA[<?xml-stylesheet href="style.css" type="text/css"?>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_sort'>
          <title>xsl:sort</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:sort</tag> element is used to sort the output.</para>
            <note><tag>xsl:sort</tag> is always within <tag>xsl:for-each</tag> or <tag>xsl:apply-templates</tag>.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:sort select="expression"
lang="language-code"
data-type="text|number|qname"
order="ascending|descending"
case-order="upper-first|lower-first"/>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>select &lt;XPath-expression&gt; (optional)</term>
                <listitem>Specifies which node/node-set to sort on</listitem>
              </varlistentry>
              <varlistentry>
                <term>lang &lt;language-code&gt; (optional)</term>
                <listitem>Specifies which language is to be used by the sort</listitem>
              </varlistentry>
              <varlistentry>
                <term>data-type &quot;text/number/qname&quot; (optional)</term>
                <listitem>Specifies the data-type of the data to be sorted. Default is &quot;text</listitem>
              </varlistentry>
              <varlistentry>
                <term>order &quot;ascending/descending&quot; (optional)</term>
                <listitem>Specifies the sort order. Default is &quot;ascending&quot;</listitem>
              </varlistentry>
              <varlistentry>
                <term>case-order &quot;upper-first/lower-first&quot; (optional)</term>
                <listitem>Specifies whether upper- or lowercase letters are to be ordered first</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>The example below will sort the output by artist:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
  <h2>My CD Collection</h2>
  <table border="1">
    <tr bgcolor="#9acd32">
      <th>Title</th>
      <th>Artist</th>
    </tr>
    <xsl:for-each select="catalog/cd">
      <xsl:sort select="artist"/>
      <tr>
        <td><xsl:value-of select="title"/></td>
        <td><xsl:value-of select="artist"/></td>
      </tr>
    </xsl:for-each>
  </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_stylesheet_and_transform_elements'>
          <title>xsl:stylesheet and xsl transform Elements</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:stylesheet</tag> and <tag>xsl:transform</tag> elements are completely synonymous elements. Both are used to define the root element of the style sheet.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[
<xsl:stylesheet
id="name"
version="version"
extension-element-prefixes="list"
exclude-result-prefixes="list">

  <!-- Content:(<xsl:import>*,top-level-elements) -->

</xsl:stylesheet>

<xsl:transform
id="name"
version="version"
extension-element-prefixes="list"
exclude-result-prefixes="list">

  <!-- Content:(<xsl:import>*,top-level-elements) -->

</xsl:transform>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>version &lt;version&gt; (required)</term>
                <listitem>Specifies the XSLT version of the style sheet</listitem>
              </varlistentry>
              <varlistentry>
                <term>extension-element-prefixes &lt;list&gt; (optional)</term>
                <listitem>A white space separated list of namespace prefixes used for extension elements. This attribute is not supported by Netscape 6</listitem>
              </varlistentry>
              <varlistentry>
                <term>exclude-result-prefixes &lt;list&gt; (optional)</term>
                <listitem>A white space separated list of namespace prefixes that should not be sent to the output</listitem>
              </varlistentry>
              <varlistentry>
                <term>id &lt;name&gt; (optional)</term>
                <listitem>A unique id for the style sheet. This attribute is not supported by Netscape 6</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

....

....

</xsl:stylesheet>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<xsl:transform version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

....

....

</xsl:transform>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_template'>
          <title>xsl:template</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:template></tag> element contains rules to apply when a specified node is matched. The match attribute is used to associate the template with an XML element. The match attribute can also be used to define a template for a whole branch of the XML document (i.e. match=&quot;/&quot; defines the whole document).</para>
            <note><tag>xsl:template</tag> is a top-level element.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:template
name="name"
match="pattern"
mode="mode"
priority="number">

  <!-- Content:(<xsl:param>*,template) -->

</xsl:template>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>name &lt;name&gt; (optional)</term>
                <listitem>
                  <para>Specifies a name for the template.</para>
                  <note>If this attribute is omitted there must be a match attribute</note>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>match &lt;pattern&gt; (optional)</term>
                <listitem>
                  <para>The match pattern for the template.</para>
                  <note>If this attribute is omitted there must be a name attribute</note>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>mode &lt;mode&gt; (optional)</term>
                <listitem>Specifies a mode for this template</listitem>
              </varlistentry>
              <varlistentry>
                <term>priority &lt;number&gt; (optional)</term>
                <listitem>A number which indicates the numeric priority of the template</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
  <h2>My CD Collection</h2>
  <xsl:apply-templates/>
  </body>
  </html>
</xsl:template>

<xsl:template match="cd">
  <p>
  <xsl:apply-templates select="title"/>
  <xsl:apply-templates select="artist"/>
  </p>
</xsl:template>

<xsl:template match="title">
  Title: <span style="color:#ff0000">
  <xsl:value-of select="."/></span>
  <br />
</xsl:template>

<xsl:template match="artist">
  Artist: <span style="color:#00ff00">
  <xsl:value-of select="."/></span>
  <br />
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_text'>
          <title>xsl:text</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:text</tag> element is used to write literal text to the output.</para>
            <note>This element may contain literal text, entity references, and #PCDATA.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:text
disable-output-escaping="yes|no">

  <!-- Content:#PCDATA -->

</xsl:text>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>disable-output-escaping yes/no (optional)</term>
                <listitem>&quot;yes&quot; indicates that special characters (like &quot;&lt;&quot;) should be output as is. &quot;no&quot; indicates that special characters (like &quot;&lt;&quot;) should be output as &quot;&amp;lt;&quot;. Default is &quot;no&quot;. This attribute is not supported by Netscape 6</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>Displays the title of each CD. Inserts a &quot;, &quot; between each cd-title if it is not the last CD - or the last but one. If it is the last CD, it will add a &quot;!&quot; behind the title. If it is the last but one, add a &quot;, and &quot; behind the title:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
    <h2>My CD Collection</h2>
    <p>Titles:
    <xsl:for-each select="catalog/cd">
      <xsl:value-of select="title"/>
      <xsl:if test="position() < last()-1">
        <xsl:text>, </xsl:text>
      </xsl:if>
      <xsl:if test="position()=last()-1">
        <xsl:text>, and </xsl:text>
      </xsl:if>
      <xsl:if test="position()=last()">
        <xsl:text>!</xsl:text>
      </xsl:if>
    </xsl:for-each>
    </p>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_preserve-space'>
          <title>xsl:preserve-space*</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term></term>
                <listitem></listitem>
              </varlistentry>
              <varlistentry>
                <term></term>
                <listitem></listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para></para>
            <programlisting><![CDATA[]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_strip-space'>
          <title>xsl:strip-space</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:strip-space</tag> element is used to define the elements for which white space should be removed.</para>
            <note>Preserving white space is the default setting, so using the <tag>xsl:preserve-space</tag> element is only necessary if  the <tag>xsl:strip-space</tag> element is used.</note>
            <note>The <tag>xsl:preserve-space</tag> element and the <tag>xsl:strip-space</tag> element are top-level elements.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:preserve-space elements="list-of-element-names"/>]]></programlisting>
            <programlisting><![CDATA[<xsl:strip-space elements="list-of-element-names"/>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>elements 	&lt;list-of-element-names&gt; (required)</term>
                <listitem>
                  <para>A white space separated list of element names for which white space should be preserved/removed.</para>
                  <note>The list can also contain &quot;*&quot; and &quot;&lt;prefix&gt;:*&quot; so that all elements or all elements from a particular namespace can be joined.</note>
                </listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <para>In the example below we preserve white space nodes for title and artist elements, and remove white space nodes for country, company, price, and year elements:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
              <xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                
                <xsl:strip-space elements="country company price year" />
                <xsl:preserve-space elements="title artist" />
                
                <xsl:template match="/">
                  <html>
                  <body>
                  <xsl:for-each select="catalog/cd">
                    <p>
                      <xsl:value-of select="title" /><br />
                      <xsl:value-of select="artist" /><br />
                      <xsl:value-of select="country" /><br />
                      <xsl:value-of select="company" /><br />
                      <xsl:value-of select="price" /><br />
                      <xsl:value-of select="year" />
                    </p>
                  </xsl:for-each>
                </body>
              </html>
            </xsl:template>
            
            </xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_value-of'>
          <title>xsl:value-of</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:value-of</tag> element extracts the value of a selected node. The <tag>xsl:value-of</tag> element can be used to select the value of an XML element and add it to the output.</para>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:value-of select="expression" disable-output-escaping="yes|no" />]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>select &lt;expression&gt; (required)</term>
                <listitem>An XPath expression that specifies which node/attribute to extract the value from. It works like navigating a file system where a forward slash (/) selects subdirectories.</listitem>
              </varlistentry>
              <varlistentry>
                <term>disable-output-escaping yes/no (optional)</term>
                <listitem>&quot;yes&quot; indicates that special characters (like &quot;&lt;&quot;) should be output as is. &quot;no&quot; indicates that special characters (like &quot;&lt;&quot;) should be output as &quot;&amp;lt;&quot;. Default is &quot;no&quot;.</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <para>The example below puts the values from the first title and artist elements and puts it in a table:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
    <h1>Music Collection:</h1>
    <table border="1">
      <tr bgcolor="#9acd32">
        <th>Title</th>
        <th>Artist</th>
      </tr>
      <tr>
        <td><xsl:value-of select="catalog/cd/title" /></td>
        <td><xsl:value-of select="catalog/cd/artist" /></td>
      </tr>
    </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <para>The example below loops trough each cd element and creates a table row with the values from title and artist for each cd element:</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
    <h1>Music Collection:</h1>
    <table border="1">
      <tr bgcolor="#9acd32">
        <th>Title</th>
        <th>Artist</th>
      </tr>
      <xsl:for-each select="catalog/cd">
      <tr>
        <td><xsl:value-of select="title" /></td>
        <td><xsl:value-of select="artist" /></td>
      </tr>
      </xsl:for-each>
    </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_variable'>
          <title>xsl:variable</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:variable</tag> element is used to declare a local or global variable.</para>
            <note>The variable is global if it&apos;s declared as a top-level element, and local if it&apos;s declared within a template.</note>
            <note>Once you have set a variable&apos;s value, you cannot change or modify that value!</note>
            <tip>You can add a value to a variable by the content of the <tag>xsl:variable</tag> element OR by the select attribute!</tip>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:variable
name="name"
select="expression">

  <!-- Content:template -->

</xsl:variable>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>name &lt;name&gt; (required)</term>
                <listitem>Specifies the name of the variable</listitem>
              </varlistentry>
              <varlistentry>
                <term>select &lt;expression&gt; (optional)</term>
                <listitem>Defines the value of the variable</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <para>If the select attribute is present, the <tag>xsl:variable</tag> element cannot contain any content. If the select attribute contains a literal string, the string must be within quotes. The following two examples assign the value &quot;red&quot; to the variable &quot;color&quot;:</para>
            <programlisting><![CDATA[<xsl:variable name="color" select="'red'" />

<xsl:variable name="color" select='"red"' />]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <para>If the <tag>xsl:variable</tag> element only contains a name attribute, and there is no content, then the value of the variable is an empty string:</para>
            <programlisting><![CDATA[<xsl:variable name="j" />]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 3</title>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:variable name="header">
  <tr bgcolor="#9acd32">
    <th>Title</th>
    <th>Artist</th>
  </tr>
</xsl:variable>

<xsl:template match="/">
  <html>
  <body>
  <table border="1">
    <xsl:copy-of select="$header" />
    <xsl:for-each select="catalog/cd">
      <tr>
        <td><xsl:value-of select="title"/></td>
        <td><xsl:value-of select="artist"/></td>
      </tr>
    </xsl:for-each>
  </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_when'>
          <title>xsl:when</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:when</tag> element is used to specify an action for the <tag>xsl:choose</tag> element. The <tag>xsl:when</tag> element evaluates an expression, and if it returns true, an action is performed.</para>
            <note>The <tag>xsl:when</tag> element is used in conjunction with <tag>xsl:choose</tag> and <tag>xsl:otherwise</tag> to express multiple conditional tests.</note>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:when
test="boolean-expression">

  <!-- Content: template -->

</xsl:when>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>test &lt;boolean-expression&gt; (required)</term>
                <listitem>Specifies a Boolean expression to be tested</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example 1</title>
            <para>The code below will add a pink background-color to the artist column WHEN the price of the cd is higher than 10.</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
    <h2>My CD Collection</h2>
    <table border="1">
      <tr bgcolor="#9acd32">
        <th>Title</th>
        <th>Artist</th>
      </tr>
      <xsl:for-each select="catalog/cd">
      <tr>
        <td><xsl:value-of select="title"/></td>
        <xsl:choose>
          <xsl:when test="price&gt;'10'">
            <td bgcolor="#ff00ff">
            <xsl:value-of select="artist"/></td>
          </xsl:when>
          <xsl:otherwise>
            <td><xsl:value-of select="artist"/></td>
          </xsl:otherwise>
        </xsl:choose>
      </tr>
      </xsl:for-each>
    </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Example 2</title>
            <para>Declare a variable named &quot;color&quot;. Set its value to the color attribute of the current element. If the current element has no color attribute, the value of &quot;color&quot; will be &quot;green&quot;:</para>
            <programlisting><![CDATA[<xsl:variable name="color">
  <xsl:choose>
    <xsl:when test="@color">
      <xsl:value-of select="@color"/>
    </xsl:when>
    <xsl:otherwise>green</xsl:otherwise>
  </xsl:choose>
</xsl:variable>]]></programlisting>
          </section>
        </section>
        
        <section class='sect2' xml:id='xslt10_with-param'>
          <title>xsl:with-param</title>
          <section class='sect3'>
            <title>Definition and Usage</title>
            <para>The <tag>xsl:with-param</tag> element defines the value of a parameter to be passed into a template.</para>
            <note>The value of the name attribute of <tag>xsl:with-param</tag> must match a name in an <tag>xsl:param</tag> element (the <tag>xsl:with-param</tag> element is ignored if there is no match).</note>
            <note>The <tag>xsl:with-param</tag> element is allowed within <tag>xsl:apply-templates</tag> and <tag>xsl:call-template</tag>.</note>
            <tip>You can add a value to the parameter by the content of the <tag>xsl:with-param</tag> element OR by the select attribute!</tip>
          </section>
          <section class='sect3'>
            <title>Syntax</title>
            <programlisting><![CDATA[<xsl:with-param
name="name"
select="expression">

  <!-- Content:template -->

</xsl:with-param>]]></programlisting>
          </section>
          <section class='sect3'>
            <title>Attributes</title>
            <variablelist>
              <varlistentry>
                <term>name &lt;name&gt; (required)</term>
                <listitem>Specifies the name of the parameter</listitem>
              </varlistentry>
              <varlistentry>
                <term>select &lt;expression&gt; (optional)</term>
                <listitem>An XPath expression that defines the value of the parameter</listitem>
              </varlistentry>
            </variablelist>
          </section>
          <section class='sect3'>
            <title>Example</title>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
  <html>
  <body>
  <xsl:for-each select="catalog/cd">
    <xsl:call-template name="show_title">
      <xsl:with-param name="title" select = "title" />
    </xsl:call-template>
  </xsl:for-each>
  </body>
  </html>
</xsl:template>

<xsl:template name = "show_title" >
  <xsl:param name = "title" />
  <p>Title: <xsl:value-of select = "$title" /></p>
</xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section>
        </section>
        
      </section> <!-- </sect1> -->  <!-- end of "XSLT Elements (www.w3schools.com) -->
      
      <section>
        <title>Templates</title>
        <para>An XSLT stylesheet is comprised of a number of <firstterm>templates</firstterm> that define a particular part of the process. Templates are defined with xsl:template elements, each of which holds a sequence of XSLT instructions that are carried out when the template is used. The two ways of using templates are by calling them and by applying them. If an xsl:template element has a name attribute, it defines a named template, and you can use it by calling it with xsl:call–template. If an xsl:template element has a match attribute, it defines a matching template, and you can apply it by applying templates to a node that it matches using xsl:apply–templates.</para>
        
        <para>The syntax of the <userinput>xsl:template</userinput> element is:</para>
        <programlisting>&lt;xsl:template 
   name = <classname>Qname</classname> 
   match = <classname>Pattern</classname>
   priority = <classname>number</classname> 
   mode = <classname>QName</classname> >
&gt;></programlisting>
        <para>where the meaning of the attributes are:</para>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>Name of the element on which template is to be applied. This allows calling (running) the template by name</listitem>
          </varlistentry>
          <varlistentry>
            <term>match</term>
            <listitem>Pattern which signifies the element(s) on which template is to be applied.</listitem>
          </varlistentry>
          <varlistentry>
            <term>priority</term>
            <listitem>Priority number of a template. Matching template with low priority is not considered in from in front of high priority template.</listitem>
          </varlistentry>
          <varlistentry>
            <term>mode</term>
            <listitem>Allows element to be processed multiple times to produce a different result each time.</listitem>
          </varlistentry>
          </variablelist>

        <section sect='sect2'>
          <title>Built−in templates</title>
          <para>Several built−in templates are designed to assist you by providing default processing for different kinds of nodes. These templates have the following effects:</para>
          <itemizedlist>
            <listitem>The content of the root node is processed.</listitem>
            <listitem>Elements are ignored, but their contents are processed.</listitem>
            <listitem>Any text in the source is copied to the result.</listitem>
            <listitem>All other nodes are ignored.</listitem>
          </itemizedlist>
          <para>When the processor starts processing the stylesheet, it begins by taking the root node of the source node tree and trying to find a template to apply to it. If you create an XSLT stylesheet without any templates in it, the processor processes the content of the root node, which includes the document element. Then, it processes the content of the document element, which may include other elements, and so on, recursively down the node tree. When it encounters a text node, it outputs that text node. The effect of this is that if you have a stylesheet that doesn&apos;t contain any templates then you will get all the text in the source XML as output.</para>
          <para>These are the built-in templates:</para>
          
          <section sect='sect3'>
            <title>Built-in template rule for element and document nodes</title>
            <para>This template processes the document node and any of its children. This processing ensures that recursive processing will continue, even if no template is declared for a given element:</para>
            <programlisting><![CDATA[<xsl:template match="*|/">
  <xsl:apply-templates/>
</xsl:template>]]></programlisting>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>Built-in template rule for modes</title>
            <para>This template ensures that element and document nodes are processed, regardless of any mode that might be in effect.</para>
            <programlisting><![CDATA[<xsl:template match="*|/" mode="x">
  <xsl:apply-templates mode="x"/>
</xsl:template>]]></programlisting>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>Built-in template rule for text and attribute nodes</title>
            <para>This template copies the text of all text and attribute nodes to the output tree. Be aware that you have to actually select the text and attribute nodes for this rule to be invoked:</para>
            <programlisting><![CDATA[<xsl:template match="text()|@*">
  <xsl:value-of select="."/>
</xsl:template>]]></programlisting>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>Built-in template rule for comment and processing instruction nodes</title>
            <para>This template does nothing:</para>
            <programlisting><![CDATA[<xsl:template match="comment()|processing-instruction()"/>]]></programlisting>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>Built-in template rule for namespace nodes</title>
            <para>This template also does nothing:</para>
            <programlisting><![CDATA[<xsl:template match="namespace()"/>]]></programlisting>
            </section> <!-- </sect3> -->
          
        </section> <!-- </sect2> -->
        
        <section sect='sect2' xml:id='xslt_copying_and_transforming'>
          <title>Copying and Transforming</title>
          <para>In general you can start with a default copy template:</para>
          <programlisting><![CDATA[<xsl:template match="node() | @*">
  <xsl:copy>
    <xsl:apply-templates select="node() | @*"/>
  </xsl:copy>
</xsl:template>]]></programlisting>
          <para>or</para>
          <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="xml"/>
<!-- Copy all elements, attributes, and text nodes -->
<xsl:template match="*|@*|text()|comment()">
  <xsl:copy>
    <xsl:apply-templates select="*|@*|text()|comment()"/>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>]]></programlisting>
          <para>and then add your specific processing rules, which might either erase some nodes, or rename or restructure some nodes, or something else.</para>
          
          <section sect='sect3'>
            <title>&lt;value-of select=&quot;...&quot;&gt;</title>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>&lt;copy select=&quot;...&quot;&gt;</title>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>&lt;copy-of select=&quot;...&quot;&gt;</title>
            <para>The xsl:copy-of element creates a copy of the current node. Namespace nodes, child nodes, and attributes of the current node are automatically copied as well! This element can be used to insert multiple copies of the same node into different places in the output. Its select is required and specifies what to be copied</para>
            <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:variable name="header">
  <tr>
  <th>Element</th>
  <th>Description</th>
  </tr>
</xsl:variable>

<xsl:template match="/">
  <html>
  <body>
  <table>
    <xsl:copy-of select="$header" />
    <xsl:for-each select="reference/record">
    <tr>
    <xsl:if test="category='XML'">
      <td><xsl:value-of select="element"/></td>
      <td><xsl:value-of select="description"/></td>
    </xsl:if>
    </tr>
    </xsl:for-each>
  </table>
  <br />
  <table>
    <xsl:copy-of select="$header" />
    <xsl:for-each select="table/record">
    <tr>
    <xsl:if test="category='XSL'">
      <td><xsl:value-of select="element"/></td>
      <td><xsl:value-of select="description"/></td>
    </xsl:if>
    </tr>
    </xsl:for-each>
  </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet> ]]></programlisting>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>xsl:copy vs. xsl:copy-of</title>
            
            <para>The xsl:copy instruction copies the context item but none of its children nodes. It cannot have a @select XPath. A very common use of xsl:copy can be found in the identity transformation:</para>
            <programlisting xml:id='xslt_copy_identity_tx'><![CDATA[<xsl:template match="@*|node()">
  <xsl:copy>
    <xsl:apply-templates select="@*|node()"/>
  </xsl:copy>
</xsl:template>]]></programlisting>
            <para>Notice that here the node itself is copied via xsl:copy and the children nodes are then transformed via xsl:apply-templates, giving other templates a chance to intervene in the transformation.</para>
            
            <para>The xsl:copy-of instruction evaluates the XPath in its required @select attribute and copies the selected nodes and their children nodes, recursively. This is a deep copy. The xsl:copy-of instruction must have a @select XPath. Notice that xsl:copy-of could have been used in the <link linkend='xslt_copy_identity_tx'>identity transformation</link>, however the flexibility afforded by allowing other templates the chance to match during the recursion would have been lost.</para>

            <itemizedlist>
              <listitem>Use xsl:copy when you want to copy just the context item and have other plans for the children of the context item.</listitem>
              <listitem>Use xsl:copy-of when you want to copy XPath-selected nodes and their children, recursively.</listitem>
            </itemizedlist>
            <para>In short, xsl:copy makes a <emphasis>shallow</emphasis> copy, whereas xsl:copy-of makes a <emphasis>deep</emphasis> copy.</para>
          </section> <!-- </sect3> -->
          
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Named Templates</title>
          <para>These have a <userinput>name</userinput> attribute, so that they may be called by call-template with matching name parameter.</para>
        </section> <!-- </sect2> -->
        <section sect='sect2'>
          <title>The <userinput>mode</userinput> Attribute</title>
          <para>Sometimes the same input content needs to appear multiple times in the output document, formatted according to a different template each time. For instance, the titles of the chapters in a book would be formatted one way in the chapters themselves and a different way in the table of contents. Both <userinput>xsl:apply-templates</userinput> and <userinput>xsl:template</userinput> elements can have optional <userinput>mode</userinput> attributes that connect different template rules to different uses. A <userinput>mode</userinput> attribute on <userinput>xsl:template</userinput> element identifies in which mode that template rule should be activated. An <userinput>xsl:apply-templates</userinput> element with a <userinput>mode</userinput> attribute only activates template rules with matching mode attributes.</para>
          
          <para>The example below demonstrates with a stylesheet that begins the output document with a list of people&apos;s names. This is accomplished in the <userinput>toc</userinput> mode. Then a separate template rule, as well as a separate <userinput>xsl:apply-templates</userinput> element in the default mode (really no mode at all), output the complete contents of all person elements.</para>
          <programlisting><![CDATA[<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:template match="people">
    <html>
      <head><title>Famous Scientists</title></head>
      <body>
        <ul><xsl:apply-templates select="person" mode="toc"/></ul>
        <xsl:apply-templates select="person"/>
      </body>
    </html>
  </xsl:template>

  <!-- Table of Contents Mode Templates -->
  <xsl:template match="person" mode="toc">
    <xsl:apply-templates select="name" mode="toc"/>
  </xsl:template>

  <xsl:template match="name" mode="toc">
    <li><xsl:value-of select="last_name"/>,
    <xsl:value-of select="first_name"/></li>
  </xsl:template>

  <!-- Normal Mode Templates -->
  <xsl:template match="person">
    <p><xsl:apply-templates/></p>
  </xsl:template>

</xsl:stylesheet>]]></programlisting>
          
          <para>Both <userinput>xsl:template</userinput> and <userinput>xsl:apply-templates</userinput> have an optional <userinput>mode</userinput> attribute. If <userinput>xsl:template</userinput> does not have a <userinput>match</userinput> attribute, it must not have a <userinput>mode</userinput> attribute. If an <userinput>xsl:apply-templates</userinput> element has a <userinput>mode</userinput> attribute, then it applies only to those template rules from <userinput>xsl:template</userinput> elements that have a <userinput>mode</userinput> attribute with the same value; if an <userinput>xsl:apply-templates</userinput> element does <emphasis>not</emphasis> have a <userinput>mode</userinput> attribute, then it applies only to those template rules from <userinput>xsl:template</userinput> elements that do not have a <userinput>mode</userinput> attribute.</para>
        </section> <!-- </sect2> -->
        <section sect='sect2'>
          <title>Template priority</title>
          <para>When a processor is told to apply templates to a node set, it goes through the nodes one by one and tries to find a matching template that matches each node. When it finds one, it uses that template to process the node. There might be more than one template that matches the node. Templates with a higher import priority override templates that are imported.</para>
          <para>If multiple templates remain after discounting ones that have been imported, then the processor assigns a priority to each template. The priority of a template can be set explicitly with the priority attribute on xsl:template. Otherwise, the priority is based on the pattern in the match attribute, from lowest to highest as follows:</para>
          <itemizedlist>
            <listitem>Patterns that match all nodes of a particular type (e.g. all elements)</listitem>
            <listitem>Patterns that match nodes in a particular namespace (e.g. all XHTML elements)</listitem>
            <listitem>Patterns that match nodes by name (e.g. all p elements) </listitem>
            <listitem>Patterns that include additional tests through predicates or through additional steps (e.g. all p elements that are descendents of a table element)</listitem>
          </itemizedlist>
          <para>If more than one template matches a node, and they have the same priority, the processor uses the last template defined in the stylesheet.</para>
        </section> <!-- </sect2> -->

      </section> <!-- </sect1> -->
      
      <section>
        <title>Top-Level Elements</title>
        <para>Any element whose parent is the <sgmltag>xsl:stylesheet</sgmltag> element is called a top-level element. Here we&apos;re simply setting up some properties for the transform. There are other elements we can put at the start of our stylesheet. Here is a brief discussion of these:</para>
        <variablelist>
          <varlistentry>
            <term><sgmltag>xsl:include</sgmltag> and <sgmltag>xsl:import</sgmltag></term>
            <listitem><para>These elements refer to another stylesheet. The other stylesheet and all of its contents are included in the current stylesheet. The main difference between <sgmltag>xsl:import</sgmltag> and <sgmltag>xsl:include</sgmltag> is that a template, variable, or anything else imported with <sgmltag>xsl:import</sgmltag> has a lower priority than the things in the current stylesheet. This gives you a mechanism to subclass stylesheets, if you want to think about this from an object-oriented point of view. You can import another stylesheet that contains common templates, but any templates in the importing stylesheet will be used instead of any templates in the imported stylesheet. Another difference is that <sgmltag>xsl:import</sgmltag> can only appear at the beginning of a stylesheet, while <sgmltag>xsl:include</sgmltag> can appear anywhere.</para></listitem>
          </varlistentry>
          <varlistentry><term><sgmltag>xsl:strip-space</sgmltag> and <sgmltag>xsl:preserve-space</sgmltag></term>
            <listitem><para>These elements contain a space-separated list of elements from which whitespace should be removed or preserved in the output. To define these elements globally, use <sgmltag>xsl:strip-space elements="*"/</sgmltag> or <sgmltag>xsl:preserve-space elements="*"/</sgmltag> . If we want to specify that whitespace be removed for all elements except for <sgmltag>greeting</sgmltag> elements and <sgmltag>salutation</sgmltag> elements, we would add this markup to our stylesheet:</para></listitem>
          </varlistentry>
          <varlistentry>
            <term><sgmltag>xsl:key</sgmltag></term>
            <listitem><para>This element defines a key, which is similar to defining an index on a database.</para></listitem>
          </varlistentry>
          <varlistentry>
            <term>xsl:variable</term>
            <listitem><para>This element defines a variable. Any <sgmltag>xsl:variable</sgmltag> that appears as a top-level element is global to the entire stylesheet.</para></listitem>
          </varlistentry>
          <varlistentry>
            <term>xsl:param</term>
            <listitem><para>This element defines a parameter. As with <sgmltag>xsl:variable</sgmltag> , any <sgmltag>xsl:param</sgmltag> that is a top-level element is global to the entire stylesheet.</para></listitem>
          </varlistentry>
        </variablelist>
        
        <section sect='sect2'>
          <title>How to Avoid Exporting Namespace Definitions to Resulting XML Documents</title>
          <blockquote>
            <para>I&apos;d like to take data from some XML files and transform them into a new XML document. However, I do not want the definition of a namespace in the XSLT to occur in the result document.</para>
          </blockquote>
          <para>You can use the <parameter>exclude-result-prefixes</parameter> attribute of the xsl:stylesheet element to avoid emitting namespace prefixes into the output document:</para>
          <programlisting><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<xsl:stylesheet version="1.0"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:prefix1="http://www.something.com"
         exclude-result-prefixes="prefix1">

</xsl:stylesheet>]]></programlisting>
          <para>To suppress multiple namespaces from the output document specify them separated by whitespace:</para>
          <programlisting><![CDATA[exclude-result-prefixes="prefix1 prefix2 prefix3"]]></programlisting>
          
          <para>From the XSLT specification:</para>
          <blockquote>When a stylesheet uses a namespace declaration only for the purposes of addressing the source tree, specifying the prefix in the exclude-result-prefixes attribute will avoid superfluous namespace declarations in the result tree.</blockquote>
          
          <section sect='sect3'>
            <title>Use <userinput>extension-element-prefixes</userinput></title>
            <para>Use <userinput>extension-element-prefixes=&quot;Namespace&quot;</userinput> like:</para>
            <programlisting><![CDATA[<xsl:stylesheet
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:datetime="http://exslt.org/dates-and-times"
xmlns:str="http://exslt.org/strings"
xmlns:exsl="http://exslt.org/common"
xmlns:uw="xalan://ru.sbtc.util.XSLUtil"
extension-element-prefixes="exsl str datetime uw"
version="1.0">]]></programlisting>
            <para><userinput>extension-element-prefixes</userinput> does have the same effect, but it has an additional effect. Any elements that you put in one of those namespaces will be interpreted as an extension element (rather than a literal result element). That may well be appropriate for the examples you have in your answer. But if you don't want that additional behavior, then just use exclude-result-prefixes </para>
          </section> <!-- </sect3> -->



        </section> <!-- </sect2> -->
        
      </section> <!-- </sect1> -->
      
      <section xml:id='push_pull_processing'>
        <title>Push and Pull Processing</title>
        
        <para>In <firstterm>push processing</firstterm> a template rule is provided (written) for each kind of node. Then templates are applied for children of each node, and so on. Built-in templates are applied whenever a matching one has not been provided.</para>
        <para>Push processing is used when input and output have <emphasis>the same structure</emphasis>.</para>
        
        <para>In <firstterm linkend='pull_processing'>pull processing</firstterm> you explicitly select and process the required nodes.</para>
        
        <section sect='sect2'>
          <title>Push Processing</title>
          <para>...</para>
          <para>Here is an example of turning a docbook file into HTML:</para>
          <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">

  <xsl:template match="book">
    <html xmlns="http://www.w3.org/1999/xhtml">
      <head>
        <title><xsl:value-of select="book/title"/></title>
      </head>
      <body>
        <xsl:apply-templates/>
      </body>
    </html>
  </xsl:template>

  <xsl:template match="para">
    <p><xsl:apply-templates/></p>
  </xsl:template>

  <xsl:template match="title">
    <h1><xsl:apply-templates/></h1>
  </xsl:template>

</xsl:stylesheet>]]></programlisting>
          <para>Each xsl:apply-templates instruction is the stylesheet&apos;s way of telling the XSLT processor to send along the context node&apos;s child nodes to the stylesheet&apos;s relevant template rules. (Or, to quote Curtis Mayfield, "Keep On Pushing.")</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2' xml:id='pull_processing'>
          <title>Pull Processing</title>
          <para>In <firstterm>pull processing</firstterm> you explicitly select and process the required nodes. To this end the following elements are used:</para>
          <itemizedlist>
            <listitem><![CDATA[<xsl:value-of  select='pattern'/>]]></listitem>
            <listitem><![CDATA[<xsl:apply-templates  select='pattern'/>]]></listitem>
            <listitem><![CDATA[<xsl:for-each  select='pattern'/>]]></listitem>
          </itemizedlist>
          <para>Pull processing affords greater control over which nodes are to be processed. It is employed whenever input and output have very <emphasis>different structure</emphasis>.</para>
          <para>A pull stylesheet is appropriate when you are fairly certain of what your source document will look like. It&apos;s also a good idea if the structure of the result drives the processing; i.e., if you just want to pick certain information out of the source document and place it in the result.</para>
            
          <section>
            <title>A Simple Example</title>
            <para>Here is an simple example.</para>
            <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">

  <xsl:template match="/">
    <html xmlns="http://www.w3.org/1999/xhtml">
      <head>
        <title><xsl:value-of select="book/title"/></title>
      </head>
      <body>
        <h1><xsl:value-of select="book/title"/></h1>
        <xsl:for-each select="book/para">
          <p><xsl:value-of select="."/></p>
        </xsl:for-each>
      </body>
    </html>
  </xsl:template>

</xsl:stylesheet>]]></programlisting>
            <para>...</para>
          </section>
          <section>
            <title>A Full Example</title>
            <para>Here elements are selected (1) by name or (2) by attribute, and (3) other elements are outsourced through the <function>document(FILE_NAME)</function> function.</para>
            <programlisting><![CDATA[<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:db ="http://docbook.org/ns/docbook"
  version="1.0">
  <xsl:output method="xml"/>

  <xsl:template match="/">

    <xsl:element name="book">
      <xsl:element name="title">Pulling Elements either by Name or by Attribute Value</xsl:element>

      <xsl:text>
      </xsl:text>


      <!-- Pull all preface elements -->
      <xsl:apply-templates select="document('../book.xml')/book//preface"/><xsl:text>

      </xsl:text>
      <!-- Pull all elements with a class attribute whose value is 'private' -->
      <xsl:apply-templates select="/book//*[@class='private']"/>

    </xsl:element>


  </xsl:template>

  <!-- Copy all elements, attributes, and text nodes -->
<xsl:template match="*|@*|text()|comment()">
  <xsl:copy>
    <xsl:apply-templates select="*|@*|text()|comment()"/>
  </xsl:copy>
</xsl:template>

</xsl:stylesheet>


]]></programlisting>
          </section>
          <section>
            <title>Pulling and Sorting</title>
            <para>You want to call an empty sort element <userinput><![CDATA[<xsl:sort select="NODE-SET"/>]]></userinput> inside a  <userinput><![CDATA[<xsl:for-each select="ELEMENT">...</xsl:for-each>]]></userinput> element.</para>
            <para>In the follwing example only the titles of chapters are pulled, and then sorted:</para>
            <programlisting><![CDATA[<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:db ="http://docbook.org/ns/docbook"
  version="1.0">
  <xsl:output method="xml"/>

  <xsl:template match="/">

    <xsl:element name="book">
      <xsl:element name="title">Pulling Chapter <tag>title</tag> Elements and sorting by <userinput>./title</userinput></xsl:element><xsl:text>
</xsl:text>

      <xsl:for-each select='//chapter'>
        <xsl:sort select="./title | ./info/title"/>
        <xsl:apply-templates select="title | info/title"/><xsl:text>
</xsl:text>
      </xsl:for-each>

    </xsl:element>


  </xsl:template>

  <!-- Copy all elements, attributes, and text nodes -->
<xsl:template match="*|@*|text()|comment()">
  <xsl:copy>
    <xsl:apply-templates select="*|@*|text()|comment()"/>
  </xsl:copy>
</xsl:template>

</xsl:stylesheet>]]></programlisting>

            <section>
              <title>Other Ordering Attributes</title>
              <para>We may change the sorting criterium and avail ourselves of other sort attributes, such as by ascending or descending order:</para>
              <programlisting><![CDATA[<xsl:sort select="./title | ./info/title" order="descending"/>]]></programlisting>
              <para>We can also sort by <varname>data-type</varname>, which takes on any of values <literal>text</literal> (default), <literal>number</literal>, or <literal>qname</literal>:</para>
              <programlisting><![CDATA[<xsl:sort select="./title | ./info/title" data-type="text"/>]]></programlisting>
            </section>
            <section>
              <title>Pulling and Re-ordering by the Numeric Value of an Attribute</title>
              <para>If all <tag>title</tag> elements bore a <varname>ordering</varname> attribute with a numeric value (or any other attribute with a numeric value), you could order chapters by the numeric value of that attribute, as in:</para>
              <programlisting><![CDATA[<xsl:sort select="@ordering" data-type="number"/>]]></programlisting>
              <para>This enables us to generate differently ordered sequences, as many as our <tag>chapter</tag> elements bore numeric-valued attributes:</para>
              <programlisting><![CDATA[<chapter id="my-chapter" ordering="21" scrambled-ordering="4" easy-ordering="7">
  ...
</chapter>]]></programlisting>
              <para>We may even avail ourselves of the presence or absence of an attribute in <tag>chapter</tag> to pull it in or not:</para>
              <programlisting><![CDATA[<xsl:for-each select='//chapter[@special-ordering]'>
  <xsl:sort select="@special-ordering" data-type="number"/>]]></programlisting>
            </section>
          </section>
          <section sect='sect3'>
            <title>Pull Advantages?</title>
            <para>Keeping the program logic for multiple classes of nodes in one template rule can be an advantage if you want to perform some specific steps on each node type, as well as some other steps on all those nodes. For example, let&apos;s say I want to wrap every member element from the following sample document in a p element.</para>
            <programlisting><![CDATA[<members>
  <member joinDate="2003-10-03">Jimmy Osterberg</member>
  <member joinDate="2005-03-07">Declan McManus</member>
  <member joinDate="2003-10-03">Richard Starkey</member>
  <member joinDate="2004-08-23">Vincent Furnier</member>
</members>]]></programlisting>
            <para>I want to precede each with a p element that says <quote>(founding member)</quote> if the joinDate date equals <quote>2003-10-03</quote>, and with a p element of <quote>(new member)</quote> if the joinDate attribute begins with <quote>2005</quote>. The following does this easily in a single template rule:</para>
            <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">

  <xsl:template match="member">

    <xsl:if test="@joinDate='2003-10-03'">
      <p>(founding member)</p>
    </xsl:if>

    <xsl:if test="substring(@joinDate,1,4) = '2005'">
      <p>(new member)</p>
    </xsl:if>

    <p><xsl:apply-templates/></p>

  </xsl:template>

</xsl:stylesheet>]]></programlisting>
          </section> <!-- </sect3> -->
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>XSLT 2.0: New Options</title>
          <para>XSLT 2.0 offers another approach. The xsl:next-match element tells the XSLT processor to find the next most applicable template rule for the context node being processed and apply it, letting you apply multiple template rules to a node while still using a push approach. Normally, when multiple template rules all have match conditions that can describe the same element (for example, if one template rule has a match condition of <quote>*</quote>, another has one of <quote>member</quote>, and another has one of <quote>member[@joinDate=&apos;2003-10-03&apos;]</quote>, they can all apply to the first member element shown above), the XSLT processor applies the one with the most specific description to the node—in this case, the one with a match condition of <quote>member[@joinDate=&apos;2003-10-03&apos;]</quote>. (The choice is actually made based on a priority number to help judge how specific the description is. You can override this by explicitly setting a priority attribute value in the template rule.)</para>
          <para>While an XSLT processor processes a particular node in a template rule, the xsl:next-match instruction tells it, <quote>Go find the next most appropriate template rule after this one, execute all of its instructions, and then resume in this template rule.</quote> This lets you rewrite the stylesheet above like this, with the same effect:</para>
          <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     version="2.0">

    <xsl:template match="member[@joinDate='2003-10-03']">
      <p>(founding member)</p>
      <xsl:next-match/>
    </xsl:template>

    <xsl:template match="member[substring(@joinDate,1,4) = '2005']">
      <p>(new member)</p>
      <xsl:next-match/>
    </xsl:template>

    <xsl:template match="member">
      <p><xsl:apply-templates/></p>
    </xsl:template>

</xsl:stylesheet>]]></programlisting>
          <para>When either the first or second template rule here is triggered, it outputs the p element shown and then triggers the third template rule.</para>
          <para>It&apos;s best to use short examples in this kind of article, and the examples above are so short that the difference between the last two stylesheets seems trivial. You&apos;ll find that the usefulness of the xsl:next-match instruction becomes clearer as the amount of program logic to execute scales up. When you have different combinations of large blocks of instructions to execute on a set of nodes, putting these blocks inside of xsl:if instructions or the xsl:when children of xsl:choose elements makes a stylesheet increasingly difficult to read. When you combine the conditional processing made possible by carefully chosen match conditions with the template rule chaining allowed by xsl:next-match, you can have a much more elegant, readable solution. For even greater control over the relationship between the calling and the called templates, you can add xsl:with-param children to the xsl:next-match element to pass parameters, just like you can with named templates.</para>
        </section> <!-- </sect2> -->
        
      </section> <!-- </sect1> -->
      
      <section xml:id='xslt_creating_links'>
        <title>Creating Links and Cross-References</title>
        <para>This section discusses a several ways to link XML elements. It reviews three techniques:</para>
        <itemizedlist>
          <listitem>Using the <function>id()</function> function</listitem>
          <listitem>Doing more advanced linking with the <function>key()</function> function</listitem>
          <listitem>Generating links in unstructured documents</listitem>
        </itemizedlist>
        
        <section sect='sect2'>
          <title>The <function>id()</function> Function</title>
          <para>The <function>id()</function> function selects elements by their unique <classname>ID</classname>. When the argument to <function>id()</function> is of type <classname>node-set</classname>, then the result is the union of the result of applying <function>id()</function> to the string-value of each of the nodes in the argument node-set. When the argument to <function>id()</function> is of any other type, the argument is converted to a string as if by a call to the <function>string()</function> function; the string is split into a whitespace-separated list of tokens (whitespace is any sequence of characters matching the production S); the result is a node-set containing the elements in the same document as the context node that have a unique <classname>ID</classname> equal to any of the tokens in the list. Thus</para>
          <itemizedlist>
            <listitem><userinput><![CDATA[id("foo")]]></userinput>  selects the element with unique <classname>ID</classname> <constant>foo</constant></listitem>
            <listitem><userinput><![CDATA[id("foo")/child::para[position()=5]]]></userinput>  selects the fifth para child of the element with unique <classname>ID</classname> <constant>foo</constant></listitem>
          </itemizedlist>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>The <classname>ID</classname>, <classname>IDREF</classname>, and <classname>IDREFs</classname> Datatypes</title>
          <para>Three of the basic datatypes supported by XML Document Type Definitions (DTDs) are <classname>ID</classname>, <classname>IDREF</classname>, and <classname>IDREFs</classname>. Here&apos;s a simple DTD that illustrates these datatypes:</para>
          <programlisting><![CDATA[<!--glossary.dtd-->
<!--The containing tag for the entire glossary-->
<!ELEMENT glossary  (glentry+) >

<!--A glossary entry-->
<!ELEMENT glentry  (term,defn+) >

<!--The word being defined-->
<!ELEMENT term  (#PCDATA) >

<!--The id is used for cross-referencing, and the 
    xreftext is the text used by cross-references.-->
<!ATTLIST term
               id  ID    #REQUIRED 
               xreftext  CDATA    #IMPLIED  >

<!--The definition of the term-->
<!ELEMENT defn  (#PCDATA | xref | seealso)* >

<!--A cross-reference to another term-->
<!ELEMENT xref   EMPTY  >

<!--refid is the ID of the referenced term-->
<!ATTLIST xref
               refid  IDREF    #REQUIRED >

<!--seealso refers to one or more other definitions-->
<!ELEMENT seealso EMPTY>
<!ATTLIST seealso
                  refids   IDREFS  #REQUIRED >]]></programlisting>
          <para>In this DTD, each <userinput><![CDATA[<term>]]></userinput> element is required to have an <varname>id</varname> attribute, and each <userinput><![CDATA[<xref>]]></userinput> element must have an <varname>refid</varname> attribute. The <classname>ID</classname> and <classname>IDREF</classname> datatypes work according to two rules:</para>
          <itemizedlist>
            <listitem>Each value of the <varname>id</varname> attribute must be unique.</listitem>
            <listitem>Each value of the <varname>refid</varname> attribute must match a value of an <varname>id</varname> attribute elsewhere in the document.</listitem>
          </itemizedlist>
          <para>To round out our example, the <userinput><![CDATA[<seealso>]]></userinput> element contains an attribute of type <classname>IDREFS</classname>. This datatype contains one or more values, each of which must match a value of an ID elsewhere in the document. Multiple values, if present, are separated by whitespace.</para>
          <para>There are some complications of <classname>ID</classname> and related datatypes, but we&apos;ll discuss them later.</para>
          <section sect='sect3'>
            <title>Limitations of <classname>ID</classname>s</title>
            <para>There are some limitations of the ID datatype and the id() function, though:</para>
            <itemizedlist>
              <listitem>If you want to use the <classname>ID</classname> datatype, you have to declare the attributes that use that datatype in your DTD or schema. Unfortunately, if your DTD is defined <emphasis>externally</emphasis> to your XML document, the XML parser isn&apos;t required to read it. If the DTD isn&apos;t read, then the parser has no idea that a given attribute is of type <classname>ID</classname>.</listitem>
              <listitem>You must define the <classname>ID</classname> and <classname>IDREF</classname> relationship in the XML document. It would be nice to have the XML document define the data only, with the relationships between parts of the document defined externally (say, in a stylesheet). That way, if you needed to define a new relationship between parts of the document, you could do it by creating a new stylesheet, and you wouldn&apos;t have to modify your XML document. Requiring the XML document structure to change every time you need to define a new relationship between parts of the document will become unwieldy quickly.</listitem>
              <listitem>An element can have at most one attribute of type <classname>ID</classname>. If you&apos;d like to refer to the same element in more than one way, you can&apos;t use the <function>id()</function> function.</listitem>
              <listitem>Any given <classname>ID</classname> value can be found on at most one element. If you&apos;d like to refer to more than one element with a single value, you can&apos;t use the <function>id()</function> function for that, either.</listitem>
              <listitem>Only one set of <classname>ID</classname>s exists for the entire document. In other words, if you declare the attributes <varname>customer_number</varname>, <varname>part_number</varname>, and <varname>order_number</varname> to be of type <classname>ID</classname>, the value of a customer_number must be unique across all the attributes of type <classname>ID</classname>. It is illegal in this case for a customer_number to be the same as a part_number, even though those attributes might belong to different elements.</listitem>
              <listitem>An <classname>ID</classname> can only be an attribute of an XML element. The only way you can use the <function>id()</function> function to refer to another element is through its attribute of type <classname>ID</classname>. If you want to find another element based on an attribute that isn&apos;t an <classname>ID</classname>, based on the element&apos;s content, based on the element&apos;s children, etc., the <function>id()</function> function is of no use whatsoever.</listitem>
              <listitem>The value of an <classname>ID</classname> must be an XML name. In other words, it can&apos;t contain spaces, it can&apos;t start with a number, and it&apos;s subject to the other restrictions of XML names.<!-- (Section 2.3 of the XML Recommendation defines these restrictions; see http://www.w3.org/TR/REC-xml if you&apos;d like more information.)--></listitem>
            </itemizedlist>
            <para>To get around all of these limitations, XSLT defines the <function>key()</function> function. We&apos;ll discuss that function in the next section.</para>
          </section> <!-- </sect3> -->
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Generating Links with the <function>key()</function> Function</title>
          <para>Each <function>key()</function> function effectively creates an index of the document. You can then use that index to find all elements that have a particular property. Conceptually, <function>key()</function> works like a database index. If you have a database of (U.S. postal) addresses, you might want to index that database by the people&apos;s last names, by the states in which they live, by their Zip Codes, etc. Each index takes a certain amount of time to build, but it saves processing time later. If you want to find all the people who live in the state of Idaho, you can use the index to find all those people directly; you don&apos;t have to search the entire database.</para>
          <section sect='sect3'>
            <title>Defining a <function>key()</function></title>
            <para>You define a <function>key()</function> function with the <userinput><![CDATA[<xsl:key>]]></userinput> element:</para>
            <programlisting><![CDATA[<xsl:key name="language-index" match="defn" use="@language"/>]]></programlisting>
            <para>The key has three elements:</para>
            <itemizedlist>
              <listitem>A <varname>name</varname>, used to refer to this particular key. When you want to find parts of your XML document, use the <varname>name</varname> to indicate the key you want to use.</listitem>
              <listitem>A <varname>match</varname> attribute containing an XPath expression. This specifies what part of the document you want to index. The previous example created an index on all of the <userinput><![CDATA[<defn>]]></userinput> elements. When we call the <function>key()</function> function, it will return a <userinput><![CDATA[<defn>]]></userinput> element. Note: according to Section 12.2 of the XSLT specification, the value of the <varname>match</varname> attribute can&apos;t contain a variable.</listitem>
              <listitem>
                <para>A <varname>use</varname> attribute containing another XPath expression. This attribute is interpreted in the context of the <varname>match</varname> attribute. In other words, the previous <userinput><![CDATA[<xsl:key>]]></userinput> element created an index of all the <userinput><![CDATA[<defn>]]></userinput> elements, and used the language attribute to retrieve them.</para>
                <note>According to Section 12.2 of the XSLT specification, the value of the use attribute can&apos;t contain a variable.</note>
              </listitem>
            </itemizedlist>
          </section> <!-- </sect3> -->
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Generating links in unstructured documents</title>
          <para>So far, all of this section&apos;s examples have been structured nicely. When there was a relationship between two pieces of information, we had an <varname>id</varname> and <varname>refid</varname> pair to match them. What happens if the XML document you&apos;re transforming isn&apos;t written that way? Fortunately, we can use the <function>key()</function> function and a new function, <function>generate-id()</function>, to create structure where there isn&apos;t any.</para>
          <section sect='sect3'>
            <title>The <function>generate-id()</function> Function</title>
            <para>This function takes a <classname>node-set</classname> as its argument, and works as follows:</para>
            <itemizedlist>
              <listitem>
                <para>For a given transformation, every time <function>generate-id()</function> is invoked against a given node, it returns the same <classname>ID</classname>. The <classname>ID</classname> doesn&apos;t change while you&apos;re doing a given transformation. If you run the transformation again, there&apos;s no guarantee <function>generate-id()</function> will generate the same <classname>ID</classname> the second time around. All calls to <function>generate-id()</function> in the second transformation will return the same <classname>ID</classname>, but that <classname>ID</classname> might not be the same as in the first transformation.</para>
                <note>The <function>generate-id()</function> function is not required to check if an <classname>ID</classname> it generates duplicates an <classname>ID</classname> that&apos;s already in the document. In other words, if your document has an attribute of type <classname>ID</classname> with a value of <constant>sdk3829a</constant>, there&apos;s a possibility that an <classname>ID</classname> returned by <function>generate-id()</function> will also be <constant>sdk3829a</constant>. It&apos;s not likely, but be aware that it could happen.</note>
              </listitem>
              <listitem>If you invoke <function>generate-id()</function> against two different nodes, the two generated IDs will be different.</listitem>
              <listitem>Given a node-set, <function>generate-id()</function> returns an <classname>ID</classname> for the node in the node-set that occurs first in document order.</listitem>
              <listitem>If the node-set you pass to the function is empty (you invoke <function>generate-id(fleeber)</function>, and there are no <tag><![CDATA[<fleeber>]]></tag> elements in the current context), <function>generate-id()</function> returns an empty string.</listitem>
              <listitem>If no node-set is passed in (you invoke <function>generate-id()</function>), the function generates an <classname>ID</classname> for the context node.</listitem>
            </itemizedlist>
          </section> <!-- </sect3> -->
        </section> <!-- </sect2> -->

      </section> <!-- </sect1> -->
      
      <section>
        <title>Splitting Up Output Into Multiple Files</title>
        <para>A classic XML transformation task is the splitting of a large source document into multiple result documents. For example, when preparing a large book for web delivery, you probably want to split it up so that each chapter gets converted to a separate HTML file, because the entire book would be too large to send to a web browser.</para>
        <para>The XSLT 1.0 specification has no provisions for splitting up output into multiple documents. This ability is so useful, however, that nearly every XSLT processor offers an extension element that lets you do this.</para>
        <para>Instead of picking one XSLT processor&apos;s syntax for splitting up output documents, or trying to cover all of them, this section shows the syntax for doing so with the xsl:document element described in the W3C &apos;s XSLT 1.1 Working Draft. Although the W3C XSL Working Group eventually decided to discontinue work on XSLT 1.1 in order to fully devote their energy to XSLT 2.0, XSLT 1.1&apos;s xsl:document element is based on several existing implementations of this potential XSLT feature and will provide a model for future implementations until a XSLT 2.0 Recommendation eventually makes the xsl:document syntax official.</para>
        <para>The following stylesheet converts our document into a set of HTML files:</para>
        <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="xml" omit-xml-declaration="yes"/>
  <xsl:template match="chapter">
    <xsl:variable name="chapNum"><xsl:number/></xsl:variable>
    <xsl:document href="chap{$chapNum}.html">
      <html><body>
        <xsl:apply-templates/>
      </body></html>
    </xsl:document>
  </xsl:template>
  <xsl:template match="chapter/title">
    <h1><xsl:apply-templates/></h1>
  </xsl:template>
  <xsl:template match="para">
    <p><xsl:apply-templates/></p>
  </xsl:template>
</xsl:stylesheet>]]></programlisting>

        <section sect='sect2'>
          <title>The &lt;xsl:document Element</title>
          
        </section> <!-- </sect2> -->
      </section> <!-- </sect1> -->
      
      <section>
        <title>Program Control</title>
        <para>You can go through a set of nodes one by one, iterating over those nodes, by applying templates to them with xsl:apply–templates. You can also iterate over a set of nodes using xsl:for–each. As a result, the content of the xsl:for–each is processed with each of the nodes as the current node. With both instructions, the nodes are usually processed in document order, but you can change the order using xsl:sort.</para>
        
        <section sect='sect2'>
          <title>xsl:if</title>
          <para>It relies on a test attribute.</para>
          <programlisting><![CDATA[<xsl:if test="not(@author='anonymous')">
  Book written by <xsl:value-of select='@author'/>
</xsl:if>]]></programlisting>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'> <title>xsl:choose</title>
          <para>XSLT&apos;s xsl:choose instruction is similar to xsl:if but with a few key differences:</para>
          <itemizedlist>
            <listitem>One xsl:choose element can test for more than one condition and add different nodes to the result tree based on which condition is true.</listitem>
            <listitem>An xsl:choose element can have a default template to add to the result tree if none of the conditions are true. (Compare to xsl:if , which has no equivalent of an "else" condition.)</listitem>
            <listitem>The xsl:choose element has specific subelements necessary for it to work. You can put any well-formed elements you want inside of an xsl:if element.</listitem>
          </itemizedlist>
          <para>When an XSLT processor sees an xsl:choose element, it checks the test attribute value of each xsl:when element that it finds as a child of the xsl:choose element. When it finds a true test expression, it adds that xsl:when element&apos;s contents to the result tree and then skips the rest of the xsl:choose ele- ment. If it finds no xsl:when element with a true test expression, it checks for the optional xsl:otherwise element at the end of the xsl:choose element. If it finds one, it adds its contents to the result tree.</para>
          <para>An example:</para>
          <programlisting><![CDATA[<xsl:template match="poem">
  <xsl:choose>
    <xsl:when test="@year &lt; 1638">
      The poem is one of Milton&apos; earlier works.
    </xsl:when>
    <xsl:when test="@year &lt; 1650">
      The poem is from Milton&apos; middle period.
    </xsl:when>
    <xsl:when test="@year &lt; 1668">
      The poem is one of Milton&apos; later works.
    </xsl:when>
    <xsl:when test="@year &lt; 1675">
      The poem is one of Milton&apos; last works.
    </xsl:when>
    <xsl:otherwise>
      The poem was written after Milton&apos; death.
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>]]></programlisting>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Curly braces</title>
          <para>For some stylesheet attribute values, curly braces tell the XSLT processor to evaluate the expression between them and to replace the curly braces and their contents with the result of that evaluation. The following stylesheet demonstrates the effect of the curly braces:</para>
          <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="xml" omit-xml-declaration="yes"/>
<xsl:template match="/">
  <test>
    <xsl:variable name="myVar">10</xsl:variable>
      A. <atvtest at1="hello world"/>
      B. <atvtest at1="3+2+$myVar"/>
      C. <atvtest at1="{3+2+$myVar}"/>
      D. <atvtest at1="yo, substring('hello world',7)"/>
      E. <atvtest at1="yo, {substring('hello world',7)}"/>
    </test>
  </xsl:template>
</xsl:stylesheet>]]></programlisting>
<para>References to variables inside of curly braces get converted to the value they represent, but when they have no curly braces around them, the reference to the variable is treated as literal text.</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Iteration and Loops</title>
          <para>Programming languages use loops to execute an action or series of actions several times. After performing the last action of such a series, the program "loops" back up to the first one. The program may repeat these actions a predetermined number of times or it may repeat the actions until a specified condition is true.</para>
          <itemizedlist>
            <listitem>The xsl:for-each instruction lets you perform the same group of instructions on a given set of nodes.</listitem>
            <listitem>By having a named template call itself recursively with parameters, you can execute a series of instructions for a fixed number of times or until a given condition is true. The technique may not be familiar to programmers accustomed to the "for" and "while" loops available in languages such as Java, C, and C++, but it can perform the same tasks.</listitem>
          </itemizedlist>
          <para>Here is some code to list all the figures in a chapter before it starts:</para>
          <programlisting><![CDATA[<xsl:template match="chapter">
  Pictures:
  <xsl:for-each select="descendant::figure">
    <xsl:value-of select="title"/><xsl:text>
    </xsl:text>
  </xsl:for-each>
  Chapter:<xsl:apply-templates/>
</xsl:template>]]></programlisting>

          <para>Another advantage of acting on a set of nodes with an xsl:for-each element instead of with an xsl:template element lies in a limitation to template rules that XSLT novices often don&apos;t notice: while it may appear that you can use XPath expressions in an xsl:template element&apos;s match attribute, you&apos;re actually limited to the subset of XPath expressions known as patterns. In the xsl:for-each element&apos;s select attribute, however, you have the full power of XPath expressions available.</para>
          <para>For example, you can&apos;t use the ancestor axis specifier in match patterns, but you can do so in an xsl:for-each element&apos;s select attribute. The following template uses the ancestor axis specifier to list the names of all a title element&apos;s ancestors:</para>
          <programlisting><![CDATA[<xsl:template match="title">
  <xsl:text>title ancestors:</xsl:text>
  <xsl:for-each select="ancestor::*">
    <xsl:value-of select="name()"/>
    <!-- Output a comma if it&apos; not the last one in the node set that for-each is going through. -->
    <xsl:if test="position() != last()">
      <xsl:text>,</xsl:text>
    </xsl:if>
  </xsl:for-each>
  </xsl:template>
<xsl:template match="para"/>]]></programlisting>

<para>To execute a piece of code a specific number of times you have to use recursion, as in:</para>
<programlisting><![CDATA[<xsl:template name="hyphens">
  <xsl:param name="howMany">1</xsl:param>
  <xsl:if test="$howMany &gt; 0">
    <!-- Add 1 hyphen to result tree. -->
    <xsl:text>-</xsl:text>
    <!-- Print remaining ($howMany - 1) hyphens. -->
    <xsl:call-template name="hyphens">
      <xsl:with-param name="howMany" select="$howMany - 1"/>
    </xsl:call-template>
  </xsl:if>
</xsl:template>

<xsl:template match="sample">
  Print 1 hyphen:
  <xsl:call-template name="hyphens"/>
  Print 3 hyphens:
  <xsl:call-template name="hyphens">
    <xsl:with-param name="howMany" select="3"/>
  </xsl:call-template>
</xsl:template>]]></programlisting>
        </section> <!-- </sect2> -->
        
      </section> <!-- </sect1> -->
    
    <section>
      <title>Generating Output</title>
      <para>To create a simple text string we use <sgmltag>xsl:text</sgmltag> when we need complete control over whitespace or when we&apos;re creating text output instead of a marked-up document.</para>
      
      <section sect='sect2' xml:id='xslt_space'>
        <title>Handling Space Through XSLT</title>
        <para>You probably want to <emphasis>normalize</emphasis> space. Use <userinput>normalize-space()</userinput>.</para>
        <section sect='sect3'>
          <title>Eliminating Redundant Space</title>
          <para>Use <userinput>normalize-space()</userinput>, which is a function that removes extra whitespace from its argument string. Its output is a string with whitespace removed as follows:</para>
          <itemizedlist>
            <listitem>All leading whitespace is removed.</listitem>
            <listitem>All trailing whitespace is removed.</listitem>
            <listitem>Within the string, any sequence of whitespace characters is replaced with a single space</listitem>
          </itemizedlist>
          <para>A simple example:</para>
          <programlisting><![CDATA[<xsl:template match="text()">
  <xsl:value-of select="normalize-space()"/>
</xsl:template>]]></programlisting>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Preserving and Stripping Space</title>
          <para>The <userinput><![CDATA[<xsl:preserve-space>]]></userinput> element is used to define the elements for which white space should be preserved when no other characters are used. The <userinput><![CDATA[<xsl:strip-space>]]></userinput> element is used to define the elements for which white space should be removed.</para>
          <note>Preserving white space is the default setting, so using the <userinput><![CDATA[<xsl:preserve-space>]]></userinput> element is only necessary if  the <userinput><![CDATA[<xsl:strip-space>]]></userinput> element is used.</note>
          <note>Note: The <userinput><![CDATA[<xsl:preserve-space>]]></userinput> element and the <userinput><![CDATA[<xsl:strip-space>]]></userinput> element are top-level elements.</note>
          <warning>The two elements are only relevant for whitespace-only text nodes. If just one non-whitespace character is present, the two xslt elements are irrelevant.</warning>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>The <sgmltag>number</sgmltag> element</title>
      <para>The <sgmltag>xsl:number</sgmltag> element is used to number the parts of a document or to format a numeric value. In general, <sgmltag>xsl:number</sgmltag> counts something.</para>
      <programlisting><![CDATA[<xsl:for-each select="cars/manufacturer">
  <p>
    <xsl:number format="1. "/>
    <xsl:value-of select="@name"/>
  </p>
</xsl:for-each>]]></programlisting>
      <para>or:</para>
      <programlisting><![CDATA[<xsl:for-each select="cars/manufacturer">
  <p>
    <xsl:text>Cars produced by </xsl:text>
    <xsl:value-of select="@name"/>
    <xsl:text>: </xsl:text>
    <xsl:number value="count(car)" format="01"/>
  </p>
</xsl:for-each>]]></programlisting>
<para>or setting the level attribute to "multiple":</para>
<programlisting><![CDATA[<xsl:for-each select="book/chapter">
  <xsl:number count="chapter" format="1. "/>
  <xsl:value-of select="title"/>
  <xsl:text>&#xA;</xsl:text>
  <xsl:for-each select="sect1">
    <xsl:number count="chapter|sect1" level="multiple" format="1.1. "/>
    <xsl:value-of select="."/>
    <xsl:text>&#xA;</xsl:text>
  </xsl:for-each>
</xsl:for-each>]]></programlisting>
<para>XSLT 2.0 also adds the ordinal attribute; ordinal="yes" combined with format="1" generates 1st , 2nd , 3rd , while ordinal="yes" combined with format="Ww" generates First , Second , Third . The ordinal attribute has many different options that depend on the lang attribute and the format attribute; as you would expect, each XSLT 2.0 processor supports a different set of languages and options for the ordinal attribute. See your processor&apos;s documentation for information on what capabilities are available.</para>
</section> <!-- </sect2> -->

<section sect='sect2'>
  <title>The <sgmltag>sort</sgmltag> element</title>
  <programlisting><![CDATA[<xsl:for-each select="firstterm">
<xsl:sort select="."/>]]></programlisting>
</section> <!-- </sect2> -->

<section sect='sect2'>
  <title>The <sgmltag>value-of</sgmltag> element</title>
      <para>To output the value of something from the XML source we use <sgmltag>xsl:value-of select="..."</sgmltag>.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Using <sgmltag>xsl:copy</sgmltag> and <sgmltag>xsl:copy-of</sgmltag></title>
        <para>As you transform your XML input document into something else, you&apos;ll often want to just copy a given element to the output document:</para>
        <variablelist>
          <varlistentry>
            <term>xsl:copy-of</term>
            <listitem><para>does a <emphasis>deep copy</emphasis> of a node, so the root node and all of its children are copied to the output. If any of the root node&apos;s descendants are element nodes with attributes, the attributes are copied as well. (Remember, an element&apos;s attributes aren&apos;t considered children.)</para></listitem>
          </varlistentry>
          <varlistentry>
            <term>xsl:copy</term>
            <listitem><para>Using <sgmltag>xsl:copy</sgmltag> to copy our document requires using the <sgmltag>xsl:for-each</sgmltag> element to copy all the attributes of each element we&apos;re copying. It forces you do to most of the work yourself, but you have complete control over what exactly gets copied.</para></listitem>
          </varlistentry>
        </variablelist>
        <para>To really understand the power of xsl:copy-of, let&apos;s compare it to the xsl:value-of instruction. Both help you grab an arbitrary part of the source tree while the XSLT processor is processing another part of the tree. The xsl:value-of element doesn&apos;t add a copy of the grabbed node to the result tree, but a text node with a string representation of it. When xsl:value-of is told to convert a set of nodes to a string, it only gets the first one in that set, so it&apos;s only useful for getting one node&apos;s value at a time. The xsl:copy-of element, on the other hand, gets a whole node set and all of the nodes&apos; children.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Handling space</title>
        <para>Use <sgmltag>xsl:preserve-space elements="programlisting literallayout"/</sgmltag> or 
          <sgmltag>xsl:strip-space elements="para title"/</sgmltag>.</para>
        <para>To clean up the whitespace, we can use the <function>normalize-space( )</function> function. It does three things:</para>
        <itemizedlist>
          <listitem>it removes all leading spaces,</listitem>
          <listitem>it removes all trailing spaces, and</listitem>
          <listitem>it replaces any group of consecutive whitespace characters with a single space.</listitem>
        </itemizedlist>
        <programlisting><![CDATA[<xsl:template match="text()">
  <xsl:value-of select="normalize-space()"/>
</xsl:template>]]></programlisting>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Grouping Nodes</title>
        <para>When grouping nodes, we sort things to get them into a certain order, and then we group all items that have the same value for the sort key (or keys). We&apos;ll use xsl:sort for this grouping, and then use variables or functions such as key( ) or generate-id( ) to finish the job.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='xslt_translate'>
        <title>Translating Characters with <function>string xsl:translate(<varname>s1</varname>, <varname>s2</varname>, <varname>s3</varname>)</function> function</title>
        <para>This function returns a string where all characters in <varname>s1</varname> are returned as such save for those in <varname>s2</varname>. Those in <varname>s2</varname> are returned as in <varname>s3</varname>. <function>translate()</function> will not copy characters in the input string that are in the <quote>from</quote> string but do not have a corresponding character in the <quote>to</quote> string.</para>
        <para>If you want to strip certain characters (e.g., whitespace) from a string, you might use <function>translate()</function> with an empty replace string. For example, the following code can strip whitespace from a string:</para>
        <programlisting><![CDATA[translate($input," &#x9;&#xa;&xd;", "")]]></programlisting>
        <bridgehead>Removing All But a Specific Set of Characters</bridgehead>
        <para>You can also use <function>translate()</function> to remove all but a specific set of characters from a string. For example, the following code removes all non-numeric characters from a string:</para>
        <programlisting><![CDATA[translate($string, 
          translate($string,'0123456789',''),'')]]></programlisting>
        <para>The inner <function>translate()</function> removes all characters of interest (e.g., numbers) to obtain a from string for the outer <function>translate()</function>, which removes these non-numeric characters from the original string.</para>
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    <section>
      <title>Variables, Parameters, and Keys</title>
      <section sect='sect2'>
        <title>Variables</title>
        <para>Variables are declared with xsl:variable. The two types of variables are local variables, which are defined within templates and only accessible within that template, and global variables, which are defined at the top level of the stylesheet and are accessible anywhere. A local variable cannot have its value reassigned, but global variables can be overridden by local variables.</para>
        <para>Variables can be set in two ways. First, they can be set through the select attribute. Second, they can be set through content of xsl:variable. Setting a variable through its content always sets it to a result tree fragment.</para>
        <para>The select attribute can set a variable to any value type.</para>
        <!-- smallskip -->
        <para>A variable in XSLT has more in common with a variable in algebra than with a variable in a typical programming language. A variable is a name that represents a value and, within a particular application of a template, it will never represent any other value: it can&apos;t be changed. XSLT variables actually have a lot more in common with something known as "constants" in many programming languages, and variables are used for a similar purpose as constants.</para>
        <para>The xsl:variable instruction creates a variable. Its name attribute identifies the variable&apos;s name. The value can be specified either as the xsl:variable element&apos;s contents (like the "10pt" in the example) or as the value of an optional select attribute in the xsl:variable element&apos;s start-tag.</para>
        <programlisting><![CDATA[<xsl:variable name="HeaderTextSize">20pt</xsl:variable>
<xsl:template match="title">
  <b><font size="{$HeaderTextSize}">
    <xsl:apply-templates/>
  </font></b><br/>
</xsl:template>]]></programlisting>
<para>Alternatively, you can use the select attribute to set the value of a variable:</para>
<programlisting><![CDATA[<xsl:variable name="baseFontSize" select="12"/>
<xsl:variable name="HeaderTextSize" select="concat($baseFontSize+8,'pt')"/>]]></programlisting>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Parameters</title>
        <para>Parameters are defined by xsl:param and work in much the same way as variables, except that the value of a parameter may be overridden by having another value passed to it. The value defined by the select attribute or content of xsl:param is the default value of the parameter, and is used when no other value is passed to it from outside.</para>
        <para>Parameters that are defined within templates must occur before anything else within the template. These local parameters can be overridden when the template is applied or called using xsl:with–param within xsl:apply–templates or xsl:call–template. Parameters are passed by name — the name attribute of xsl:with–param indicates the parameter that it defines the value of. As with variables and default parameter values, the xsl:with–param element can set a value either through the select attribute or through its content. Parameters that are defined at the top level of the stylesheet are global parameters. The XSLT Recommendation doesn&apos;t say anything about how global parameters are given values — each XSLT processor sets global parameters in a different way.</para>
        <!-- medskip -->
        <para>The xsl:param instruction is just like xsl:variable , with one important difference: its value is only treated as a default value and can be overridden at runtime.</para>
        <para>How do you pass the alternative value for the parameter to the stylesheet? The official XSLT spec doesn&apos;t tell us!</para>
        <para>How we pass a new value to a template rule&apos;s local parameter isn&apos;t quite the open question that it is with global parameters, because XSLT provides the xsl:with-param instruction for just this purpose. You can use this element in an xsl:apply-templates element to assign a new value to a parameter in a template being applied, but it&apos;s more commonly used when calling a named template with the xsl:call-template instruction.</para>
        <programlisting><![CDATA[<xsl:template name="titles">
  <xsl:param name="headerElement">h4</xsl:param>
  <xsl:element name="{$headerElement}">
    <xsl:apply-templates/>
  </xsl:element>
</xsl:template>

<xsl:template match="chapter/title">
  <xsl:call-template name="titles">
    <xsl:with-param name="headerElement">h1</xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template match="sect1/title">
  <xsl:call-template name="titles">
    <xsl:with-param name="headerElement" select="'h2'"/>
  </xsl:call-template>
</xsl:template>

<xsl:template match="para">
  <p><xsl:apply-templates/></p>
</xsl:template>

<xsl:template match="chapter">
  <html><body><xsl:apply-templates/></body></html>
</xsl:template>]]></programlisting>
</section> <!-- </sect2> -->

      <section sect='sect2'>
        <title>Declaring Keys To Perform Lookups</title>
        <para>Keys create a hashtable that enables you to access nodes quickly. They are defined by xsl:key at the top level of the stylesheet. When a key is created, the processor works through the current document, finding all the nodes that match the pattern given in the match attribute of the xsl:key. Each of these nodes is stored in a hashtable and indexed by one or more key values. The key values are identified by evaluating the expression held in the use attribute of the xsl:key for the node as a string. However, if this expression returns a node set, the node is indexed by the string values of each of the nodes, rather than by just the first node in the node set. Using keys can greatly add to the efficiency of your stylesheet. They are also a vital component of some methods for grouping.</para>
        <!-- smallskip -->
        <para>When you need to look up values based on some other value—especially when your stylesheet needs to do so a lot—XSLT&apos;s xsl:key instruction and <function>key()</function> function work together to make it easy. They can also make it fast.</para>
        <para>Given:</para>
        <programlisting><![CDATA[<shirts>
  <colors>
    <color cid="c1">yellow</color>
    <color cid="c2">black</color>
    <color cid="c3">red</color>
    <color cid="c4">blue</color>
    <color cid="c5">purple</color>
    <color cid="c6">white</color>
    <color cid="c7">orange</color>
    <color cid="c7">green</color>
  </colors>
  
  <shirt colorCode="c4">oxford button-down</shirt>
  <shirt colorCode="c1">poly blend, straight collar</shirt>
  <shirt colorCode="c6">monogrammed, tab collar</shirt>
</shirts>]]></programlisting>
<para>And we want to produce:</para>
<programlisting><![CDATA[blue oxford button-down
yellow poly blend, straight collar
white monogrammed, tab collar]]></programlisting>
<para>So we write a stylesheet like:</para>
<programlisting><![CDATA[<xsl:key name="colorNumKey" match="color" use="@cid"/>
<xsl:template match="colors"/>
<xsl:template match="shirt">
  <xsl:value-of select="key('colorNumKey',@colorCode)"/>
  <xsl:text> </xsl:text><xsl:apply-templates/>
</xsl:template>]]></programlisting>
<para>The xsl:key element has three attributes:</para>
      <itemizedlist>
        <listitem>The name attribute holds the name of the lookup key. The <function>key()</function> function uses this name to identify what kind of lookup it&apos;s doing.</listitem>
        <listitem>The match attribute holds a match pattern identifying the collection of nodes where the lookups will take place. In the example, the color elements are this collection. The fact that they are enclosed by a colors element gives the source document a little more structure, but it&apos;s not necessary for the key lookups to work. And</listitem>
        <listitem>The use attribute specifies the part or parts of the match attribute&apos;s collection of nodes that will be used to find the appropriate node—in other words, the attribute specifies the index of the lookup. In the example, this index is the cid attribute of the color elements, because a lookup will pass along a color ID string to look up the corresponding color.</listitem>
      </itemizedlist>
      <para>No doubt these color elements would fit nicely into a table, but the beauty of doing so with XSLT (and XML) is that the elements named by your match attribute can have much more complex structures than any relational database table row. You have the full power of XML available, and the ability to use an XPath expression in the use attribute lets you identify any part of that structure you want to use as the lookup key.</para>
      <para>The <function>key()</function> function performs the actual lookup. This function takes a value, searches through the keys for one whose use value equals the one it&apos;s looking for, and returns the element or elements that have that key value.</para>
      
      </section> <!-- </sect2> -->
        
    </section> <!-- </sect1> -->
    
    <section>
      <title>XSLT and Entities</title>
      <para>An example of <emphasis>declaring</emphasis> and <emphasis>using</emphasis> an <link linkend='xml_entities'>entity</link>:</para>
      <programlisting><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE xsl:stylesheet [<!ENTITY netsi "netsi1964@gmail.com">]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl">

  <xsl:output method="xml" indent="no"/>

  <xsl:template match="/">
    <h1>&amp;netsi; bliver til "&netsi;"</h1>
  </xsl:template>
</xsl:stylesheet>]]></programlisting>
      <para>...</para>
    </section> <!-- </sect1> -->
    
    <section>
      <title>XSL Recipes</title>
      
      <section sect='sect2'>
        <title>Short Path Snippets</title>
        
        <para>Select all chapters whose <tag>title</tag> starts with the string <quote>C++</quote>:</para>
        <programlisting><![CDATA[<xsl:apply-templates select="chapter[starts-with(title, 'C++')]" />]]></programlisting>
        
        <para>To select all <tag>chapter</tag> elements but the third one:</para>
        <programlisting><![CDATA[<xsl:apply-templates select="Channel[position() &lt;= 3  or position() >= 5]" />]]></programlisting>
        
        <para>To select all <tag>chapter</tag> elements between the third and the ninth:</para>
        <programlisting><![CDATA[<xsl:apply-templates select="Channel[position() >= 3  and position() &lt;= 9]" />]]></programlisting>
        <para>or just:</para>
        <programlisting><![CDATA[<xsl:apply-templates select="Channel[position() = (3 to 9)]" />]]></programlisting>
          
        
        <para>The <function>contains()</function> function, like all other functions in XPath, is case-sensitive. You can do a case-insensitive search for a word within a string by making sure both strings use the same case throughout. You can translate elements into lowercase using the <function>lower-case()</function> function:</para>
        <programlisting><![CDATA[contains(lower-case(title), "HTML")]]></programlisting>
        
        <para>...</para>
        <programlisting><![CDATA[<xsl:analyze-string select="poem" regex="\n">
  <xsl:matching-substring>
    <br />
  </xsl:matching-substring>
  <xsl:non-matching-substring>
    <xsl:value-of select="normalize-space(.)" />
  </xsl:non-matching-substring>
</xsl:analyze-string>]]></programlisting>
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Copying all Elements with either <tag>copy</tag> or <tag>copy-of</tag></title>
        <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="xml"/>
  <!-- Copy all elements, attributes, and text nodes -->
  <xsl:template match="*|@*|text()|comment()">
    <xsl:copy>
      <xsl:apply-templates select="*|@*|text()|comment()"/>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>]]></programlisting>

        <para>Much the same, but using <function>copy-of</function>:</para>
<programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="xml"/>

  <!-- Copy all the other elements and attributes, and text nodes -->
  <xsl:template match="*|@*|text()|comment()">
     <xsl:copy-of select="."/>
  </xsl:template>
</xsl:stylesheet>]]></programlisting>

<para>Not very useful per se, this code is included in other stylesheets.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Excluding Elements Selectively</title>
        <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="xml"/>
<xsl:template match="*[@class='private']"> <xsl:comment>private</xsl:comment> </xsl:template>
<!-- Copy all the other elements and attributes, and text nodes -->
<xsl:template match="*|@*|text()">
  <xsl:copy>
    <xsl:apply-templates select="*|@*|text()"/>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>]]></programlisting>
</section> <!-- </sect2> -->

      
      <section sect='sect2'>
        <title>Hiding Elements Selectively</title>
        <para>You may want to exclude all elements whose <varname>class</varname> attribule has value <literal>private</literal>.</para>
        <programlisting><![CDATA[<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="xml"/>
 <xsl:template match="*[@class='private']">
    <xsl:comment>
      <xsl:copy-of select="self::*"/>
    </xsl:comment>
  </xsl:template>
  <!-- Copy all the other elements and attributes, and text nodes -->
  <xsl:template match="*|@*|text()">
    <xsl:copy>
      <xsl:apply-templates select="*|@*|text()"/>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>]]></programlisting>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Numbering Chapters Automatically</title>
        <para>To number the title of each chapter from 1. onwards, add these templates to the copy all template. Notice how the first, short template inhibit ordinary handling of chapter titles.</para>
        <programlisting><![CDATA[<xsl:template match="chapter/title"/>
<xsl:template match="chapter">
  <chapter>
    <title>
      <xsl:number format="1. "/> <xsl:value-of select="title" />
    </title>
    <xsl:apply-templates />
  </chapter>
</xsl:template>
]]></programlisting>
      </section> <!-- </sect2> -->
      
            <section sect='sect2'>
        <title>Numbering Chapters and Sections (2 Levels Thereof) Automatically</title>
        <para>Add these templates to the copy all template and study the code, too:</para>
        <programlisting><![CDATA[<xsl:template match="chapter/title"/>
<xsl:template match="chapter">
  <chapter>
    <title>
      <xsl:number format="1. "/> <xsl:value-of select="title" />
    </title>
    <xsl:apply-templates />
  </chapter>
</xsl:template>

<xsl:template match="sect1/title"/>
<xsl:template match="sect1">
  <section>
    <title>
      <xsl:number format="1. " level="multiple" count="chapter|sect1"/>
      <xsl:value-of select="title" />
    </title>
    <xsl:apply-templates/>
  </section> <!-- </sect1> -->
</xsl:template>

<xsl:template match="sect2/title"/>
<xsl:template match="sect2">
  <section sect='sect2'>
    <title>
      <xsl:number format="1. " level="multiple" count="chapter|sect1|sect2"/>
      <xsl:value-of select="title" />
    </title>
    <xsl:apply-templates/>
  </section> <!-- </sect2> -->
</xsl:template>]]></programlisting>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Sorting (a VariableList by Term)</title>
        <para>A DocBook variablelist holds varlistentry&apos; each holding a term element and a listitem element. Notice how <quote>varlistentry</quote> is not mentioned in the code. (Whenever the sorting key is numeric, add <userinput>data-type="number"</userinput> in the sort opening label.)</para>
        <programlisting><![CDATA[<xsl:template match="variablelist">
  <variablelist>
  <xsl:apply-templates>
    <xsl:sort select="term" />
  </xsl:apply-templates>
  </variablelist>
</xsl:template>]]></programlisting>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Generating HTML from XML</title>
        <programlisting><![CDATA[<?xml version='1.0'?>
<xsl:stylesheet version='1.0' xmlns:xsl='http://www.w3.org/1999/XSL/Transform'>
<xsl:output method='html'
  indent='yes'
  doctype-public='-//W3C//DTD HTML 3.2 Final//EN'/>
<xsl:template match='/'>
  <HTML>
    <HEAD>
      <TITLE>My Document Title</TITLE>
    </HEAD>
    <BODY>
      <xsl:apply-templates/>
    </BODY>
  </HTML>
</xsl:template>]]></programlisting>
<para>And so on...</para>
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> --> <!-- end of "XSL Recipes" -->
    
    <section xml:id='xml_to_tex'>
      <title>Converting From (Docbook) XML to TeX</title>
      <para>We shall be using file <filename>book.xml</filename> to test our stylesheets on.</para>
      <programlisting>
      <xi:include href="Electric_files/XSLT_code/book.xml" parse="text"  xmlns:xi="http://www.w3.org/2001/XInclude">
        <xi:fallback/>
      </xi:include>
    </programlisting>
      <para>We might start from a trivial stylesheet file (<filename>default.xsl</filename>) that just copies all the text nodes:</para>
      <programlisting>
      <xi:include href="Electric_files/XSLT_code/default.xsl" parse="text"  xmlns:xi="http://www.w3.org/2001/XInclude">
        <xi:fallback/>
      </xi:include>
    </programlisting>
    
    <section sect='sect2'>
      <title>Transforming Entities and Non-Ascii Characters with Sed</title>
      <para>We want to transform &apos;á&apos; to &apos;\'a&apos; and so on. We need a <application>sed</application> script with lines like <userinput>s/á/\'a/g</userinput> and so on. Here is our <application>sed</application> script for your eyes&apos; delight:</para>
      <programlisting>
      <xi:include href="Electric_files/XSLT_code/utf8-to-TeX.sed" parse="text"  xmlns:xi="http://www.w3.org/2001/XInclude">
        <xi:fallback/>
      </xi:include>
    </programlisting>
      
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>Removing Redundant Space</title>
      <para>Next, we would add templates that deal with mark up. We want to remove meaningless whitespace with redundant whitespace to be removed through <userinput linkend='xslt_space'>normalize-space()</userinput>, as well as printing titles in bold fonts, emphasis in italic, etc. Last, the output must end with <userinput>\bye</userinput>:</para>
      <programlisting>
        <xi:include href="Electric_files/XSLT_code/xml_to_tex/xml_to_tex.01.xsl" parse="text"  xmlns:xi="http://www.w3.org/2001/XInclude">
          <xi:fallback/>
        </xi:include>
      </programlisting>
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>Numbering Chapters Headers</title>
      <para>Besides numbering chapters and headers, the <filename>xml_to_tex.02.xsl</filename> stylesheet also:</para>
      <itemizedlist>
        <listitem>handles several inline and block elements,</listitem>
        <listitem>handles mathematical formulas where the TeX code has been included inside a <userinput>alt</userinput> element: <classname>equation</classname>, <classname>inlineequation</classname>, and <classname>informalequation</classname>, although equation numbering has not been implemented yet.</listitem>
      </itemizedlist>
      <programlisting>
      <xi:include href="Electric_files/XSLT_code/xml_to_tex/xml_to_tex.02.xsl" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude">
        <xi:fallback/>
      </xi:include>
    </programlisting>
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>Handling Mathematical Formulas</title>
      <para>This is actually done by <filename>xml_to_tex.mathematical.xsl</filename>, which presumably is included by <filename>Electric_files/XSLT_code/xml_to_tex.02.xsl</filename>. Here is a listing of <filename>xml_to_tex.mathematical.xsl</filename></para>
      <programlisting><![CDATA[<xi:include href="Electric_files/XSLT_code/xml_to_tex/xml_to_tex.mathematical.xsl" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude">
          <xi:fallback/>
        </xi:include>]]></programlisting>
    </section> <!-- </sect2> -->
    
    <section sect='sect2'>
      <title>The Trouble with Backslashes and Other Characters (&apos;^&apos;, &apos;_&apos;, &apos;$&apos;, &apos;#&apos;, &apos;&amp;&apos;, &apos;%&apos;, &apos;~&apos;, &apos;{&apos;, &apos;}&apos;...)</title>
      <para>Now, if we translate all the backslashes <quote>\</quote> in the original to the sequence <quote>\backslash</quote>, then we cannot supply TeX code in, say, mathematical elements, or other TeX code containing long TeX commands, such as <quote>\obeylines</quote>.</para>
      <note>This problem can be generalized to the other TeX specific characters: &apos;^&apos;, &apos;_&apos;, &apos;$&apos;, &apos;#&apos;, &apos;&amp;&apos;...</note>
      <para>We need a method to prevent translating backslashes in xml whenever they are in a given element.</para>
      <para>One solution using existing tools is to translate all backslash characters inside an <classname>alt</classname> elements to another, non-TeX character, such as <quote>€</quote>, then translating it back to a backslash. Use function <function linkend='xslt_translate'>translate(<varname>s</varname>, <varname>s<subscript>origin</subscript></varname>, <varname>s<subscript>dest</subscript></varname>)</function>.</para>
      <note>We must choose a stand-in character that is neither translated by our sed script nor is found in TeX mathematical formulas. Therefore, forget accented (&apos;á&apos;, &apos;ñ&apos; etc), &apos;¿&apos; etc. We need something absolutely <emphasis>unused</emphasis>. On a linux machine I use handy <userinput>Alt Gr</userinput> characters: &apos;€&apos;, &apos;ø&apos;, &apos;þ&apos;, &apos;ŧ&apos;, &apos;ł&apos;, etc.</note>
      <para>Here is a file that realizes this:</para>
      <programlisting>
        <xi:include href="Electric_files/XSLT_code/borrowed_or_pro/escape_backslash_in_alt.xsl" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude">
          <xi:fallback/>
        </xi:include>
      </programlisting>
      <para>Next, we could write a reverse transformation file (<filename>unescape_backslash_in_alt</filename>) where <userinput>&apos;\&apos;</userinput> and <userinput>&apos;€&apos;</userinput> are exchanged.</para>
      <para>The procedure then is:</para>
      <itemizedlist>
        <listitem>change all backslashes in <classname>alt</classname> sections to an un-TeX character, such as &apos;€&apos;</listitem>
        <listitem>translate all characters through <application>sed</application> and <filename>utf8-to-TeX.sed</filename></listitem>
        <listitem>revert all backslash substitutions in <classname>alt</classname> sections to &apos;\&apos;</listitem>
        <listitem>transform to TeX through stylesheet <filename>xml_to_tex.02.xsl</filename> or some higher version</listitem>
        <listitem>process your result through application <application>tex</application> or some other means</listitem>
      </itemizedlist>
    </section> <!-- </sect2> --> <!-- end of "The Trouble with Backslashes and Other Meaningful Characters" -->
    
    <section sect='sect2'>
      <title>Handling Lists, aka <classname>itemizedlist</classname>&apos;'&apos;s*</title>
      <para>This is a primitive template to handle lists:</para>
      <programlisting><![CDATA[<xsl:template match="listitem">
    $\bullet$ <xsl:apply-templates/>
    
  </xsl:template>]]></programlisting>
      <para>The problem remains of <quote>\bullet</quote> getting mangled to <quote>\backslash bullet</quote> by the sed script. One solution is for the XSLT transformation to use an euro sign instead of a backslash, i.e. <quote>€bullet</quote>, and then have another sed script to translate all euro signs back to slashes.</para>
      <para>Actually, we should do the same for all TeX commands introduced by the XSLT translation. In reverting the backslash substitutions, we no longer select for text in <classname>alt</classname> elements. The procedure now comprises the following steps:</para>
      <itemizedlist>
        <listitem>change all backslashes in <classname>alt</classname> sections to an un-TeX character, such as &apos;€&apos;</listitem>
        <listitem>translate all characters through <application>sed</application> and <filename>utf8-to-TeX.sed</filename></listitem>
        <listitem>revert all backslash substitutions (not necessarily only those in <classname>alt</classname> sections) to &apos;\&apos;</listitem>
        <listitem>transform to TeX through stylesheet <filename>xml_to_tex.02.xsl</filename> or some higher version</listitem>
        <listitem>process your result through application <application>tex</application> or some other means</listitem>
      </itemizedlist>
    </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
  </chapter>

</part>




<part>
  <info>
    <title>Non-XML Writing Systems</title>
    <subtitle>TeX, LaTeX, MetaPost, Asymptote...</subtitle>
  </info>
  <partintro>...</partintro>
  
  <chapter xml:id='TeX'>
    <title>TeX and Progeny</title>
    <para>In the beginning was Chaos, when several typesetting systems existed, none of them free. Then Donald Knuth renounced a sabbatical to develop a digital typesetting systems of his own. And he named it <firstterm>TeX</firstterm>, after the Greek word <quote>technology</quote> or <quote>techne</quote>.</para>
    <para>TeX and its child LaTeX are user-friendly desktop publishing tools mainly used for typesetting technical documents which nonetheless produce professional-looking print.</para>
    
    <note>Equivalences between MathML and TeX/LaTex are explained <link linkend='mathml_tex_latex'>elsewhere</link> in this document.</note>
    
    <section>
      <title>TeX and Plain TeX</title>
      <para>So TeX is the foundation of [Plain TeX and] LaTeX.</para>
      
      <para>Much like <link linkend='postscript'>PostScript</link>, <application>TeX</application> offers thorough and <emphasis>free</emphasis> documentation. Here are the main copyleft books on <application>TeX</application> you may easily find and download legally on the internet:</para>
      <itemizedlist>
        <listitem>Paul W. Abrahams, Kathryn A. Hargreaves, and Karl Berry, <citetitle>TeX for the Impatient</citetitle></listitem>
        <listitem>Victor Eijkhout, <citetitle>TeX by Topic</citetitle></listitem>
        <listitem>Donald E. Knuth, <citetitle>The TeXbook</citetitle></listitem>
        <listitem>Norman Walsh, <citetitle>Making TeX Work</citetitle></listitem>
      </itemizedlist>
      
      <section sect='sect2'>
        <title>Our First TeX Document</title>
        <para>A TeX file is mostly made up of ASCII text which follows a number of conventions. For instance, a blank line, alternatively two ENTER strokes, separates two paragraphs. Commands are preceded by a backslash, and TeX recognizes about 900, or which about 300 are called <firstterm>primitive</firstterm> and are not made up of simpler functions. The remaining 600 are plain text definitions. For instance, \TeX is a built-in command sequence. Two paragraph may be separated by a \par command. You type \end at the end of what you intend to get printed, and the processor ignores the rest. This is a minimal TeX file:</para>
        <programlisting>Hello \TeX! \end</programlisting>
        <note>
          <para>To use Eplain, simply put the command</para>
          <programlisting>\input eplain</programlisting>
          <para>at the top of your plain TeX document.</para>
        </note>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Characters</title>
        <para>TeX uses the ASCII character set. To typeset accented characters you need to prepend operators, as explained further down.</para>
        <section sect='sect3'>
          <title>Special or reserved characters</title>
          <para>These are characters whose effect is to perform an action, unlike in ordinary text. To cancel there effect and show them they are usually preceded with a backslash.</para>
          <itemizedlist>
            <listitem>&apos;\&apos;: backslash, escape character; it is escaped by \backslash: </listitem>
            <listitem>&apos;%&apos;: remainder of line is a comment; it is escaped: \%</listitem>
            <listitem>&apos;{&apos;: beginning of group; it is escaped: \{</listitem>
            <listitem>&apos;}&apos;: end of group; it is escaped: \{</listitem>
            <listitem>&apos;$&apos;: enter inline mathematical mode or leave it if in inline mathematical mode; it is escaped: \$ </listitem>
            <listitem>&apos;$$&apos;: enter display mathematical mode or leave it if in display mathematical mode; it is escaped: \$\$ </listitem>
            <listitem>&apos;_&apos;: subscript; it is escaped: \_</listitem>
            <listitem>&apos;^&apos;: superscript; it is escaped: \^</listitem>
            <listitem>&apos;~&apos;: non-breakable space; it is escaped: \~</listitem>
            <listitem>&apos;#&apos;: parameter; it is escaped: \%</listitem>
            <listitem>&apos;&amp;&apos;: alignment tab; it is escaped: \&amp;</listitem>
            
          </itemizedlist>
          <para>An example:</para>
          <programlisting>Can you solve this?
$$y^2 + xy + x^2 = 0$$
\end</programlisting>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Accents</title>
          <para>Plain TeX makes it possible to typeset the most commonly used accents:</para>
          <itemizedlist>
            <listitem><userinput>\`o</userinput> ò (grave accent)</listitem>
            <listitem><userinput>\'o</userinput> ó (acute accent)</listitem>
            <listitem><userinput>\^o</userinput> ô(circumflex or <quote>hat</quote>)</listitem>
            <listitem><userinput>\"o</userinput> ö (umlaut or dieresis)</listitem>
            <listitem><userinput>\~n</userinput> ñ (tilde or <quote>squiggle</quote>)</listitem>
            <listitem><userinput>\=o</userinput>    (macron or <quote>bar</quote>)</listitem>
            <listitem><userinput>\.o</userinput>    (dot accent)</listitem>
            <listitem><userinput>\u o</userinput>   (breve accent)</listitem>
            <listitem><userinput>\v o</userinput>   (<quote>check</quote>)</listitem>
            <listitem><userinput>\H o</userinput>   (long Hungarian umlaut)</listitem>
            <listitem><userinput>\t oo</userinput>  (tie-after accent)</listitem>
          </itemizedlist>
          <para>Within the font, such accents are designed to appear at the right height for the letter &apos;o&apos;; but you can use them over any letter, and TeX will raise an accent that is supposed to be taller. Notice that spaces are needed in the last four cases, to separate the control sequences from the letters that follow. You could, however, type <userinput>\H{o}</userinput> in order to avoid putting a space in the midst of a word.</para>
          <para>To place an accent over a dotted character use an undotted variant: <userinput>\i</userinput> and <userinput>\j</userinput>.</para>
          <para>Plain TeX also provides three accents that go underneath:</para>
          <itemizedlist>
            <listitem><userinput>\c c</userinput>ç (cedilla accent)</listitem>
            <listitem><userinput>\d o</userinput>  (dot-under accent)</listitem>
            <listitem><userinput>\b o</userinput>  (bar-under accent)</listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Of hyphens and dashes</title>
          <para>TeX has four different signs:</para>
          <itemizedlist>
            <listitem>a hyphen: type a hyphen</listitem>
            <listitem>an en-dash: for ranges, type two hyphens</listitem>
            <listitem>an em-dash: for inserts, type three hyphens</listitem>
            <listitem>a minus sign: type a hyphen in math mode</listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Quoting</title>
          <para>Just type two single-quote marks of the appropriate kind, that is grave-grave and then apostrophe-apostrophe:</para>
          <programlisting>``I understand.''</programlisting>
          <para>You can also use command sequences:</para>
          <programlisting>\lq\lqI understand.\rq\rq</programlisting>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Foreign, non-accented characters</title>
          <itemizedlist>
            <listitem><userinput>\oe,\OE</userinput> (French ligature OE)</listitem>
            <listitem><userinput>\ae,\AE</userinput>æ, Æ (Latin and Scandinavian ligature AE)</listitem>
            <listitem><userinput>\aa,\AA</userinput> (Scandinavian A-with-circle)</listitem>
            <listitem><userinput>\o,\O</userinput>ø, Ø (Scandinavian O-with-slash)</listitem>
            <listitem><userinput>\l,\L</userinput> (Polish suppressed-L)</listitem>
            <listitem><userinput>\ss</userinput>ß (German <quote>es-zet</quote> or sharp S)</listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Fonts in TeX</title>
        <para>TeX provides the following control sequences for changing fonts:</para>
        <itemizedlist>
          <listitem><userinput>\rm</userinput> switches to the normal <quote>roman</quote> typeface;</listitem>
          <listitem><userinput>\sl</userinput> switches to a slanted roman typeface;</listitem>
          <listitem><userinput>\it</userinput> switches to italic style;</listitem>
          <listitem><userinput>\tt</userinput> switches to a monospace, typewriter-like face;</listitem>
          <listitem><userinput>\bf</userinput> switches to bold face</listitem>
        </itemizedlist>
        <section sect='sect3'>
          <title>Font sizes</title>
          <para>TeX assumes font size = 10 points. You can determine a different overall size by setting \magnification before any page is output. The intended factor must be multiplied by 1000. Thus, <userinput>\magnification=2000</userinput> sets a size twice as big. You probably want to stay between 1000 and 1800. You can also type: <userinput>\magnification=\magstep0</userinput> for no magnification (1000), <userinput>\magnification=\magstep1</userinput> for 1200 magnification, and so on geometrically.</para>
          <para>Font size can be changed locally by redefining \rm and so on. To change to a bigger font:</para>
          <programlisting>\font\rm=cmr10 scaled 1200</programlisting>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Grouping</title>
        <para>Local scope is created through pairs of matching curly braces. Changes between them do not affect the enclosing environment. Thus, to itilize a word type:</para>
        <programlisting>This is {\it absolutely} secret.</programlisting>
        <para>If you want changes to go beyond the local scope, prepend <varname>\global</varname>.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Boxes and glue</title>
        <para>When building a wall, we put bricks in a pattern, and in between them we put mortar to hold the wall together and make it rigid. Similarly, TeX constructs lines (aka horizontal boxes) by putting words (horizontal boxes) one after the other, and in between them it puts a special rubber lenght called <firstterm>glue</firstterm>. Then it procedes to compose pages by putting lines one above the other, and in between them some more glue. Every blob of glue has a natural length and may stretch or shrink a bit on demand according to its stretchability and shrinkability.</para>
        <para>Paragraphs themselves are made from lines stacked and glued together. And lines are made up from word-like components (bricks?) kept apart by glue. Paragraphs, lines and word-like components are instances of <firstterm>boxes</firstterm>.</para>
	<para>Boxes have width, height and depth. A blob of glue has a natural length called <firstterm>space</firstterm>, as well as <firstterm>stretch</firstterm> or by how much it would stretch, and <firstterm>shrink</firstterm>. Glue is allowed to stretch infinitely far, but it will never shrink  more than its stated shrinkability.</para>
	<para>So what&apos;s the purpose of stating <varname>stretch</varname> if glue can stretch infinitely far? Well, if an box containing boxes and glue is to stretch further than its natural length, then each blob of glue will stretch in proportion to its <varname>shrink</varname>.</para>
        <para>Boxes whose components are grouped horizontally are called <firstterm>hbox</firstterm>&apos;s. A line is an hbox. A word too may be seen as an hbox made up of type. And boxes whose components are grouped vertically or <quote>stacked</quote> are called <firstterm>vbox</firstterm>&apos;s. A paragraph or a displayed list of items are instances of vbox.</para>
        
        <section sect='sect3'>
          <title>Paragraph indentation</title>
          <para>You can set a different glue to \parindent. A value of 0pt effectively prevents indentation. Also, typing \noindent at the very beginning of a paragraph prevents indentation, whereas \indent causes it.</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Line breaking</title>
          <para>You can prompt TeX to break a word by inserting &apos;\-&apos;. Also, you may define the hyphenation of words with command sequence \hyphenation:</para>
          <programlisting>\hyphenation{gal-axy}</programlisting>
          <para>TeX assigns a numerical value called <quote>badness</quote> to each line that it sets, in order to assess the quality of spacing. Plain TeX normally stipulates that no line&apos;s badness should exceed 200.</para>
          <!-- p 29 -->
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Interline spacing*</title>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Centered lines</title>
          <programlisting>\centerline{This is a centered line!}</programlisting>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <?source <citetitle class='book'>TEX for the Impatient</citetitle>, 2003 ?>
        <title>Commands for Horizontal and Vertical Modes</title>
        <para>This section covers commands that have corresponding or identical forms for both horizontal and vertical modes. These commands provide boxes, spaces, rules, leaders, and alignments.</para>

        <section sect='sect3'>
          <title>Producing space*</title>
          <section sect='sect2'>
            <title>Fixed-width horizontal space*</title>
          </section> <!-- </sect2> -->
          <section sect='sect2'>
            <title>Fixed-length vertical space*</title>
          </section> <!-- </sect2> -->
          <section sect='sect2'>
            <title>Variable-size space*</title>
          </section> <!-- </sect2> -->
        </section> <!-- </sect3> -->

        <section sect='sect3'>
          <title>Manipulating boxes</title>
          <section sect='sect2'>
            <title>Constructing hboxes and vboxes</title>
            <programlisting><![CDATA[\hbox {<horizontal mode material>}
\hbox to <dimen {<horizontal mode material}
    \hbox spread <dimen {<horizontal mode material>}]]></programlisting>
            <para>This command produces an hbox (horizontal box) containing &lt;horizontal mode materiali&gt;. The braces around &lt;horizontal mode material&gt; define a group. TEX doesn&apos;t break the &lt;horizontal mode material&gt; into lines, since it&apos;s in restricted horizontal mode when it&apos;s assembling the box. TEX won&apos;t change the size of the box once it&apos;s been produced.</para>
            <para><command>\hbox</command> is often useful when you want to keep some text all on one line. If your use of <command>\hbox</command> prevents TEX from breaking lines in an acceptable way, TEX will complain about an overfull hbox.</para>
            <para>The width of the hbox depends on the arguments to <command>\hbox</command>:</para>
            <itemizedlist>
              <listitem>If you specify only &lt;horizontal mode material&gt;, the hbox will have its natural width.</listitem>
              <listitem>If you specify to &lt;dimen&gt;, the width of the hbox will be &lt;dimen</listitem>
              <listitem>If you specify <command>spread &lt;dimen&gt;</command>, the width of the hbox will be its natural width plus &lt;dimen&gt;, i.e., the hbox will be spread out by &lt;dimen&gt;.</listitem>
            </itemizedlist>
            <bridgehead>Example:</bridgehead>
            <programlisting><![CDATA[\hbox{ugly suburban sprawl}
\hbox to 2in{ugly \hfil suburban \hfil sprawl}
\hbox spread 1in {ugly \hfil suburban \hfil sprawl}
% Without \hfil in the two preceding lines,
% you’d get ‘underfull hbox’es.]]></programlisting>
            <para>For holding vertical mode material:</para>
            <programlisting>\vtop <varname>vertical mode material</varname>
\vtop to hdimeni { <varname>vertical mode material</varname> }
\vtop spread hdimeni { <varname>vertical mode material</varname> }
\vbox { <varname>vertical mode material</varname> }
\vbox to hdimeni { <varname>vertical mode material</varname> }
\vbox spread hdimeni { <varname>vertical mode material</varname> }</programlisting>
            <para>These commands produce a vbox (vertical box) containing <varname>vertical mode material</varname>. The braces around <varname>vertical mode material</varname> define a group. TEX is in internal vertical mode when it&apos;s assembling the box. TEX won&apos;t change the size of the box once it&apos;s been produced.</para>
            
            <para>The difference between <command>\vtop</command> and <command>\vbox</command> lies in where TEX puts the reference point of the constructed vbox. Ordinarily, the reference point gotten from <command>\vtop</command> tends to be at or near the top of the constructed vbox, while the reference point gotten from <command>\vbox</command> tends to be at or near the bottom of the constructed vbox. Thus a row of vboxes all constructed with <command>\vtop</command> will tend to have their tops nearly in a line, while a row of vboxes all constructed with <command>\vbox</command> will tend to have their bottoms nearly in a line.</para>
            <para><command>\vtop</command> and <command>\vbox</command> are often useful when you want to keep some text together on a single page. (For this purpose, it usually doesn&apos;t matter which command you use.) If your use of these commands prevents TEX from breaking pages in an acceptable way, TEX will complain that it&apos;s found an overfull or underfull vbox while <command>\output</command> is active.</para>
            
            <para>The height of a vbox depends on the arguments to <command>\vtop</command> or <command>\vbox</command>. For <command>\vbox</command>, TEX determines the height as follows:</para>
            <itemizedlist>
              <listitem>If you specify only <varname>vertical mode material</varname>, the vbox will have its natural height.</listitem>
              <listitem>If you specify to <varname>dimen</varname>, the height of the vbox will be <varname>dimen</varname>.</listitem>
              <listitem>If you specify spread <varname>dimen</varname>, the height of the vbox will be its natural height plus <varname>dimen</varname>, i.e., the height of the vbox will be stretched vertically by <varname>dimen</varname>.</listitem>
            </itemizedlist>
            
            <para>For <command>\vtop</command>, TEX constructs the box using its rules for <command>\vbox</command> and then apportions the vertical extent between the height and the depth as described below.</para>
            <para>Ordinarily, the width of a constructed vbox is the width of the widest item inside it. (More precisely, it&apos;s the distance from the reference point to the rightmost edge of the constructed vbox. Therefore, if you move any of the items right using <command>\moveright</command> or <command>\moveleft</command> (with a negative distance), the constructed vbox might be wider.) The rules for apportioning the vertical extent between the height and the depth are more complicated:</para>
            <itemizedlist>
              <listitem>For <command>\vtop</command>, the height is the height of its first item, if that item is a box or rule. Otherwise the height is zero. The depth is whatever vertical extent remains after the height is subtracted.</listitem>
              <listitem>For <command>\vbox</command>, the depth is the depth of its last item, if that item is a box or rule. Otherwise the depth is zero. The height is whatever vertical extent remains after the depth is subtracted. (In fact, there&apos;s a further complication. Suppose that after the depth has been determined using the two rules just given, the depth turns out to be greater than <varname>\boxmaxdepth</varname>. Then the depth is reduced to <varname>\boxmaxdepth</varname> and the height is adjusted accordingly.)</listitem>
            </itemizedlist>
            <para>The <command>\vfil</command> command is useful for filling out a vbox with empty space when the material in the box isn&apos;t as tall as the vertical extent of the box.</para>
            
            <bridgehead>Example:</bridgehead>
            <programlisting><![CDATA[\hbox{\hsize = 10pc \raggedright\parindent = 1em
\vtop{In this example, we see how to use vboxes to
produce the effect of double columns. Each vbox
contains two paragraphs, typeset according to \TeX’s
usual rules except that it’s ragged right.\par
This isn’t really the best way to get true double
columns because the columns}
\hskip 2pc
\vtop{\noindent
aren’t balanced and we haven’t done anything to choose
the column break automatically or even to fix up the
last line of the first column.\par
However, the technique of putting running text into a
vbox is very useful for placing that text where you
want it on the page.}}]]></programlisting>

            <bridgehead>Another example:</bridgehead>
            <programlisting><![CDATA[\hbox{\hsize = 1in \raggedright\parindent = 0pt
\vtop to .75in{\hrule This box is .75in deep. \vfil\hrule}
\qquad
\vtop{\hrule This box is at its natural depth. \vfil\hrule}
\qquad
\vtop spread .2in{\hrule This box is .2in deeper than
                        its natural depth.\vfil\hrule}}]]></programlisting>
                      
            <bridgehead>Yet another example:</bridgehead>
            <programlisting><![CDATA[% See how \vbox lines up boxes at their bottoms
% instead of at their tops.
\hbox{\hsize = 1in \raggedright
\vbox to .5in{\hrule This box is .5in deep.\vfil\hrule}
\qquad
\vbox to .75in{\hrule This box is .75in deep.\vfil\hrule}}]]></programlisting>
            
            <bridgehead><command>\boxmaxdepth [ &lt;dimen&gt; parameter ]</command></bridgehead>
            <para>This parameter contains a dimension <varname>D</varname>. TEX will not construct a box whose depth exceeds <varname>D</varname>. If you produce a box whose depth <varname>d</varname> would exceed <varname>D</varname>, TEX will transfer the excess depth to the height of the box, effectively moving the reference point of the box down by <inlineequation><varname>d</varname> − <varname>D</varname></inlineequation>. If you set <varname>\boxmaxdepth</varname> to zero, TEX will line up a row of vboxes so that their bottom boundaries all lie on the same horizontal line. Plain TEX sets <varname>\boxmaxdepth</varname> to <varname>\maxdimen</varname><?see (p. 244)?>, so <varname>\boxmaxdepth</varname> won&apos;t affect your boxes unless you change it.</para>
            
            <bridgehead><command>\underbar [ &lt;argument&gt;]</command></bridgehead>
            <para>This command puts <varname>argument</varname> into an hbox and underlines it without regard to anything that protrudes below the baseline of the box.</para>
            <para>Example:</para>
            <programlisting>\underbar{Why not learn \TeX?}</programlisting>
            
          </section> <!-- </sect2> -->
          
          <section sect='sect2'>
            <title>Setting and retrieving the contents of boxes*</title>
          </section> <!-- </sect2> -->
          
          <section sect='sect2'>
            <title>Shifting boxes</title>
            <para>Use:</para>
            <programlisting>\moveleft <varname>dimen</varname> <varname>box</varname>
\moveright <varname>dimen</varname> <varname>box</varname></programlisting>
            <para>These commands move <varname>box</varname> left or right by <varname>dimen</varname> (which can be neg- ative). You can only apply \moveleft and \moveright to a box that&apos;s in a vertical list.</para>
            <para>Example:</para>
            <programlisting>\vbox{\vbox{Phoebe}\vbox{walked}%
\moveleft 20pt\vbox{a}\moveright 20pt\vbox{crooked}%
\vbox{mile.}}</programlisting>
            
            <programlisting>\lower <varname>dimen</varname> <varname>box</varname>
\raise <varname>dimen</varname> <varname>box</varname></programlisting>
            <para>These commands move <varname>box</varname> up or down by <varname>dimen</varname> (which can be negative). You can only apply <command>\raise</command> and <command>\lower</command> to a box that&apos;s in a horizontal list.</para>
            
            <para>Another example:</para>
            <programlisting>Are you feeling \lower 6pt \hbox{depressed} about the
                \raise 6pt \hbox{bump} on your nose?</programlisting>
            
          </section> <!-- </sect2> -->
          
          <section sect='sect2'>
            <title>Dimensions of box registers</title>
            <programlisting>\ht <varname>register</varname>
\dp <varname>register</varname>
\wd <varname>register</varname>
[ <varname>dimen</varname> parameter ]
[ <varname>dimen</varname> parameter ]
[ <varname>dimen</varname> parameter ]</programlisting>
            <para>These parameters refer to the height, depth, and width respectively of box register <varname>register</varname>. You can use them to find out the dimensions of a box. You can also change the dimensions of a box, but it&apos;s a tricky business; if you want to be adventurous you can learn all about it from pages 388–389 of <citetitle class='book'>The TEXbook</citetitle>.</para>
            <para>Example:</para>
            <programlisting>\setbox0 = \vtop{\hbox{a}\hbox{beige}\hbox{bunny}}
The box has width \the\wd0, height \the\ht0, and depth \the\dp0.</programlisting>
            <para>produces</para>
            <blockquote>The box has width 27.2223pt, height 4.30554pt, and depth 25.94444pt.</blockquote>
          </section> <!-- </sect2> -->
          
          <section sect='sect2'>
            <title>Struts, phantoms, and empty boxes</title>
            
            <programlisting>\strut</programlisting>
            <para>This command produces a box whose width is zero and whose height (8.5pt) and depth (3.5pt) are those of a more or less typical line of type in cmr10, the default plain TEX font. Its main use is in forcing lines to have the same height when you&apos;ve disabled TEX&apos;s interline glue with <command>\offinterlineskip</command> or a similar command, e.g., when you&apos;re constructing an alignment. If the natural height of a line is too short, you can bring it up to standard by including a <command>\strut</command> in the line. The strut will force the height and depth of the line to be larger, but it won&apos;t print anything or consume any horizontal space.</para>
            <para>If you&apos;re setting type in a font that&apos;s bigger or smaller than cmr10, you should redefine <command>\strut</command> for that context.</para>
            <para>Example:</para>
            <programlisting>\noindent % So we&apos;re in horizontal mode.
\offinterlineskip % So we get the inherent spacing.
% The periods in this vbox are not vertically equidistant.
\vtop{\hbox{.}\hbox{.(}\hbox{.x}
  \hbox{.\vrule height 4pt depth 0pt}}\qquad
% The periods in this vbox are vertically equidistant
% because of the struts.
\vtop{\hbox{.\strut}\hbox{.(\strut}\hbox{.x\strut}
  \hbox{.\vrule height 4pt depth 0pt\strut}}</programlisting>
            
            <programlisting>\mathstrut</programlisting>
            <para>This command produces a phantom formula whose width is zero and whose height and depth are the same as those of a left parenthesis. <command>\mathstrut</command> is in fact defined as <quote>\vphantom(</quote>. Its main use is for getting radicals, underbars, and overbars to line up with other radicals, underbars, and overbars in a formula. It is much like <command>\strut</command>, except that it adjusts itself to the different styles that can occur in math formulas.</para>
            <para>Example:</para>
            <programlisting>$$\displaylines{
\overline{a_1a_2} \land \overline{b_1b_2}
\quad{\rm versus}\quad \overline{a_1a_2\mathstrut}
  \land \overline{b_1b_2\mathstrut}\cr
\sqrt{\epsilon} + \sqrt{\xi} \quad{\rm versus}\quad
\sqrt{\epsilon\mathstrut} + \sqrt{\xi\mathstrut}\cr}$$</programlisting>
            
            <programlisting>\phantom <varname>argument</varname></programlisting>
            <para>This command produces an empty box having the same size and placement that <varname>argument</varname> would have were it typeset. One use of <command>\phantom</command> is for reserving space for a symbol that for some reason needs to be drawn in by hand.</para>
            <para>Example:</para>
            <programlisting>$1\phantom{9}2$</programlisting>
            <para>produces:</para>
            <informalequation>1 2</informalequation>
            
            <programlisting>\hphantom <varname>argument</varname>
\vphantom <varname>argument</varname></programlisting>
            <para>These commands produce phantom boxes that don&apos;t print anything:</para>
            <itemizedlist>
              <listitem>\hphantom produces a box with the same width as <varname>argument</varname> but zero height and depth.</listitem>
              <listitem>\vphantom produces a box with the same height and depth as <varname>argument</varname> but zero width.</listitem>
            </itemizedlist>
            <para>Their main purpose is to force a subformula to have a certain minimum horizontal or vertical dimension.</para>
            <para>Example:</para>
            <programlisting>$$\left[\vphantom{u\over v}t\right] \star
\left[{u\over v}\right]\quad
\{\hphantom{xx}\}$$</programlisting>

            <programlisting>\smash <varname>argument</varname></programlisting>
            <para>This command typesets <varname>argument</varname>, but forces the height and depth of
              its containing box to be zero. You can use <command>\smash</command> and <command>\vphantom</command> in
combination to give a subformula any height and depth that you wish.</para>
            <para>Example:</para>
            <programlisting>$${\smash{r_m \brace r_n}\vphantom{r}} \Longrightarrow r$$</programlisting>
            
            <programlisting>\null</programlisting>
            <para>This command produces an empty hbox.</para>
            <para>Example:</para>
            <programlisting>\setbox0 = \null
The null box \null has width \the\wd0, height \the\ht0,
and depth \the\dp0.</programlisting>
            <para>which produces:</para>
            <blockquote>The null box has width 0.0pt, height 0.0pt, and depth 0.0pt.</blockquote>
            
          </section> <!-- </sect2> -->
          
          <section sect='sect2'>
            <title>Parameters pertaining to malformed boxes*</title>
          </section> <!-- </sect2> -->
        </section> <!-- </sect3> -->

        <section sect='sect3'>
          <title>Retrieving the last item from a list*</title>
        </section> <!-- </sect3> -->

        <section sect='sect3'>
          <title>Rules and leaders</title>
          <programlisting>\hrule
\hrule height <varname>dimen</varname> width <varname>dimen</varname> depth <varname>dimen</varname>
\vrule
\vrule width <varname>dimen</varname> height <varname>dimen</varname> depth <varname>dimen</varname></programlisting>
          <para>The <command>\hrule</command> command produces a horizontal rule; the <command>\vrule</command> command produces a vertical rule. You can specify any or all of the width, height, and depth of the rule—TEX supplies default values for those that you omit. You can give the dimensions of the rule in any order; the forms listed above show just two of the possible combinations. You can even give a dimension of a given kind more than once—if you do, the last one is the one that counts.</para>
          <para>If you don&apos;t specify the width of a horizontal rule, the rule is extended horizontally to the boundaries of the innermost box or alignment that contains the rule. If you don&apos;t specify the height of a horizontal rule, it defaults to 0.4pt; if you don&apos;t specify the depth of a horizontal rule, it defaults to 0pt</para>
          
          <section sect='sect4'>
            <title>Rules and leaders</title>
            <para>If you don&apos;t specify the width of a vertical rule, it defaults to 0.4pt. If you don&apos;t specify the height or the depth of a vertical rule, the rule is extended to the boundary of the innermost box or alignment that contains the rule.</para>
            <para>TEX treats a horizontal rule as an inherently vertical item and a vertical rule as an inherently horizontal item. Thus a horizontal rule is legal only in a vertical mode, while a vertical rule is legal only in a horizontal mode. If this seems surprising, visualize it—a horizontal rule runs from left to right and separates vertical items in a sequence, while a vertical rule runs up and down and separates horizontal items in a sequence.</para>
            <para>Example:</para>
            <programlisting>\hrule\smallskip
\hrule width 2in \smallskip
\hrule width 3in height 2pt \smallskip
\hrule width 3in depth 2pt</programlisting>
            <para>Example:</para>
            <programlisting>% Here you can see how the baseline relates to the
% height and depth of an \hrule.
\leftline{
  \vbox{\hrule width .6in height 5pt depth 0pt}
  \vbox{\hrule width .6in height 0pt depth 8pt}
  \vbox{\hrule width .6in height 5pt depth 8pt}
  \vbox{\hbox{ baseline}\kern 3pt \hrule width .6in}
}</programlisting>
            <para>Example:</para>
            <programlisting>\hbox{( {\vrule} {\vrule width 8pt} )}
\hbox {( {\vrule height 13pt depth 0pt}
  {\vrule height 13pt depth 7pt} x)}
% the parentheses define the height and depth of each of the
% two preceding boxes; the ‘x’ sits on the baseline</programlisting>

            <programlisting>\leaders <varname>box or rule</varname> <varname>skip command</varname>
\cleaders <varname>box or rule</varname> <varname>skip command</varname>
\xleaders <varname>box or rule</varname> <varname>skip command</varname></programlisting>
            <para>These commands produce leaders, i.e., they fill a horizontal or vertical space with copies of a pattern. The <varname>box or rule</varname> specifies a leader, i.e., a single copy of the pattern, while the <varname>skip command</varname> specifies a window to be filled with a row or a column of the leaders. The pattern is repeated as many times as will fit into the window. If <varname>skip command</varname> is a horizontal skip, the window contains a row of leaders and TEX must be in a horizontal mode; if <varname>skip command</varname> is a vertical skip, the window contains a column of leaders and TEX must be in a vertical mode.</para>
            <para>The commands differ in how they arrange the repeated pattern in the space and where they put any leftover space:</para>
            <itemizedlist>
              <listitem>For <command>\leaders</command>, TEX aligns a row of leaders with the left end of the innermost box <varname>B</varname> that is to contain the result of the <command>\leaders</command> command. It aligns a column of leaders with the top of <varname>B</varname>. Those leaders that fall entirely within the window are retained. Any leftover space at the top and bottom of the window is left empty.</listitem>
              <listitem>For <command>\cleaders</command>, the leaders are centered within the window.</listitem>
              <listitem>For <command>\xleaders</command> the pattern is uniformly distributed throughout the window. If the leftover space is <varname>l</varname> and the leader is repeated n times, TEX puts space of width or height <inlineequation>l/(n + 1)</inlineequation> between adjacent leaders and at the two ends (left and right or top and bottom) of the leaders.</listitem>
            </itemizedlist>
            <para>Example:</para>
            <programlisting>\def\pattern{\hbox to 15pt{\hfil.\hfil}}
\line{Down the Rabbit-Hole {\leaders\pattern\hfil} 1}
\line{The Pool of Tears {\leaders\pattern\hfil} 9}
\line{A Caucus-Race and a Long Tale {\cleaders\pattern\hfil} 19}
\line{Pig and Pepper {\xleaders\pattern\hfil} 27}</programlisting>
            <para>Another example:</para>
            <programlisting>\def\bulletfill{\vbox to 3ex{\vfil\hbox{$\bullet$}\vfil}}%
\def\mybox{\vbox to 1in}
\def\myrule{\hrule width 4pt}\hsize=2in
\hrule \line{%
  \mybox{\myrule depth 8pt \leaders\bulletfill\vfill}
  \hfil
  \mybox{\myrule depth 15pt \leaders\bulletfill\vfill}
  \hfil
  \mybox{\myrule depth 18pt \cleaders\bulletfill\vfill}
  \hfil
  \mybox{\myrule depth 12pt \xleaders\bulletfill\vfill}%
}\hrule</programlisting>
            <para></para>
            <programlisting></programlisting>
            <para></para>
            <programlisting></programlisting>
            <para></para>
            <programlisting></programlisting>
            <para></para>
            <programlisting></programlisting>
            <para></para>
            <programlisting></programlisting>
            <para></para>
          </section> <!-- </sect4> -->
          
        </section> <!-- </sect3> -->

        <section sect='sect3'>
          <title>Alignments*</title>
          <section sect='sect2'>
            <title>Tabbing alignments*</title>
          </section> <!-- </sect2> -->
          <section sect='sect2'>
            <title>General alignments*</title>
          </section> <!-- </sect2> -->
        </section> <!-- </sect3> -->

      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Programming TeX</title>
        <section sect='sect3'>
          <title>Variables</title>
          <para>TeX has 256 registers called <varname>\count0</varname> to <varname>\count255</varname>, each capable of containing integers between -2147483647 and +2147483647, inclusive. TeX also has 256 registers called <varname>\dimen0</varname> to <varname>dimen255</varname>, each capable of containing a dimen[sion]. There are another 256 registers called <varname>\skip0</varname> to <varname>\skip255</varname>, each containing glue; and <varname>\muskip0</varname> to <varname>muskip255</varname>, each containing glue in mathematical units. You can assign new values to these registers by typing: <userinput>\varx=y</userinput>, and you can add to or subtract from them by typing <userinput>\advance\varx by y</userinput>.</para>
          <para>Multiplication and division are possible too, but only by integers. For example, <userinput>\multiply\dimen4 by 3</userinput> triples the value of <varname>dimen4</varname>, and <userinput>\divide\skip5 by 2</userinput> cuts in half all three components of the glue that is currently registered in <varname>\skip5</varname>.</para>
          <para>The first ten <varname>\count</varname> registers, <varname>\count0</varname> through <varname>\count9</varname>, are reserved for a special purpose[...]</para>
          <para>It&apos; usually desirable to have symbolic names for registers. TeX provides a <function>\countdef</function> command (similar to <function>\chardef</function>), which makes it easy to do this: You just say <userinput>\countdef\chapno=28</userinput> and <varname>\chapno</varname> is henceforth an abbreviation for <varname>\count28</varname>. Similar commands <function>\dimendef</function>, <function>\skipdef</function>, and <function>\muskipdef</function> are available for the other types of numeric registers. After a control sequence has been defined by <function>\countdef</function>, it can be used in TeX commands exactly as if it were an integer parameter like <varname>\tolerance</varname>. Similarly, <function>\dimendef</function> effectively creates a new dimension parameter, <function>\skipdef</function> effectively creates a new glue parameter, and <function>\muskipdef</function> effectively creates a new muglue parameter.</para>
          <para>How do you declare a variable without worrying about whether its underlying match has already been booked? Plain TeX provides <function>newcount</function>, <function>\newdimen</function>, <function>\newskip</function>, <function>\newmuskip</function>, and <function>\newbox</function>; there also are <function>\newtoks</function>, <function>\newread</function>, <function>\newwrite</function>, <function>\newfam</function>, and <function>\newinsert</function>, for features we haven&apos;t discussed yet. Use them like <userinput>\newcount\sectno ... \sectno=1</userinput>.</para>
          
          <para>Besides the numerical registers, TeX also has 256 box registers called <varname>\box0</varname> to <varname>\box255</varname>. A box register gets a value when you say <userinput>\setbox&lt;n&gt;=&lt;box&gt;</userinput> for example, <userinput>\setbox3=\hbox{A}</userinput> sets <varname>\box3</varname> to an hbox that contains the single letter A. <varname>2\wd3</varname> is a &lt;dimen&gt; that represents twice the width of <varname>\box3</varname>; similarly, ^<varname>\ht&lt;n&gt;</varname>; and <varname>\dp&lt;n&gt;</varname> can be used to refer to the height and depth of a given box register.</para>
        
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Making lines</title>
        <para>A ready line, i.e. a string of type from left to right margin unless it is the last line in a paragraph, is a horizontal box or <varname>hbox</varname>. The spacing between words is stretched to make the end of the line the same x coordinate as the right margin. These words are themselves hboxes <emphasis>glue-ed</emphasis> together into a long line. If on the other hand this spacing is compressed, an <firstterm>overfull</firstterm> hbox is generated. If it is unacceptable large, an <firstterm>underfull</firstterm> hbox.</para>
        <para>The only way to get rid of the overfull boxes is to change the <varname>\tolerance</varname>, i.e., to allow wider spaces between words. TeX assigns a numerical value called <varname>badness</varname> to each line that it sets, in order to assess the quality of the spacing. (The exact rules for badness are different for different fonts.) Plain TeX normally stipulates that no line&apos; badness should exceed 200. TeX reports all boxes whose badness exceeds a certain threshold called <varname>\hbadness</varname>. Plain TeX sets <varname>\hbadness</varname> at 1000.</para>
        <para>TeX treats 10000 as if it were <quote>infinite</quote> tolerance, allowing arbitrarily wide space; thus, a tolerance of 10000 will <emphasis>never</emphasis> produce an overfull box, unless something strange occurs like an unhyphenatable word that is wider than the column itself.</para>
        <para><function>\raggedright</function> tells TeX not to worry about keeping the right margin straight, and to keep the spacing uniform within each line.</para>
        <para>A parameter called <varname>\hfuzz</varname> allows you to ignore boxes that are only slightly overfull. For example, if you set <userinput>\hfuzz=1pt</userinput>, a box must stick out more than one point before it is considered erroneous. Plain TeX sets <varname>\hfuzz</varname> at 0.1pt.</para>
        <section sect='sect3'>
          <title>Baselines</title>
          <para>Further, a line of printed glyphs has a <firstterm>baseline</firstterm>, that is an imaginary line below which each of its component boxes may have a depth and above which it usually has a height. The baselines of printable lines must be suitably separated.</para>
          <para>TeX achieves this by means of three primitives: <varname>\baselineskip</varname> (glue), <varname>\lineskip</varname> (glue), and <varname>\lineskiplimit</varname> (dimension).</para>
          <para>TeX inserts <quote>interline glue</quote> between consecutive lines in order to make the distance between their baseline equal to <varname>\baselineskip</varname>.</para>
          <para>But if the interline glue calculated by this rule would cause the top edge of the new box to be closer than <varname>\lineskiplimit</varname> to the bottom edge of the previous box, then <varname>\lineskip</varname> is used as the interline glue. In other words, the distance between adjacent baselines will be the <varname>\baselineskip</varname> setting, unless that would bring the boxes too close together (less that <varname>\lineskiplimit</varname>), in which case the <varname>\lineskip</varname> glue will be used.</para>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Page dimensions in TeX</title>
        <para>Use \hsize for line width and \vsize for total height of printed area. \hoffset is positive rightwards, and \voffset is positive downwards. Some reasonable settings without headers or footers are:</para>
        <programlisting>\hoffset=-0.33in
\hsize=1.13\hsize
\voffset=-0.5in
\vsize=1.15\vsize</programlisting>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Mathematics</title>
        <para>TeX is designed to handle complex mathematical expressions in such a way that most of them are easy to input. The basic idea is that a complicated formula is composed of less complicated formulas put together in a simple way; the less complicated formulas are, in turn, made up of simple combinations of formulas that are even less complicated; and so on. Stating this another way, if you know how to type simple formulas and how to combine formulas into larger ones, you will be able to handle virtually any formula at all.<!-- So let&apos;s start with simple ones and work our way up.--></para>
        <section sect='sect3'>
          <title>Entering math mode</title>
          <para>Mathematical formulas are set either inline or to stand alone (display mode). Inline formulas are typed between single dollar signs, while display formulas are typed between double dollar signs. Otherwise formulas are straightforward to compose and easy to read in TeX.</para>
          <para>When you type <userinput>$x$</userinput> the <quote>x</quote> comes out in italics, but when you type <userinput>$2$</userinput> the <quote>2</quote> comes out in roman type. In general, all characters on your keyboard have a special interpretation in math formulas, according to the normal conventions of mathematics printing: Letters now denote italic letters, while digits and punctuation denote roman digits and punctuation; a hyphen now denotes a minus sign, which is almost the same as an em-dash but not quite. The first <quote>$</quote> that you type puts you into math mode and the second takes you out.</para>
          <para>TeX does most of its own spacing in math formulas; and it <emphasis>ignores</emphasis> any spaces that you yourself put between dollar signs (inline math). For example, if you type <userinput>$ x$</userinput> and <userinput>$ 2 $</userinput>, they will mean the same thing as <userinput>$x$</userinput> and <userinput>$2$</userinput>.</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Characters in math mode</title>
          <para>The 52 letters (<userinput>A</userinput> to <userinput>Z</userinput> and <userinput>a</userinput> to <userinput>z</userinput>) denote italic symbols, which a mathematician would call <quote>variables</quote>. TeX just calls them <firstterm>ordinary symbols</firstterm> because they make up the bulk of math formulas.</para>
          <!--
          <para>There are two variants of lowercase &apos;L&apos; in plain TeX. Ordinary &apos;l&apos; you get by simply typing <userinput>l</userinput>) and the calligraphic &apos;&apos;, (which you get by typing `^<userinput>\ell</userinput>').</para>
          -->
          <para>Plain TeX also treats the 18 characters</para>
          <para> 0 1 2 3 4 5 6 7 8 9 ! ? . || / ` @ " </para>
          <para>as ordinary symbols; i.e., it doesn&apos;t insert any extra space when these symbols occur next to each other or next to letters. Unlike the letters, these 18 characters remain in roman type when they appear in formulas. There&apos; nothing special for you to remember about them, except that the vertical line &apos;|&apos; has special uses that we shall discuss later.</para>
          <para>About primes, as used in calculus notation and so on, although you can use the command <function>prime</function>, you may just type a prime sign, as in <userinput>y = y'</userinput> or <userinput>y_1 = y'_1 + y'_2</userinput>.</para>
          <para>TeX does not treat &apos;/&apos; as a binary operation, even though a slash stands for division (which qualifies as a binary operation on mathematical grounds). The reason is that printers traditionally put extra space around the symbols &apos;+&apos;, &apos;-&apos;, and &apos;*&apos;, but not around &apos;/&apos;.</para>
          
          <para>Plain TeX treats the four characters <userinput>=</userinput>, <userinput>&lt;</userinput>, <userinput>&gt;</userinput>, and <userinput>:</userinput> as <quote>relations</quote> because they express a relationship between two quantities. For example, <userinput>${x&lt;y}$</userinput> means that <varname>x</varname> is less than <varname>y</varname>. Such relationships have a rather different meaning from binary operations like &apos;+&apos;, and the symbols are typeset somewhat differently.</para>
          <para>The two characters &apos;,&apos; (comma) and &apos;;&apos; (semicolon) are treated as punctuation marks in formulas; this means that TeX puts a little extra space after them, but not before them.</para>
          <para>It isn&apos;t customary to put extra space after a &apos;.&apos; (period) in math formulas, so TeX treats a period as an ordinary symbol. If you want the &apos;:&apos; character to be treated as a punctuation mark instead of as a relation, just call it <userinput>\colon</userinput>.</para>
          <para>If you want to use a comma as an ordinary symbol (e.g., when it appears in a large number), just put it in braces; TeX treats anything in braces as an ordinary symbol.</para>
          
          <para>The characters &apos;(&apos; and &apos;[&apos; <quote>openings</quote>, while &apos;)&apos; and &apos;]&apos; are called <quote>closings</quote>; these act pretty much like ordinary symbols, but they help TeX to decide when a binary operation is not really being used in a binary way.</para>
          <section sect='sect4'> <title>Greek letters for variables*</title> </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Accents in math mode</title>
            <para>Mathematical accents are somewhat different, because spacing is not the same; TeX uses special conventions for accents in formulas, so that the two sorts of accents will not be confused with each other. The following math accents are provided by plain TeX and are exemplified atop letter &apos;a&apos;:</para>
            <programlisting>$\hat a$
$\check a$
$\tilde a$
$\acute a$
$\grave a$
$\dot a$
$\ddot a$
$\breve a$
$\bar a$
$\vec a$</programlisting>
           <para>The first nine of these are called <userinput>\^</userinput>, <userinput>\v</userinput>, <userinput>\~</userinput>, <userinput>\'</userinput>, <userinput>\`</userinput>, <userinput>\.</userinput>, <userinput>\" </userinput>, <userinput>\u</userinput>, and <userinput>\=</userinput>, respectively, when they appear in text; <userinput>\vec</userinput> is an accent that appears only in formulas. \TeX\ will complain if you try to use <userinput>\^</userinput> or <userinput>\v</userinput>, etc., in formulas, or if you try to use <userinput>\hat</userinput> or <userinput>\check</userinput>, etc., in ordinary text.</para>
           <para>When the letters <emphasis>i</emphasis> and <emphasis>j</emphasis> are accented in math formulas, dotless symbols <userinput>\imath</userinput> and <userinput>\jmath</userinput> should be used as provided in plain TeX.</para>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Subscripts and superscripts</title>
          <para>Subscripts and superscripts are preceded by a hat or an underscore. These apply only to the next single character. If you want several to be subscripted or superscripted, just enclose them in braces, as in <userinput>$e^{\omega i}$</userinput>, which prints e<superscript>&omega;i</superscript>.</para>
          <para>A subscript or superscript preceding a glyph can be printed by preceding the expression with an empty group, as in <userinput>${}_3A$</userinput>, which prints <subscript>3</subscript>A.</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Operators</title>
          <para>TeX puts some extra space before and after some operators. Also, operators consisting of letters are set in roman.</para>
          <para>I have already discussed the arithmetic operators (&apos;+&apos;, &apos;-&apos;, &apos;*&apos;, and &apos;/&apos;). Some other common glyph operators are <userinput>\times</userinput> and <userinput>cdot</userinput> (a vertically <emphasis>centered</emphasis> dot to denote multiplication, too), <userinput>\cup</userinput> and <userinput>\cap</userinput> for set union and intersection, <userinput>\vee</userinput> (or <userinput>\lor</userinput>), <userinput>\wedge</userinput> (or <userinput>\land</userinput>), and <userinput>\xyz</userinput> for logical OR, AND, and NOT, <userinput>\pm</userinput> and <userinput>\mp</userinput> for plus-minus and minus-plus, <userinput>to</userinput> and <userinput>\mapsto</userinput> to map a set (element) to another set (element), <userinput>\le</userinput> and <userinput>\xyz</userinput> for less or equal and greater or equal; <userinput>\ne</userinput> for not equal, <userinput>\equiv</userinput> and <userinput>\not\equiv</userinput> for equivalent and not equivalent, <userinput>\subset</userinput> and <userinput>\subseteq</userinput>, for inclusion and non-strict inclusion...</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Roots</title>
          <para>A square root is printed by command <function>\sqrt</function>, which takes one argument. Thus, you may type <userinput>\sqrt2</userinput> or <userinput>\sqrt{2}</userinput> or <userinput>\sqrt{2+3}</userinput>. In the general case, you can print the radix through command <function>\root</function>, used like this: <userinput>$\root 3 \of 27 = 3$</userinput>.</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Under and over</title>
          <section sect='sect4'>
            <title>Fractions, binomials, and limits</title>
            <para>Fractions are made by typing <userinput>\over</userinput> between numerator and denominator. Binomials are made by typing <userinput>\choose</userinput> between its terms. Subscripts and superscripts of summations are printed over and under the summation sign in display mode. Try these:</para>
            <programlisting>$$n+1\over n+2$$
$${x+y^2\over k}+1$$
$$n+1\choose3$$
$$\sum_{n=1}^3 Z_n^2$$</programlisting>
<para>Notice the second expression: sometimes grouping is necessary.</para>
<para>If the numerator of a fraction is a fraction, it should be set as with a slash: <userinput>$${a \over b} \over 2$$</userinput></para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>An expression over another expression</title>
            <para>TeX has another operation <userinput>\atop</userinput>, which is like <userinput>\over</userinput> except that it leaves out the fraction line, as in <userinput>$$x \atop y + 2$$</userinput>. (<function>\choose</function>, for typing binomials, is a plain TeX macro based on <function>\atop</function>.)</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Summations and Integrals</title>
            <para>These are set through <userinput>\sum</userinput> and <userinput>\int</userinput>, with limits specified as subscripts and superscripts. In display mode they are printed larger, with limits over and under, whereas in text mode they are printed smaller with limits to the right, so as not to make too tall a box.</para>
            <para>If you want the limits to be printed differently, you can type <userinput>\limits</userinput> or <userinput>\nolimits</userinput> right after the the large operator. For instance:</para>
            <programlisting>$$\int\limits_0^{\pi\over2}$$
$$\sum\nolimits_{n=1}^m$$</programlisting>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Lines under and over</title>
            <para>TeX and Plain TeX provide four operators that span a group horizontally: <userinput>\underline</userinput>, <userinput>\overline</userinput>, <userinput>\widehat</userinput> and <userinput>\widetilde</userinput>. These are so straightforward to use that I will only provide two examples: <userinput>$\underline 3$</userinput> and <userinput>$\overline{\alpha^2}$</userinput>.</para>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Delimiters</title>
          <para>Delimiters are important to mathematicians, because they provide good visual clues to the underlying structure of complex expressions; they delimit the boundaries of individual subformulas. Here is a list of the 22 basic delimiters provided by plain TeX:</para>
          <itemizedlist>
            <!-- 
|(|&left parenthesis: $($\cr
|)|&right parenthesis: $)$\cr
|[| or ^|\lbrack|&left bracket: $[$\cr
|]| or ^|\rbrack|&right bracket: $]$\cr
|\{| or ^|\lbrace|&left curly brace: $\{$\cr
|\}| or ^|\rbrace|&right curly brace: $\}$\cr
^|\lfloor|&left floor bracket: $\lfloor$\cr
^|\rfloor|&right floor bracket: $\rfloor$\cr
^|\lceil|&left ceiling bracket: $\lceil$\cr
^|\rceil|&right ceiling bracket: $\rceil$\cr
^|\langle|&left angle bracket: $\langle$\cr
^|\rangle|&right angle bracket: $\rangle$\cr
|/|&slash: $/$\cr
^|\backslash|&reverse slash: $\backslash$\cr
\| or ^|\vert|&vertical bar: $\vert$\cr
|\|\| or ^|\Vert|&double vertical bar: $\Vert$\cr
^|\uparrow|&upward arrow: $\uparrow$\cr
^|\Uparrow|&double upward arrow: $\Uparrow$\cr
^|\downarrow|&downward arrow: $\downarrow$\cr
^|\Downarrow|&double downward arrow: $\Downarrow$\cr
^|\updownarrow|&up-and-down arrow: $\updownarrow$\cr
^|\Updownarrow|&double up-and-down arrow: $\Updownarrow$\cr
            -->
          </itemizedlist>
          <para>In order to get a slightly larger version of any of these symbols, just precede them by <userinput>\bigl|</userinput> (for opening delimiters) or <userinput>\bigr|</userinput> (for closing ones). This makes it easier to read formulas that contain delimiters inside delimiters. Then you can also type <userinput>\Bigl</userinput> and <userinput>\Bigr</userinput> to get larger symbols suitable for displays. These are 50% taller than their <userinput>\big</userinput> counterparts. Displayed formulas most often use delimiters that are even taller (twice the size of <function>\big</function>); such delimiters are constructed by <userinput>\biggl</userinput> and <userinput>\biggr</userinput>. Finally, there are <userinput>\Biggl</userinput> and <userinput>\Biggr</userinput> versions, 2.5 times as tall as the <userinput>\bigl</userinput> and <userinput>\bigr</userinput> delimiters.</para>
          <para>TeX has a built-in mechanism that figures out how tall a pair of delimiters needs to be, in order to enclose a given subformula; so you can use this method, instead of deciding whether a delimiter should be <userinput>\big</userinput> or <userinput>\bigg</userinput> or whatever. All you do is type</para>
          <programlisting>\left&lt;delim<subscript>1</subscript>&gt; &lt;subformula&gt; \right&lt;delim<subscript>2</subscript>&gt;</programlisting>
          <para>and TeX will typeset the subformula, putting the specified delimiters at the left and the right. The size of the delimiters will be just big enough to cover the subformula. But whenever you use <userinput>\left</userinput> and <userinput>\right</userinput> they must pair up with each other.</para>
          <para>If you want to omit a delimiter, just type a dot, as in <userinput>\left.</userinput> or <userinput>\right.</userinput> and you get a null delimiter. Still, a null delimiter isn&apos;t completely void; it is an empty box whose width is a TeX parameter called <userinput>\nulldelimiterspace</userinput>. (We will see later that null delimiters are inserted next to fractions.) Plain TeX sets <userinput>\nulldelimiterspace=1.2pt</userinput>.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Axes</title>
          <para>If you look closely at some examples of math typesetting, you will notice that large parentheses and brackets are symmetric with respect to an invisible horizontal line that runs a little bit above the <varname>baseline</varname>; when a delimiter gets larger, its height and depth both grow by the same amount. This horizontal line is called the <firstterm>axis</firstterm> of the formula. The bar line in every fraction is centered on the axis, regardless of the size of the numerator or denominator.</para>
          <para>Sometimes it is necessary to create a special box that should be centered vertically with respect to the axis. TeX provides a simple way to do this: just type</para>
          <programlisting>\vcenter{&lt;vertical mode material&gt;}</programlisting>
          <para>and the vertical mode material will be packed into a box just as if <userinput>\vcenter</userinput> had been <userinput>\vbox</userinput>. Then the box will be raised or lowered until its top edge is as far above the axis as the bottom edge is below.</para>
          <warning>The concept of <quote>axis</quote> is meaningful for TeX only in math formulas, not in ordinary text; therefore TeX allows you to use <userinput>\vcenter</userinput> only in math mode. If you really need to center something vertically in horizontal mode, the solution is to say <userinput>$\vcenter{...}$</userinput>.</warning>
          <para>(Incidentally, the constructions <userinput>\vcenter to&lt;dimen&gt;</userinput> and <userinput>\vcenter spread&lt;dimen&gt;</userinput> are legal too, in math mode; vertical glue is always set by the rules for <function>\vbox</function>. But <function>\vcenter</function> by itself is usually sufficient.)</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Controlling height: mathstrut, smash, and phantom props</title>
          <para>A <varname>\mathstrut</varname> is an invisible box whose width is zero; its height and depth are the height and depth of a parenthesis &apos;(&apos;. Therefore subformulas that contain <varname>\mathstrut</varname> will always have the same height and depth. What for? Often you want to have uniformity between different members of a complex formula.</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Not two but eight mathematical modes</title>
          <para>Letters and other symbols sometimes get smaller when they appear in fractionsor in exponents. It&apos;s about time that we studied TeX&apos; method for choosing the sizes of things. TeX actually has eight different styles in which it can treat formulas, namely</para>
          <itemizedlist>
            <listitem>display style (for formulas displayed on lines by themselves)</listitem>
            <listitem>text style (for formulas embedded in the text)</listitem>
            <listitem>script style (for formulas used as superscripts or subscripts)</listitem>
            <listitem>scriptscript style (for second-order superscripts or subscripts)</listitem>
          </itemizedlist>
          <para>and four other <quote>cramped</quote> styles that are almost the same except that exponents aren&apos;t raised quite so much. For brevity we shall refer to the eight styles as <varname>D</varname>, <varname>D'</varname>, <varname>T</varname>, <varname>T'</varname>, <varname>S</varname>, <varname>S'</varname>, <varname>SS</varname>, and <varname>SS'</varname>, where <varname>D</varname> is display style, <varname>D'</varname>, is cramped display style, <varname>T</varname> is text style, and so on. TeX also uses three different sizes of type for mathematics. They are called text size, script size, and scriptscript size.</para>
          <para>The normal way to typeset a formula with TeX is to enclose it in dollar signs <userinput>$...$</userinput> to render it in text style, or in double dollar signs <userinput>$$...$$</userinput> to render it in display style. The subformulas of a formula might, of course, be in different styles. Once you know the style, you can determine the size of type that TeX will use: text and display style are rendered in text size, script style is rendered in script size and scriptscript style is rendered y scriptscript size, of course.</para>
          <para>Now, while in text or display style sub- and superscripts are render in script size. In script and in scriptscript style, sub- and superscripts are render in scriptscript size.</para>
          
          <para>If you don&apos;t like the style that TeX selects by its automatic style rules, you can specify the style you want by typing <userinput>\displaystyle</userinput> or <userinput>\textstyle</userinput> or <userinput>\scriptstyle</userinput> or <userinput>\scriptscriptstyle</userinput>. The style that you select will apply until the end of the formula or subformula, or until you select another style.</para>

          
          <para><userinput>\underline</userinput> does not change the style, whereas the operations <userinput>\sqrt</userinput> and <userinput>\overline</userinput> change uncramped styles to their cramped counterparts.</para>
          
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Tables in TeX and LaTeX</title>
        <attribution>http://www.volkerschatz.com/tex/halign.html</attribution>
        <para>Low-level typesetting of tables (TeX) is a matter of aligning boxes horizontally. The TeX macro for horizontal alignment (<userinput>\halign</userinput>) is harder to use than the LaTeX <userinput>tabular</userinput> environment, but is more powerful. It can also save you a lot of work because things that have to be put into every cell of a given table column (eg font settings or mathematical mode) need to be specified only once. The actual table cells contain only what is different.</para>
        
        <section sect='sect3'>
          <title>Tables in (Plain) TeX</title>
          <para>The TeX command for horizontal alignment (<userinput>\halign</userinput>) must be followed by a group of commands enclosed by braces. This block contains all rows of the table with the cells separated by the character <userinput>&amp;</userinput> and the rows separated by <userinput>\cr</userinput>. The rows containing the text actually to be printed are preceded by a special row called the <firstterm>preamble</firstterm> or template line. It is a template into which the content of the table cells are put before being typeset. &apos;#&apos; characters serve as placeholders for the cell entries. (Inside macro definitions, &apos;##&apos; is used to avoid confusion with the macro arguments denoted by <userinput>#1</userinput>, <userinput>#2</userinput> etc.) One &apos;#&apos; must occur between every two &apos;&amp;&apos;s.</para>
          <para>The length <varname>n</varname> of the template line need not be equal to the actual number of columns in the alignment: the template is used only for as many items as are specified on a line.</para>
          
          <para>Entries in an alignment are set to take the width of the largest element in their column. Glue for separating columns can be specified by assigning it to <userinput>\tabskip</userinput>. TeX inserts this glue in between each pair of columns, and before the first and after the last column.</para>
          
          <para>Here&apos;s a simple example:</para>
          <programlisting><![CDATA[\tabskip=2em
\halign to \hsize{ \hfil ECO#  &  \hfil # kW\hfil  &  \hfil # \hfil euros \cr
A   & 20 & 999 \cr
A00 & 22 & 2999 \cr
A20 & 27 & 3299 \cr}]]></programlisting>
        <para>which would produce the table:</para>
          <table>
            <tr> <td>ECOA</td>   <td>20 kW</td>  <td>999 euros</td> </tr>
            <tr> <td>ECOA00</td> <td>22 kW</td> <td>2999 euros</td> </tr>
            <tr> <td>ECOA20</td> <td>27 kW</td> <td>3299 euros</td> </tr>
          </table>
          
          <para>To typeset the heading in the preceding example you would like to omit much of the specifications in the preample. Use <userinput>\omit</userinput> before each cell of a line to be typeset bypassing the preamble. Remember to repeat all your alignment done through <userinput>\hfill</userinput> and such. Thus:</para>
          <programlisting><![CDATA[\tabskip=2em
\halign to \hsize{ \hfil ECO#  &  \hfil # kW\hfil  &  \hfil # \hfil euros \cr
 \omit\bf \hfil engine \hfil & \omit\bf\hfil power\hfil & \omit\bf\hfil price \hfil \cr
% \noalign{\hrule}
A   & 20 & 999 \cr
A00 & 22 & 2999 \cr
A20 & 27 & 3299 \cr}]]></programlisting>
          <para>which now looks nicer, something like:</para>
          <table>
            <thead> <th>engine</th>   <th>power</th>  <th>price</th> </thead>
            <tr> <td>ECOA</td>   <td>20 kW</td>  <td>999 euros</td> </tr>
            <tr> <td>ECOA00</td> <td>22 kW</td> <td>2999 euros</td> </tr>
            <tr> <td>ECOA20</td> <td>27 kW</td> <td>3299 euros</td> </tr>
          </table>
          
          <para>TeX first calculates widths (for \halign) or heights (for \valign) of all entries; then it typesets the whole alignment using in each column (row) the maximum width (height) of entries in that column (row).</para>
          <para>As an example, in the following table there is no tabskip glue before the first and after the last column; in between all columns there is stretchable tabskip.</para>
          <programlisting><![CDATA[\tabskip=0pt \halign to \hsize{
  \vrule#\tabskip=0pt plus 1fil\strut&
  \hfil#\hfil&
  \vrule#&
  \hfil#\hfil&
  \vrule#&
  \hfil#\hfil&
  \tabskip=0pt\vrule#\cr
  
  \noalign{\hrule}
  &\multispan5\hfil Just a table\hfil&\cr
  
  \noalign{\hrule}
  &one&&two&&three&\cr &a&&b&&c&\cr
  
  \noalign{\hrule}
}]]></programlisting>
        </section> <!-- </sect3> -->

        
        <section sect='sect3'>
          <title>Lines around table cells</title>
          <para>First you want to cancel interline skip within a block delimited by curly braces (type <userinput>\offinterlineskip</userinput>). Then you use empty (=no content) columns to typeset vertical lines.</para>
          <programlisting><![CDATA[{
  \offinterlineskip
  \tabskip=0pt
  \halign{
    \vrule height2.75ex depth1.25ex width 0.6pt #\tabskip=1em &
    \hfil 0.#\hfil &\vrule # & \qquad$0.#\,\pi$\hfil &\vrule # &
    \hfil 0.#\hfil &#\vrule width 0.6pt \tabskip=0pt\cr
    \noalign{\hrule height 0.6pt}
    & \omit$\alpha_s$ &&\omit star angle && \omit diquark size [fm] & \cr
    \noalign{\hrule}
    & 3 && 22 && 34 &\cr
    & 4 && 14 && 22 &\cr
    & 5 && 095 && 15 &\cr
    \noalign{\hrule height 0.6pt}
  }
}]]></programlisting>
          <para>...</para>
          <para>Let&apos;s now go through the TeX code line by line. The first command switches off the spacing between lines. Normally TeX automatically inserts line spacing before starting a new line, even in tables. When typesetting framed tables, one has to disable this because otherwise the vertical lines of the frame don&apos;t join up. To make this change apply only to the table, everything is included in braces.</para>
          <para>The second command sets the spacing between table cells to zero. This is necessary for the first column because the vertical lines have columns of their own. Without the <userinput>\tabskip=0pt</userinput>, a space would be put before the vertical lines, and as a result the horizontal ones would stick out to the left of the table. (One could of course put vertical lines within the table cells containing the text, but usually it is done this way.)</para>
          <para>Next comes the \halign command. The first item in the first cell template is a vertical ruler of the width 0.6 point. Its height (above the base line) and depth (under the base line) is given explicitly to force the table cells to be higher than they would normally be. One can also use this trick in tables without frames by setting the ruler width to zero point. Each template also has to contain a &apos;#&apos;, even when the column is meant to remain empty as here. The last command in this template sets the column spacing back to something greater than zero.</para>
          <para>The next column contains the first text entry. It is a numerical entry containing numbers which are smaller than 1. They are centred (since there are \hfil commands to both sides), and the zero and the decimal point are already written into the template to save me some work in the entries. Then comes another vertical rule. Its height does not have to be specified again; it will be as high as the table row. The width is the default width of 0.4 point, somewhat narrower than the outer frame. The next column contains multiples of pi. Therefore the template already contains the symbol \pi besides the zero and decimal point, in math mode. It is aligned left (\hfil on the right) but has a large space to the left (\qquad) so that the decimal points are approximately in the middle of the column. Next comes another vertical line, then the third column (centred again), and the final thick vertical line. In the template for the last column \tabskip is again set to zero to avoid horizontal lines overlapping to the right. The first \cr marks the end of the preamble.</para>
          <para>The next command, \noalign, is often useful in tables. It allows one to insert commands between table lined which would normally only be permitted in vertical mode, ie between paragraphs. One of these commands is a horizontal line (ruler). It extends over the whole width of the table and has the height 0.6 point. One can use \noalign for other things, too, for example inserting spaces between table lines or allowing or disabling page breaks between them (see here for an example).</para>
          <para>Now comes the first table row. It starts with an alignment tab character (&amp;) since the first column contains just the vertical line, no text. Likewise, later there are double &apos;&amp;&apos;s between text entries, and the line is concluded with a &apos;&amp;&apos;. All text entries \omit their templates since they don&apos;t contain zeros. Here no alignment is forced. In this case this results in left alignment but the result is very sensitive to spaces in the table entries. It is usually better to insert a few \hfils. After the \cr indicating the end of the table row there is another horizontal line (of default width), followed by three rows with numerical entries which are not separated by horizontal lines. After the last row there is a thick line which completes the frame. The following two braces close the \halign command and the enclosing group.</para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Cells spanning several columns</title>
          <para><userinput>\span</userinput> disables the alignment of the following alignment character (&amp;) and thereby makes it possible to extend table cells over several columns. The templates of all columns are used unless one writes <userinput>\omit\span\omit\span\omit...</userinput>; otherwise just the restriction that the ampersand in this row line up with the others is removed.</para>
          <para>An example for this is the following table which seems to contain only one column. The alignment mechanism is used to make the decimal points line up by putting the digits before and after the point into different columns. The decimal points are aligned by putting an ampersand after each of them. In order not to introduce a space after the point, <userinput>\tabskip</userinput> is set to zero before the corresponding alignment character (&amp;). The title line is also interesting. The template of the first (text) column is omitted. The source code is:</para>
          <programlisting><![CDATA[{
  \offinterlineskip
  \tabskip=0pt
  \halign{\vrule height2.75ex depth1.25ex #\tabskip=1em &
    \qquad\hfil#\tabskip=0pt &# \hfil\tabskip=1em  &#\vrule\tabskip=0pt \cr
    \noalign{\hrule}
    & \omit\hfil\bf value\span  &\cr
    \noalign{\hrule}
    & 109.&589  &\cr
    & 104.&411  &\cr
    &  88.&321  &\cr
    &  74.&7105 &\cr
    &  88.&5942 &\cr
    \noalign{\hrule}
  }
}]]></programlisting>
<para></para>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Alignment primitives</title>
          <variablelist>
            <varlistentry> <term>\halign</term> <listitem><para>Horizontal alignment.</para></listitem> </varlistentry>
            <varlistentry> <term>\valign</term> <listitem><para>Vertical alignment.</para></listitem> </varlistentry>
            <varlistentry> <term>\omit</term> <listitem><para>Omit the template for one alignment entry.</para></listitem> </varlistentry>
            <varlistentry> <term>\span</term> <listitem><para>Join two adjacent alignment entries.</para></listitem> </varlistentry>
            <varlistentry> <term>\multispan</term> <listitem><para>Macro to join a number of adjacent alignment entries.</para></listitem> </varlistentry>
            <varlistentry> <term>\tabskip</term> <listitem><para>Amount of glue in between columns (rows) of an \halign (\valign).</para></listitem> </varlistentry>
            <varlistentry> <term>\noalign</term> <listitem><para>Specify vertical (horizontal) material to be placed in between rows (columns) of an \halign (\valign).</para></listitem> </varlistentry>
            <varlistentry> <term>\cr</term> <listitem><para>Terminate an alignment line.</para></listitem> </varlistentry>
            <varlistentry> <term>\crcr</term> <listitem><para>Terminate an alignment line if it has not already been terminated by \cr.</para></listitem> </varlistentry>
            <varlistentry> <term>\everycr</term> <listitem><para>Token list inserted after every \cr or non-redundant \crcr.</para></listitem> </varlistentry>
            <varlistentry> <term>\centering</term> <listitem><para>Glue register in plain TEX for centring \eqalign and \eqalignno. Value: 0pt plus 1000pt minus 1000pt</para></listitem> </varlistentry>
            <varlistentry> <term>\hideskip</term> <listitem><para>Glue register in plain TEX to make alignment entries invisible. Value: -1000pt plus 1fill</para></listitem> </varlistentry>
            <varlistentry> <term>\hidewidth</term> <listitem><para>Macro to make preceding or following entry invisible.</para></listitem> </varlistentry>
          </variablelist>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Accessing the PS and PDF engines through \special</title>
        <para>Non-TeX commands, possible further downstream (e.g. PostScript and PDF), can be scheduled within a TeX file, from including an image to inserting a hyperlink, by means of the <function>\special</function> TeX command, an extension offered by the processing program and as such implementation specific.</para>
        <para>The argument of <function>\special</function> can be anything: TeX more or less doesn&apos;t care about. It is expanded (so there&apos;s the restriction that it has to be expandable, e.g. no undefined commands) and just written to the DVI. It is then the responsibility of the DVI driver (previewer, dvips, whatever) to interpret the strings written out by <function>\special</function>.</para>
        <para>Knuth, in the TeXbook, suggests that the argument of <function>\special</function> should contain at least two parts, the former hinting at the application that is supposed to interpret the special, but this is really just a suggestion.</para>
        <para><function>\special</function>&apos;s for two converters are considered: <application>dvipdfm</application> and <application>dvips</application>. Still, some <function>\special</function> commands take effect already at the dvi stage.</para>
        <para>TEX is a programming language. A DVI file is a page description consisting of very simple program instructions that have no branching or decision instructions. Similarly PostScript is a complete programming language, while PDF is a page description language consisting of simple program instructions without any branching or decision capabilities. TEX is like PostScript (without the graphics) while DVI is like PDF (without the graphics or the hyper-links). Creating PDF from DVI using Distiller requires converting a page description to a program, and converting that program back to a page description. To continue this analogy, Pdfmarks are PostScript <quote>escapes</quote> and are meant for the Distiller. TEX \special primitives are TEX <quote>escapes</quote> and are meant for the DVI driver.</para>
        <para>according to the creators of <application>dvipdfm</application>, it seems natural to go directly from DVI to PDF, where TEX replaces PostScript, the DVI driver replaces Distiller, and TEX \special primitives replace the pdfmarks. On the other hand, it makes sense to enable access to PostScript from TeX, which is the main reason for PostScript programmers to choose <application>dvips</application>, which is discussed first.</para>
        
        <section sect='sect3'>
          <title>dvips \special&apos;s</title>
          <section sect='sect4'>
            <title>Papersize</title>
            <para>The format of the <function>papersize</function> special is <literal>\special{papersize=width,height}</literal>, where <parameter>width</parameter> is the horizontal size of the page, and <parameter>height</parameter> is the vertical size. The dimensions supported are the same as for TEX; namely, in (inches), cm (centimeters), mm (millimeters), pt (points), sp (scaled points), bp (big points, the same as the default PostScript unit), pc (picas), dd (didot points), and cc (ciceros).</para>
            <para>You specify landscape orientation through <userinput>\special{landscape}</userinput>.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4' xml:id='eps_in_tex'>
            <title>Including Encapsulated PostScript files</title>
            <para>Scaling and including PostScript graphics is easy if the PostScript file is correctly formed, i.e. it includes an accurate bounding box comment, on the pattern  <userinput>%%BoundingBox: llx lly urx ury</userinput>, such as:</para>
            <programlisting>%%BoundingBox: 0 0 150 100</programlisting>
            <para>Further, the first should start with the two magic characters <quote>%!</quote>.</para>
            <para>Next, if you are using plain TEX, you need <filename>epsf.tex</filename>, therefore bring it in through a line <userinput>\input epsf</userinput>.</para>
            <para>Last, at the point you want to include a file, enter a line such as <userinput> \epsffile{&lt;filename&gt;.eps}</userinput>. If you are in the middle of a paragraph, the EPS figure will be incorporated as a box in the current line, which will cause the common baseline to drop if the height of the figure is greater than the <parameter>baselineskip</parameter>. The origin of the figure will be the same as that of a character that were to be printed instead.</para>
            <para>Here is a simple EPS file to test inside a tex file:</para>
            <programlisting>%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 0 100 19
/Times-Roman 22 selectfont

0 0 moveto
(Hello EPS!) show</programlisting>
            <para>(If your file does not have a bounding box comment, you can supply the numbers as determined in the previous section, in the same order they would have been in a normal bounding box comment: <userinput>\epsffile[0 0 100 19]{hello.eps}</userinput>.)</para>
            <para>The \epsffile macro typesets the figure as a TEX <function>\vbox</function> at the point of the page that the command is executed. By default, the graphic will have its <emphasis>natural</emphasis> width (namely, the width of its bounding box). The TEX box will have depth zero and its natural height. By default, the graphic will be scaled by any DVI magnification in effect, just as is everything else in your document.</para>
          
            <bridgehead>EPSF scaling</bridgehead>
            <para>Usually, you will want to scale an EPSF figure to some size appropriate for your document, since its natural size is determined by the creator of the EPS file. The best way to do this is to assign the desired size to the TEX <parameter>\epsfxsize</parameter> or <parameter>\epsfysize</parameter> variables, whichever is more convenient for you. That is, put <userinput>\epsfxsize=&lt;dimen&gt;</userinput> right before the call to <function>\epsffile</function>. Then the width of the TEX box will be <parameter>dimen</parameter> and its height will be scaled proportionately. Similarly, you can set the vertical size with <userinput>\epsfysize=&lt;dimen&gt;</userinput> in which case the height will be set and the width scaled proportionally. And if you set both, both will be honored, but the aspect ratio of the included graphic may necessarily be distorted, i.e., its contents stretched in one direction or the other.</para>
          
            <bridgehead>EPSF clipping</bridgehead>
            <para>By default, clipping is disabled for included EPSF images. This is because clipping to the bounding box dimensions often cuts off a small portion of the figure, due to slightly inaccurate bounding box arguments. The problem might be subtle; lines around the boundary of the image might be half their intended width, or the tops or bottoms of some text annotations might be sliced off. If you want to turn clipping on, just use the command <function>\epsfclipon</function> and to turn clipping back off, use <function>\epsfclipoff</function>.</para>
            
            <bridgehead>An example including EPS with graphics and text printed in a scaled inherited font:</bridgehead>
            <programlisting>
              <xi:include href="Electric_files/tex_code/withEPSimg.tex" parse="text"  xmlns:xi="http://www.w3.org/2001/XInclude">
                <xi:fallback/>
              </xi:include>
            </programlisting>
            
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Including PostScript files</title>
            <para>The basic special for file inclusion is as follows:</para>
            <programlisting>\special{psfile=&lt;filename&gt;.ps [&lt;key&gt;=&lt;value&gt;] ... }</programlisting>
            <para>This brings in the PostScript file <filename>&lt;filename&gt;.ps</filename> such that the current point will be the origin of the PostScript coordinate system. The optional <replaceable>key</replaceable>=<replaceable>value</replaceable> assignments allow you to specify transformations on the PostScript. The possible <replaceable>keys</replaceable> are:</para>
            <para>
              <simplelist>
                <member>hoffset: The horizontal offset (default 0).</member>
                <member>voffset: The vertical offset (default 0).</member>
                <member>hsize: The horizontal clipping size (default 612).</member>
                <member>vsize: The vertical clipping size (default 792).</member>
                <member>hscale: The horizontal scaling factor, as a percentage (default 100).</member>
                <member>vscale: The vertical scaling factor, as a percentage (default 100).</member>
                <member>angle: The rotation, in degrees (default 0).</member>
                <member>clip: Enable clipping to the bounding box (default disabled).</member>
                <member>llx, lly, urx, ury: Bounding box of the included image, just as in a %%BoundingBox comment. Values are in big points, and may be fractional.</member>
                <member>rhi, rwi: Desired width and height of the resulting figure in the output, in tenths of big points (720 to the inch); may be fractional. If both rwi and rhi are nonzero, the picture is scaled, possibly losing aspect ratio. If only one of rwi and rhi is nonzero, the picture is scaled, preserving aspect ratio.</member>
              </simplelist>
            </para>
            <para>The offsets and sizes are given in PostScript units (big points).</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Including headers from TEX</title>
            <para>In order to get a particular graphic file to work, a certain font or header file might need to be run first. The <application>dvips</application> program provides support for this with the <quote>header</quote> <function>\special</function>. For instance, to cause <filename>procedures.ps</filename> be brought in, write: <userinput>\special{header=procedures.ps}</userinput> As another example, if you have some PostScript code that uses a PostScript font not built into your printer, you must download it to the printer. If the font isn&apos;t used elsewhere in the document, Dvips cannot know you&apos;ve used it, so you must include it in the same way, as in: <userinput>\special{header=putr.pfa}</userinput> to include the font definition file for Adobe Utopia Roman. The header also special allows for specifying some additional code that should be inserted into the PostScript document before and after the file itself, as follows: <userinput>\special{header={&lt;filename&gt;.ps} pre={&lt;pre-code&gt;} post={&lt;post-code&gt;}}</userinput> This will insert <replaceable>pre-code</replaceable> just before <filename>&lt;filename&gt;.ps</filename> and <replaceable>post-code</replaceable> just after. It is required to use the (balanced) braces in all of the arguments, including the header, when using this extended syntax. This allows, for instance, dynamic headers, where some of the content depends on settings from the user in (La)TEX. Another application is the inclusion of graphics inside the PostScript header, so that they can be reused throughout the document, as with logs. That avoids including the same graphic several times.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Literal PostScript</title>
            <para>For simple graphics, or just for experimentation, literal PostScript code can be included. Simply use a <function>\special</function> beginning with a double quote character &apos;"&apos;; there is no matching closing &apos;"&apos;.</para>
            <para>Generally, Dvips encloses specials in a PostScript <function>save</function>/<function>restore</function> pair, guaranteeing that the special will have no effect on the rest of the document. The <function>ps</function> special, however, allows you to insert literal PostScript instructions without this protective shield; you should understand what you&apos;re doing (and you shouldn&apos;t change the PostScript graphics state unless you are willing to take the consequences). This command can take many forms because it has had a torturous history; any of the following will work:</para>
            <programlisting>\special{ps:&lt;text&gt;}
\special{ps::&lt;text&gt;}
\special{ps::[begin]&lt;text&gt;}
\special{ps::[end]&lt;text&gt;}
\special{ps::[nobreak]&lt;text&gt;}</programlisting>
            <para>You can download literal PostScript header code in your TEX document, for use with (for example) literal graphics code that you include later. The text of a <function>\special</function> beginning with an &apos;!&apos; is copied into the output file. A dictionary <varname>SDict</varname> will be current when this code is executed; Dvips arranges for <varname>SDict</varname> to be first on the dictionary stack when any PostScript graphic is included, whether literally (the &apos;"&apos; special) or through macros (e.g., <filename>epsf.tex</filename>). For example: <userinput>\special{! /reset { 0 0 moveto} def}</userinput></para>
            <programlisting>\special{ps:
      [ /Rect [602 1083 1087 1320]
        /Border [0 0 2]
        /Color [1 0 0]
        /Dest link_child_page
        /Subtype /Link
        /ANN pdfmark
   } </programlisting>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>PostScript hooks</title>
            <para>Besides including literal PostScript at a particular place in your document (as described in the previous section), you can also arrange to execute arbitrary PostScript code at particular times while the PostScript is printing. If any of the PostScript names <function>bop-hook</function>, <function>eop-hook</function>, <function>start-hook</function>, or <function>end-hook</function> are defined in <varname>userdict</varname>, they will be executed at the beginning of a page, end of a page, start of the document, and end of a document, respectively.</para>
            <para>When these macros are executed, the default PostScript coordinate system and origin is in effect. Such macros can be defined in headers added by the <userinput>-h</userinput> option or the <userinput>header=</userinput> special, and might be useful for writing, for instance, <quote>DRAFT</quote> across the entire page, or, with the aid of a shell script, dating the document. These macros are executed outside of the <function>save</function>/<function>restore</function> context of the individual pages, so it is possible for them to accumulate information, but if a document must be divided into sections because of memory constraints, such added information will be lost across section breaks.</para>
            <para>The single argument to <function>bop-hook</function> is the physical page number; the first page gets zero, the second one, etc. <function>bop-hook</function> must leave this number on the stack. None of the other hooks are passed arguments.</para>
            <para>As an example of what can be done, the following special will write a light grey <quote>DRAFT</quote> across each page in the document:</para>
            <programlisting>\special{!userdict begin
  /bop-hook{
    gsave 
      200 30 translate
      65 rotate
      /Times-Roman findfont 216 scalefont setfont
      0 0 moveto
      0.7 setgray (DRAFT) show 
    grestore
  } def
end}</programlisting>
            <para>(Using <function>bop-hook</function> or <function>eop-hook</function> to preserve information across pages breaks compliance with the Adobe document structuring conventions, so if you use any such tricks, you may also want to use the <userinput>-N</userinput> option to turn off structured comments (such as <userinput>%%Page</userinput>). Otherwise, programs that read your file will assume its pages are independent.)</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>HyperTeXt</title>
            <para><application>Dvips</application> has support for producing hypertext PostScript documents. If you specify the <userinput>-z</userinput> option, the <function>html:</function> specials described below will be converted into <function>pdfmark</function> PostScript operators to specify links. Without <userinput>-z</userinput>, <function>html:</function> specials are ignored.</para>
            <para>The resulting PostScript can then be processed by a distiller program to make a PDF file. (It can still be handled by ordinary PostScript interpreters as well.) Various versions of both PC and Unix distillers are supported; Ghostscript includes limited distiller support.</para>
            <warning>
              <para>If you intend to go all the way to PDF, you may want to use the standard 35 PostScript fonts exclusively, since other fonts are embedded as bitmaps by default. The Adobe PDF readers are extremely slow when dealing with bitmap fonts and the results look terrible on the screen. Printouts will probably look fine, but may not take full advantage of a high- resolution printer. Alternatively, you can have your fonts embedded as Type 1 scalable outlines. The resulting PostScript files may be larger, but can be effectively rasterized at any resolution. They can also be converted to PDF files that can be used effectively at any screen or printer resolution.</para>
              <para>To get the TeX fonts embedded in the PostScript file as Type 1 fonts, add <userinput>-Ppdf</userinput> to the dvips command line switches.</para>
              <para>You can convert a PostScript file to PDF using <command>distill</command>, which comes with Adobe Acrobat, or <command>ps2pdf</command>, which comes with Ghostscript. The <command>ps2pdf</command> that comes with Ghostscript version 6.0 or earlier will not embed Type 1 fonts. Current recommendations are GNU Ghostscript 6.51 or Aladdin Ghostscript 7.0. You can check the fonts in a PDF file with Acrobat Reader by selecting the menu entries <guimenuitem>File|Document Info|Fonts</guimenuitem>.</para>
            </warning>
            <para>Arthur Smith (apsmith@aps.org), Tanmoy Bhattacharya, and Paul Ginsparg originally proposed and implemented the following specials:</para>
            <programlisting><![CDATA[html:<a href="xurl">
html:<a name="name">
html:</a>
html:<img src="xurl">
html:<base href="xurl">]]></programlisting>

            <variablelist>
              <varlistentry>
                <term>href</term>
                <listitem><para>Creates links in your TEX document. For example: <userinput><![CDATA[\special{html:<a href="http://www.tug.org/">}\TeX\ Users Group\special{html:</a>}]]></userinput>. The user will be able to click on the text <literal>TEX Users Group</literal> while running <application>Xdvi</application> and get to the TUG home page. (By the way, this is for illustration. In practice, you most probably want to use macros to insert the \special commands.)</para> </listitem>
              </varlistentry>
              <varlistentry>
                <term>name</term>
                <listitem>
                  <para>Defines URL targets in your TEX documents, so links can be resolved. For example: <userinput><![CDATA[\special{html:<a name="paradise">}Paradise\special{html:</a>}]]></userinput> is exactly where you are right now.</para>
                  <para>This will resolve an <userinput>href=&quot;#paradise&quot;</userinput>. You&apos;ll also have to change the catcode of &apos;#&apos;, etc. It&apos;s usually easiest to use existing macro packages which take care of all the details.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>img</term>
                <listitem>
                  <para>Links to an arbitrary external file. Interactively, a viewer is spawned to read the file according to the file extension and your <filename>mailcap</filename> file (see the Xdvi documentation).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>base</term>
                <listitem>
                  <para>Defines a base URL that is prepended to all the name targets. Typically unnecessary, as the name of the DVI file being read is used by default.</para>
                </listitem>
              </varlistentry>
              <varlistentry><term></term></varlistentry>
            </variablelist>
            <warning>The <tag>img</tag> and <tag>base</tag> tags are not yet implemented in Dvips or the NeXTSTEP DVI viewer.</warning>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Color</title>
            <para>Besides the source code support itself, there are additional TEX macro files: <filename>colordvi.tex</filename> and <filename>blackdvi.tex</filename> (and corresponding <filename>.sty</filename> versions for use with LaTeX).</para>
            <para>All the color macro commands are defined in <filename>colordvi.tex</filename> (or <filename>colordvi.sty</filename>). To access these macros simply add to the top of your plain TEX file the command: <userinput>\input colordvi</userinput>.</para>
            <para>These macros provide two basic kinds of color macros: ones for local color changes (a few words, a single symbol) and one for global color changes (the whole document). All the color names use a mixed case scheme to avoid conflicts with other macros. There are 68 predefined colors, with names taken primarily from the Crayola crayon box of 64 colors, and one pair of macros for the user to set his own color pattern. You can browse the file <filename>colordvi.tex</filename> for a list of the predefined colors. The comments in this file also show a rough correspondence between the crayon names and Pantones.</para>
            <para>A local color command has the form <userinput>\&lt;ColorName&gt;{&lt;colored text&gt;}</userinput> where <replaceable>ColorName</replaceable> is the name of a predefined color, e.g., <constant>Blue</constant>. As shown, these macros take one argument, the text to print in the specified color.</para>
            <para>The global color command has the form <userinput>\text<replaceable>ColorName</replaceable></userinput>. These macros take no arguments and changes the default color from that point on to <replaceable>ColorName</replaceable>.</para>
            <para>The color commands will even work in math mode and across math mode boundaries. This means that if you have a color before going into math mode, the mathematics will be set in that color as well.</para>
            <bridgehead>User-defined colors</bridgehead>
            <para>There are two ways for the user to specify colors not already defined. For local changes, there is the command <function>\Color</function> which takes two arguments. The first argument is four numbers between zero and one and specifies the intensity of cyan, magenta, yellow and black (CMYK) in that order. The second argument is the text that should appear in the given color. For example, suppose you want the words <quote>this color is pretty</quote> to appear in a color which is 50% cyan, 85% magenta, 40% yellow and 20% black. You would use the command: <userinput>\Color{.5 .85 .4 .2}{this color is pretty}</userinput>. For global color changes, there is a command <function>\textColor</function> which takes one argument, the CMYK quadruple of relative color intensities. For example, if you want the default color to be as above, then the command <userinput>\textColor{.5 .85 .4 .2} The text from now on will be this pretty color</userinput> will do the trick.</para>
            
            <warning>
              <para>Color macros are defined via <function>\special</function> keywords. As such, they are put in the <filename>.dvi</filename> file only as explicit message strings to the driver. The (unpleasant) result is that certain unprotected regions of the text can have unwanted color side effects. For example, if a color region is split by TEX across a page boundary, then the footers of the current page (e.g., the page number) and the headers of the next page can inherit that color. To avoid this effect globally, users should make sure that these special regions of the text are defined with their own local color commands. For example, to protect the header and footer in plain TEX, use</para>
              <programlisting>\headline{\Black{My Header}}
\footline{\Black{\hss\tenrm\folio\hss}}</programlisting>
<para>This warning also applies to figures and other insertions, so be careful!</para>
</warning>

            <bridgehead>Color support details</bridgehead>
            <para>To support color, Dvips recognizes a certain set of specials. These specials start with the keyword <function>color</function> or the keyword <function>background</function>, followed by a <firstterm>color specification</firstterm>.</para>
            <para>What is a color specification? One of three things. First, it might be a PostScript procedure as defined in a PostScript file that sets the current color to some value. To set it to <constant>maroon</constant>, <function>Maroon</function> procedure is defined as <userinput>0 0.87 0.68 0.32 setcmykcolor</userinput>.</para>
            <para>The second possibility is the name of a color model (initially, one of <constant>rgb</constant>, <constant>hsb</constant>, <constant>cmyk</constant>, or <constant>gray</constant>) followed by the appropriate number of parameters. When Dvips encounters such a macro, it sends out the parameters first, followed by the string created by prefixing <literal>TeXcolor</literal> to the color model. Thus, the color specification <userinput>rgb 0.3 0.4 0.5</userinput> would generate the PostScript code <userinput>0.3 0.4 0.5 TeXrgbcolor</userinput>.</para>
            <para>The third and final type of color specification is a double quote followed by any sequence of PostScript. The double quote is stripped from the output. For instance, the color specification <userinput>"AggiePattern setpattern</userinput> will set the <envar>color</envar> to the Aggie logo pattern (assuming such exists.)</para>
            <para>I shall describe the <function>background</function> special first, since it is the simplest. The <function>background</function> keyword must be followed by a color specification. That color specification is used as a fill color for the background. The last <function>background</function> special on a page is the one that gets issued, and it gets issued at the very beginning of the page, before any text or specials are sent.</para>
            <para>The <function>color</function> special itself has three forms. The first is just <userinput>color</userinput> followed by a color specification. In this case, the current global color is set to that color; the color stack must be empty when such a command is executed. The second form is <userinput>color push</userinput> followed by a color specification. This saves the current color on the color stack and sets the color to be that given by the color specification. This is the most common way to set a color. And the third is just <userinput>color pop</userinput>, with no color specification; this says to pop the color last pushed on the color stack from the color stack and set the current color to be that color.</para>
            <para>Dvips correctly handles these color specials across pages, even when the pages are repeated or reversed.</para>
         
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>pdfTeX</title>
          <para>pdfTEX (formerly known as TEX2PDF) is an extension to TEX which allows the user to generate (either DVI or) PDF as the primary output format without requiring the use of DVI as an intermediate language.</para>
          <para>Although TEX has traditionally generated DVI as its primary output format, TEX&apos;s creator and author (Prof. Donald E. Knuth) has himself said or written on more than one occasion that he had long envisaged that a variant of TEX might elect to use an alternative output format, and although Knuth had PostScript in mind, Adobe&apos;s PDF turns out to be an even better candidate for such purposes. It is a very compact language, already well-established as a de facto standard portable document format both on and off the web, and its deliberate omission of the procedural elements of PostScript ensures that it is efficient enough to be used for direct screen display as well as for less time-critical applications such as printing.</para>
          <section sect='sect4'>
            <title>Why not generate PDF from PS from DVI?</title>
            <para>Because by the time TEX has shipped out a completed page of DVI, much potentially useful information has already been lost. Only by modifying TEX to output PDF directly, and by integrating the generation of PDF with TEX&apos;s "digestive tract", can such information be retained and captured within the PDF file. This allows, for example, an extremely simple and elegant implementation of hyperlinks, the beginning and end of which can span multiple lines or even pages. To accomplish this using DVI as an interlanguage requires heavy use of \specials and even then some functionality is lost unless TEX is modified. PDF also allows the re-use of (potentially large) data structures, a concept completely unknown within DVI.</para>
            <para>Because the PDF which is generated by pdfTEX is usually more compact than that generated using DVI as an interlanguage, since only TEX has detailed knowledge of the data structures (boxes, etc.) of which the PDF is a representation.</para>
            <para>(And finally, because only by integrating PDF generation within TEX itself can we gain access to the font-mutating possibilities which may in the future allow the implementation of dynamic font mutation for microjustification, etc.)</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Basics</title>
            <para>When PDF output is selected, TEX&apos;s <userinput>\special</userinput> command is ignored (that is, it does not contribute anything to the page(s) being shipped out, although its other, more subtle, effects still take place). A new primitive, <userinput>\pdfliteral</userinput>, allows raw PDF to be inserted into the PDF output stream at well-defined points.</para>
            <para>pdfTEX allows the direct inclusion of bitmap graphics (as opposed to bitmap fonts). Graphics for inclusion must be expressed in PNG (Portable Network Graphics) format. Although facilities for the inclusion of EPS images are thought highly desirable by many, the overheads of PostScript interpretation make this an unreasonably demanding task. More likely is the development of a facility for the incorporation of (E)PDF images, but this is not currently implemented. Hans Hagen and Tanmoy Bhattacharya have developed a suite of macros which allow the inclusion of both <link linkend='metapost'>METAPOST</link> output and of a subset of PDF files (those that do not contain fonts, bitmaps and/or similar resources).</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Hyperlinks</title>
            <para>One of the most powerful features of the PDF format is the ability to establish both intra- and inter-document hyperlinks. This facility is accessible to pdfTEX users who have only to tag their documents to indicate the start, end and target of the link. All of the underlying housekeeping is performed by pdfTEX itself, including taking care of such difficulties as intervening line and/or page breaks. The only requirement is that the hyperlink shall start and end at the same level of box nesting. Any and all intervening boxes of the same depth are treated as a part of the hyperlink, but boxes nested to a greater depth are not.</para>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>\special commands available in dvipdfm</title>
          <para>The program dvipdfm (in package texlive) recognizes several commonly used <function>\special</function> commands, which are extensions to the DVI format.  Specifically, it understands color specials, papersize specials, tpic specials (which  allow  it to be used with pic), hypertex specials, and some PostScript specials.  These extensions allow documents to contain color, figures, and hyperlinks.   The  program  tries  to mimic  the  behavior of dvips so that many macro packages produced for use with dvips will work with dvipdfm.  Dvipdfm understands its own specific <function>\special</function> commands to allow  access  to  PDF features such as annotations and bookmarks.</para>
          <para>The following features are supported:</para>
          <itemizedlist>
            <listitem>Support for outline entries (also called bookmarks), named destinations, and annotations (including hyperlinks, forms and widgets). Nearly every Acrobat Distiller pdfmark is approximated.</listitem>
            <listitem>Support for <quote>standard</quote> DVI specials such as HyperTEX (HTML), TPIC, color specials, PSfile, and other PostScript specials.</listitem>
            <listitem>Native support for inclusion of <link linkend='metapost'>MetaPost</link> output and inclusion of arbitrary PostScript files with help from an external program.</listitem>
            <listitem>Support for thumbnails with a little help from GhostScript to generate the thumbnails.</listitem>
            <listitem>Support for arbitrary, nested linear transformations of typeset material. Any material on the page, including TEX text, may be scaled and rotated.</listitem>
            <listitem>Ability to include the first page of a PDF file as an encapsulated object along with its embedded resources such as fonts. Included PDF images may be cropped by supplying a bounding box. Note: Currently, this doesn&apos;t work if the contents stream has multiple segments.</listitem>
            <listitem>Ability to include JPEG and PNG bitmapped images as encapsulated objects.</listitem>
            <listitem>An internal color stack. A color stack allows you to change the current color, pushing the current color onto a stack. At any time, the original color can be popped from the stack. This is useful, for example, in headlines, that may have a different color from the current text. The headline macro can restore the current color without knowing what it is.</listitem>
          </itemizedlist>
          <para>Each TEX <function>\special</function> represents a separate command to the dvipdfm driver. Each special must begin with <userinput>pdf:</userinput> to identify that special as a command for the dvipdfm driver. A <function>\special</function> beginning with any other characters is ignored by the driver. Leading spaces are ignored. The characters <quote>pdf:</quote> are immediately followed by a dvipdfm command.</para>
          <para>Interaction with the dvipdfm driver consists of short commands with a few arguments delimited by white space. Typically the arguments are PDF objects. Two exceptions are dimension specifications and transformations.</para>
        </section> <!-- </sect3> -->
        
      </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='tex_packages'>
        <title>TeX Packages</title>
        <note>Eplain does <emphasis>not</emphasis> work with LaTeX, except for a few packages (notably including <filename>graphics</filename>, <filename>graphicx</filename>, <filename>color</filename>, <filename>url</filename>).</note>
        <para>For Ubuntu linux, you may install <filename>texlive-plain-extra</filename>, which comprises some add-on packages and macros that <quote>work with plain TeX</quote>. The documentation is to be found in <filename>/usr/share/doc/texlive-doc/plain/</filename>, not in <filename>/usr/share/doc/texlive-plain-extra/</filename>.</para>
        <para>This package includes the following CTAN packages:</para>
        <variablelist>
          <varlistentry>
            <term>epsf-dvipdfmx</term> <listitem>Plain TeX file for using epsf.tex with (x)dvipdfmx.</listitem>
          </varlistentry>
          <varlistentry>
            <term>figflow</term> <listitem>Flow text around a figure.</listitem>
          </varlistentry>
          <varlistentry>
            <term>fixpdfmag</term> <listitem>Fix magnification in PDFTeX.</listitem>
          </varlistentry>
          <varlistentry>
            <term>font-change</term> <listitem>Macros to change text and mathematics fonts in plain TeX.</listitem>
          </varlistentry>
          <varlistentry>
            <term>fontch</term> <listitem>Changing fonts, sizes and encodings in Plain TeX.</listitem>
          </varlistentry>
          <varlistentry>
            <term>getoptk</term> <listitem>Define macros with sophisticated options.</listitem>
          </varlistentry>
          <varlistentry>
            <term>gfnotation</term> <listitem>Typeset Gottlob Frege&apos;s notation in plain TeX</listitem>
          </varlistentry>
          <varlistentry>
            <term>graphics-pln</term> <listitem>LaTeX-style graphics for Plain TeX users.</listitem>
          </varlistentry>
          <varlistentry>
            <term>hyplain</term> <listitem>Basic support for multiple languages in Plain TeX.</listitem>
          </varlistentry>
          <varlistentry>
            <term>js-misc</term> <listitem>Miscellaneous macros from Joachim Schrod.</listitem>
          </varlistentry>
          <varlistentry>
            <term>mkpattern</term> <listitem>A utility for making hyphenation patterns.</listitem>
          </varlistentry>
          <varlistentry>
            <term>newsletr</term> <listitem>Macros for making newsletters with Plain TeX.</listitem>
          </varlistentry>
          <varlistentry>
            <term>pitex</term> <listitem>Documentation macros.</listitem>
          </varlistentry>
          <varlistentry>
            <term>placeins-plain</term> <listitem>Insertions that keep their place.</listitem>
          </varlistentry>
          <varlistentry>
            <term>plipsum</term> <listitem><citetitle>Lorem ipsum</citetitle> for Plain TeX developers.</listitem>
          </varlistentry>
          <varlistentry>
            <term>plnfss</term> <listitem>Font selection for Plain TeX.</listitem>
          </varlistentry>
          <varlistentry>
            <term>plstmary</term> <listitem>St. Mary&apos;s Road font support for plain TeX.</listitem>
          </varlistentry>
          <varlistentry>
            <term>present</term> <listitem>Presentations with Plain TeX.</listitem>
          </varlistentry>
          <varlistentry>
            <term>resumemac</term> <listitem>Plain TeX macros for resumes.</listitem>
          </varlistentry>
          <varlistentry>
            <term>timetable</term> <listitem>Generate timetables.</listitem>
          </varlistentry>
          <varlistentry>
            <term>treetex</term> <listitem>Draw trees.</listitem>
          </varlistentry>
          <varlistentry>
            <term>varisize</term> <listitem>Change font size in Plain TeX.</listitem>
          </varlistentry>
          <varlistentry>
            <term>xii</term> <listitem>Christmas silliness.</listitem>
          </varlistentry>
        </variablelist>
      </section> <!-- </sect2> -->  <!-- end of "TeX Packages" -->
      
      <section sect='sect2' xml:id='tex_tricks_techniques_and_recipes'>
        <title>TeX Tricks, Techniques and Recipes</title>
        <section sect='sect3'>
          <title>Including a file</title>
          <programlisting>\include file</programlisting>
          <para>or</para>
          <programlisting>\include file.tex</programlisting>
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>From XML to TeX</title>
          <para>There is a powerful transformation language for XML: XSLT. Assuming you can transform <emphasis>from</emphasis> XML to any other mark-up format, we are better off writing material in an XML vocabulary (such as DocBook) and then transform it into uploadable HTML or/and TeX, further to be processed into PDF. Once automated, the conversion would take a few seconds.</para>
          <para>Conversion to HTML is straightforward and problem free. Difficulties arise when trying to convert to TeX, which I shall next.</para>
          <section sect='sect4'>
            <title>Diacritics, escaped sequences, and special characters</title>
            <para>Some languages are written or typed in a richer character set than ASCII. In Spanish, a vowel may bear an acute accent (&apos;á&apos; and so on), and there is also &apos;ñ&apos; &apos;¡&apos;, &apos;¿&apos; and &apos;ü&apos;. Other languages have grave accents, or hat accents. So most non-ASCII characters can be produced by accenting an ASCII character.</para>
            <para>Since XSLT does not perform character transactions, these might be effected by means of regular expressions applied either before or after creating your TeX file. Most text editors include a <function>Replace</function> feature but it would take too much time to transform your handful of non-ASCII characters whenever you want to test the end result to, say, proof it. Hence you had better write a script that performs the transformations with one key stroke. Also, you probably want the result stored in a differently-named file.</para>
            <para>My tool of choice for this task is <application>sed</application>. Here is a handy script for Spanish to take your file from XML characters to TeX:</para>
            <programlisting>s/á/\\'a/g
s/é/\\'a/g
s/í/\\'\i{}/g
s/ó/\\'o/g
s/ú/\\'u/g
s/ü/\\"u/g
s/ñ/\\~n/g
s/Á/\\'A/g
s/É/\\'E/g
s/Í/\\'I/g
s/Ó/\\'O/g
s/Ú/\\'U/g
s/Ü/\\"U/g
s/Ñ/\\~N/g
s/¿/\\?`/g
s/¡/\\!`/g <!-- s/«/\\/g s/»/\\/g --> </programlisting>

<para>Another <application>sed</application> script for non-Spanish non-ASCII character transformations is:</para>
<programlisting>s/ä/\\"a/g
s/æ/\\ae{}/g
s/è/\\`e/g
s/ë/\\"e /g
s/ï/\\"\\i{}/g
s/ö/\\"o/g
s/ø/\\o{}/g
s/Ø/\\O{}/g
s/Æ/\\AE{}/g
s/È/\\`E/g
s/Ö/\\"O/g
s/ß/\\ss{}/g
s/ç/\\c c/g
s/Ç/\\c C/g </programlisting>

            <warning>Accents within mathematical formulas will be wrongly transformed.</warning>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
           <title>Mathematical formulas</title>
            <para>DocBook, which is just an XML vocabulary, includes tags <tag>equation</tag>, <tag>informalequation</tag>, and <tag>inlineequation</tag>, as well as <tag>mathphrase</tag> for simple mathematics equations that do not require extensive markup. Whatever the differences and nuances of usage, you may implement a scheme for           typing TeX mathematical code in your XML. I suggest that you use a <parameter>format</parameter> attribute in your mathematical tags to cause the XSLT processor to include or exclude mathematical elements selectively. For example:</para>
            <programlisting><![CDATA[<equation format='non-tex'><varname>x</varname><superscript>2</superscript> = -1</equation>
<equation format='tex'>$$x^2 = -1$$</equation>]]></programlisting>
            <para>...</para>
          </section> <!-- </sect4> -->
            
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Encoding PostScript graphics in Plain TeX</title>
          <note>Alternatively, you may use a lowlevel <userinput>\special</userinput> command, as explained <link linkend='eps_in_tex'>elsewhere</link>.</note>
          <para>After you have created an eps file named fig.eps or whatever, type:</para>
          <programlisting>\input epsf
\epsfbox{fig.eps}</programlisting>

          <section sect='sect4'>
            <title>Providing a Bounding Box</title>
            <para>If you want to provide your own bounding box (figure size), use a call something like this:</para>
            <programlisting>\epsfbox[10 30 150 80]{whatever.eps}</programlisting>
            <para>The four numbers in square brackets tell TeX to use only part of the size of the graphic. In this example, TeX would pretend that only the rectangle from (10,30) to (150,80) is actually used. The dimensions are points, so the graphic would have an effective size (for TeX&apos; purposes) of (150-10) or 140 points wide by (80-30) or 50 points tall.</para>
            <para>The graphic is not actually cropped to the given size, it is only shifted on the page so that the lower left corner of the bounding box coincides with the lower left corner of the area TeX reserves for it. In the example above, location (10,30) in the figure would be located at the lower left corner of the box in which TeX places the figure, but any part of the image outside the rectangle from (10,30) to (150,80) would still appear on the page.</para>
            <note>
              <para>You can use a text editor to look at the PostScript file to find the figure&apos; size. Look for a line that looks similar to this:</para>
              <programlisting>%%BoundingBox: 0 0 360 72</programlisting>
            </note>
          </section> <!-- </sect4> -->
          
          <section sect='sect4'>
            <title>Scaling the Included EPS File</title>
            <para>To scale a figure, use put the line:</para>
            <programlisting><![CDATA[\epsfxsize=<dimen>]]></programlisting>
            <para>before the <userinput>\epsffile{}</userinput> or <userinput>\epsfbox{}</userinput> command. You may use any standard TeX dimension units, though the system may default to points (pt). This command specifies the horizontal dimension, and the vertical dimension scales proportionally.</para>
          </section> <!-- </sect4> -->
          
          
          
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->  <!-- end of "TeX Tricks, Techniques and Recipes" -->
      
      <section sect='sect2'>
        <title>TeX Pros and Cons</title>
        <para>Why is TeX still used? What are some good, modern alternatives? (stackexchange.com)</para>
        <para>The reason TeX is still used is because it is open source and beautiful, because it is the best at handling mathematical notation, and because of its inertial dominance in math and the hard sciences in Academia. The reason TeX has so, so many fixable problems after 30 years is because there is no financial incentive for anyone to fix it.</para>
        <para>The answer is not to find a TeX alternative. This will not be possible in Academia for a very long time. The answer is for someone to plunk down a million dollars to hire some full-time developers to fix it. Honestly, the TeX language is wonderful; it&apos;s the editors which are terrible. A TeX editor should...</para>
        <itemizedlist>
          <listitem>[] seamlessly hide the compilation process</listitem>
          <listitem>[] feature a modern debugging environment</listitem>
          <listitem>[] make 99% of commands (including everything you can do in MS Word) discoverable within the editor, rather than sending the user to the internet or some pdf guide, and</listitem>
          <listitem>[] robustly handle all modern image types</listitem>
        </itemizedlist>
        <para>...without becoming an unstable WYSIWYG hybrid like LyX. The only thing about the language itself that might need to be changed is some standardization of common packages. I shouldn't need to download anything to get appendices and sub-figures to behave sensibly.</para>
        <para>The amount of professor, post-doc, and grad student time wasted on TeX is staggering, and easily justifies paying for an overhaul...if only the government or some benefactor would step up.</para>
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    <section>
      <title><application>xetex</application>*</title>
    </section> <!-- </sect1> -->
    
    <section>
      <title>A simple book*</title>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Setting Up the Page*</title>
    </section> <!-- </sect1> -->
    
    <section>
      <title>Importing Graphics</title>
      
      <section sect='sect2'>
        <title>Including Embedded PS Files</title>
        <para>First convert them to eps, which consists of adding Bounding Box information and some other decoration. Here is an almost minimal hello-type PS script:</para>
        <programlisting>%!.PS−Adobe−2.0

/Times-Roman 22 selectfont
1 1 moveto
(Hello!) show</programlisting>
        <para>which can be converted with <command>ps2eps</command>, possibly with switch <option>-f</option> to force overwriting of possibly already existing <filename>Hello.eps</filename>. Annoyingly, this app demands that the magic word opening the document includes a period: <userinput>%!.</userinput></para>
        <para>Next, you include the perquisite packages in your latex file and then the eps file, as in:</para>
        <programlisting><![CDATA[\usepackage{graphicx}

\begin{figure}[htbp]
  \includegraphics[height=1cm,angle=0]{Hello.eps}
  \caption{includegraphics[height=1cm,angle=0]\{Hello.eps\}}
  \label{hllo01}
\end{figure} 
]]></programlisting>
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    <section> <title>Exporting Graphics with <application>dvipng</application>*</title> </section> <!-- </sect1> -->
    
    <section>
      <title><application>eplain</application> for Expanded Plain TeX</title>
      <para>Eplain is a set of macros that provide functionality for plain TEX. It is intended to be useful regardless of how your document is formatted, unlike with <link linkend='LaTeX'>LaTeX</link>.</para>
      
      <section sect='sect2'>
        <title>Invoking <application>eplain</application></title>
        <para>The simplest way to use Eplain is simply to put:</para>
        <programlisting>\input eplain</programlisting>
        <para>at the beginning of your input file. The macro file is small enough that reading it does not take an unbearably long time—at least on contemporary machines.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='eplain_lists'>
        <title>Lists</title>
        <para>Many documents require lists of items, either numbered or simply enumerated. Plain TEX defines one macro to help with creating lists, <userinput>\item</userinput>, but that is insufficient in many cases. Therefore, Eplain provides two pairs of commands:</para>
        <informalequation>\numberedlist ... \endnumberedlist</informalequation>
        <para>and</para>
        <informalequation>\orderedlist ... \endorderedlist</informalequation>
        <para>which are actually synonymous and produce a list with the items numbered sequentially, starting from one. A nested <userinput>\numberedlist</userinput> labels the items with lowercase letters, starting with &apos;a&apos;. Another nested <userinput>\numberedlist</userinput> labels the items with roman numerals. Yet more deeply nested numbered lists label items with &apos;*&apos;:</para>
        <informalequation>\unorderedlist ... \endunorderedlist</informalequation>
        <para>This produces a list with the items labelled with small black boxes (<quote>square bullets</quote>). A nested <userinput>\unorderedlist</userinput> labels items with em-dashes. Doubly (and deeper) nested unordered lists label items with &apos;*&apos;s.</para>
        <para>The two kinds of lists can be nested within each other, as well.</para>
        <para>In both kinds of lists, you begin an item with <userinput>\li</userinput>. An item may continue for several paragraphs. Each item starts a paragraph.</para>
        <para>You can give <userinput>\li</userinput> an optional argument, a cross-reference label. It&apos;s defined to be the <quote>marker</quote> for the current item. This is useful if the list items are numbered. You can produce the value of the label with <userinput linkend='eplain_xrefn'>\xrefn</userinput>.</para>
        <para>Eplain can create hypertext links for the markers produced by <userinput>\xrefn</userinput> pointing to the relevant list item.</para>
        <para>You can also say <userinput>\listcompact</userinput> right after <userinput>\numberedlist</userinput> or <userinput>\unorderedlist</userinput>. The items in the list will then not have any extra space between them. You might want to do this if the items in this particular list are short.</para>
        <para>Here is an example:</para>
        <programlisting>\numberedlist\listcompact
\li The first item.
\li The second item.
The second paragraph of the second item.
\endnumberedlist</programlisting>
        <section sect='sect3'>
          <title>Formatting Lists</title>
          <para>Several registers define the spacing associated with lists. It is likely that their default values won&apos;t suit your particular layout.</para>
          <variablelist>
            <varlistentry>
              <term><userinput>\abovelistskipamount</userinput>, <userinput>\belowlistskipamount</userinput></term>
              <listitem>The vertical glue inserted before and after every list, respectively.</listitem>
            </varlistentry>
            <varlistentry>
              <term><userinput>\listleftindent</userinput>, <userinput>\listrightindent</userinput></term>
              <listitem><userinput>\listrightindent</userinput> is the amount of space by which the list is indented on the right; i.e., it is added to <userinput>\rightskip</userinput>. <userinput>\listleftindent</userinput> is the amount of space, relative to <userinput>\parindent</userinput>, by which the list is indented on the left. Why treat the two parameters differently? Because (a) it is more useful to make the list indentation depend on the paragraph indentation; (b) footnotes aren&apos;t formatted right if <userinput>\parindent</userinput> is reset to zero.</listitem>
            </varlistentry>
          </variablelist>
          <para>The three vertical glues are inserted by macros, and preceded by penalties: <userinput>\abovelistskip</userinput> does <userinput>\vpenalty\abovelistpenalty</userinput> and then <userinput>\vskip\abovelistskip</userinput>. <userinput>\belowlistskip</userinput> and <userinput>\interitemskip</userinput> are analogous.</para>
          <para>In addition, the macro <userinput>\listmarkerspace</userinput> is called to separate the item label from the item text. This is set to <userinput>\enspace</userinput> by default.</para>
          <para>If you want to change the labels on the items, you can redefine these macros: <userinput>\numberedmarker</userinput> or <userinput>\unorderedmarker</userinput>. The following registers might be useful if you do:</para>
          <variablelist>
            <varlistentry>
              <term><userinput>\numberedlistdepth</userinput>, <userinput>\unorderedlistdepth</userinput></term>
              <listitem>These keep track of the depth of nesting of the two kinds of lists.</listitem>
            </varlistentry>
            <varlistentry>
              <term><userinput>\itemnumber</userinput>, <userinput>\itemletter</userinput></term>
              <listitem>These keep track of the number of items that have been seen in the current numbered list. They are both integer registers. The difference is that <userinput>\itemnumber</userinput> starts at one, and <userinput>\itemletter</userinput> starts at 97, i.e., lowercase &apos;a&apos;.</listitem>
            </varlistentry>
          </variablelist>
          <para>You can also redefine the control sequences that are used internally, if you want to do something radically different: <userinput>\beginlist</userinput> is invoked to begin both kinds of lists; <userinput>\printitem</userinput> is invoked to print the label (and space following the label) for each item; and <userinput>\endlist</userinput> is invoked to end both kinds of lists.</para>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Verbatim Text</title>
        <para>It is sometimes useful to include a file verbatim in your document; for example, part of a computer program. The <userinput>\listing</userinput> command is given one argument, a filename, and produces the contents of that file in your document. <userinput>\listing</userinput> expands <varname>\listingfont</varname> to set the current font. The default value of <varname>\listingfont</varname> is <userinput>\tt</userinput>.</para>
        <para>You can take arbitrary actions before reading the file by defining the macro <userinput>\setuplistinghook</userinput>. This is expanded just before the file is input.</para>
        <para>If you want to have line numbers on the output, you can say <userinput>\let\setuplistinghook = \linenumberedlisting</userinput>. The line numbers are stored in the count register <varname>\lineno</varname> while the file is being read. You can redefine the macro <userinput>\printlistinglineno</userinput> to change how they are printed.</para>
        <para>Normally, the <userinput>\listing</userinput> command will add a final empty line at the end of the output, even if the file does not end in a newline. To suppress this final line, you can say <userinput>\let\setuplistinghook = \nolastlinelisting</userinput>. This also works with line numbers (say <userinput>\def\setuplistinghook{\linenumberedlisting \nolastlinelisting}</userinput>), but only if <userinput>\printlistinglineno</userinput> consists exclusively of boxes at the top level (i.e., any <userinput>\kerns</userinput> or glue should be wrapped up in a box).</para>
        <para>You can use the form feed control character ( ASCII code 12, typed as CTRL-L) in the file to force a page break in the output.</para>
        <para>You can produce in-line verbatim text in your document with <userinput>\verbatim</userinput>. End the text with <userinput>|endverbatim</userinput>. If you need a &apos;|&apos; in the text, double it. If the first character of the verbatim text is a space, use | . (| will work elsewhere in the argument, too, but isn&apos;t necessary.)</para>
        <para>For example:</para>
        <programlisting>\verbatim| ||\#%&amp;!|endverbatim</programlisting>
        <para>produces <computeroutput>|\#%&amp;!</computeroutput>.</para>
        <para>Line breaks and spaces in the verbatim text are preserved.</para>
        <para>You can change the verbatim escape character from the default &apos;|&apos; with <userinput>\verbatimescapechar char</userinput>; for example, this changes it to &apos;@&apos;: <userinput>\verbatimescapechar \@</userinput>.</para>
        <para>The backslash is not necessary in some cases, but is in others, depending on the catcode of the character. The argument to <varname>\verbatimescapechar</varname> is used as <userinput>\catcode &apos;char</userinput>, so the exact rules follow that for <userinput>\catcode</userinput>.</para>
        <para>To reset the category code of all special characters to 12 (<quote>other</quote>), <userinput>\verbatim</userinput> uses <userinput>\uncatcodespecials</userinput>. If you make additional characters <quote>special</quote>, you should extend <userinput>\dospecials</userinput> to include those characters, lest they be given special treatment inside verbatim environments. For example,</para>
        <programlisting>\catcode&apos;\A=\active
% Try commenting out the following line.
\expandafter\def\expandafter\dospecials\expandafter{\dospecials\do\A}
\verbatimA#$%_^|endverbatim</programlisting>
        <para>Because <userinput>\verbatim</userinput> must change the category code of special characters, calling inside a macro definition of your own does not work properly. For example:</para>
        <programlisting>\def\mymacro{\verbatim &amp;#%|endverbatim}% Doesn&apos;t work!</programlisting>
        <para>To accomplish this, you must change the category codes yourself before making the macro definition. Perhaps <userinput>\uncatcodespecials</userinput> will help you.</para>
        </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='eplain_link'>
        <title>Links in <application>eplain</application></title>
        <section sect='sect3'>
          <title>Cross-references in <application>eplain</application>*</title>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Hyperlinks in <application>eplain</application>*</title>
        </section> <!-- </sect3> -->
        <section sect='sect3' xml:id='eplain_xrefn'>
          <title><userinput>\xrefn</userinput>*</title>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->
    
    
    <section xml:id='LaTeX'>
      <title>Latex</title>
      
      
      <section sect='sect2'>
        <title>A simple LaTeX Example</title>
        <para> Let&apos;s start with the simplest working example:</para>
        <programlisting>\documentclass{article}
          
          \begin{document}
          First document. This is a simple example, with no 
          extra parameters or packages included.
          \end{document}</programlisting>
        
        <para>...</para>
        <programlisting></programlisting>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>The preamble of a document</title>
        <para>In the previous example the text was entered after the \begin{document} command. Everything in your .tex file before this point is called the <firstterm>preamble</firstterm>. In the preamble you define the type of document you are writing, the language you are writing in, the packages you would like to use (more on this later) and several other elements. For instance, a normal document preamble would look like this:</para>
        <programlisting>\documentclass[12pt, letterpaper]{article}
          \usepackage[utf8]{inputenc}</programlisting>
        <para>As said before, this defines the type of document. Some additional parameters included in the square brackets can be passed to the command. These parameters must be comma-separated. In the example, the extra parameters set the font size (12pt) and the paper size (letterpaper). Of course other font sizes (9pt, 11pt, 12pt) can be used, but if none is specified, the default size is 10pt. As for the paper size other possible values are a4paper and legalpaper; see the article about Page size and margins for more details about this.</para>
        <para>Below a detailed description of each line:</para>
        <programlisting>\usepackage[utf8]{inputenc}</programlisting>
        <para>This is the encoding for the document. It can be omitted or changed to another encoding but utf-8 is recommended. Unless you specifically need another encoding, or if you are unsure about it, add this line to the preamble.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Larger Fonts and Narrower Margins in LaTeX</title>
        <para>Insert:</para>
        <programlisting>\fontsize{19pt}{19pt} \selectfont</programlisting>
        <para>Follow up with some margin and page width adjustments:</para>
        <programlisting>\addtolength{\oddsidemargin}{-.9in}
\addtolength{\evensidemargin}{-1.44in}
\addtolength{\textwidth}{1.8in}</programlisting>
      </section> <!-- </sect2> -->
      <section sect='sect2' xml:id='latex_to_plain_tex'>
        <title>Translating LaTeX to Plain TeX</title>
        <para>Unfortunately, no &quot;general&quot;, simple, automatic process is likely to succeed at this task.See <link linkend='latex_to_plain_tex'>How does LaTeX relate to Plain TeX</link> for further details.</para>
        <para>Obviously, trivial documents will translate in a trivial way. Documents that use even relatively simple things, such as labels and references, are likely to cause trouble (Plain TeX doesn&apos;t support labels). While graphics are in principle covered, by the Plain TeX.</para>
        <para>Translating a document designed to work with LaTeX into one that will work with Plain TeX is likely to amount to carefully including (or otherwise re-implementing) all those parts of LaTeX, beyond the provisions of Plain TeX, which the document uses.</para>
        <para>Some of this work has (in a sense) been done, in the port of the LaTeX graphics package to Plain TeX. However, while graphics is available, other complicated packages (notably hyperref) are not. The aspiring translator may find the Eplain system a useful source of code. (In fact, a light-weight system such as Eplain might reasonably be adopted as an alternative target of translation, though it undoubtedly gives the user more than the &quot;bare minimum&quot; that Plain TeX is designed to offer.) </para>
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
    <section xml:id='ConTeXt'>
      <title><application>ConTeXt</application></title>
      <note>You may get materials to write this chapter from <filename>html/sci-tech/computing/typography/TeX-LaTeX/</filename>, or from <citetitle>https://en.wikibooks.org/wiki/ConTeXt</citetitle>.</note>
      <para><application>ConTeXt</application> (originally entitled <quote>pragmatex</quote>) is a general-purpose document processor. It is especially suited for structured documents, automated document production, very fine typography, and multi-lingual typesetting. It is based in part on the TeX typesetting system, and uses a document markup language for manuscript preparation. The typographical and automated capabilities of <application>ConTeXt</application> are extensive, including interfaces for handling microtypography, multiple footnotes and footnote classes, and manipulating OpenType fonts and features. Moreover, it offers extensive support for colors, backgrounds, hyperlinks, presentations, figure-text integration, and conditional compilation. It gives the user extensive control over formatting while making it easy to create new layouts and styles without learning the low-level TeX macro language.</para>
      <para><application>ConTeXt</application> provides a multi-lingual user interface with support for markup in English, Dutch, German, French, and Italian and support for output in many languages including western European, eastern European, Arabic-script, Chinese, Japanese, and Korean. It also allows the user to use different TeX engines like pdfTeX, XeTeX, and LuaTeX without changing the user interface.</para>
      
      <section sect='sect2'>
        <title><application>ConTeXt</application> Strong Points</title>
        <para>Some of <application>ConTeXt</application>&apos;s strong points are:</para>
        <itemizedlist>
          <listitem>There aren&apos;t really any extra packages with <application>ConTeXt</application>, just a few modules, so that you don&apos;t have to deal with package conflicts.</listitem>
          <listitem>It sports a <link linkend='ConTeXt_XML_processor'>Built-in XML processor</link>, which you may use with TEI and Docbook XML. You gain the typesetting sophistication of a TeX backend, coupled with the validation features of XML.</listitem>
          <listitem>PDF-X compliance pretty much right out of the box, whereas LaTeX lacks it. Useful if you are doing any kind of serious publishing.</listitem>
          <!-- <listitem>along the same lines as the last one, icc color profile support pretty much out of the box.</listitem> -->
          <listitem><filename>simplefonts</filename> package: load your system fonts like XeLaTeX</listitem>
          <listitem>UTF-8 support by default: important if you write a language other than english.</listitem>
        </itemizedlist>
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Comparison of <application>ConTeXt</application> with LaTeX and Other Typesetting Systems</title>
        <para><application>ConTeXt</application> may be compared and contrasted with <link linkend='LaTeX'>LaTeX</link>, but the primary thrust of the two are rather distinct. <application>ConTeXt</application> from the ground up is a typography and typesetting system meant to provide users easy and consistent access to advanced typographical control—important for general-purpose typesetting tasks. The original vision of LaTeX is to <emphasis>insulate</emphasis> the user from typographical decisions—a useful approach for submitting, say, articles for a scientific journal. LaTeX has evolved from that original vision; at the same time, <application>ConTeXt</application>&apos;s unified design avoids the package clashes that can happen with LaTeX.</para>
        <section sect='sect3'>
          <title>Should I Use <application>ConTeXt</application> or LaTeX?</title>
          <blockquote>LaTeX is more of a standard document preparation system in academia. So if you ever want to submit a paper to a journal or conference and want to do it in TeX, LaTeX is your option.</blockquote>
          <blockquote>It is safe to say that in general <application>ConTeXt</application> focuses a bit more on typography and a bit less on structure than LaTeX. There is quite a lot of functionality to handle page layouts, page arrangements, and page layering, for example.</blockquote>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='installing_ConTeXt'>
        <title>Installing <application>ConTeXt</application></title>
        <para>On I have installed the following Debian packages: <filename>context</filename>, <filename>context-doc-nonfree</filename>, and <filename>context-modules</filename>. <filename>context-doc-nonfree</filename> contains documentation in PDF format which get installed in subdirectory <filename>/usr/share/texmf/doc/context/base/</filename>, whereas <filename>context-modules</filename> gets installed in <filename>/usr/share/texmf/doc/context/third/</filename>.</para>
        <para>Package <filename>context</filename> itself is huge and gets installed in several key subdirectories. It does not seem to include any documentation, so we have to rely on <filename>context-doc-nonfree</filename>.</para>
        <section sect='sect3'>
          <title>Installing the Minimals Distribution</title>
          <para>These are the steps to install <application>ConTeXt</application> on Linux and Mac OS:</para>
          <itemizedlist>
            <listitem>Create a directory for ConTeXt, for example /home/user/context and change to it</listitem>
            <listitem>Download ConTeXt minimals installer: <userinput>wget http://minimals.contextgarden.net/setup/first-setup.sh</userinput></listitem>
            <listitem>
              <para>To download the latest ConTeXt MKIV, run:</para>
              <programlisting>sh ./first-setup.sh.</programlisting>
            </listitem>
          </itemizedlist>
          <para>Hence forward, every time you want to use context, you first need to tell bash where to find it. This is done by running:</para>
          <itemizedlist>
            <listitem><userinput>source /home/user/context/tex/setuptex</userinput> if you are using <application>bash</application></listitem>
            <listitem><userinput>source /installation-dir/tex/setuptex.csh</userinput> if you are using <application>(t)csh</application></listitem>
          </itemizedlist>
          <para>You can put the line for example in your <filename>~/.bashrc</filename>.</para>
          <bridgehead>Installing Minimals <application>ConTeXt</application> Modules</bridgehead>
          <para><application>ConTeXt</application> has a good selection of third party modules for different purposes. You can install them by:</para>
          <programlisting>./first-setup.sh --modules=all</programlisting>
          <bridgehead>Installing Everything in Minimals</bridgehead>
          <para>You can install all things in the ConTeXt minimal distribution with:</para>
          <programlisting>first-setup.sh --context=beta --fonts=all --modules=all --goodies=all</programlisting>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->  <!-- end of "Installing <application>ConTeXt</application>" -->
      
      <section sect='sect2' xml:id='using_ConTeXt'>
        <title>Using <application>ConTeXt</application></title>
        
        <section sect='sect3'>
          <title><application>ConTeXt</application> Basics</title>
          <para>ConTeXt is a lot simpler than LaTeX especially when you want to achieve custom look for your documents. The examples from now on expect you to use a text editor which is UTF-8 compatible. Start by entering the following into your favourite text editor:</para>
          <programlisting xml:id='ConTeXt_example_1'>\starttext
  \ConTeXt is so easy!
\stoptext</programlisting>
          <para>And compile it by typing:</para>
          <programlisting>context yourfile.tex</programlisting>
          <para>As you can see, no document class or anything need to be defined to produce valid <application>ConTeXt</application> output. By default, <application>ConTeXt</application> produces PDF output.</para>
          <section sect='sect4'>
            <title>A Simple Structured-Text Example</title>
            <para>Now, let&apos;s try something more complicated:</para>
            <programlisting xml:id='ConTeXt_example_2'>\mainlanguage[fi]
\starttext
  \completecontent
  
  \part{Something}
    Lorem ipsum
    \chapter{Something else}
      Dolor sit amet
      
\stoptext</programlisting>
            <para>Now we&apos;ve set to Finnish both the hyphenation and the auto generated element names (such as Table of Contents). We&apos;ve also defined a part and a chapter, and generated a ToC with the <command>\completecontent</command> command.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>A More Advanced Structured-Text Example</title>
            <para>Here we will additionally be using the macros <function>\startsection[title={<varname>name</varname>}]</function> and <function>\stopsection</function> to mark the title and the content of a section. So</para>
            <programlisting><![CDATA[\starttext
  \startsection[title={Testing ConTeXt}]
    This is my {\em first} ConTeXt document.
  \stopsection
\stoptext]]></programlisting>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>A Still Richer Example</title>
            <para>Here is another example from the wikipedia page:</para>
            <programlisting xml:id='ConTeXt_example_3'>% This line is a comment because % precedes it.
% It specifies the format of head named 'title'
% Specifically the style of the font: sans serif
% + bold + big font.

\setuphead[title][style={\ss\bfd},
    before={\begingroup},
    after={John Doe, the author\smallskip%
           \currentdate\bigskip\endgroup}]

\starttext

\title{\CONTEXT}

\section{Text}
\CONTEXT\ is a document preparation system for the 
\TEX\ typesetting program. It offers programmable 
desktop publishing features and extensive 
facilities for automating most aspects of 
typesetting and desktop publishing, including 
numbering and cross-referencing (for example to 
equation \in[eqn:famous-emc]), tables and figures, 
page layout, bibliographies, and much more.

It was originally written around 1990 by Hans 
Hagen. It could be an alternative or complement 
to \LATEX.

\section{Maths}
With \CONTEXT\ we could write maths. Equations 
can be automatically numbered.

\placeformula[eqn:famous-emc]
\startformula
    E = mc^2
\stopformula
with
\placeformula[eqn:def-m]
\startformula
    m = \frac{m_0}{\sqrt{1-\frac{v^2}{c^2}}}
\stopformula

\stoptext</programlisting>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>ConTeXt Top Ten Commands</title>
            <para>A novice user might be put off by the number of ConTeXt commands. Satisfying results can be obtained by only using the next ten groups of commands:</para>
            <itemizedlist>
              <listitem><command linkend='ConTeXt_example_1'>\starttext</command>, <command>\stoptext</command></listitem>
              <listitem><command linkend='ConTeXt_example_2'>\chapter</command>, <command>\section</command>, <command>\title</command>, <command>\subject</command>, <command linkend='ConTeXt_example_3'>\setuphead</command>, <command linkend='ConTeXt_example_2'>\completecontent</command></listitem>
              <listitem><command linkend='ConTeXt_em'>\em</command>, <command>\bf</command>, <command>\cap</command></listitem>
              <listitem><command>\startitemize</command>, <command>\stopitemize</command>, <command>\item</command>, <command>\head</command></listitem>
              <listitem><command>\abbreviation</command>, <command>\infull</command>, <command>\completelistofabbreviations</command></listitem>
              <listitem><command>\placefigure</command>, <command>\externalfigure</command>, <command>\useexternalfigures</command></listitem>
              <listitem><command>\placetable</command>, <command>\starttable</command>, <command>\stoptable</command></listitem>
              <listitem><command>\definedescription</command>, <command>\defineenumeration</command></listitem>
              <listitem><command>\index</command>, <command>\completeindex</command></listitem>
              <listitem><command linkend='ConTeXt_layout'>\setuplayout</command>, <command>\setupfootertexts</command>, <command>\setupheadertexts</command></listitem>
            </itemizedlist>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->  <!-- end of "<application>ConTeXt</application> Basics" -->
      </section> <!-- </sect2> -->  <!-- end of "Using <application>ConTeXt</application>" -->
      
      <section sect='sect2'  xml:id='ConTeXt_text_formatting'>
        <title>Basic Text Formatting</title>
        <section sect='sect3' xml:id='ConTeXt_font_switches'>
          <title>ConTeXt Font Switches</title>
          <para>In ConTeXt there are four ways to switch fonts:</para>
          <itemizedlist>
            <listitem>font style/alternative commands (<command>\rm</command>, <command>\ss</command>, etc.),</listitem>
            <listitem>font size commands (<command>\tfa</command>, <command>\tfb</command>, etc.),</listitem>
            <listitem>mnemonic command aliases (<command>\bold</command>, <command>\sans</command>, etc.),</listitem>
            <listitem>a complete font change (<command>\setupbodyfont</command>, <command>\switchtobodyfont</command>).</listitem>
          </itemizedlist>
          <section sect='sect4'>
            <title>Before you start...</title>
            <itemizedlist>
              <listitem>
                <para>Placing a font switch at the begin of a paragraph can sometimes generate unexpected side-effects. This can be avoided by forcing horizontal mode before any font change:</para>
                <programlisting>\dontleavehmode{\bf Warning!} Care must be taken when a font switch is used at the beginning of a paragraph.\par</programlisting>
              </listitem>
              <listitem>
                <para>It is usually a bad style to use explicit font switches in the text. It is better to define a semantic command that takes care of the font switching. For example, instead of using <userinput>{\bf\red important text}</userinput></para>
                <programlisting>\definehighlight[important][style=bold, color=red]</programlisting>
                <para>and then use <userinput>\important{important text} in the text</userinput>.</para>
              </listitem>
            </itemizedlist>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Font styles and alternatives</title>
            <para>There are three main types of font styles: serif, sans serif, and teletype. To switch between these styles, use <command>\rm</command> for serif, <command>\ss</command> for sans serif, and <command>\tt</command> for teletype.</para>
            <para>Each of these styles comes in different alternatives: normal, bold, italic, slanted, bold-italic, bold-slanted, and small-capped. To switch to a different alternative, use <command>\tf</command> (<quote>typeface</quote>) for normal, <command>\bf</command> for bold, <command>\it</command> for italic, <command>\sl</command> for slanted, <command>\bi</command> for bold-italic, <command>\bs</command> for bold-slanted, and <command>\sc</command> for small-capped.</para>
            <para>You can generally combine font styles with alternatives, so if you want to switch to bold sans serif, you can use either <command>\bf\ss</command> or <command>\ss\bf</command>.</para>
            <para>A font switch remains valid for the rest of the group. So, if you want to temporarily switch to a different font, use the font style command inside a group. The easiest way to start a group is to enclose the text within braces (also called curly brackets), for example</para>
            <programlisting>This is serif text
{\ss This is sans serif}
This is serif again
{\tt and this is typewriter}
And serif again</programlisting>
          </section> <!-- </sect4> -->
          <section sect='sect4' xml:id='ConTeXt_em'>
            <title>Emphasizing text</title>
            <para>There is a font switch <command>\em</command> to emphasize text. This is somewhat special: it does automatic italic correction and changes the alternative depending on the current alternative. For example, if the current font alternative is normal (i.e. upright), <command>\em</command> switches to slanted; and if the current font alternative is slanted, <command>\em</command> switches to normal.</para>
            <para>ConTeXt uses the Latin Modern fonts by default; these fonts look similar to the original Computer Modern fonts, but have a much larger character repertoire. As it happens, in the Latin Modern (and Computer Modern) fonts, the slanted font does not stand out from the upright font enough for some tastes; so, many people prefer to use the italic font for emphasis. To do that use</para>
            <programlisting>\definebodyfontenvironment[default][em=italic]</programlisting>
            <note>
              <para>For Opentype fonts, italic correction needs to be set using:</para>
              <programlisting>\definefontfeature[default][default][itlc=yes]</programlisting>
            </note>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>ConTeXt Font Sizes</title>
            <para>Occasionally one needs to use a font size different from the bodyfont. ConTeXt provides two series of commands for that. For a larger font size, you can use \tfa to scale the font size by a factor of 1.2, \tfb to scale by a factor of (1.2)^2 = 1.44, \tfc to scale by (1.2)^3 = 1.728 and \tfd to scale by (1.2)^4 = 2.074. The scale is relative to the current bodyfont size.</para>
            <para>To decrease the font size, you can use \tfx to scale the font by a factor of 0.8 and \tfxx to scale by a factor of 0.6.</para>
            <para>The mapping of particular command suffixes (a, x, etc.) and current bodyfont size to effective font size can be changed by \definebodyfontenvironment. The default values defined in <filename xml:href='http://source.contextgarden.net/font-ini.mkiv'>font-ini</filename> are:</para>
            <programlisting>\definebodyfontenvironment
  [\s!default]
  [        \s!text=1.0,
         \s!script=0.7,
   \s!scriptscript=0.5,
              \c!a=1.200,
              \c!b=1.440,
              \c!c=1.728,
              \c!d=2.074,
                 *=\currentfontscale, % wildcard
              \c!x=0.8,
             \c!xx=0.6,
            \c!big=1.2,
          \c!small=0.8,
 \c!interlinespace=,
             \c!em=\v!slanted]
</programlisting>
            <note><userinput>script</userinput> and <userinput>scriptsize</userinput> are used in math mode.</note>
            <para>It is also possible to set the scaling factors for specific font sizes. For example, if you want <command>\tfa</command> to set the effective font size to 12pt when the <varname>bodyfont</varname> size is 10pt, and to set the effective font size to 14pt when the bodyfont size is 11pt, then add</para>
            <programlisting>\definebodyfontenvironment [10pt] [a=12pt]
\definebodyfontenvironment [11pt] [a=14pt]</programlisting>
            <note>When the first parameter is default, the scaling factors must have numerical values. When the first parameter is a font size (e.g., 12pt), the scaling factors can either be numerical value or a dimension.</note>
            <para><command>\definebodyfontenvironment</command> is described in detail in the ConTeXt manual and the font-ini source file.</para>
            <para>Font size can be combined with font styles. As a shortcut, you can use <command>\bfa</command> to get bold font scaled by 1.2, <command>\bfx</command> to get a bold font scaled by 0.8 and similar commands for other font styles.</para>
            <para>These quick font switches are meant for changing the font style, alternative, or size of a few words: they do not change the bodyfont, so they don&apos;t affect interline spacing or math font sizes. So, if you want to change the font size of an entire paragraph, use \switchtobodyfont described below in <citetitle class='section' linkend='ConTeXt_complete_font_change'>Complete Font Change</citetitle>. However, it is fine to use them as style directives in setup commands, that is, using them as an option for <userinput>style=...</userinput> in any setup command that accepts style option.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Mnemonic font switches</title>
            <para>While learning a document markup language like ConTeXt, it can be hard to remember all the commands. ConTeXt provides other, easy-to-remember font switches. So for bold you can use <command>\bold</command>, for italic you can use <command>\italic</command>, for slanted you can use <command>\slanted</command>, and so on. You can probably guess what the following do:</para>
            <itemizedlist>
              <listitem><command>\normal</command></listitem>
              <listitem><command>\slanted</command></listitem>
              <listitem><command>\boldslanted</command></listitem>
              <listitem><command>\slantedbold</command></listitem>
              <listitem><command>\bolditalic</command></listitem>
              <listitem><command>\italicbold</command></listitem>
              <listitem><command>\small</command></listitem>
              <listitem><command>\smallnormal</command></listitem>
              <listitem><command>\smallbold</command></listitem>
              <listitem><command>\smallslanted</command></listitem>
              <listitem><command>\smallboldslanted</command></listitem>
              <listitem><command>\smallslantedbold</command></listitem>
              <listitem><command>\smallbolditalic</command></listitem>
              <listitem><command>\smallitalicbold</command></listitem>
              <listitem><command>\sans</command></listitem>
              <listitem><command>\sansserif</command></listitem>
              <listitem><command>\sansbold</command></listitem>
              <listitem><command>\smallcaps</command></listitem>
            </itemizedlist>
            <para>In addition, the commands <command>\smallbodyfont</command> and <command>\bigbodyfont</command> can be used to change the font size. The relative size depends on the value of big and small in <command> \definebodyfontenvironment.</command></para>
            <para>These mnemonic font switches are pretty smart. You can either use them as font style switches inside a { group }, or as a font changing command that takes an argument. For example,</para>
            <programlisting>This is {\bold bold} and so is \bold{this}. But this is not.</programlisting>
            <para>These mnemonic font switches can also be used for all <userinput>style=...</userinput> options, and while using them as style options, you can just give the command name without the backslash. For example:</para>
            <programlisting>\setuphead[section][style=bold]</programlisting>
            <note><userinput>\boldface</userinput> shown above is also defined to parallel the <userinput>\typeface</userinput> and <userinput>\swapface</userinput> switches.</note>
          </section> <!-- </sect4> -->
          <section sect='sect4' xml:id='ConTeXt_complete_font_change'>
            <title>Complete Font (BodyFont) Change</title>
            <para>If you need to change to a different font size and take care of interline spacing, you can change the bodyfont by using <command>\switchtobodyfont</command>. For example, to switch to 12pt you can use <command>\switchtobodyfont[12pt]</command>.</para>
            <para>ConTeXt provides two relative sizes, called <varname>big</varname> and <varname>small</varname>. So, to increase the bodyfont size, use <command>\switchtobodyfont[big]</command> (or <command>\setbigbodyfont</command>), and to decrease the bodyfont size, use <command>\switchtobodyfont[small]</command> (or <command>\setsmallbodyfont</command>). The exact size used for big and small can be set using <command>\definebodyfontenvironment</command>.</para>
            <para>The <command>\setupbodyfont</command> command accepts all the same arguments as <command>\switchtobodyfont</command>. The difference between the two is that <command>\setupbodyfont</command> also changes the font for headers, footers and other page markings, while <command>\switchtobodyfont</command> does not. So you should use <command>\setupbodyfont</command> for global font definitions to apply to the whole document, and <command>\switchtobodyfont</command> for local font changes (i.e. changes to the running text only). The effect of <command>\switchtobodyfont</command> can be localized within a group as usual.</para>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Simple Typescript Example</title>
            <para>This section describes how to map a Sans Serif font to the \ss command and a Serif font to the \rm command. This section also describes how typefaces differ from typescripts.</para>
            <section sect='sect5'>
              <title>Requirements</title>
              <para>This example uses Nimbus, which is a GPL font. Check whether Nimbus is available by running the following command:</para>
              <programlisting>mtxrun --script fonts --list --all --pattern=nimbus*</programlisting>
              <para>This should reveal a list similar to... If the font is not shown, you might have to install the font, which can be found on some systems at <filename>/usr/share/fonts/type1/gsfonts</filename>. You may use a different font; please see <citetitle xml:href='https://wiki.contextgarden.net/Fonts_in_LuaTeX#Building_the_font_database'>how to install fonts to MkIV</citetitle> for details.</para>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>The Code for Configuring a Font</title>
              <programlisting>% Enable Unicode fonts
\enableregime[utf]

% Enable Capital Letter use
\setupcapitals[sc=yes]

% Define a script named [serif][nimbus]
\starttypescript [serif] [nimbus]
  \definefontsynonym [Serif]             [name:nimbusromno9lregu]
  \definefontsynonym [SerifBold]         [name:nimbusromno9lbold]
  \definefontsynonym [SerifItalic]       [name:nimbusromno9lreguital]
  \definefontsynonym [SerifSlanted]      [name:nimbusromno9lreguital]
  \definefontsynonym [SerifBoldItalic]   [name:nimbusromno9lboldital]
  \definefontsynonym [SerifBoldSlanted]  [name:nimbusromno9lboldital]
  \definefontsynonym [SerifCaps]         [name:nimbusromno9lregu]
\stoptypescript

% Define a second script named [sans][nimbus]
\starttypescript [sans] [nimbus]
  \definefontsynonym [Sans]             [name:nimbussanlregu]
  \definefontsynonym [SansBold]         [name:nimbussanlbold]
  \definefontsynonym [SansItalic]       [name:nimbussanlreguital]
  \definefontsynonym [SansSlanted]      [name:nimbussanlreguital]
  \definefontsynonym [SansBoldItalic]   [name:nimbussanlboldital]
  \definefontsynonym [SansBoldSlanted]  [name:nimbussanlboldital]
  \definefontsynonym [SansCaps]         [name:nimbussanlregu]
\stoptypescript

% Define the typeface nimbus; use serif for rm-fonts, sans serif for ss-fonts.
\definetypeface [nimbus]  [rm]  [serif] [nimbus]
\definetypeface [nimbus]  [ss]  [sans]  [nimbus]

% Indicate the typeface to use.
\usetypescript[nimbus][uc]
\setupbodyfont[nimbus,rm,10pt]

\starttext

Regular, {\it Italic}, {\bf Bold}, {\bi Bold-Italic}, {\sc KaPiTaLe}

\showbodyfont

\stoptext</programlisting>
              <para>Both scripts (serif and sans nimbus) map the fonts names to the different (existing) font style. Usage is implemented as follows:</para>
              <itemizedlist>
                <listitem>The <command>\setupbodyfont</command> command calls the typeface nimbus.</listitem>
                <listitem>The typeface nimbus calls the typescript [serif][nimbus] for <command>\rm</command> fonts, or typescript [sans][nimbus] for the <command>\ss</command> fonts.</listitem>
              </itemizedlist>
              <para>The scripts then map the fonts to different font styles.</para>
            </section> <!-- </sect5> -->
            <section sect='sect5'>
              <title>Extension</title>
              <para>The fonts can be changed by extending the script:</para>
              <programlisting>...
\definefontsynonym [SansCaps]           [name:nimbusromno9lregu]
\stoptypescript

% Define a typescript named nimbus.
\starttypescript [nimbus]
  \definetypeface [nimbus]	[rm]	[serif]	[nimbus]
  \definetypeface [nimbus]	[ss]	[sans]	[nimbus]
\stoptypescript

% Use the nimbus typescript, which defines the nimbus typeface.
\usetypescript[nimbus]
\setupbodyfont[nimbus,rm,10pt]

\starttext
...</programlisting>
              <para>Note that typeface [nimbus] and typescript [nimbus] are different.</para>
              <para>Calling <command>\usetypescript[nimbus]</command> ensures that the two <command>\definetypeface</command> commands, embedded within <command>\starttypescript</command>, as shown above, are called:</para>
              <programlisting>\definetypeface [nimbus]  [rm]  [serif]  [nimbus]
 \definetypeface [nimbus]  [ss]  [sans]   [nimbus]</programlisting>
            </section> <!-- </sect5> -->
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title>Linux Libertine on MKIV</title>
            <para>Starting from Context 2010.05.21 there is the libertine typescript already defined. It points to the fonts shipped with TeXlive2010 (they have a different name than the upstream). You have to define <userinput>script=latn</userinput> if you want the ligatures in the Bold Italic font (until the upstream doesn&apos;t set a default script). See http://archive.contextgarden.net/thread/20101108.150757.a6a9040d.en.html</para>
            <programlisting>% use microtypography
\definefontfeature[default][default][protrusion=quality,expansion=quality,script=latn]
\usetypescript[libertine]
\setupalign[hz,hanging]

\setupbodyfont[libertine,10pt]

\starttext
  \input tufte
\stoptext
</programlisting>
            <para>The complete code, which should work for ConTeXt shipped with TeXlive 2010 is:</para>
            <programlisting>
\definefontfeature[default][default]
                  [protrusion=quality,
                    expansion=quality,
                    script=latn] 

\starttypescriptcollection[linuxlibertine]

    \starttypescript [serif] [linuxlibertine]
        \definefontsynonym [Libertine-Regular]    [file:fxlr.otf]
        \definefontsynonym [Libertine-Italic]     [file:fxlri.otf]
        \definefontsynonym [Libertine-Bold]       [file:fxlb.otf]
        \definefontsynonym [Libertine-BoldItalic] [file:fxlbi.otf]
    \stoptypescript

    \starttypescript [serif] [linuxlibertine] [name]
        \setups[font:fallback:serif]
        \definefontsynonym [Serif]           [Libertine-Regular]    [features=default]
        \definefontsynonym [SerifItalic]     [Libertine-Italic]     [features=default]
        \definefontsynonym [SerifBold]       [Libertine-Bold]       [features=default]
        \definefontsynonym [SerifBoldItalic] [Libertine-BoldItalic] [features=default]
        \definefontsynonym [SerifCaps]       [Libertine-Regular]    [features=smallcaps]
    \stoptypescript

    \starttypescript [sans] [biolinum]
        \setups[font:fallback:sans]
        \definefontsynonym [Biolinum-Regular]    [file:fxbr.otf]
        \definefontsynonym [Biolinum-Bold]       [file:fxbb.otf]
        \definefontsynonym [Biolinum-Italic]     [file:fxbri.otf]
        \definefontsynonym [Biolinum-Slanted]    [file:fxbro.otf]
        \definefontsynonym [Biolinum-BoldItalic] [file:fxbbo.otf]
    \stoptypescript

    \starttypescript [sans] [biolinum] [name]
        \setups[font:fallback:sans]
        \definefontsynonym [Sans]           [Biolinum-Regular]    [features=default]
        \definefontsynonym [SansBold]       [Biolinum-Bold]       [features=default]
        \definefontsynonym [SansItalic]     [Biolinum-Italic]     [features=default]
        \definefontsynonym [SansSlanted]    [Biolinum-Slanted]    [features=default]
        \definefontsynonym [SansBoldItalic] [Biolinum-BoldItalic] [features=default]
        \definefontsynonym [SansCaps]       [Biolinum-Regular]    [features=smallcaps]
    \stoptypescript

    \starttypescript [linuxlibertine]
        \definetypeface [linuxlibertine] [rm] [serif] [linuxlibertine] [default]
        \definetypeface [linuxlibertine] [ss] [sans]  [biolinum]  [default]
        \definetypeface [linuxlibertine] [tt] [mono]  [default]   [default]
        %definetypeface [libertine] [mm] [math]  [times]     [default]
        \quittypescriptscanning
    \stoptypescript

\stoptypescriptcollection

\usetypescript[linuxlibertine]
\setupbodyfont[linuxlibertine,10pt]
% use the microtype
\setupalign[hz,hanging]

\starttext
  \input tufte
\stoptext</programlisting>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        
        <section sect='sect3'>
          <title>Capitalizing words</title>
          <para>Note that \WORD, \Word and all following macros aren&apos;t switches, but commands (brackets behind, not around): <userinput>{\em switch}</userinput>, vs <userinput>\Word{macro}</userinput>.</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Underline, strike through, and overline</title>
          <para>Underlined, struck, and overlined text can be achieved with <function>\overbar</function>, <function>\overbars</function>, <function>\overstrike</function>, <function>\overstrikes</function>, <function>\underbar</function>, and <function>\underbars</function>.</para>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Verbatim Code</title>
          <itemizedlist>
            <listitem>single commands: <userinput>\tex{a tex command}</userinput></listitem>
            <listitem>oneliners: <userinput>\type{tex code}</userinput></listitem>
            <listitem>source code: <userinput>\starttyping</userinput> etc.</listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Quotes</title>
          <para>Don&apos;t try to type quotation marks, but use logical markup! Quotation marks and formatting are language dependent.</para>
          <itemizedlist>
            <listitem>single quotes: <userinput>\quote{some text}</userinput></listitem>
            <listitem>double quotes: <userinput>\quotation{some text}</userinput></listitem>
            <listitem>long quotations: try <userinput>\startquote</userinput> or <userinput>\startquotation</userinput> etc. See also Long quotations and Extracts below.</listitem>
          </itemizedlist>
          <section sect='sect4'>
            <title xml:href='https://wiki.contextgarden.net/Long_quotations_and_extracts'>Long quotations and Extracts*</title>
          </section> <!-- </sect4> -->
          <section sect='sect4'>
            <title xml:href='https://wiki.contextgarden.net/Nested_quotations'>Nested Quotations*</title>
            <para>(For alternate nesting of double and single quotes.)</para>
          </section> <!-- </sect4> -->
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Language</title>
          <para>For short quotes you can switch the language (and depending setups like quotation marks) with the language code like <userinput>{\de das ist Deutsch}</userinput>. If you switch between longer sections or if the two-letter language code has some other meaning (like \sl stands for slanted and can&apos;t be used to start Slovenian) you should use <userinput>\language[sl]</userinput>.</para>
          <para>To switch the document language, and not just the hyphenation rules, use <userinput>\mainlanguage[de]</userinput>. This will replace e.g. <quote>Chapter</quote> with <quote>Kapitel</quote>, and <quote>Figure</quote> with <quote>Abbildung</quote>, in the case of German.</para>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->
      
      <section sect='sect2'>
        <title>Drawing in <application>ConTeXt</application></title>
        <para>As its native drawing engine, <application>ConTeXt</application> integrates a superset of <link linkend='metapost'>MetaPost</link> called MetaFun, which allows the users to use the drawing abilities of MetaPost for page backgrounds and ornaments. Metafun can also be used with stand alone MetaPost. <application>ConTeXt</application> also supports the use of other external drawing engines, like PGF/TikZ and PSTricks.</para>
      </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='ConTeXt_layout'>
        <title>ConTeXt Page Layout</title>
        <section sect='sect3'>
          <title>Typesetting areas</title>
          <para>The 25 typesetting areas of a ConTeXt page are divided into 5 columns and 5 rows. From left to right, one encounters leftedge, leftmargin, text, rightmargin, and rightedge. From top to bottom, the areas are called: top, header, text, footer, bottom. E.g. leftmargin is the margin area to the left of the main text area; {leftmargin,bottom} is below it, at the same height as the bottom area. In between the two lies the area {leftmargin,footer}.</para>
          <!--
          <para>The graphic below illustrates the areas and dimensions. The row and column names are written along the edges of the page. The arrows correspond to layout dimensions; the more important a dimension is (i.e. the more of the layout is pushed around when you change it), the thicker its arrow and the larger its name.</para>
          <mediaobject>
            <imageobject>
              <imagedata format='SVG' fileref='Electric_files/pictures/Communicating/ConTeXt_layout_areas.svg'/>
            </imageobject>
          <caption>An AND symbol</caption>
          </mediaobject>
         -->
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Defining the layout in ConTeXt</title>
          <para>Positioning the areas is by setting the following dimensions using <function>\setuplayout</function>. The dimensions are mentioned in order of how <emphasis>primitive</emphasis> they are: e.g. altering the topspace pushes around all other vertical dimensions, but altering the header affects only the headerdistance and the textheight.</para>
          <para>You always define a <emphasis>right</emphasis> page; if you use a double page layout, right and left values are mirrored on a left page. Doublesided typesetting is activated with <function>\setuppagenumbering</function>.</para>
          <itemizedlist>
            <listitem>Set the <varname>backspace</varname> and <varname>width</varname>, and the <varname>topspace</varname> and <varname>height</varname>. The <varname>width</varname> is the width of the main typesetting area; the <varname>backspace</varname> is its distance from the left edge of the page. The <varname>height</varname> is the distance from the top of the header to the bottom of the footer; the <varname>topspace</varname> is the distance from the top edge of the page to the top of the header.</listitem>
            <listitem>Set the <varname>header</varname> and <varname>headerdistance</varname>, and the <varname>footer</varname> and <varname>footerdistance</varname>. The <varname>header</varname> is the vertical size of the header area; the <varname>headerdistance</varname> is the distance from the header area to the text area. The <varname>footer</varname> and <varname>footerdistance</varname> work likewise.</listitem>
            <listitem>Once the <varname>header(distance)</varname> and <varname>footer(distance)</varname> are subtracted from the height, what remains is the textheight: the height of the main typesetting area. Although it would be very useful, you cannot set this dimension directly.</listitem>
            <listitem>If you want to typeset anything above the header, define <varname>topdistance</varname> (the distance from the top of the header to the bottom of the topmost typesetting area) and <varname>top</varname> (the height of the topmost typesetting area). For typesetting below the footer, define <varname>bottomdistance</varname> and <varname>bottom</varname>.</listitem>
            <listitem>As for the horizontal dimensions apart from the width: starting at the left edge of the main text area, and moving away from the center, one first sets the <varname>leftmargindistance</varname>; then one sets the width <varname>leftmargin</varname> of the margin typesetting area; then one sets the <varname>leftedgedistance</varname>; and then there is the <varname>leftedge</varname> typesetting area. On the right: <varname>rightmargindistance</varname>, <varname>rightmargin</varname>, <varname>rightedgedistance</varname>, <varname>rightedge</varname>.</listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Paper size</title>
          <para>Page size and paper size are set with <function>\setuppapersize</function>. Many paper sizes are already defined by name. (A4 is 210mm x 297mm.) To define a new paper size, use <function>\definepapersize</function>.</para> 
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Example layout</title>
          <programlisting><![CDATA[\setuppapersize[A4][A4] % this is the default and may be omitted
\setuplayout[backspace=20mm,
    width=160mm,
    topspace=20mm,
    header=0mm,
    footer=0mm,
    height=250mm]]]></programlisting>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>Multiple layouts</title>
          <para>If you need to use different layouts in some parts of the document, you can set up a global layout, and then define additional named layouts for the deviating parts. You only need to specify the dimensions that differ: unspecified dimensions will be inherited from the global layout.</para>
          <para>To switch to a different layout, call it up in the appropriate place in the document. To revert back to the global layout, use <function>\setuplayout[<varname>reset</varname>]</function>.</para>
          <programlisting><![CDATA[\setuplayout[...] % global layout
\definelayout[wide][...] % layout of the first page

\setuplayout[wide]  % switch to layout called 'wide'
\setuplayout[reset] % switch back to the global layout]]></programlisting>
          <para>To specify in advance that you want to change layouts starting from page 4 (e.g.), use <function>\definelayout[4][...]</function>. Resetting the layout must be done explicitly; else, the new layout will be used until the end of the document.</para>
          <programlisting><![CDATA[% different layout for first two pages
\definelayout[1][wide]
\definelayout[3][reset]]]></programlisting>
          <para>For the page numbers you can use absolute numbers (as above), relative numbers (like +1, -2) or the keywords <constant>odd</constant>, <constant>even</constant>, <constant>first</constant> and <constant>last</constant>.</para>
          <programlisting><![CDATA[\setuplayout[ % default layout (right page)
...
]
\definelayout[even][ % different layout on left pages
...
]]]></programlisting>
          <para>If you define additional layouts in a doublepage (duplex) setup, remember to think mirrored: leftmargin defines the right margin, backspace is the distance from the spine to the right edge of the text area etc.</para>
          <warning>At the moment a layoutchange (setuplayout) inside a page is not properly working in mkiv duplex mode. For more details and actual state see mailing list and Bug Layoutchange inside page while duplexmode.</warning>
        </section> <!-- </sect3> -->
        <section sect='sect3'>
          <title>ConTeXt Layout Advanced features</title>
          <itemizedlist>
            <listitem>
              <para>To allow Acrobat Reader users (among others?) to make layers visible/invisible at will, add the following command at the start of your file:</para>
              <programlisting>\showlayoutcomponents</programlisting>
            </listitem>
            <listitem>
              <para>If you have a certain run of text that you want to keep together, you can test for the number of lines available on the current page with <function>\testpage[<varname>n</varname>]</function>, where <varname>n</varname> is the number of lines required. If there are not <varname>n</varname> lines available, a page break will be inserted at the location of the <function>\testpage</function> command.</para>
            </listitem>
            <listitem>
              <para>If you need absolute positioning of objects (text, pictures) on the page, but ad-hoc rather than systematic, the <link linkend='ConTeXt_layers'>Layers</link> mechanism is more suitable.</para>
            </listitem>
            <listitem>
              <para>For layout from a XML/FO perspective, with some descriptive pictures, see At Paul Tremblay&apos;s XML ConTeXt site.</para>
            </listitem>
          </itemizedlist>
        </section> <!-- </sect3> -->
      </section> <!-- </sect2> -->  <!-- end of "ConTeXt Page Layout" -->
      
      <section sect='sect2' xml:id='ConTeXt_layers'>
        <title>ConTeXt Layers</title>
      </section> <!-- </sect2> -->
      
      <section sect='sect2' xml:id='ConTeXt_XML_processor'>
        <title>ConTeXt&apos;s Built in XML processor*</title>
      </section> <!-- </sect2> -->
      
    </section> <!-- </sect1> -->  <!-- end of "<application>ConTeXt</application>" -->
    
    </chapter>  <!-- end of "TeX and Progeny" -->
    
    <chapter xml:id='metapost'>
      <title>Metapost</title>
      <para>MetaPost is a programming language that outputs vector graphics, either Encapsulated PostScript programs or SVG graphics.</para>
      <para>It shares some basic tools for creating and manipulating pictures with METAFONT. These include numbers, coordinate pairs, cubic splines, affine transformations, text strings, and boolean quantities. Additional features facilitate integrating text and graphics and accessing special features of PostScript 2 such as clipping, shading, and dashed lines.</para>
      <note>
        <para>Another feature borrowed from METAFONT is the ability to solve linear equations that are given implicitly, thus allowing many programs to be written in a largely declarative style.</para>
      </note>
      <!-- By building complex operations from simpler ones, MetaPost achieves both power and flexibility. -->
      <para>MetaPost is particularly well-suited to generating figures for technical documents where some aspects of a picture may be controlled by mathematical or geometrical constraints that are best expressed symbolically. In other words, MetaPost is not meant to take the place of a freehand drawing tool or even an interactive graphics editor, but is really a programming language for generating graphics, especially figures for <link linkend='TeX'>TeX</link> and troff documents.</para>
      
      <section xml:id='include_metapost'>
        <title>Inclusion of <application>metapost</application> Figures</title>
        <para>Once you have your EPS files generated from <application>metapost</application>... you can use them as figures in a TeX document just as with any other PostScript figures.  For example, with this TeX command:</para>
        <programlisting><![CDATA[\special{psfile="FILENAME"}]]></programlisting>
        <para>Conversely, you can include TeX code into Metapost. The MetaPost construct</para>
        <programlisting>btex ... <varname>TEX-INPUT</varname> ... etex</programlisting>
        <para>generates a MetaPost picture expression corresponding to <varname>TEX-INPUT</varname>.</para>
        <para>To generate EPSF files, set the internal MetaPost variable <varname>prologues</varname> positive. To make the output files self-contained, use only standard PostScript fonts.  MetaPost reads the same <filename>psfonts.map'</filename> file as Dvips, to determine which PostScript fonts need to be downloaded.</para>
        <!-- -->
        <para>It is posible for <command>pdfTeX</command> to read MetaPost output directly; this is in contrast to general EPSF files, which have to be converted for use with PDF output.  The easiest way is to name the MetaPost output files with the <filename>.mps</filename> extension.  Then the LaTeX <command>\includegraphics</command> command, for example, will be able to read them, even when outputting PDF.</para>
        <!-- -->
        <para>The line</para>
        <programlisting>mptopdf test.mp</programlisting>
        <para>generates a PDF file for each figure. If their names are numbered, it will produce files <filename>test-1.pdf</filename>, <filename>test-2.pdf</filename>, and son on.</para>
        <!-- -->
        <para>Starting with version 1.200, MetaPost is also capable of generating graphics in the SVG format.</para>
      </section> <!-- </sect1> -->
      
      <section>
        <title>The Structure of a MetaPost File</title>
        <para>A MetaPost input file normally contains a sequence of <userinput>beginfig(<varname>n</varname>)</userinput>, <userinput>endfig</userinput> pairs with an <userinput>end</userinput> statement after the last one. These are macros that perform various administrative functions and ensure that the results of all drawing operations get packaged up and translated into PostScript or SVG format. The numeric argument to the <userinput>beginfig</userinput> macro determines the name of the corresponding output file, whose name, by default, is of the form <userinput>⟨jobname⟩.⟨n⟩</userinput>, where <varname>⟨n⟩</varname> is the current argument to beginfig rounded to the nearest integer. As an example, if a file is named <filename>fig.mp</filename> and contains the lines</para>
        <programlisting>beginfig(1);
⟨drawing statements⟩
endfig;
end</programlisting>
        <para>the output from statements between <userinput>beginfig(1)</userinput> and the next <userinput>endfig</userinput> is written in a file <filename>fig.1</filename>.</para>
        <para>Statements can also appear outside <userinput>beginfig</userinput> ... <userinput>endfig</userinput>. Such statements are processed, but drawing operations generate no visible output. Typically, global configurations are put outside <userinput>beginfig . . . endfig</userinput>, e.g., assignments to internal variables.</para>
        <para>Comments in MetaPost code are introduced by the percent sign (%), which causes the remainder of the current line to be ignored.</para>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Coordinates and Units in MetaPost</title>
        <para>MetaPost uses the same default coordinate system that PostScript does. This means that <userinput>(30,0)</userinput> is 30 units to the right of the origin, where a unit is one 72th of an inch. We shall refer to this default unit as a <firstterm>PostScript point</firstterm>.</para>
        <para>The coordinate (0,0) can also be referred to as <userinput>origin</userinput>, as in:</para>
        <programlisting>drawdot origin</programlisting>
        <para>It is convenient to introduce your own scale factor, say <varname>u</varname>. Then you can define coordinates in terms of <varname>u</varname> and decide later whether you want to begin with <userinput>u=1cm</userinput> or <userinput>u=0.5cm</userinput>. This gives you control over what gets scaled and what does not so that changing <varname>u</varname> will not affect features such as line widths.</para>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Basic Drawing Statements</title>
        <para>Here are some simple drawing statements:</para>
        <variablelist>
          <varlistentry>
            <term>drawing a single dot with the current pen at a given coordinate:</term>
            <listitem><programlisting>drawdot (30,0)</programlisting></listitem>
          </varlistentry>
          <varlistentry>
            <term>drawing a straight line:</term>
            <listitem><programlisting>draw (20,20)--(0,0)</programlisting></listitem>
          </varlistentry>
          <varlistentry>
            <term>drawing a polygonal line:</term>
            <listitem><programlisting>draw (20,20)--(0,0)--(0,30)--(30,0)--(0,0)</programlisting></listitem>
          </varlistentry>
          <varlistentry>
            <term>drawing an open curve:</term>
            <listitem><programlisting xml:id='simple_draw_curve_example'>z0 = (0,0);
z1 = (60,40);
z2 = (40,90);
z3 = (10,70);
z4 = (30,50);

draw z0..z1..z2..z3..z4</programlisting></listitem>
          </varlistentry>
          <varlistentry>
          <term>drawing a closed curve:</term>
            <listitem><programlisting>draw z0..z1..z2..z3..z4..cycle</programlisting></listitem>
          </varlistentry>
        </variablelist>
      </section> <!-- </sect1> -->
      
      
      
      <section>
        <title>Curves in MetaPost</title>
        <para>A <userinput>draw</userinput> statement with the points separated by <userinput>..</userinput> draws a smooth curve through the points. (See an <link linkend='simple_draw_curve_example'>example</link>.) To make a smooth closed curve, connect the last point to the beginning by appending ..cycle to the <userinput>draw</userinput> statement.</para>
        <para>It is also possible in a single draw statement to mix curves and straight lines. Just use <userinput>--</userinput> where you want straight lines and <userinput>..</userinput> where you want curves, as in:</para>
        <programlisting>draw z0..z1..z2..z3--z4--cycle</programlisting>
        <section sect='sect2'>
          <title>Bézier Curves in MetaPost</title>
          <para>These are ultimately based on control points. MetaPost allows the control points to be specified directly in the following format:</para>
          <programlisting> draw (0,0)..controls (26.8,-1.8) and (51.4,14.6)
..(60,40)..controls (67.1,61.0) and (59.8,84.6)
..(40,90)..controls (25.4,94.0) and (10.5,84.5)
..(10,70)..controls ( 9.6,58.8) and (18.8,49.6)
..(30,50);</programlisting>

          <para>MetaPost provides many other ways of controlling the behavior of a curved path without actually specifying the control points, namely direction, tension and curl for the end points.</para>
          
          <section sect='sect3'>
            <title>Direction of Bézier Curves in MetaPost</title>
            <para>You specify <firstterm>direction</firstterm> at an end point by enclosing it in curly braces. For instance, some points on the path may be selected as vertical or horizontal extrema. If <varname>z1</varname> is to be a horizontal extreme and <varname>z2</varname> is to be a vertical extreme, you can specify that <varname>(X(t), Y (t))</varname> should go upward at <varname>z1</varname> and to the left at <varname>z2</varname>:</para>
            <programlisting>draw z0..z1{up}..z2{left}..z3..z4;</programlisting>
            <para>And here is an example that generates a curve family:</para>
            <programlisting>beginfig(7)
  for a=0 upto 9:
    draw (0,0){dir 45}..{dir -10a}(6cm,0);
  endfor
endfig;</programlisting>
            <para>The <userinput>dir</userinput> operator takes an angle in degrees and generates a unit vector in that direction. Thus <userinput>dir 0</userinput> is equivalent to <userinput>right</userinput> and <userinput>dir 90</userinput> is equivalent to <userinput>up</userinput>. There are also predefined direction vectors <userinput>left</userinput> and <userinput>down</userinput> for <userinput>dir 180</userinput> and <userinput>dir 270</userinput>.</para>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title><userinput>tension</userinput> of Bézier Curves in MetaPost</title>
            <para>We can also tweak the <firstterm>tension</firstterm> parameter. Using <userinput>..</userinput> in a path specification sets the tension parameter to the default value 1. If this makes some part of a path a little too wild, we can selectively increase the tension.</para>
            <programlisting>draw z0..z1..tension 1.3..z2..z3</programlisting>
          </section> <!-- </sect3> -->
          <section sect='sect3'>
            <title><userinput>curl</userinput> of Bézier Curve Endpoints in MetaPost</title>
            <para>MetaPost paths also have a parameter called <firstterm>curl</firstterm> that affects the ends of a path. In the absence of any direction specifications, the first and last segments of a non-cyclic path are approximately circular arcs with <inlineequation><varname>curl</varname>=1</inlineequation>.</para>
            <para>Here is an example with <varname>curl</varname> set around 1:</para>
            <programlisting>draw z0{curl c}..z1..{curl c}z2</programlisting>
            <para>Small values of the <varname>curl</varname> parameter reduce the curvature at the indicated path endpoints, while large values increase it. In particular, a <varname>curl</varname> value of zero makes the curvature approach zero.</para>
          </section> <!-- </sect3> -->
          
          
        </section> <!-- </sect2> -->

      </section> <!-- </sect1> -->
      
      <section>
        <title><userinput>pickup pencircle scaled 4pt</userinput></title>
        <para>There are many ways to affect the appearance of a line besides just changing its width, so the width-control mechanisms allow a lot of generality that we do not need yet. This leads to the strange looking statement</para>
        <programlisting>pickup pencircle scaled 4pt</programlisting>
        <para>for setting the line width (actually the pen size) for subsequent draw or drawdot statements to 4 points. (This is about eight times the default pen size).</para>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Color in Metapost</title>
        <para>As in PostScript, a color model is selected. The current default color model can be set up using the internal variable <userinput>defaultcolormodel</userinput>.</para>
      
        <section sect='sect2'>
          <title><userinput>fill</userinput>ing In a Path <userinput>withcolor</userinput></title>
          <para>Coloring in is done with the <userinput>fill</userinput> statement. In its simplest form, the <userinput>fill</userinput> statement requires a <varname>path expression</varname> that gives the boundary of the region to be filled. In the syntax</para>
          <programlisting>fill <varname>&lt;path_expression&gt;</varname></programlisting>
          <para>the argument should be a cyclic path, i.e., a path that describes a closed curve via the <userinput>..cycle</userinput> or <userinput>--cycle</userinput> notation.</para>
          <para>The following example paints a yin-yang symbol. It builds a closed path by extending the roughly semicircular path <varname>p</varname>. This path has a counter-clockwise orientation, but that does not matter because the <userinput>fill</userinput> statement uses PostScript&apos;s non-zero winding number rule.</para>
          <programlisting>beginfig(21);
  path p;
  p = (-1cm,0)..(0,-1cm)..(1cm,0);
  fill p{up}..(0,0){-1,-2}..{up}cycle;
  draw p..(0,1cm)..cycle;
endfig;</programlisting>
          <para>The more general <userinput>fill</userinput> statement</para>
          <programlisting>fill <varname>path expression</varname> withcolor <varname>color expression</varname></programlisting>
          <para>specifies a shade of gray or some full color. The <varname>color expression</varname> can have five possible values, mapping to four possible color models:</para>
          <table>
            <thead>
              <tr> <td>Actual input</td> <td></td> </tr>
            </thead>
            <tbody>
              <tr> <td>withcolor <varname>rgbcolor</varname></td> <td>withrgbcolor <varname>rgbcolor</varname></td> </tr>
              <tr> <td>withcolor <varname>cmykcolor</varname></td> <td>withcmykcolor <varname>cmykcolor</varname></td> </tr>
              <tr> <td>withcolor <varname>numeric</varname></td> <td>withgreyscale <varname>numeric</varname></td> </tr>
              <tr> <td>withcolor <varname>false</varname></td> <td>withoutcolor</td> </tr>
              <tr> <td>withcolor <varname>true</varname></td> <td><varname>current default color model</varname></td> </tr>
            </tbody>
          </table>
          <para>An image object cannot have more then one color model. Selecting <userinput>withoutcolor</userinput> causes MetaPost not to write a color selection statement to the PostScript output file for this object.</para>
          <para>Examine this example:</para>        
          <programlisting>beginfig(22);
  path a, b, aa, ab;
    a = fullcircle scaled 2cm;
    b = a shifted (0,1cm);
    aa = halfcircle scaled 2cm;
    ab = buildcycle(aa, b);
  picture pa, pb;
    pa = thelabel(btex $A$ etex, (0,-.5cm));
    pb = thelabel(btex $B$ etex, (0,1.5cm));
  fill a withcolor .7white;
  fill b withcolor .7white;
  fill ab withcolor .4white;
  unfill bbox pa;
    draw pa;
  unfill bbox pb;
    draw pb;
  label.lft(btex $U$ etex, (-1cm,.5cm));
  draw bbox currentpicture;
endfig;</programlisting>

        </section> <!-- </sect2> -->
      
      </section> <!-- </sect1> -->
      
      <section>
        <title>Expressions and Variables in Metapost</title>
        
        <section sect='sect2'>
          <title>Built-in Data Types</title>
          <para>MetaPost actually has ten basic data types: numeric, pair, path, transform, (rgb)color, cmykcolor, string, boolean, picture, and pen.</para>
          <para>Numeric quantities in MetaPost are represented in fixed point arithmetic as integer multiples of 1/65536, the smallest positive value, which is also available as the predefined constant <userinput>epsilon</userinput>. Numeric quantities must normally have absolute values less than 4096 but intermediate results can be eight times larger. This should not be a problem for distances or coordinate values since 4096 PostScript points is more than 1.4 meters. If you need to work with numbers of magnitude 4096 or more, setting the internal variable <varname>warningcheck</varname> to zero suppresses the warning messages about large numeric quantities.</para>
          <para>The pair type is represented as a pair of numeric quantities. They are used in draw statements. Pairs can be added, subtracted, used in mediation expressions, or multiplied or divided by numerics.</para>
          <para>Paths are first-class objects that can be stored and manipulated. A path represents a straight or curved line that is defined parametrically.</para>
          
          <para>Another data type represents an arbitrary affine transformation. A <firstterm>transform</firstterm> can be any combination of rotating, scaling, slanting, and shifting. If <inlineequation>p = (p<subscript>x</subscript> , p<subscript>y</subscript>)</inlineequation> is a pair and <varname>T</varname> is a transform,</para>
          <programlisting>p transformed T</programlisting>
          <para>is a pair of the form</para>
          <informalequation>(t<subscript>x</subscript> + t<subscript>xx</subscript> p<subscript>x</subscript> + t<subscript>xy</subscript> p<subscript>y</subscript>, t<subscript>y</subscript> + t<subscript>yx</subscript> p<subscript>x</subscript> + t<subscript>yy</subscript> p<subscript>y</subscript>),</informalequation>
          <para>where the six multiplying constants <inlineequation>(t<subscript>x</subscript>, t<subscript>xx</subscript>, t<subscript>xy</subscript>, t<subscript>y</subscript>, t<subscript>yx</subscript>, t<subscript>yy</subscript>)</inlineequation> determine <varname>T</varname>.</para>
          <para>Transforms can also be applied to paths, pictures, pens, and transforms.</para>
          
          <para>The color type is like the pair type, except that it has three components instead of two and each component is normally between 0 and 1. Like pairs, colors can be added, subtracted, used in mediation expressions, or multiplied or divided by numerics. Colors can be specified in terms of the predefined constants black, white, red, green, blue, or the red, green, and blue components can be given explicitly. Black is (0,0,0) and white is (1,1,1). A level of gray such as (.4,.4,.4) can also be specified as 0.4white. Although color typed variables may be any ordered triplet, when adding an object to a picture, MetaPost will convert its color by clipping each component between 0 and 1. For example, MetaPost will output the color (1,2,3) as (1,1,1). MetaPost solves linear equations involving colors the same way it does for pairs. The type <userinput>rgbcolor</userinput> is an alias of type <userinput>color</userinput>.</para>
          <para>The cmykcolor type is similar to the color type except that it has four components instead of three. This type is used to specify colors by their cyan, magenta, yellow, and black components explicitly. Because CMYK colors deal with pigments instead of light rays, the color white would be expressed as (0,0,0,0) and black as (0,0,0,1). In theory, the colors (c,m,y,1) and (1,1,1,k) should result in black for any values of c, m, y and k, too. But in practice, this is avoided since it is a waste of colored ink and can lead to unsatisfactory results.</para>
          
          <para>A string represents a sequence of characters. String constants are given in double quotes <userinput>&quot;like this&quot;</userinput>. String constants cannot contain double quotes or newlines, but there is a way to construct a string containing any sequence of eight-bit characters.</para>
          <para>Conversion from strings to other types, notably numeric, can be accomplished by the <userinput>scantokens</userinput> primitive:</para>
          <programlisting>n := scantokens(str);</programlisting>
          <para>More generally, <userinput>scantokens</userinput> parses a string into a token sequence, as if MetaPost had read it as input.</para>
          
          <para>The boolean type has the constants <userinput>true</userinput> and <userinput>false</userinput> and the operators <userinput>and</userinput>, <userinput>or</userinput>, <userinput>not</userinput>. The relations <userinput>=</userinput> and <userinput>&lt;&gt;</userinput> test objects of any type for equality and inequality. Comparison relations <userinput>&lt;</userinput>, <userinput>&lt;=</userinput>, <userinput>&gt;</userinput>, and <userinput>&gt;=</userinput> are defined lexicographically for strings and in the obvious way for numerics. Funnily enough, ordering relations are also defined for booleans, pairs, colors, and transforms.</para>
          
          <para>The picture data type is just what the name implies. Anything that can be drawn in MetaPost can be stored in a picture variable. In fact, the draw statement actually stores its results in a special picture variable called <userinput>currentpicture</userinput>. Pictures can be added to other pictures and operated on by transforms.</para>
          
          <para>Finally, there is a data type called a pen. The main function of pens in MetaPost is to determine line thickness, but they can also be used to achieve calligraphic effects. The statement</para>
          <programlisting>pickup <varname>pen expression</varname></programlisting>
          <para>causes the given pen to be used in subsequent <userinput>draw</userinput> or <userinput>drawdot</userinput> statements. Normally, the pen expression is of the form</para>
          <programlisting>pencircle scaled <varname>numeric primary</varname>.</programlisting>
          <para>This defines a circular pen that produces lines of constant thickness. If calligraphic effects are desired, the pen expression can be adjusted to give an elliptical pen or a polygonal pen.</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2'>
          <title>Operators</title>
          <para>Some operators are listed below:</para>
          <itemizedlist>
            <listitem>The exponentiation operator: <userinput>**</userinput></listitem>
            <listitem>the <userinput>dotprod</userinput> operator computes the vector dot product of two pairs. For example, <userinput>z1 dotprod z2</userinput> is equivalent to <userinput>x1*x2 + y1*y2</userinput></listitem>
            <listitem><quote>Pythagorean addition</quote> (<userinput>++</userinput>) and <quote>Pythagorean subtraction</quote> (<userinput>+-+</userinput>) compute the square root of the sum or the difference of squares: <userinput>a++b</userinput> means <inlineequation>(a<superscript>2</superscript> + b<superscript>2</superscript>)<superscript>1/2</superscript></inlineequation> and <userinput>a+-+b</userinput> means <inlineequation>(a<superscript>2</superscript> - b<superscript>2</superscript>)<superscript>1/2</superscript></inlineequation></listitem>
          </itemizedlist>
          
          <para>For strings, operator <userinput>&amp;</userinput> implements concatenation; e.g.,
          <userinput>&quot;abc&quot; &amp; &quot;de&quot;</userinput> produces the string <userinput>&quot;abcde&quot;</userinput>. The <userinput>length</userinput> operator returns the number of characters in a string; e.g.,</para>
          <programlisting> length &quot;abcde&quot;</programlisting>
          <para>returns 5. For substring construction, operator <userinput>substring</userinput> is used like this:</para>
          <programlisting>substring <varname>pair expression</varname> of <varname>string</varname></programlisting>
          <para>The <userinput>pair expression</userinput> determines what part of the string to select. Thus, <userinput>substring (2,4) of &quot;abcde&quot;</userinput> is <userinput>&quot;cd&quot;</userinput>.</para>
        </section> <!-- </sect2> -->
        
        <section sect='sect2' xml:id='mp_variables'>
          <title>Variables</title>
          <para>A variable name is a symbolic token or a sequence of symbolic tokens. Most symbolic tokens are legitimate variable names, but anything with a predefined meaning like <userinput>draw</userinput>, <userinput>+</userinput>, or <userinput>..</userinput> is disallowed; i.e., variable names cannot be macros or MetaPost primitives. This minor restriction allows an amazingly broad class of variable names: <userinput>alpha</userinput>, <userinput>==></userinput>, <userinput>@&amp;#$&amp;</userinput>, and <userinput>~~</userinput> are all legitimate variable names. Such symbolic tokens without special meanings are called <firstterm>tags</firstterm>.</para>
          <para>A variable name can be a sequence of tags like <userinput>f.bot</userinput> or <userinput>f.top</userinput>. The idea is to provide some of the functionality of Pascal records or C structures. It is also possible to simulate arrays by using variable names that contain numbers as well as symbolic tokens. For example, the variable name <userinput>x2r</userinput> consists of the tag <userinput>x</userinput>, the number <userinput>2</userinput>, and the tag <userinput>r</userinput>. There can also be variables named <userinput>x3r</userinput> and even <userinput>x3.14r</userinput>. These variables can be treated as an array via constructions like <userinput>x[i]r</userinput>, where <userinput>i</userinput> has an appropriate numeric value.</para>
          
          <para>Variables like <userinput>x2</userinput> and <userinput>y2</userinput> take on numeric values by default, so we can use the additional fact that <userinput>z<varname>suffix</varname></userinput> is an abbreviation for <userinput>(x<varname>suffix</varname>, y<varname>suffix</varname>)</userinput> to generate pair-valued variables when needed.</para>
          <para>It turns out that the <userinput>beginfig</userinput> macro wipes out pre-existing values variables that begin with the tags <userinput>x</userinput> or <userinput>y</userinput> so that <userinput>beginfig</userinput> . . . <userinput>endfig</userinput> blocks do not interfere with each other when this naming scheme is used. In other words, variables that start with <userinput>x</userinput>, <userinput>y</userinput>, and <userinput>z</userinput> are local to the figure they are used in.</para>
          
          <para>Declarations work the same way for any of the other nine types: numeric, path, transform, color, cmykcolor, string, boolean, picture, and pen. The only restriction is that you cannot give explicit numeric subscripts in a variable declaration. Do not give the illegal declaration</para>
          <programlisting>numeric q1, q2, q3;</programlisting>
          <para>but use the generic subscript symbol <userinput>[]</userinput> instead, to declare the whole array:</para>
          <programlisting>numeric q[];</programlisting>
          <para>You can also declare <quote>multidimensional</quote> arrays. After the declaration</para>
          <programlisting>path p[]q[], pq[][];</programlisting>
          <para><userinput>p2q3</userinput> and <userinput>pq1.4 5</userinput> are both paths.</para>
            
        </section> <!-- </sect2> -->
        
        <section sect='sect2' xml:id='mp_internal_variables'>
          <title>Assignment to Internal Variables</title>
          <para>I shall here discuss three assignments to internal variables, each one useful by itself, that can often be found in MetaPost input files:</para>
          <programlisting>prologues := 3;
outputtemplate := "%j-%c.mps";
outputformat := "svg";</programlisting>
          <para>If your graphics contain text labels, you might want to set variable prologues to 3 to make sure the correct fonts are used under all possible circumstances. The second assignment changes the output file naming scheme to the form ⟨jobname⟩-⟨n⟩.mps. That way, instead of a numeric index, all output files get a uniform file extension mps, which is typically used for MetaPost&apos;s PostScript output. The last assignment lets MetaPost write output files in the SVG format rather than in the PostScript format.</para>
        </section> <!-- </sect2> -->
        
      </section> <!-- </sect1> -->
      
      <section xml:id='mp_labeling'>
        <title>Labeling Figures in Metapost</title>
        <para>MetaPost has a number of features for including labels and other text in the figures it generates. The simplest way to do this is to use the label statement</para>
        <informalequation>label<varname>label suffix</varname>(<varname>string_or_picture_expression</varname>, <varname>pair_expression</varname>);</informalequation>
        <para>The <varname>string_or_picture_expression</varname> gives the label and the <varname>pair_expression</varname> says where to put it.</para>
        <para>The <varname>label_suffix</varname> can be empty, in which case the label is just centered on the given coordinates. If present, it specifies the position of the label relative to the specified coordinates. The complete set of possibilities is thus:</para>
        <informalequation><varname>label_suffix</varname> → <varname>empty</varname> | lft | rt | top | bot | ulft | urt | llft | lrt</informalequation>
        <para>where <userinput>lft</userinput> and <userinput>rt</userinput> mean left and right, and <userinput>llft</userinput>, <userinput>ulft</userinput>, etc. mean lower left, upper left, etc. The actual amount by which the label is offset in whatever direction is determined by the internal variable <varname>labeloffset</varname>.</para>
        <programlisting>label.top(&quot;a&quot;, .5[z0,z1]);
label.lft(&quot;b&quot;, .5[z0,z2]);</programlisting>

        <para>The dotlabel statement is effectively like a label statement followed by a statement drawing a dot at the indicated coordinates. For example</para>
        <programlisting>dotlabel.bot("(0,0)", z0)</programlisting>
        <para>places a dot at <varname>z0</varname> and then puts the label <quote>(0,0)</quote> just below the dot. The diameter of the dot drawn by the <userinput>dotlabel</userinput> statement is determined by the value of the internal variable <varname>dotlabeldiam</varname>. Default value is 3bp.</para>
        
        <para>Another alternative is the macro <userinput>thelabel</userinput>. This has the same syntax as the <userinput>label</userinput> and <userinput>dotlabel</userinput> statements except that it returns the label as a <varname>picture_primary</varname> instead of actually drawing it. Thus...</para>
        <programlisting>label.bot("(0,0)", z0)</programlisting>
        <para>is equivalent to</para>
        <programlisting>draw thelabel.bot("(0,0)", z0)</programlisting>
        
        <para>For simple applications of labeled figures, you can normally get by with just <userinput>label</userinput> and <userinput>dotlabel</userinput>. In fact, you may be able to use a short form of the <userinput>dotlabel</userinput> statement that saves a lot of typing when you have many points <varname>z0</varname>, <varname>z1</varname>, <varname>z.a</varname>, <varname>z.b</varname>, etc. and you want to use the <userinput>z</userinput> suffixes as labels. The statement</para>
        <programlisting>dotlabels.rt(0, 1, a);</programlisting>
        <para>is equivalent to</para>
        <programlisting>dotlabel.rt("0",z0); dotlabel.rt("1",z1); dotlabel.rt("a",z.a);</programlisting>
        <para>Thus the argument to <userinput>dotlabels</userinput> is a list of suffixes for which <varname>z</varname> variables are known, and the <varname>label_suffix</varname> given with <userinput>dotlabels</userinput> is used to position all the labels.</para>
        
        <para>For labeling statements such as <userinput>label</userinput> and <userinput>dotlabel</userinput> that use a string expression for the label text, the string gets typeset in a default font as determined by the string variable <varname>defaultfont</varname>. The initial value of <varname>defaultfont</varname> is likely to be <quote>cmr10</quote>, but it can be changed to a different font name by giving an assignment such as</para>
        <programlisting><![CDATA[defaultfont:="ptmr8r"]]></programlisting>
        <para>where <quote>ptmr8r</quote> is a typical way to refer to the Times-Roman font in TEX.</para>
        <para>There is also a numeric quantity called <varname>defaultscale</varname> that determines the type size. When <varname>defaultscale</varname> is 1, you get the <quote>normal size</quote> which is usually 10 point, but this can also be changed. For instance</para>
        <programlisting>defaultscale := 1.2</programlisting>
        <para>makes labels come out twenty percent larger. If you do not know the normal size and you want to be sure the text comes out at some specific size, say 12 points, you can use the <userinput>fontsize</userinput> operator to determine the normal size: e.g.,</para>
        <programlisting>defaultscale := 12pt/fontsize defaultfont;</programlisting>
        <para>When you change <varname>defaultfont</varname>, the new font name should be something that TEX would understand since MetaPost gets height and width information by reading a tfm file. (This is explained in <citetitle>The TEXbook</citetitle>.) It should be possible to use built-in PostScript fonts, but the names for them are system-dependent. Some typical ones are ptmr8r for Times-Roman, pplr8r for Palatino, and phvr for Helvetica. The Fontname document, available at <citetitle>http://tug.org/fontname</citetitle>, has much more information about font names and TEX.</para>
        <warning>A TEX font such as cmr10 is a little dangerous because it does not have a space character or certain ASCII symbols.</warning>
        
        <section sect='sect2'>
          <title>Typesetting Your Labels</title>
          <para>TEX may be used to format complex labels. If you say</para>
          <programlisting>btex <varname>typesetting commands</varname> etex</programlisting>
          <para>in a MetaPost input file, the <varname>typesetting commands</varname> get processed by TEX and translated into a picture expression (actually a <varname>picture primary</varname>) that can be used in a <userinput>label</userinput> or <userinput>dotlabel</userinput> statement. (Any spaces after <userinput>btex</userinput> or before <userinput>etex</userinput> are ignored. For instance, the statement</para>
          <programlisting>label.lrt(btex $\sqrt x$ etex, (3,sqrt 3)*u)</programlisting>
          <para>places the label <varname>x<superscript>1/2</superscript></varname> at the lower right of the point <inlineequation>(3,sqrt 3)*u</inlineequation>.</para>
          
          <para>There are some more complicated things that can be done with labels. Since the result of <userinput>btex</userinput> . . . <userinput>etex</userinput> is a picture, it can be operated on like a picture. In particular, it is possible to apply transformations to pictures. We have not discussed the syntax for this yet, but a picture can be:</para>
          <programlisting><varname>picture secondary</varname> rotated <varname>numeric primary</varname></programlisting>
          <para>An example:</para>
          <programlisting>label.lft(btex $y$ axis etex rotated 90, (0,2uy));</programlisting>
          
          <warning>TEX typesets the labels in <quote>horizontal mode.</quote></warning>
          
          <para>Here is how TEX material gets translated into a form MetaPost understands: MetaPost stores all <userinput>btex</userinput> . . . <userinput>etex</userinput> blocks in a temporary file and then runs TEX on that file. If the environment variable <varname>MPTEXPRE</varname> is set to the name of an existing file, its content will be prepended to the output file for processing by TEX. You can use this to include LATEX preambles, for instance.</para>
          <para>Once the TEX run is finished, MetaPost translates the resulting DVI file into low level MetaPost commands that are then read instead of the <userinput>btex</userinput> . . . <userinput>etex</userinput> blocks. If the main file is <filename>fig.mp</filename>, the translated TEX material is placed in a file named <filename>fig.mpx</filename>.</para>
          <para>The conversion normally runs silently without any user intervention but it could fail, for instance if one of the <userinput>btex</userinput> . . . <userinput>etex</userinput> blocks contains an erroneous TEX command. In that case, the TEX input is saved in the file <filename>mpxerr.tex</filename> and the TEX error messages appear in <filename>mpxerr.log</filename>. The DVI to MetaPost conversion route does understand virtual fonts, so you can use your normal TEX font switching commands inside the label.</para>
          
          <para>In MetaPost versions before 1.100, the TEX label preprocessing was handled by an external program that was called upon automatically by MetaPost. On Web2C-based systems, the preprocessor was normally named <command>makempx</command>, which called the utility <command>mpto</command> for the creation of the TEX input file and the utility <command>dvitomp</command> for the conversion to low level MetaPost. In the current MetaPost version, the work of this program is now done internally. However, if the environment variable <varname>MPXCOMMAND</varname> is set, the whole label conversion mechanism will be delegated to the command given in that variable.</para>
          <para>TEX macro definitions or any other auxiliary TEX commands can be enclosed in a <userinput>verbatimtex</userinput> . . . <userinput>etex</userinput> block. The difference between <userinput>btex</userinput> and <userinput>verbatimtex</userinput> is that the former generates a picture expression while the latter only adds material for TEX to process. For instance, if you want TEX to typeset labels using macros defined in <filename>mymac.tex</filename>, your MetaPost input file should look something like this:</para>
          <programlisting>verbatimtex \input mymac etex
beginfig(1);
...
label(btex <varname>TEX material using mymac.tex</varname> etex, <varname>some coordinates</varname>);</programlisting>

          <section sect='sect3'>
            <title>Setting <varname>prologues</varname>*</title>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>Font Map Files*</title>
          </section> <!-- </sect3> -->
          
          <section sect='sect3'>
            <title>Measuring Text</title>
            <para>MetaPost makes readily available the physical dimensions of pictures generated by the <userinput>infont</userinput> operator. There are unary operators <userinput>llcorner</userinput>, <userinput>lrcorner</userinput>, <userinput>urcorner</userinput>, <userinput>ulcorner</userinput>, and <userinput>center</userinput> that take a <varname>picture primary</varname> and return the corners of its <quote>bounding box</quote>.</para>
            <para>The <userinput>center</userinput> operator also accepts <varname>path primary</varname> and <varname>pen primary</varname> operands. In MetaPost Version 0.30 and higher, <userinput>llcorner</userinput>, <userinput>lrcorner</userinput>, etc. accept all three argument types as well.</para>
            
            <para>The argument type restrictions on the corner operators are not very important because their main purpose is to allow <userinput>label</userinput> and <userinput>dotlabel</userinput> statements to center their text properly. The predefined macro</para>
            <programlisting>bbox <varname>picture primary</varname></programlisting>
            <para>finds a rectangular path that represents the bounding box of a given picture. If <varname>p</varname> is a picture, <userinput>bbox p</userinput> is equivalent to</para>
            <programlisting>(llcorner p--lrcorner p--urcorner p--ulcorner p--cycle)</programlisting>
            <para>except that it allows for a small amount of extra space around <varname>p</varname> as specified by the internal variable <varname>bboxmargin</varname>.</para>
            
            <para>MetaPost computes the bounding box of a <userinput>btex</userinput> . . . <userinput>etex</userinput> picture just the way TEX does. This is quite natural, but it has certain implications in view of the fact that TEX has features like <userinput>\strut</userinput> and <userinput>\rlap</userinput> that allow TEX users to lie about the dimensions of a box.</para>
            <para>When TEX commands that lie about the dimensions of a box are translated in to low-level MetaPost code, a <userinput>setbounds</userinput> statement does the lying:</para>
            <programlisting>setbounds <varname>picture variable</varname> to <varname>path expression</varname></programlisting>
            <para>makes the <varname>picture variable</varname> behave as if its bounding box were the same as the given path. The path has to be a cycle, i.e., it must be a closed path. To get the true bounding box of such a picture, assign a positive value to the internal variable <varname>truecorners</varname>:</para>
            <programlisting>truecorners:=1; show urcorner btex $\bullet$\rlap{ A} etex</programlisting>
            
          </section> <!-- </sect3> -->
          
          
        </section> <!-- </sect2> -->
        
      </section> <!-- </sect1> -->
      
      <section>
        <title>Linear Equations</title>
        <para>An important feature taken from METAFONT is the ability to solve linear equations so that programs can be written in a partially declarative fashion. For example, the MetaPost interpreter can read</para>
        <programlisting>a+b=3; 2a=b+3;</programlisting>
        <para>and deduce that <inlineequation>a = 2</inlineequation> and <inlineequation>b = 1</inlineequation>. The same equations can be written slightly more compactly by stringing them together with multiple equal signs:</para>
        <programlisting>a+b = 2a-b = 3;</programlisting>
        <para>Whichever way you give the equations, you can then give the command</para>
        <programlisting>show a,b;</programlisting>
        <para>to see the values of a and b. MetaPost responds by typing</para>
        <programlisting>>> 2
>> 1</programlisting>
      </section> <!-- </sect1> -->
      
      <section>
        <title><userinput>=</userinput> for Equality, <userinput>:=</userinput> for Assignment</title>
        <para> Note that <userinput>=</userinput> is not an assignment operator; it simply declares that the left-hand side equals the right-hand side. Thus <userinput>a=a+1</userinput> produces an error message complaining about an <quote>inconsistent equation.</quote> The way to increase the value of a is to use the assignment operator := as follows:</para>
        <programlisting>a:=a+1;</programlisting>
        <para>In other words, <userinput>:=</userinput> is for changing existing values (assignment) while <userinput>=</userinput> is for giving linear equations to solve (equality).</para>
        <!-- -->
        <para>There is no restriction against mixing equations and assignment operations as in the following example:</para>
        <programlisting>a = 2; b = a; a := 3; c = a;</programlisting>
        <para>After the first two equations set <varname>a</varname> and <varname>b</varname> equal to 2, the assignment operation changes <varname>a</varname> to 3 without affecting <varname>b</varname>. The final value of <varname>c</varname> is 3 since it is equated to the new value of <varname>a</varname>. In general, an assignment operation is interpreted by first computing the new value, then eliminating the old value from all existing equations before actually assigning the new value.</para>
      </section> <!-- </sect1> -->
      
      
      <section>
        <title><userinput>for</userinput> Loops</title>
        <programlisting>beginfig(2);
  u=1cm;
  draw (2u,2u)--(0,0)--(0,3u)--(3u,0)--(0,0);
  pickup pencircle scaled 4pt;
  for i=0 upto 2:
    for j=0 upto 2: drawdot (i*u,j*u); endfor
  endfor
endfig;</programlisting>
      </section> <!-- </sect1> -->
      
      <section>
        <title>Advanced Graphics in Metapost*</title>
      </section> <!-- </sect1> -->

      
      
      
      
      
      
      <para>...</para>
      
      <para>...</para>
      
      <para>...</para>
      
    </chapter>
    
    
    <chapter xml:id='other_drawing_or_typography_systems'>
      <title>Other Drawing or Typography Systems</title>

      <section xml:id='OpenSCAD'>
        <info>
          <title>OpenSCAD</title>
          <abstract>...</abstract>
        </info>

        <section xml:id='OpenSCAD_basics'>
          <info>
            <title>OpenSCAD Basics</title>
            <abstract>...</abstract>
          </info>


          <para>Lets start out with a simple cube. In the code area, type</para>
          <programlisting>cube(10);</programlisting>
          <para>and press ENTER. This describes a cube 10 mm on a side. All measurements are in mm in OpenSCAD. Note the semicolon on the end. All executable statements in OpenSCAD must end with a semicolon. This simply tells OpenSCAD that this is the end of the statement or command.</para>
          <para>Note that nothing visible happens when you type this. Once you have finished typing, you still need to press F5 or click on the preview icon or click on Preview under the View menu to actually see what you have created. Go ahead and press the F5 key on your keyboard. You should now see the cube. Congratulations. You have just created your first model. Feel free to spin it around just to see it from all sides. BTW, you will see that it just comes up to the markers on the axes, since each marker is 10 mm. You might also notice that the cube extends 10 mm in the X, Y, and Z directions, with one corner at the origin.</para>
          <para>Now if all you could do with the cube command were to make a perfectly square cube, it would not be very useful. Fortunately, you can specify the dimensions for length, width, and height individually. Erase the <userinput>cube(10);</userinput> command and replace it with</para>
          <programlisting>cube([20, 10, 2]);</programlisting>
          <para>Press the F5 button again. You will see a long, narrow, flat box...</para>

          <important>
            <para>By enclosing the numbers in brackets, you turn the three numbers into one number, a vector (a three dimensional number).</para>
            <para>The alternative is to name your input parameters as in</para>
            <programlisting>cube(width=20, height=15, depth=25);</programlisting>
          </important>

          <para>There is one other parameter you can use with the cube command. As mentioned before, the cube normally has one corner at the origin and extends out the specified amount in the X, Y, and Z directions. You can case it to be centered on the origin by adding the <userinput>center = true statement</userinput> like this</para>
          <programlisting>cube([10, 20, 5], center = true);</programlisting>

          <important>All executable statements in OpenSCAD must end with a semicolon. This simply tells OpenSCAD that this is the end of the statement or command.</important>

          <section>
            <title>Basic Shapes in OpenSCAD*</title>

            <section>
              <title>***</title>
              <para></para>
              <programlisting></programlisting>
            </section>

            <section>
              <title>Polyhedron</title>
              <para>One very powerful and versatile object for building models with a lot of flat surfaces is the polyhedron. This basically lets you build any object with any shapes of flat surfaces. The downside, as you might expect from something so flexible, is that it can be very complex to use.</para>
              <para>To make a polyhedron, you must first list all the corners of the polyhedron. A corner is any point in space where three or more surfaces meet. After you list all the corners, you must you trace out the path around each surface. To do this you list all the surfaces by listing all the corners of the surface in the correct order. Sounds complicated? It is.</para>
              <para>Coordinates are always listed in the format [X,Y,Z]</para>
              <para>For instance:</para>
              <programlisting>polyhedron(
[
  [-10, -10, 0], // point 0
  [10, -10, 0], // point 1
  [10, 10, 0], // point 2
  [-10, 10, 0], // point 3
  [0, -10, 10], // point 4
  [0, 10, 10] // point 5
]</programlisting>
              <para>The next step is the list of paths around the surfaces. You need a comma next to separate the list of points from the list of surfaces, then another opening square bracket to start enclosing the list of surfaces, so you have this.</para>
              <para>Now for the first surface. Let&apos;s start with the bottom first. List the points starting with any one of the four bottom points going around clockwise as seen from the bottom. In this case, I happen to have listed the points in exactly the order you need them, so the first surface can be written as [0,1,2,3]. Since you can start with any point, you could just as easily have written [2,3,0,1]. In any case, this was the easy one.</para>
              <para>And so on.</para>
              <programlisting>polyhedron(
[
  [-10, -10, 0], // point 0
  [10, -10, 0], // point 1
  [10, 10, 0], // point 2
  [-10, 10, 0], // point 3
  [0, -10, 10], // point 4
  [0, 10, 10] // point 5
]
,
[
  [0, 1, 2, 3],
  [0, 4, 1],
  [2, 5, 3],
  [3, 5, 4, 0],
  [1, 4, 5, 2]
]
);</programlisting>
              <para>You can see that after the opening bracket that enclosed the list of surfaces, we have each surface listed. Each surface except the last one is followed by a comma. The last one is followed by the closing square bracket that marks the end of the list of surfaces, followed by the closingparenthesis for the polyhedron command, followed by the semicolon that follows all commands.</para>
              <important>The two things that are most likely to trip you up are remembering that the first point is numbered 0 (since you would intuitively expect it to be 1) and getting the order of the points of a surface in the right order, including clockwise. If you put them in a totally wrong order, you will get a totally weird shape, usually with a hole in it.</important>
              <important>Regarding the less obvious mistake of listing the point counterclockwise instead of clockwise, there is a trick to find any surface where you made this mistake. Instead of pressing F5 to view the model, press F12 to get the thrown together view. This will show any surface you defined counterclockwise in a purple or pink color instead of yellow.</important>
              <important>I have one other suggestion when constructing polyhedrons. After you have written the code for the corner points, [...] then add the surfaces one by one (remember no comma after the last one) and press F5 or F12 key as you add each surface. This will allow you to see each surface as you construct it, so you can see immediately if there is any problem. This is easier than looking at a completed by incorrect polyhedron and trying to figure out which line of code is wrong.</important>
            </section>

            <section>
              <title>2D Shapes (to Extrude)</title>
              <para>There are basically three 2D images are available to extrude: circle, square, and polygon. These 2D shapes are similar to their 3D equivalents.</para>
              <para xml:id='OpenSCAD_circle'>The command for making a circle is <userinput>circle(<varname>n</varname>);</userinput> where <varname>n</varname> is a number or defined constant and is the radius of the circle. You can say <userinput>circle(d = n);</userinput> to make the number the diameter instead of the radius. The circle is centered around the Z axis and has zero depth in the Z direction.</para>
              <para xml:id='OpenSCAD_square'>The command for square can be either <userinput>square(n);</userinput> if you want a square where all sides have equal length or <userinput>square([X, Y]);</userinput> if you want to make a rectangle of size X in the X direction and Y in the Y direction. The square will have one corner at the X = 0 and Y = 0 position and extend in the positive direction if X and Y are positive numbers or defined constants. You can center it at the origin if you use <userinput>square([X, Y], center = true);</userinput></para>

              <section>
                <title>Polygons in OpenSCAD*</title>
                <para>The polygon is usually simpler than the 3D polygon. If all you want is a solid shape, you do not need to define all the paths the way you do with a 3D polygon. You just define the points in 2 dimensions and OpenSCAD connects them in the order you list them and connects the last point to the first. For example,</para>
                <programlisting>polygon( [ [0, 0], [0, 10], [10, 10], [10, 0] ] );</programlisting>
                <para>would create a square 10 mm on a side. Basically, you do not have to include the default path, which is to connect all the points given in the order in which they were given.</para>
                <para>However, if you do want something more complicated than a solid figure with one path consisting of all the points connected around the outer edge, you need to define paths. For example, if you want a hole in the middle, you need to list all points, then define the path around the outside of the shape, then define the path of the points that define the hole. First you list all points, each of which consists of two numbers surrounded by square brackets, such as [0,0], separated by commas, and surround this list with square brackets like this:</para>
                <programlisting>[ [0, 0], [20, 0], [10, 20], [5, 5], [15, 5], [10, 15] ]</programlisting>
                <para>Then you have a comma, then you list all paths. The paths are listed the same way as the points, with each path consisting of point numbers, start with 0. The code in Listing [...] To make it easier to read, I have broken the listing up into separate lines, but this has no effect on how OpenSCAD interprets the code.</para>
                <programlisting>polygon(
  [ [0,0], [20,0], [10,20], [5,5], [15,5], [10,15] //list of points
  ],
  [ [0, 1, 2], [3, 4, 5] // list of paths
  ]
);</programlisting>
                <para>These instructions can get very confusing with all these brackets inside brackets. One trick to simplify it is to define the points and paths as simple defined constants and then list them in the polygon statement as shown in the listing below.</para>
                <programlisting>P0 = [0, 0];
P1 = [20, 0];
P2 = [10, 20];
P3 = [5, 5];
P4 = [15, 5];
P5 = [10, 15];
Path1 = [0, 1, 2];
Path2 = [3, 4, 5];
polygon([P0, P1, P2, P3, P4, P5], [Path1, Path2]);</programlisting>
                <para>Here you can see that we defined each point as a defined constant called P1, P2, etc. and likewise defined the paths. (Note that you still have to refer to the points in the paths by the number of the point, starting with 0, rather than P0, P1, etc.) This is the exact same code as the prevous isting as far as OpenSCAD is concerned, but it makes it easier for you to keep track of the brackets, if nothing else.</para>
              </section>

            </section>

          </section>

          <section>
            <title>Parameters in OpenSCAD*</title>
            <variablelist>
              <varlistentry>
                <term>$fn (resolution)</term>
                <listitem>
                  <para>For a sphere, the $fn value is actually the number of pieces (squares) going around the sphere once from one point around the sphere and back again.</para>
                  <para>Although you can use a higher value of $fn to make the sphere smoother, you can also use lower values to create shapes other than a sphere with the sphere command. For example, a value of 4 gives a cube, which is not particularly useful since you already can make a cube withthe cube command. Just for fun, try some other values like 5 or 6 to see the shapes you get.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>$fa (minimum angle)</term>
                <listitem>$fa sets the minimum angle for the fragments</listitem>
              </varlistentry>
              <varlistentry>
                <term>$fs (minimum size)</term>
                <listitem>$fs sets the minimum size.</listitem>
              </varlistentry>
              <varlistentry>
                <term></term>
                <listitem></listitem>
              </varlistentry>
            </variablelist>
          </section>


        </section> <!-- end of "OpenSCAD Basics" -->

        <section xml:id='OpenSCAD_control'>
          <info>
            <title>OpenSCAD Control Structures*</title>
            <abstract>...</abstract>
          </info>
        </section> <!-- end of "OpenSCAD Control Structures" -->

        <section xml:id='OpenSCAD_functions'>
          <info>
            <title>OpenSCAD Functions</title>
            <abstract>...</abstract>
          </info>
        </section> <!-- end of "OpenSCAD Functions" -->

        <section xml:id='OpenSCAD_text'>
          <info>
            <title>Text in OpenSCAD*</title>
            <abstract>...</abstract>
          </info>

          <section>
            <title>Font Parameters*</title>
            <variablelist>
              <varlistentry>
                <term>font and style</term>
                <listitem>
                  <para>To change the font, use the parameter font = "Font name:style=style type" such as</para>
                  <programlisting><![CDATA[font = "Liberation Sans:style=Bold Italic"]]></programlisting>
                  <para>​For example:</para>
                  <programlisting><![CDATA[text("Your text here", font="Arial:style=Bold");]]></programlisting>
                  <para>You can find a list of all the available fonts and the styles available for each font by clicking on the Help menu at the top of the OpenSCAD screen and then on font list.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>size</term>
                <listitem>
                  <para>The format for this is size=#, where # is any number and can be a decimal number like 5.2. Example:</para>
                  <programlisting><![CDATA[text("Your text here", size = 3.4);]]></programlisting>
                  <para>This controls the size of the text, both the height and the width. Note that this does not affect the extrusion, only the size in the XY plane. The default value if you do not specify the size is 10, so any number less than 10 will make the text smaller and any number larger than 10 will make the text larger.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>spacing</term>
                <listitem>
                  <para>This affects the space between text characters without affecting the actual size of the characters. Default is 1. Example:</para>
                  <programlisting><![CDATA[text("Your text here", spacing = 1.5);]]></programlisting>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>direction</term>
                <listitem>
                  <para>​ You can control the direction your text is printed in with the direction parameter. Example: <userinput><![CDATA[text("Your text here", direction = "ttb");]]></userinput></para>
                  <para>The four options are <literal>ltr</literal> (left to right, the normal direction of text), <literal>rtl</literal> (right to left, reverse writing), <literal>ttb</literal> (top to bottom, going down), and <literal>btt</literal> (bottom to top). The default is left to right. Other than the default, the only one I see having any use is top to bottom. The right to left seems particularly worthless, especially since it does not reverse the letters, so looking at it from the other side is not readable.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>halign and valign</term>
                <listitem>​ These just move the text around. Since you can do the same thing with greater control using the translate command that I will describe in the next chapter, I will not bother to describe this at all.</listitem>
              </varlistentry>
              <varlistentry>
                <term>etc-</term>
                <listitem></listitem>
              </varlistentry>
            </variablelist>
          </section>

          <section>
            <title>Rotating, Colouring etc. of Text</title>
            <para>You probably also want to rotate your text around the X axis and select some colour such as <literal>Black</literal> or <literal>Gray</literal>, as in:</para>
            <programlisting><![CDATA[rotate([90,0,0]) color("Gray") text("[Description of view]", size=10);]]></programlisting>
          </section>

        </section> <!-- end of "OpenSCAD WhatEver" -->

        <section xml:id='OpenSCAD_'>
          <info>
            <title>OpenSCAD WhatEver*</title>
            <abstract>...</abstract>
          </info>
        </section> <!-- end of "OpenSCAD WhatEver" -->

        <section xml:id='OpenSCAD_advanced'>
          <info>
            <title>OpenSCAD Advanced Features*</title>
            <abstract>...</abstract>
          </info>
        </section> <!-- end of "OpenSCAD" -->



      </section> <!-- end of "OpenSCAD" -->
      
      <section>
        <title>Asymptote</title>
        <blockquote>
          <para>Asymptote is a powerful descriptive vector graphics language that provides a mathematical coordinate-based framework for technical drawing. Labels and equations are typeset with LaTeX, for overall document consistency, yielding the same high-quality level of typesetting that LaTeX provides for scientific text. By default it produces PostScript output, but it can also generate any format that the ImageMagick package can produce.</para>
          <para>Asymptote was inspired by an earlier drawing program (with a weaker syntax and capabilities) called <link linkend='metapost'>MetaPost</link>.</para>
        </blockquote>
      </section> <!-- </sect1> -->
      
      <section xml:id='pcl'>
        <title>The Point Cloud Library (PCL)</title>
        <para>The Point Cloud Library (PCL) is a standalone, large scale, open project for 2D/3D image and point cloud processing.</para>
        <para>PCL is released under the terms of the BSD license, and thus free for commercial and research use. We are financially supported by a consortium of commercial companies, with our own non-profit organization, Open Perception.</para>
        <para>PCL includes an extensive visualization library based on <link linkend='vtk'>VTK</link>.</para>
      </section> <!-- </sect1> -->
      
    </chapter>  <!-- end of "Other Drawing or Typography Systems -->
    
    <chapter xml:id='interactivity'>
      <info>
        <title>Interactivity</title>
        <abstract>
          <para>Understanding how you can use <link linkend='audio'>sound</link>, physical controls, video, and graphics in interaction is more than a matter of just looking at code; it also requires that you understand some of the theory and fundamentals behind each of these methods.</para>
          <para>Interaction design is more than just writing code; it&apos;s also understanding how the approach that you&apos;re taking to interaction creates meaning for the user and for your system. Good interaction requires good input and feedback, and will vary depending on the medium that you&apos;re using to communicate. For example, audio presents much different challenges than video does, and integrating different mediums for input and output requires that you match up the strengths, weaknesses, and differences of the mediums creatively.</para>
        </abstract>
      </info>

      <section xml:id='json'>
        <title>JSON (JavaScript Object Notation)</title>
        <para>JSON (JavaScript Object Notation, pronounced /ˈdʒeɪsən/; also /ˈdʒeɪˌsɒn/) is an open standard file format and data interchange format that uses human-readable text to store and transmit data objects consisting of attribute–value pairs and arrays (or other serializable values). It is a common data format with diverse uses in electronic data interchange, including that of web applications with servers.</para>
        <para>JSON is a language-independent data format. It was derived from JavaScript, but many modern programming languages include code to generate and parse JSON-format data. JSON filenames use the extension <filename>.json</filename>.</para>
        <para>Douglas Crockford originally specified the JSON format in the early 2000s. He and Chip Morningstar sent the first JSON message in April 2001.</para>
        <section>
          <title>Standards</title>
          <para>After RFC 4627 had been available as its <quote>informational</quote> specification since 2006, JSON was first standardized in 2013, as ECMA-404. RFC 8259, published in 2017, is the current version of the Internet Standard STD 90, and it remains consistent with ECMA-404. That same year, JSON was also standardized as ISO/IEC 21778:2017. The ECMA and ISO/IEC standards describe only the allowed syntax, whereas the RFC covers some security and interoperability considerations.</para>
        </section>
        <section>
          <title>Syntax</title>
          <para>The following example shows a possible JSON representation describing a person.</para>
          <programlisting><![CDATA[{
  "firstName": "John",
  "lastName": "Smith",
  "isAlive": true,
  "age": 27,
  "address": {
    "streetAddress": "21 2nd Street",
    "city": "New York",
    "state": "NY",
    "postalCode": "10021-3100"
  },
  "phoneNumbers": [
    {
      "type": "home",
      "number": "212 555-1234"
    },
    {
      "type": "office",
      "number": "646 555-4567"
    }
  ],
  "children": [
    "Catherine",
    "Thomas",
    "Trevor"
  ],
  "spouse": null
}
]]></programlisting>
        </section>
        <section>
          <title>Semantics</title>
          <para>While JSON provides a syntactic framework for data interchange, unambiguous data interchange also requires agreement between producer and consumer on the semantics of specific use of the JSON syntax. One example of where such an agreement is necessary is the serialization of data types defined by the JavaScript syntax that are not part of the JSON standard, e.g., Date, Function, Regular Expression, and undefined.</para>
        </section>
        <section>
          <title>Character Encoding</title>
          <para>Although Crockford originally asserted that JSON is a strict subset of JavaScript and ECMAScript, his specification actually allows valid JSON documents that are not valid JavaScript; JSON allows the Unicode line terminators U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR to appear unescaped in quoted strings, while ECMAScript 2018 and older do not. This is a consequence of JSON disallowing only <quote>control characters</quote>. For maximum portability, these characters should be backslash-escaped.</para>
          <para>JSON exchange in an open ecosystem must be encoded in UTF-8. The encoding supports the full Unicode character set, including those characters outside the Basic Multilingual Plane (U+0000 to U+FFFF). However, if escaped, those characters must be written using UTF-16 surrogate pairs. For example, to include the Emoji character U+1F610 😐 NEUTRAL FACE in JSON: </para>
          <programlisting><![CDATA[{ "face": "😐" }
// or
{ "face": "\uD83D\uDE10" }]]></programlisting>
          <para>JSON became a strict subset of ECMAScript as of the language&apos;s 2019 revision.</para>
        </section>
        <section>
          <title>Data Types</title>
          <para></para>
          <variablelist>
            <varlistentry>
              <term>Number</term>
              <listitem>a signed decimal number that may contain a fractional part and may use exponential E notation, but cannot include non-numbers such as NaN. The format makes no distinction between integer and floating-point. JavaScript uses IEEE-754 double-precision floating-point format for all its numeric values (later also supporting BigInt), but other languages implementing JSON may encode numbers differently.</listitem>
            </varlistentry>
            <varlistentry>
              <term>String</term>
              <listitem>a sequence of zero or more Unicode characters. Strings are delimited with double quotation marks and support a backslash escaping syntax.</listitem>
            </varlistentry>
            <varlistentry>
              <term>Boolean</term>
              <listitem>either of the values true or false</listitem>
            </varlistentry>
            <varlistentry>
              <term>Array</term>
              <listitem>an ordered list of zero or more elements, each of which may be of any type. Arrays use square bracket notation with comma-separated elements.</listitem>
            </varlistentry>
            <varlistentry>
              <term>Object</term>
              <listitem>a collection of name–value pairs where the names (also called keys) are strings. The current ECMA standard states: <quote>The JSON syntax does not impose any restrictions on the strings used as names, does not require that name strings be unique, and does not assign any significance to the ordering of name/value pairs.</quote> Objects are delimited with curly brackets and use commas to separate each pair, while within each pair the colon &apos;:&apos; character separates the key or name from its value.</listitem>
            </varlistentry>
            <varlistentry>
              <term>null</term>
              <listitem>an empty value, using the word <literal>null</literal></listitem>
            </varlistentry>
          </variablelist>
          <para>Whitespace is allowed and ignored around or between syntactic elements (values and punctuation, but not within a string value). Four specific characters are considered whitespace for this purpose: space, horizontal tab, line feed, and carriage return. In particular, the byte order mark must not be generated by a conforming implementation (though it may be accepted when parsing JSON). JSON does not provide syntax for comments.</para>
          <para>Early versions of JSON (such as specified by RFC 4627) required that a valid JSON text must consist of only an object or an array type, which could contain other types within them. This restriction was dropped in RFC 7158, where a JSON text was redefined as any serialized value.</para>
          <para>Numbers in JSON are agnostic with regard to their representation within programming languages. While this allows for numbers of arbitrary precision to be serialized, it may lead to portability issues. For example, since no differentiation is made between integer and floating-point values, some implementations may treat 42, 42.0, and 4.2E+1 as the same number, while others may not. The JSON standard makes no requirements regarding implementation details such as overflow, underflow, loss of precision, rounding, or signed zeros, but it does recommend expecting no more than IEEE 754 binary64 precision for <quote>good interoperability</quote>. There is no inherent precision loss in serializing a machine-level binary representation of a floating-point number (like binary64) into a human-readable decimal representation (like numbers in JSON), and back, since there exist published algorithms to do this exactly and optimally.[25]</para>
          <para>Comments were intentionally excluded from JSON. In 2012, Douglas Crockford described his design decision thus: <quote>I removed comments from JSON because I saw people were using them to hold parsing directives, a practice which would have destroyed interoperability.</quote></para>
          <para>JSON disallows <quote>trailing commas</quote>, a comma after the last value inside a data structure. Trailing commas are a common feature of JSON derivatives to improve ease of use.</para>
        </section>

        <section>
          <title>Interoperability Issues</title>
          <para>RFC 8259 describes certain aspects of JSON syntax which, while legal per the specifications, can cause interoperability problems.</para>
          <itemizedlist>
            <listitem>Certain JSON implementations only accept JSON texts which represent an object or an array. For interoperability, applications interchanging JSON should transmit messages which are objects or arrays.</listitem>
            <listitem>The specifications allow JSON objects which contain multiple members with the same name. The behavior of implementations processing objects with duplicate names is unpredictable. For interoperability, applications should avoid duplicate names when transmitting JSON objects.</listitem>
            <listitem>The specifications specifically say that the order of members in JSON objects is not significant. For interoperability, applications should avoid assigning meaning to member ordering even if the parsing software makes that ordering visible.</listitem>
            <listitem>While the specifications place no limits on the magnitude or precisions of JSON number literals, the widely-used JavaScript implementation stores them as IEEE754 "binary64" quantities. For interoperability, applications should avoid transmitting numbers which cannot be represented in this way, for example 1E400 or 3.141592653589793238462643383279.</listitem>
            <listitem>While the specifications do not constrain the character encoding of the Unicode characters in a JSON text, the vast majority of implementations assume UTF-8 encoding; for interoperability, applications should always and only encode JSON messages in UTF-8.</listitem>
            <listitem>The specifications do not forbid transmitting byte sequences that do not correctly represent Unicode characters. For interoperability, applications should transmit messages containing no such byte sequences.</listitem>
            <listitem>The specification does not constrain how applications go about comparing Unicode strings. For interoperability, applications should always perform such comparisons code unit by code unit.</listitem>
          </itemizedlist>
          <para>In 2015, the IETF published RFC7493, describing the <citetitle>I-JSON Message Format</citetitle>, a restricted profile of JSON which constrains the syntax and processing of JSON to avoid, as much as possible, these interoperability issues.</para>
        </section>

        <section>
          <title>Metadata and schema</title>
          <para>The official MIME type for JSON text is <quote>application/json</quote>, and most modern implementations have adopted this. The unofficial MIME type <quote>text/json</quote> or the content-type <quote>text/javascript</quote> are also supported for legacy reasons by many service providers, browsers, servers, web applications, libraries, frameworks, and APIs.<remark>Notable examples include the Google Search API, Yahoo!, Flickr, Facebook API, Lift framework, and Dojo Toolkit 0.4.</remark></para>
          <para>JSON Schema specifies a JSON-based format to define the structure of JSON data for validation, documentation, and interaction control. It provides a contract for the JSON data required by a given application, and how that data can be modified. JSON Schema is based on the concepts from XML Schema (XSD) but is JSON-based. As in XSD, the same serialization/deserialization tools can be used both for the schema and data, and it is self-describing. It is specified in an Internet Draft at the IETF, currently in 2020-12 draft, which was released on January 28, 2021. There are several validators available for different programming languages, each with varying levels of conformance. The standard filename extension is <filename>.json</filename>.</para>
          <para>The JSON standard does not support object references, but an IETF draft standard for JSON-based object references exists.</para>
        </section>

        <section>
          <title>Safety</title>
          <para>JSON being a subset of JavaScript can lead to the misconception that it is safe to pass JSON texts to the JavaScript eval() function. This is not safe, due to certain valid JSON texts, specifically those containing U+2028 LINE SEPARATOR or U+2029 PARAGRAPH SEPARATOR, not being valid JavaScript code until JavaScript specifications were updated in 2019, and so older engines may not support it. To avoid the many pitfalls caused by executing arbitrary code from the Internet, a new function, <function>JSON.parse()</function> was first added to the fifth edition of ECMAScript, which as of 2017 is supported by all major browsers. For non-supported browsers, an API-compatible JavaScript library is provided by Douglas Crockford. In addition, the TC39 proposal <citetitle>Subsume JSON</citetitle> made ECMAScript a strict JSON superset as of the language&apos;s 2019 revision. Various JSON parser implementations have suffered from denial-of-service attack and mass assignment vulnerability.</para>
        </section>

        <section>
          <title>Comparison with XML</title>
          <para>XML has been used to describe structured data and to serialize objects. Various XML-based protocols exist to represent the same kind of data structures as JSON for the same kind of data interchange purposes. Data can be encoded in XML in several ways. The most expansive form using tag pairs results in a much larger (in character count) representation than JSON, but if data is stored in attributes and <quote>short tag</quote> form where the closing tag is replaced with /&gt;, the representation is often about the same size as JSON or just a little larger. However, an XML attribute can only have a single value and each attribute can appear at most once on each element.</para>
          <para>XML separates <quote>data</quote> from <quote>metadata</quote> (via the use of elements and attributes), while JSON does not have such a concept.</para>
          <para>Another key difference is the addressing of values. JSON has objects with a simple <quote>key</quote> to <quote>value</quote> mapping, whereas in XML addressing happens on <quote>nodes</quote>, which all receive a unique ID via the XML processor. Additionally, the XML standard defines a common attribute xml:id, that can be used by the user, to set an ID explicitly.</para>
          <para>XML tag names cannot contain any of the characters !"#$%&amp;'()*+,/;&lt;=&gt;?@[\]^`{|}~, nor a space character, and cannot begin with -, ., or a numeric digit, whereas JSON keys can (even if quotation mark and backslash must be escaped).</para>
          <para>XML values are strings of characters, with no built-in type safety. XML has the concept of schema, that permits strong typing, user-defined types, predefined tags, and formal structure, allowing for formal validation of an XML stream. JSON has several types built-in and has a similar schema concept in JSON Schema.</para>
          <para>XML supports comments, while JSON does not.</para>
        </section>

      </section>
      
      <section>
        <title>Interactive Sound</title>
        <para>Our primary experience of computing and of computers is through the screen. The feedback to the user and the input of the user are both most often communicated visually. This isn&apos;t, however, how our experience of the world works, or how our cognitive and perceptual facilities function. One of our most finely turned and emotionally evocative senses, our hearing, is often relegated to a lesser role or is ignored altogether in interactive design. In some scenarios, sound isn&apos;t a viable method of input or feedback. We don&apos;t want to have to talk to a computer or have it making noise in a quiet office. In other situations, neglecting the possibility of aural interaction with a user is a great loss to both an art piece or a product. Video game designers have put great effort and attention into their sound engines and the quality of the sounds in their games. Architects and interior designers, stage designers, sociologists, and of course musicians and sound artists all understand how our experience of the world is shaped by sound. Sound isn&apos;t always vital to a particular task, but it&apos;s an essential component of a rich and complete experience. You don&apos;t need to hear anything to enter your credit card number into a form, but a well-crafted, logical, and sensible use of sound in an application helps you perceive the world.</para>
        <para>When sound is married effectively with a visual element, both elements are strengthened. Imagine a ball hitting a wall with and then again without the sound of it. Being able to hear the sound tells you a great deal about the room, including whether it echoes, whether it&apos;s muffled, and how large it is. It tells you a great deal about the wall, about the ball, and about the strength with which the ball was thrown. These shape the mental image and shape the understanding of the world around that image. When you create applications, it&apos;s of utmost importance that you help the user understand the application. From this little thought experiment, you can begin to see how sound can shape, heighten, and enrich a user&apos;s understanding of the world.</para>
        <para>Sound physically affects us beyond its movement of the air that surrounds us; a sound wave causes the area of the human brain that is responsible for processing audio signals to generate electrical pulses at the same frequency. The sound wave for an A note, 440 Hz, causes the brain to produce electrical pulses at 440 Hz. So, your physical reaction to sound reaches beyond the pressure on your ears and, in some extreme cases, your stomach and skin and reaches into your brain as well. Our experience of hearing is a physical phenomenon on many different levels.</para>
        <para>The physical nature of sound also makes it a very powerful tool for input. Asking a participant to interact with a device through sound is, while not completely novel, engaging in that it asks them to draw more attention to themselves than asking them to input something through a keyboard. An application that asks you to talk to it demands your attention and your presence in a way that keyboard input does not. This kind of vocal input also tells your application a lot more about the user. An incredible amount of information is contained within the voice that can be used by application: the volume, pitch, cadence, rhythm, pauses, and starts.</para>
        <section sect='sect2'>
          <title>Sound As Feedback</title>
          <para>Sound can influence a person&apos;s perception of objects and information. A higher sound is in a different location than a lower one. A major chord is a different type of object than a minor chord. A sudden change in pitch signals a change in the state of your system. Typically, humans can hear any sounds between 20 Hz and 20,000 Hz. This is an immense data set; however, we&apos;ll offer a few caveats. First, the human ear is far more sensitive to certain ranges of sound than others. These ranges correlate generally to normal human vocal ranges. Second, the ear can&apos;t detect all changes in frequency. The amount of change of a frequency depends greatly on the volume of the sound and the range that it&apos;s in. Despite these limits, the amount of information that can be transmitted in audio is immense.</para>
          <para>Here are a few general examples about how you can use sound to give a user direct feedback on an action or on information:</para>
          <itemizedlist>
            <listitem>As a recognition or audio icon</listitem>
            <listitem>As an associative or textural message</listitem>
            <listitem>As an aid to simulation</listitem>
            <listitem>As a product of play or nondirected action</listitem>
            <listitem>As a way of telling us information about the objects making the sounds</listitem>
            <listitem>As an emotional trigger</listitem>
          </itemizedlist>
        </section> <!-- </sect2> -->

      </section> <!-- </sect1> -->
      
    </chapter>
    
  
  
  <chapter>
    <title>C++ Code for Book Writing</title>
  
    <section> <title>File Processing in C++*</title> </section> <!-- </sect1> -->
  
    <section> <title>Generating PostScript in C++</title> </section> <!-- </sect1> -->
  
  </chapter>
  
</part> <!-- end of "Communicating Text and Graphics" -->

<xi:include href='Programming.xml' xpointer='myPScode_appendix'>
  <xi:fallback>
    <note>Failed to bring appendix <citetitle>My PostScript Code</citetitle> in!!!</note>
  </xi:fallback>
</xi:include>

<xi:include href='Programming.xml' xpointer='PSparaTypography_appendix'>
  <xi:fallback>
    <note>Failed to bring appendix <citetitle>PostScript Paragraph Typography</citetitle> in!!!</note>
  </xi:fallback>
</xi:include>
    

  <xi:include href="Electric_files/XSLTcookbook.xml" parse="xml" xpointer='XSLTcookbook'>
    <xi:fallback/>
  </xi:include>
  
  <xi:include href="Electric_files/XSLTref.xml" parse="xml" xpointer='xslt_elements_ref'>
    <xi:fallback/>
  </xi:include>

  <appendix xml:id='xml-related'>
    <title>XML-Related Documents and Examples</title>
    
    <section xml:id='common_xml_schema'>
      <title>Common XML Schema</title>
      <section sect='sect2' xml:id='graphml_schema'>
        <title>GraphML Schema</title>
        <para>The following GraphML schemata are included in this section: <filename linkend='graphml.xsd'>graphml.xsd</filename>, <filename linkend='graphml_svg.xsd'>graphml+svg.xsd</filename>, and <filename linkend='graphml_xlink.xsd'>graphml+xlink.xsd</filename>.</para>
        
        <programlisting xml:id='graphml.xsd'><bridgehead>Listing of File <filename>graphml.xsd</filename></bridgehead>
          <xi:include href="Electric_files/xml/Schema/graphml.xsd" parse="text"  xmlns:xi="http://www.w3.org/2001/XInclude">
            <xi:fallback/>
          </xi:include>
        </programlisting>
        
        <programlisting xml:id='graphml_svg.xsd'><bridgehead>Listing of File <filename>graphml+svg.xsd</filename></bridgehead>
          <xi:include href="Electric_files/xml/Schema/graphml+svg.xsd" parse="text"  xmlns:xi="http://www.w3.org/2001/XInclude">
            <xi:fallback/>
          </xi:include>
        </programlisting>
        
        <programlisting xml:id='graphml_xlink.xsd'><bridgehead>Listing of File <filename>graphml+xlink.xsd</filename></bridgehead>
          <xi:include href="Electric_files/xml/Schema/graphml+xlink.xsd" parse="text"  xmlns:xi="http://www.w3.org/2001/XInclude">
            <xi:fallback/>
          </xi:include>
        </programlisting>
        
      </section> <!-- </sect2> -->
    </section> <!-- </sect1> -->
    
  </appendix>

</book>
